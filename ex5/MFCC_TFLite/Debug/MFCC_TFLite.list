
MFCC_TFLite.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013af0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a2c  08013c80  08013c80  00014c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080176ac  080176ac  0002004c  2**0
                  CONTENTS
  4 .ARM          00000008  080176ac  080176ac  000186ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080176b4  080176b4  0002004c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080176b4  080176b4  000186b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080176b8  080176b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000704c  20000000  080176bc  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007b60  20007050  0801e708  00020050  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  2000ebb0  0801e708  00020bb0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0021beb9  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00012bf0  00000000  00000000  0023bf35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001608  00000000  00000000  0024eb28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00010a1c  00000000  00000000  00250130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00035ac0  00000000  00000000  00260b4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0005a96c  00000000  00000000  0029660c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001acb90  00000000  00000000  002f0f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0049db08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058b0  00000000  00000000  0049db4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 0006e2c6  00000000  00000000  004a33fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009f  00000000  00000000  005116c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20007050 	.word	0x20007050
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08013c68 	.word	0x08013c68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20007054 	.word	0x20007054
 80001cc:	08013c68 	.word	0x08013c68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	@ 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c70:	f000 b9a0 	b.w	8000fb4 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f83c 	bl	8000cf8 <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_d2lz>:
 8000c8c:	b538      	push	{r3, r4, r5, lr}
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2300      	movs	r3, #0
 8000c92:	4604      	mov	r4, r0
 8000c94:	460d      	mov	r5, r1
 8000c96:	f7ff ff2b 	bl	8000af0 <__aeabi_dcmplt>
 8000c9a:	b928      	cbnz	r0, 8000ca8 <__aeabi_d2lz+0x1c>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	4629      	mov	r1, r5
 8000ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca4:	f000 b80a 	b.w	8000cbc <__aeabi_d2ulz>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cae:	f000 f805 	bl	8000cbc <__aeabi_d2ulz>
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	bd38      	pop	{r3, r4, r5, pc}
 8000cba:	bf00      	nop

08000cbc <__aeabi_d2ulz>:
 8000cbc:	b5d0      	push	{r4, r6, r7, lr}
 8000cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <__aeabi_d2ulz+0x34>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4606      	mov	r6, r0
 8000cc4:	460f      	mov	r7, r1
 8000cc6:	f7ff fca1 	bl	800060c <__aeabi_dmul>
 8000cca:	f000 f975 	bl	8000fb8 <__aeabi_d2uiz>
 8000cce:	4604      	mov	r4, r0
 8000cd0:	f7ff fc22 	bl	8000518 <__aeabi_ui2d>
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <__aeabi_d2ulz+0x38>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f7ff fc98 	bl	800060c <__aeabi_dmul>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	460b      	mov	r3, r1
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4639      	mov	r1, r7
 8000ce4:	f7ff fada 	bl	800029c <__aeabi_dsub>
 8000ce8:	f000 f966 	bl	8000fb8 <__aeabi_d2uiz>
 8000cec:	4621      	mov	r1, r4
 8000cee:	bdd0      	pop	{r4, r6, r7, pc}
 8000cf0:	3df00000 	.word	0x3df00000
 8000cf4:	41f00000 	.word	0x41f00000

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9d08      	ldr	r5, [sp, #32]
 8000cfe:	460c      	mov	r4, r1
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d14e      	bne.n	8000da2 <__udivmoddi4+0xaa>
 8000d04:	4694      	mov	ip, r2
 8000d06:	458c      	cmp	ip, r1
 8000d08:	4686      	mov	lr, r0
 8000d0a:	fab2 f282 	clz	r2, r2
 8000d0e:	d962      	bls.n	8000dd6 <__udivmoddi4+0xde>
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0320 	rsb	r3, r2, #32
 8000d16:	4091      	lsls	r1, r2
 8000d18:	fa20 f303 	lsr.w	r3, r0, r3
 8000d1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d20:	4319      	orrs	r1, r3
 8000d22:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d2a:	fa1f f68c 	uxth.w	r6, ip
 8000d2e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d32:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d36:	fb07 1114 	mls	r1, r7, r4, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb04 f106 	mul.w	r1, r4, r6
 8000d42:	4299      	cmp	r1, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x64>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d4e:	f080 8112 	bcs.w	8000f76 <__udivmoddi4+0x27e>
 8000d52:	4299      	cmp	r1, r3
 8000d54:	f240 810f 	bls.w	8000f76 <__udivmoddi4+0x27e>
 8000d58:	3c02      	subs	r4, #2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	fa1f f38e 	uxth.w	r3, lr
 8000d62:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d66:	fb07 1110 	mls	r1, r7, r0, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb00 f606 	mul.w	r6, r0, r6
 8000d72:	429e      	cmp	r6, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x94>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d7e:	f080 80fc 	bcs.w	8000f7a <__udivmoddi4+0x282>
 8000d82:	429e      	cmp	r6, r3
 8000d84:	f240 80f9 	bls.w	8000f7a <__udivmoddi4+0x282>
 8000d88:	4463      	add	r3, ip
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d92:	2100      	movs	r1, #0
 8000d94:	b11d      	cbz	r5, 8000d9e <__udivmoddi4+0xa6>
 8000d96:	40d3      	lsrs	r3, r2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d905      	bls.n	8000db2 <__udivmoddi4+0xba>
 8000da6:	b10d      	cbz	r5, 8000dac <__udivmoddi4+0xb4>
 8000da8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dac:	2100      	movs	r1, #0
 8000dae:	4608      	mov	r0, r1
 8000db0:	e7f5      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000db2:	fab3 f183 	clz	r1, r3
 8000db6:	2900      	cmp	r1, #0
 8000db8:	d146      	bne.n	8000e48 <__udivmoddi4+0x150>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d302      	bcc.n	8000dc4 <__udivmoddi4+0xcc>
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	f0c0 80f0 	bcc.w	8000fa4 <__udivmoddi4+0x2ac>
 8000dc4:	1a86      	subs	r6, r0, r2
 8000dc6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dca:	2001      	movs	r0, #1
 8000dcc:	2d00      	cmp	r5, #0
 8000dce:	d0e6      	beq.n	8000d9e <__udivmoddi4+0xa6>
 8000dd0:	e9c5 6300 	strd	r6, r3, [r5]
 8000dd4:	e7e3      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000dd6:	2a00      	cmp	r2, #0
 8000dd8:	f040 8090 	bne.w	8000efc <__udivmoddi4+0x204>
 8000ddc:	eba1 040c 	sub.w	r4, r1, ip
 8000de0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000de4:	fa1f f78c 	uxth.w	r7, ip
 8000de8:	2101      	movs	r1, #1
 8000dea:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df2:	fb08 4416 	mls	r4, r8, r6, r4
 8000df6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dfa:	fb07 f006 	mul.w	r0, r7, r6
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x11c>
 8000e02:	eb1c 0303 	adds.w	r3, ip, r3
 8000e06:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x11a>
 8000e0c:	4298      	cmp	r0, r3
 8000e0e:	f200 80cd 	bhi.w	8000fac <__udivmoddi4+0x2b4>
 8000e12:	4626      	mov	r6, r4
 8000e14:	1a1c      	subs	r4, r3, r0
 8000e16:	fa1f f38e 	uxth.w	r3, lr
 8000e1a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e1e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb00 f707 	mul.w	r7, r0, r7
 8000e2a:	429f      	cmp	r7, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x148>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x146>
 8000e38:	429f      	cmp	r7, r3
 8000e3a:	f200 80b0 	bhi.w	8000f9e <__udivmoddi4+0x2a6>
 8000e3e:	4620      	mov	r0, r4
 8000e40:	1bdb      	subs	r3, r3, r7
 8000e42:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e46:	e7a5      	b.n	8000d94 <__udivmoddi4+0x9c>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e52:	431f      	orrs	r7, r3
 8000e54:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e58:	fa04 f301 	lsl.w	r3, r4, r1
 8000e5c:	ea43 030c 	orr.w	r3, r3, ip
 8000e60:	40f4      	lsrs	r4, r6
 8000e62:	fa00 f801 	lsl.w	r8, r0, r1
 8000e66:	0c38      	lsrs	r0, r7, #16
 8000e68:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e6c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fb00 441e 	mls	r4, r0, lr, r4
 8000e78:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e7c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e80:	45a1      	cmp	r9, r4
 8000e82:	fa02 f201 	lsl.w	r2, r2, r1
 8000e86:	d90a      	bls.n	8000e9e <__udivmoddi4+0x1a6>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e8e:	f080 8084 	bcs.w	8000f9a <__udivmoddi4+0x2a2>
 8000e92:	45a1      	cmp	r9, r4
 8000e94:	f240 8081 	bls.w	8000f9a <__udivmoddi4+0x2a2>
 8000e98:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e9c:	443c      	add	r4, r7
 8000e9e:	eba4 0409 	sub.w	r4, r4, r9
 8000ea2:	fa1f f983 	uxth.w	r9, r3
 8000ea6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eaa:	fb00 4413 	mls	r4, r0, r3, r4
 8000eae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eb6:	45a4      	cmp	ip, r4
 8000eb8:	d907      	bls.n	8000eca <__udivmoddi4+0x1d2>
 8000eba:	193c      	adds	r4, r7, r4
 8000ebc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ec0:	d267      	bcs.n	8000f92 <__udivmoddi4+0x29a>
 8000ec2:	45a4      	cmp	ip, r4
 8000ec4:	d965      	bls.n	8000f92 <__udivmoddi4+0x29a>
 8000ec6:	3b02      	subs	r3, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ece:	fba0 9302 	umull	r9, r3, r0, r2
 8000ed2:	eba4 040c 	sub.w	r4, r4, ip
 8000ed6:	429c      	cmp	r4, r3
 8000ed8:	46ce      	mov	lr, r9
 8000eda:	469c      	mov	ip, r3
 8000edc:	d351      	bcc.n	8000f82 <__udivmoddi4+0x28a>
 8000ede:	d04e      	beq.n	8000f7e <__udivmoddi4+0x286>
 8000ee0:	b155      	cbz	r5, 8000ef8 <__udivmoddi4+0x200>
 8000ee2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ee6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eea:	fa04 f606 	lsl.w	r6, r4, r6
 8000eee:	40cb      	lsrs	r3, r1
 8000ef0:	431e      	orrs	r6, r3
 8000ef2:	40cc      	lsrs	r4, r1
 8000ef4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ef8:	2100      	movs	r1, #0
 8000efa:	e750      	b.n	8000d9e <__udivmoddi4+0xa6>
 8000efc:	f1c2 0320 	rsb	r3, r2, #32
 8000f00:	fa20 f103 	lsr.w	r1, r0, r3
 8000f04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f08:	fa24 f303 	lsr.w	r3, r4, r3
 8000f0c:	4094      	lsls	r4, r2
 8000f0e:	430c      	orrs	r4, r1
 8000f10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f14:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f18:	fa1f f78c 	uxth.w	r7, ip
 8000f1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f20:	fb08 3110 	mls	r1, r8, r0, r3
 8000f24:	0c23      	lsrs	r3, r4, #16
 8000f26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f2a:	fb00 f107 	mul.w	r1, r0, r7
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x24c>
 8000f32:	eb1c 0303 	adds.w	r3, ip, r3
 8000f36:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f3a:	d22c      	bcs.n	8000f96 <__udivmoddi4+0x29e>
 8000f3c:	4299      	cmp	r1, r3
 8000f3e:	d92a      	bls.n	8000f96 <__udivmoddi4+0x29e>
 8000f40:	3802      	subs	r0, #2
 8000f42:	4463      	add	r3, ip
 8000f44:	1a5b      	subs	r3, r3, r1
 8000f46:	b2a4      	uxth	r4, r4
 8000f48:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f4c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f54:	fb01 f307 	mul.w	r3, r1, r7
 8000f58:	42a3      	cmp	r3, r4
 8000f5a:	d908      	bls.n	8000f6e <__udivmoddi4+0x276>
 8000f5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f60:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f64:	d213      	bcs.n	8000f8e <__udivmoddi4+0x296>
 8000f66:	42a3      	cmp	r3, r4
 8000f68:	d911      	bls.n	8000f8e <__udivmoddi4+0x296>
 8000f6a:	3902      	subs	r1, #2
 8000f6c:	4464      	add	r4, ip
 8000f6e:	1ae4      	subs	r4, r4, r3
 8000f70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f74:	e739      	b.n	8000dea <__udivmoddi4+0xf2>
 8000f76:	4604      	mov	r4, r0
 8000f78:	e6f0      	b.n	8000d5c <__udivmoddi4+0x64>
 8000f7a:	4608      	mov	r0, r1
 8000f7c:	e706      	b.n	8000d8c <__udivmoddi4+0x94>
 8000f7e:	45c8      	cmp	r8, r9
 8000f80:	d2ae      	bcs.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f82:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f86:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f8a:	3801      	subs	r0, #1
 8000f8c:	e7a8      	b.n	8000ee0 <__udivmoddi4+0x1e8>
 8000f8e:	4631      	mov	r1, r6
 8000f90:	e7ed      	b.n	8000f6e <__udivmoddi4+0x276>
 8000f92:	4603      	mov	r3, r0
 8000f94:	e799      	b.n	8000eca <__udivmoddi4+0x1d2>
 8000f96:	4630      	mov	r0, r6
 8000f98:	e7d4      	b.n	8000f44 <__udivmoddi4+0x24c>
 8000f9a:	46d6      	mov	lr, sl
 8000f9c:	e77f      	b.n	8000e9e <__udivmoddi4+0x1a6>
 8000f9e:	4463      	add	r3, ip
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	e74d      	b.n	8000e40 <__udivmoddi4+0x148>
 8000fa4:	4606      	mov	r6, r0
 8000fa6:	4623      	mov	r3, r4
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e70f      	b.n	8000dcc <__udivmoddi4+0xd4>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	e730      	b.n	8000e14 <__udivmoddi4+0x11c>
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <__aeabi_d2uiz>:
 8000fb8:	004a      	lsls	r2, r1, #1
 8000fba:	d211      	bcs.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000fc0:	d211      	bcs.n	8000fe6 <__aeabi_d2uiz+0x2e>
 8000fc2:	d50d      	bpl.n	8000fe0 <__aeabi_d2uiz+0x28>
 8000fc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000fc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000fcc:	d40e      	bmi.n	8000fec <__aeabi_d2uiz+0x34>
 8000fce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000fd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000fda:	fa23 f002 	lsr.w	r0, r3, r2
 8000fde:	4770      	bx	lr
 8000fe0:	f04f 0000 	mov.w	r0, #0
 8000fe4:	4770      	bx	lr
 8000fe6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000fea:	d102      	bne.n	8000ff2 <__aeabi_d2uiz+0x3a>
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ff0:	4770      	bx	lr
 8000ff2:	f04f 0000 	mov.w	r0, #0
 8000ff6:	4770      	bx	lr

08000ff8 <_Z10ResetTimerv>:
#include "CycleCounter.h"

void ResetTimer(){
	DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
	DWT_CONTROL  = (unsigned int *)0xE0001000; //address of the register
 8000ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <_Z10ResetTimerv+0x2c>)
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8001028 <_Z10ResetTimerv+0x30>)
	DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
 8000ffc:	490b      	ldr	r1, [pc, #44]	@ (800102c <_Z10ResetTimerv+0x34>)
	SCB_DEMCR    = (unsigned int *)0xE000EDFC; //address of the register
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 8000ffe:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
void ResetTimer(){
 8001002:	b410      	push	{r4}
	DWT_CONTROL  = (unsigned int *)0xE0001000; //address of the register
 8001004:	6013      	str	r3, [r2, #0]
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 8001006:	f8d0 2dfc 	ldr.w	r2, [r0, #3580]	@ 0xdfc
	DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
 800100a:	4c09      	ldr	r4, [pc, #36]	@ (8001030 <_Z10ResetTimerv+0x38>)
 800100c:	600c      	str	r4, [r1, #0]
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 800100e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
	*DWT_CYCCNT  = 0; // reset the counter
 8001012:	2100      	movs	r1, #0
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 8001014:	f8c0 2dfc 	str.w	r2, [r0, #3580]	@ 0xdfc
	*DWT_CONTROL = 0; 
}
 8001018:	f85d 4b04 	ldr.w	r4, [sp], #4
	*DWT_CYCCNT  = 0; // reset the counter
 800101c:	6059      	str	r1, [r3, #4]
	*DWT_CONTROL = 0; 
 800101e:	6019      	str	r1, [r3, #0]
}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	2000706c 	.word	0x2000706c
 8001028:	e0001000 	.word	0xe0001000
 800102c:	20007070 	.word	0x20007070
 8001030:	e0001004 	.word	0xe0001004

08001034 <_Z10StartTimerv>:

void StartTimer(){
	*DWT_CONTROL = *DWT_CONTROL | 1 ; // enable the counter
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <_Z10StartTimerv+0x10>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	6813      	ldr	r3, [r2, #0]
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	2000706c 	.word	0x2000706c

08001048 <_Z9StopTimerv>:

void StopTimer(){
	*DWT_CONTROL = *DWT_CONTROL & 0 ; // disable the counter    
 8001048:	4b02      	ldr	r3, [pc, #8]	@ (8001054 <_Z9StopTimerv+0xc>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2200      	movs	r2, #0
 800104e:	6819      	ldr	r1, [r3, #0]
 8001050:	601a      	str	r2, [r3, #0]
}
 8001052:	4770      	bx	lr
 8001054:	2000706c 	.word	0x2000706c

08001058 <_Z9getCyclesv>:

unsigned int getCycles(){
	return *DWT_CYCCNT;
 8001058:	4b01      	ldr	r3, [pc, #4]	@ (8001060 <_Z9getCyclesv+0x8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6818      	ldr	r0, [r3, #0]
}
 800105e:	4770      	bx	lr
 8001060:	20007070 	.word	0x20007070

08001064 <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
    return TfLiteDelegatePtrVector();
 8001064:	2200      	movs	r2, #0
 8001066:	e9c0 2200 	strd	r2, r2, [r0]
 800106a:	6082      	str	r2, [r0, #8]
  }
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <__tcf_0>:
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  // Set up logging (modify tensorflow/lite/experimental/micro/debug_log.cc)
  static tflite::MicroErrorReporter micro_error_reporter;
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop

08001074 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE>:
 public:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
      : error_reporter_(error_reporter) {}

  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001074:	2920      	cmp	r1, #32
 8001076:	d022      	beq.n	80010be <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>

    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001078:	f8d0 30c4 	ldr.w	r3, [r0, #196]	@ 0xc4
 800107c:	b1fb      	cbz	r3, 80010be <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      const TfLiteRegistration& registration = registrations_[i];
      if (registration.builtin_code == op) {
 800107e:	6982      	ldr	r2, [r0, #24]
 8001080:	4291      	cmp	r1, r2
 8001082:	d01e      	beq.n	80010c2 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001084:	2b01      	cmp	r3, #1
 8001086:	d01a      	beq.n	80010be <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 8001088:	6b82      	ldr	r2, [r0, #56]	@ 0x38
 800108a:	428a      	cmp	r2, r1
 800108c:	d01e      	beq.n	80010cc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x58>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800108e:	2b02      	cmp	r3, #2
 8001090:	d015      	beq.n	80010be <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 8001092:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001094:	4291      	cmp	r1, r2
 8001096:	d01b      	beq.n	80010d0 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x5c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001098:	2b03      	cmp	r3, #3
 800109a:	d010      	beq.n	80010be <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 800109c:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 800109e:	4291      	cmp	r1, r2
 80010a0:	d018      	beq.n	80010d4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x60>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010a2:	2b04      	cmp	r3, #4
 80010a4:	d00b      	beq.n	80010be <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 80010a6:	f8d0 2098 	ldr.w	r2, [r0, #152]	@ 0x98
 80010aa:	4291      	cmp	r1, r2
 80010ac:	d014      	beq.n	80010d8 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x64>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010ae:	2b05      	cmp	r3, #5
 80010b0:	d005      	beq.n	80010be <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x4a>
      if (registration.builtin_code == op) {
 80010b2:	f8d0 30b8 	ldr.w	r3, [r0, #184]	@ 0xb8
 80010b6:	428b      	cmp	r3, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010b8:	bf08      	it	eq
 80010ba:	2305      	moveq	r3, #5
      if (registration.builtin_code == op) {
 80010bc:	d002      	beq.n	80010c4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 80010be:	2000      	movs	r0, #0
        return &registration;
      }
    }
    return nullptr;
  }
 80010c0:	4770      	bx	lr
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010c2:	2300      	movs	r3, #0
      const TfLiteRegistration& registration = registrations_[i];
 80010c4:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 80010c8:	3004      	adds	r0, #4
 80010ca:	4770      	bx	lr
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80010cc:	2301      	movs	r3, #1
 80010ce:	e7f9      	b.n	80010c4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>
 80010d0:	2302      	movs	r3, #2
 80010d2:	e7f7      	b.n	80010c4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>
 80010d4:	2303      	movs	r3, #3
 80010d6:	e7f5      	b.n	80010c4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>
 80010d8:	2304      	movs	r3, #4
 80010da:	e7f3      	b.n	80010c4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpENS_15BuiltinOperatorE+0x50>

080010dc <_ZN6tflite22MicroMutableOpResolverILj6EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <__tcf_1>:
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 //Build an interpreter to run the model with.
  buf_len = sprintf(buf, "Interpreter\r\n");
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
  static tflite::MicroInterpreter static_interpreter(
	  model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 80010e0:	4801      	ldr	r0, [pc, #4]	@ (80010e8 <__tcf_1+0x8>)
 80010e2:	f004 bdad 	b.w	8005c40 <_ZN6tflite16MicroInterpreterD1Ev>
 80010e6:	bf00      	nop
 80010e8:	20007078 	.word	0x20007078

080010ec <_ZN6tflite22MicroMutableOpResolverILj6EED0Ev>:
 80010ec:	b510      	push	{r4, lr}
 80010ee:	21f0      	movs	r1, #240	@ 0xf0
 80010f0:	4604      	mov	r4, r0
 80010f2:	f00f fc0d 	bl	8010910 <_ZdlPvj>
 80010f6:	4620      	mov	r0, r4
 80010f8:	bd10      	pop	{r4, pc}
 80010fa:	bf00      	nop

080010fc <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE>:
      }
    }
    return nullptr;
  }

  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 80010fc:	b508      	push	{r3, lr}
      BuiltinOperator op) const override {
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 80010fe:	f8d0 30e8 	ldr.w	r3, [r0, #232]	@ 0xe8
 8001102:	2b06      	cmp	r3, #6
 8001104:	d833      	bhi.n	800116e <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x72>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001106:	b31b      	cbz	r3, 8001150 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001108:	f890 20c8 	ldrb.w	r2, [r0, #200]	@ 0xc8
 800110c:	428a      	cmp	r2, r1
 800110e:	d021      	beq.n	8001154 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x58>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001110:	2b01      	cmp	r3, #1
 8001112:	d01d      	beq.n	8001150 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001114:	f890 20c9 	ldrb.w	r2, [r0, #201]	@ 0xc9
 8001118:	428a      	cmp	r2, r1
 800111a:	d020      	beq.n	800115e <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x62>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 800111c:	2b02      	cmp	r3, #2
 800111e:	d017      	beq.n	8001150 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001120:	f890 20ca 	ldrb.w	r2, [r0, #202]	@ 0xca
 8001124:	428a      	cmp	r2, r1
 8001126:	d01c      	beq.n	8001162 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x66>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001128:	2b03      	cmp	r3, #3
 800112a:	d011      	beq.n	8001150 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 800112c:	f890 20cb 	ldrb.w	r2, [r0, #203]	@ 0xcb
 8001130:	428a      	cmp	r2, r1
 8001132:	d018      	beq.n	8001166 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x6a>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001134:	2b04      	cmp	r3, #4
 8001136:	d00b      	beq.n	8001150 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001138:	f890 20cc 	ldrb.w	r2, [r0, #204]	@ 0xcc
 800113c:	428a      	cmp	r2, r1
 800113e:	d014      	beq.n	800116a <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x6e>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001140:	2b06      	cmp	r3, #6
 8001142:	d105      	bne.n	8001150 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x54>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001144:	f890 30cd 	ldrb.w	r3, [r0, #205]	@ 0xcd
 8001148:	428b      	cmp	r3, r1
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 800114a:	bf08      	it	eq
 800114c:	2305      	moveq	r3, #5
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 800114e:	d002      	beq.n	8001156 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
    }
    return nullptr;
 8001150:	2000      	movs	r0, #0
  }
 8001152:	bd08      	pop	{r3, pc}
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001154:	2300      	movs	r3, #0
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001156:	3334      	adds	r3, #52	@ 0x34
 8001158:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
  }
 800115c:	bd08      	pop	{r3, pc}
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 800115e:	2301      	movs	r3, #1
 8001160:	e7f9      	b.n	8001156 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
 8001162:	2302      	movs	r3, #2
 8001164:	e7f7      	b.n	8001156 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
 8001166:	2303      	movs	r3, #3
 8001168:	e7f5      	b.n	8001156 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
 800116a:	2304      	movs	r3, #4
 800116c:	e7f3      	b.n	8001156 <_ZNK6tflite22MicroMutableOpResolverILj6EE15GetOpDataParserENS_15BuiltinOperatorE+0x5a>
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 800116e:	f00f fea5 	bl	8010ebc <abort>
 8001172:	bf00      	nop

08001174 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8001174:	b570      	push	{r4, r5, r6, lr}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001176:	f8d0 50c4 	ldr.w	r5, [r0, #196]	@ 0xc4
 800117a:	b1fd      	cbz	r5, 80011bc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800117c:	6983      	ldr	r3, [r0, #24]
 800117e:	2b20      	cmp	r3, #32
 8001180:	4604      	mov	r4, r0
 8001182:	460e      	mov	r6, r1
 8001184:	d039      	beq.n	80011fa <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x86>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001186:	2d01      	cmp	r5, #1
 8001188:	d018      	beq.n	80011bc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800118a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800118c:	2b20      	cmp	r3, #32
 800118e:	d03a      	beq.n	8001206 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x92>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001190:	2d02      	cmp	r5, #2
 8001192:	d013      	beq.n	80011bc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001194:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001196:	2b20      	cmp	r3, #32
 8001198:	d03d      	beq.n	8001216 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0xa2>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800119a:	2d03      	cmp	r5, #3
 800119c:	d00e      	beq.n	80011bc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800119e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80011a0:	2b20      	cmp	r3, #32
 80011a2:	d00d      	beq.n	80011c0 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80011a4:	2d04      	cmp	r5, #4
 80011a6:	d009      	beq.n	80011bc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80011a8:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80011ac:	2b20      	cmp	r3, #32
 80011ae:	d012      	beq.n	80011d6 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x62>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80011b0:	2d05      	cmp	r5, #5
 80011b2:	d003      	beq.n	80011bc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80011b4:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 80011b8:	2b20      	cmp	r3, #32
 80011ba:	d015      	beq.n	80011e8 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x74>
    return nullptr;
 80011bc:	2000      	movs	r0, #0
  }
 80011be:	bd70      	pop	{r4, r5, r6, pc}
          (strcmp(registration.custom_name, op) == 0)) {
 80011c0:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80011c2:	4631      	mov	r1, r6
 80011c4:	f7ff f85c 	bl	8000280 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80011c8:	2800      	cmp	r0, #0
 80011ca:	d1eb      	bne.n	80011a4 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x30>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80011cc:	2003      	movs	r0, #3
      const TfLiteRegistration& registration = registrations_[i];
 80011ce:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 80011d2:	1d20      	adds	r0, r4, #4
  }
 80011d4:	bd70      	pop	{r4, r5, r6, pc}
          (strcmp(registration.custom_name, op) == 0)) {
 80011d6:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 80011da:	4631      	mov	r1, r6
 80011dc:	f7ff f850 	bl	8000280 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80011e0:	2800      	cmp	r0, #0
 80011e2:	d1e5      	bne.n	80011b0 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x3c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80011e4:	2004      	movs	r0, #4
 80011e6:	e7f2      	b.n	80011ce <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
          (strcmp(registration.custom_name, op) == 0)) {
 80011e8:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 80011ec:	4631      	mov	r1, r6
 80011ee:	f7ff f847 	bl	8000280 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80011f2:	2800      	cmp	r0, #0
 80011f4:	d1e2      	bne.n	80011bc <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80011f6:	2005      	movs	r0, #5
 80011f8:	e7e9      	b.n	80011ce <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
          (strcmp(registration.custom_name, op) == 0)) {
 80011fa:	69c0      	ldr	r0, [r0, #28]
 80011fc:	f7ff f840 	bl	8000280 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001200:	2800      	cmp	r0, #0
 8001202:	d1c0      	bne.n	8001186 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x12>
 8001204:	e7e3      	b.n	80011ce <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
          (strcmp(registration.custom_name, op) == 0)) {
 8001206:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8001208:	4631      	mov	r1, r6
 800120a:	f7ff f839 	bl	8000280 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800120e:	2800      	cmp	r0, #0
 8001210:	d1be      	bne.n	8001190 <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x1c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001212:	2001      	movs	r0, #1
 8001214:	e7db      	b.n	80011ce <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
          (strcmp(registration.custom_name, op) == 0)) {
 8001216:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8001218:	4631      	mov	r1, r6
 800121a:	f7ff f831 	bl	8000280 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800121e:	2800      	cmp	r0, #0
 8001220:	d1bb      	bne.n	800119a <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x26>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001222:	2002      	movs	r0, #2
 8001224:	e7d3      	b.n	80011ce <_ZNK6tflite22MicroMutableOpResolverILj6EE6FindOpEPKc+0x5a>
 8001226:	bf00      	nop

08001228 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 8001228:	b430      	push	{r4, r5}
                                   int version) const final {
    return FindOp(op);
 800122a:	6804      	ldr	r4, [r0, #0]
 800122c:	4d1f      	ldr	r5, [pc, #124]	@ (80012ac <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x84>)
 800122e:	6964      	ldr	r4, [r4, #20]
 8001230:	42ac      	cmp	r4, r5
 8001232:	d12f      	bne.n	8001294 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x6c>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001234:	2920      	cmp	r1, #32
 8001236:	460a      	mov	r2, r1
 8001238:	d023      	beq.n	8001282 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800123a:	4603      	mov	r3, r0
 800123c:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 8001240:	b300      	cbz	r0, 8001284 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5c>
      if (registration.builtin_code == op) {
 8001242:	6999      	ldr	r1, [r3, #24]
 8001244:	428a      	cmp	r2, r1
 8001246:	d01f      	beq.n	8001288 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x60>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001248:	2801      	cmp	r0, #1
 800124a:	d01a      	beq.n	8001282 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5a>
      if (registration.builtin_code == op) {
 800124c:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800124e:	428a      	cmp	r2, r1
 8001250:	d023      	beq.n	800129a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x72>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001252:	2802      	cmp	r0, #2
 8001254:	d015      	beq.n	8001282 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5a>
      if (registration.builtin_code == op) {
 8001256:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8001258:	428a      	cmp	r2, r1
 800125a:	d020      	beq.n	800129e <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x76>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800125c:	2803      	cmp	r0, #3
 800125e:	d010      	beq.n	8001282 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5a>
      if (registration.builtin_code == op) {
 8001260:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8001262:	428a      	cmp	r2, r1
 8001264:	d01d      	beq.n	80012a2 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x7a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001266:	2804      	cmp	r0, #4
 8001268:	d00b      	beq.n	8001282 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5a>
      if (registration.builtin_code == op) {
 800126a:	f8d3 1098 	ldr.w	r1, [r3, #152]	@ 0x98
 800126e:	428a      	cmp	r2, r1
 8001270:	d019      	beq.n	80012a6 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x7e>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001272:	2805      	cmp	r0, #5
 8001274:	d005      	beq.n	8001282 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x5a>
      if (registration.builtin_code == op) {
 8001276:	f8d3 10b8 	ldr.w	r1, [r3, #184]	@ 0xb8
 800127a:	428a      	cmp	r2, r1
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800127c:	bf08      	it	eq
 800127e:	2205      	moveq	r2, #5
      if (registration.builtin_code == op) {
 8001280:	d003      	beq.n	800128a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x62>
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001282:	2000      	movs	r0, #0
  }
 8001284:	bc30      	pop	{r4, r5}
 8001286:	4770      	bx	lr
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001288:	2200      	movs	r2, #0
      const TfLiteRegistration& registration = registrations_[i];
 800128a:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800128e:	1d18      	adds	r0, r3, #4
 8001290:	bc30      	pop	{r4, r5}
 8001292:	4770      	bx	lr
    return FindOp(op);
 8001294:	4623      	mov	r3, r4
  }
 8001296:	bc30      	pop	{r4, r5}
    return FindOp(op);
 8001298:	4718      	bx	r3
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800129a:	2201      	movs	r2, #1
 800129c:	e7f5      	b.n	800128a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x62>
 800129e:	2202      	movs	r2, #2
 80012a0:	e7f3      	b.n	800128a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x62>
 80012a2:	2203      	movs	r2, #3
 80012a4:	e7f1      	b.n	800128a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x62>
 80012a6:	2204      	movs	r2, #4
 80012a8:	e7ef      	b.n	800128a <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi+0x62>
 80012aa:	bf00      	nop
 80012ac:	08001075 	.word	0x08001075

080012b0 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
    return FindOp(op);
 80012b0:	6803      	ldr	r3, [r0, #0]
 80012b2:	4a2f      	ldr	r2, [pc, #188]	@ (8001370 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0xc0>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d146      	bne.n	8001348 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x98>
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 80012ba:	b570      	push	{r4, r5, r6, lr}
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80012bc:	f8d0 50c4 	ldr.w	r5, [r0, #196]	@ 0xc4
 80012c0:	4604      	mov	r4, r0
 80012c2:	b1f5      	cbz	r5, 8001302 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80012c4:	6983      	ldr	r3, [r0, #24]
 80012c6:	2b20      	cmp	r3, #32
 80012c8:	460e      	mov	r6, r1
 80012ca:	d01c      	beq.n	8001306 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x56>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80012cc:	2d01      	cmp	r5, #1
 80012ce:	d018      	beq.n	8001302 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80012d0:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80012d2:	2b20      	cmp	r3, #32
 80012d4:	d020      	beq.n	8001318 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x68>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80012d6:	2d02      	cmp	r5, #2
 80012d8:	d013      	beq.n	8001302 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80012da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80012dc:	2b20      	cmp	r3, #32
 80012de:	d023      	beq.n	8001328 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x78>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80012e0:	2d03      	cmp	r5, #3
 80012e2:	d00e      	beq.n	8001302 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80012e4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80012e6:	2b20      	cmp	r3, #32
 80012e8:	d026      	beq.n	8001338 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x88>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80012ea:	2d04      	cmp	r5, #4
 80012ec:	d009      	beq.n	8001302 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80012ee:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 80012f2:	2b20      	cmp	r3, #32
 80012f4:	d029      	beq.n	800134a <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x9a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80012f6:	2d05      	cmp	r5, #5
 80012f8:	d003      	beq.n	8001302 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 80012fa:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
 80012fe:	2b20      	cmp	r3, #32
 8001300:	d02c      	beq.n	800135c <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0xac>
    return nullptr;
 8001302:	2000      	movs	r0, #0
  }
 8001304:	bd70      	pop	{r4, r5, r6, pc}
          (strcmp(registration.custom_name, op) == 0)) {
 8001306:	69c0      	ldr	r0, [r0, #28]
 8001308:	f7fe ffba 	bl	8000280 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800130c:	2800      	cmp	r0, #0
 800130e:	d1dd      	bne.n	80012cc <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x1c>
      const TfLiteRegistration& registration = registrations_[i];
 8001310:	eb04 1440 	add.w	r4, r4, r0, lsl #5
 8001314:	1d20      	adds	r0, r4, #4
 8001316:	bd70      	pop	{r4, r5, r6, pc}
          (strcmp(registration.custom_name, op) == 0)) {
 8001318:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800131a:	4631      	mov	r1, r6
 800131c:	f7fe ffb0 	bl	8000280 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001320:	2800      	cmp	r0, #0
 8001322:	d1d8      	bne.n	80012d6 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x26>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001324:	2001      	movs	r0, #1
 8001326:	e7f3      	b.n	8001310 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x60>
          (strcmp(registration.custom_name, op) == 0)) {
 8001328:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800132a:	4631      	mov	r1, r6
 800132c:	f7fe ffa8 	bl	8000280 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001330:	2800      	cmp	r0, #0
 8001332:	d1d5      	bne.n	80012e0 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x30>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001334:	2002      	movs	r0, #2
 8001336:	e7eb      	b.n	8001310 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x60>
          (strcmp(registration.custom_name, op) == 0)) {
 8001338:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800133a:	4631      	mov	r1, r6
 800133c:	f7fe ffa0 	bl	8000280 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001340:	2800      	cmp	r0, #0
 8001342:	d1d2      	bne.n	80012ea <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x3a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001344:	2003      	movs	r0, #3
 8001346:	e7e3      	b.n	8001310 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x60>
    return FindOp(op);
 8001348:	4718      	bx	r3
          (strcmp(registration.custom_name, op) == 0)) {
 800134a:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800134e:	4631      	mov	r1, r6
 8001350:	f7fe ff96 	bl	8000280 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001354:	2800      	cmp	r0, #0
 8001356:	d1ce      	bne.n	80012f6 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x46>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001358:	2004      	movs	r0, #4
 800135a:	e7d9      	b.n	8001310 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x60>
          (strcmp(registration.custom_name, op) == 0)) {
 800135c:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
 8001360:	4631      	mov	r1, r6
 8001362:	f7fe ff8d 	bl	8000280 <strcmp>
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001366:	2800      	cmp	r0, #0
 8001368:	d1cb      	bne.n	8001302 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x52>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800136a:	2005      	movs	r0, #5
 800136c:	e7d0      	b.n	8001310 <_ZNK6tflite15MicroOpResolver6FindOpEPKci+0x60>
 800136e:	bf00      	nop
 8001370:	08001175 	.word	0x08001175

08001374 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001376:	2400      	movs	r4, #0
{
 8001378:	b0bb      	sub	sp, #236	@ 0xec
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	4621      	mov	r1, r4
 800137c:	2224      	movs	r2, #36	@ 0x24
 800137e:	a807      	add	r0, sp, #28
 8001380:	f010 fd34 	bl	8011dec <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001384:	4621      	mov	r1, r4
 8001386:	2288      	movs	r2, #136	@ 0x88
 8001388:	a818      	add	r0, sp, #96	@ 0x60
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138a:	e9cd 4401 	strd	r4, r4, [sp, #4]
 800138e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8001392:	9405      	str	r4, [sp, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001394:	f010 fd2a 	bl	8011dec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001398:	2310      	movs	r3, #16
 800139a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800139c:	2360      	movs	r3, #96	@ 0x60
 800139e:	930e      	str	r3, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a0:	2302      	movs	r3, #2
 80013a2:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013a4:	9316      	str	r3, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013a6:	2328      	movs	r3, #40	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013a8:	2207      	movs	r2, #7
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013aa:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013ac:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ae:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013b0:	2302      	movs	r3, #2
 80013b2:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b6:	e9cd 5511 	strd	r5, r5, [sp, #68]	@ 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013ba:	950c      	str	r5, [sp, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013bc:	f000 ffd0 	bl	8002360 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c0:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013c2:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c4:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013c6:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013c8:	2303      	movs	r3, #3
 80013ca:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013cc:	e9cd 4403 	strd	r4, r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d0:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013d2:	f001 fab3 	bl	800293c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d6:	a818      	add	r0, sp, #96	@ 0x60
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013d8:	9518      	str	r5, [sp, #96]	@ 0x60
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80013da:	9426      	str	r4, [sp, #152]	@ 0x98
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013dc:	f001 fc78 	bl	8002cd0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013e0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013e4:	f000 fedc 	bl	80021a0 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 80013e8:	b03b      	add	sp, #236	@ 0xec
 80013ea:	bd30      	pop	{r4, r5, pc}

080013ec <main>:
{
 80013ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f0:	f6ad 1d34 	subw	sp, sp, #2356	@ 0x934
  HAL_Init();
 80013f4:	f000 fd1a 	bl	8001e2c <HAL_Init>
  SystemClock_Config();
 80013f8:	f7ff ffbc 	bl	8001374 <_Z18SystemClock_Configv>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fc:	4bc0      	ldr	r3, [pc, #768]	@ (8001700 <main+0x314>)
  huart1.Instance = USART1;
 80013fe:	48c1      	ldr	r0, [pc, #772]	@ (8001704 <main+0x318>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001402:	f042 0202 	orr.w	r2, r2, #2
 8001406:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001408:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800140a:	f002 0202 	and.w	r2, r2, #2
 800140e:	9207      	str	r2, [sp, #28]
 8001410:	9c07      	ldr	r4, [sp, #28]
  huart1.Instance = USART1;
 8001412:	4abd      	ldr	r2, [pc, #756]	@ (8001708 <main+0x31c>)
  static tflite::MicroErrorReporter micro_error_reporter;
 8001414:	4cbd      	ldr	r4, [pc, #756]	@ (800170c <main+0x320>)
  huart1.Instance = USART1;
 8001416:	6002      	str	r2, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001418:	2300      	movs	r3, #0
 800141a:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800141e:	220c      	movs	r2, #12
 8001420:	e9c0 1301 	strd	r1, r3, [r0, #4]
 8001424:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8001428:	e9c0 2305 	strd	r2, r3, [r0, #20]
 800142c:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001430:	6243      	str	r3, [r0, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001432:	f002 f845 	bl	80034c0 <HAL_UART_Init>
  static tflite::MicroErrorReporter micro_error_reporter;
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	f3bf 8f5b 	dmb	ish
 800143c:	07db      	lsls	r3, r3, #31
 800143e:	d52a      	bpl.n	8001496 <main+0xaa>
  buf_len = sprintf(buf, "START TEST\r\n");
 8001440:	4bb3      	ldr	r3, [pc, #716]	@ (8001710 <main+0x324>)
  error_reporter = &micro_error_reporter;
 8001442:	f8df a300 	ldr.w	sl, [pc, #768]	@ 8001744 <main+0x358>
  model = tflite::GetModel(MFCC);
 8001446:	4eb3      	ldr	r6, [pc, #716]	@ (8001714 <main+0x328>)
  buf_len = sprintf(buf, "START TEST\r\n");
 8001448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144a:	ac08      	add	r4, sp, #32
 800144c:	4625      	mov	r5, r4
 800144e:	c507      	stmia	r5!, {r0, r1, r2}
  error_reporter = &micro_error_reporter;
 8001450:	48b1      	ldr	r0, [pc, #708]	@ (8001718 <main+0x32c>)
  buf_len = sprintf(buf, "START TEST\r\n");
 8001452:	702b      	strb	r3, [r5, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001454:	220c      	movs	r2, #12
 8001456:	2364      	movs	r3, #100	@ 0x64
 8001458:	4621      	mov	r1, r4
  error_reporter = &micro_error_reporter;
 800145a:	f8ca 0000 	str.w	r0, [sl]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 800145e:	48a9      	ldr	r0, [pc, #676]	@ (8001704 <main+0x318>)
 8001460:	f002 f8b2 	bl	80035c8 <HAL_UART_Transmit>
  error_reporter->Report("STM32 TensorFlow Lite test");
 8001464:	49ad      	ldr	r1, [pc, #692]	@ (800171c <main+0x330>)
 8001466:	f8da 0000 	ldr.w	r0, [sl]
 800146a:	f002 f959 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
// Helpers to get a typed pointer to the root object contained in the buffer.
template<typename T> T *GetMutableRoot(void *buf) {
  EndianCheck();
  return reinterpret_cast<T *>(
      reinterpret_cast<uint8_t *>(buf) +
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 800146e:	4bac      	ldr	r3, [pc, #688]	@ (8001720 <main+0x334>)
 8001470:	6819      	ldr	r1, [r3, #0]
 8001472:	18ca      	adds	r2, r1, r3
// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
    return data_ - ReadScalar<soffset_t>(data_);
 8001474:	585b      	ldr	r3, [r3, r1]
  model = tflite::GetModel(MFCC);
 8001476:	6032      	str	r2, [r6, #0]
 8001478:	1ad3      	subs	r3, r2, r3
    auto vtable = GetVTable();
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800147a:	8819      	ldrh	r1, [r3, #0]
 800147c:	2904      	cmp	r1, #4
 800147e:	d904      	bls.n	800148a <main+0x9e>

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001480:	889b      	ldrh	r3, [r3, #4]
  }

  template<typename T> T GetField(voffset_t field, T defaultval) const {
    auto field_offset = GetOptionalFieldOffset(field);
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8001482:	b113      	cbz	r3, 800148a <main+0x9e>
  if (model->version() != TFLITE_SCHEMA_VERSION)
 8001484:	58d3      	ldr	r3, [r2, r3]
 8001486:	2b03      	cmp	r3, #3
 8001488:	d011      	beq.n	80014ae <main+0xc2>
    error_reporter->Report("Model version does not match Schema");
 800148a:	49a6      	ldr	r1, [pc, #664]	@ (8001724 <main+0x338>)
 800148c:	f8da 0000 	ldr.w	r0, [sl]
 8001490:	f002 f946 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	while(1);
 8001494:	e7fe      	b.n	8001494 <main+0xa8>
  static tflite::MicroErrorReporter micro_error_reporter;
 8001496:	4620      	mov	r0, r4
 8001498:	f00f fa3e 	bl	8010918 <__cxa_guard_acquire>
 800149c:	2800      	cmp	r0, #0
 800149e:	d0cf      	beq.n	8001440 <main+0x54>
 80014a0:	48a1      	ldr	r0, [pc, #644]	@ (8001728 <main+0x33c>)
 80014a2:	f00f fd31 	bl	8010f08 <atexit>
 80014a6:	4620      	mov	r0, r4
 80014a8:	f00f fa42 	bl	8010930 <__cxa_guard_release>
 80014ac:	e7c8      	b.n	8001440 <main+0x54>
      : error_reporter_(error_reporter) {}
 80014ae:	ad15      	add	r5, sp, #84	@ 0x54
 80014b0:	2700      	movs	r7, #0
 80014b2:	4b9e      	ldr	r3, [pc, #632]	@ (800172c <main+0x340>)
 80014b4:	602b      	str	r3, [r5, #0]
  tflite_status = micro_op_resolver.AddFullyConnected();
 80014b6:	a851      	add	r0, sp, #324	@ 0x144
 80014b8:	e9c5 773a 	strd	r7, r7, [r5, #232]	@ 0xe8
 80014bc:	f8c5 70c4 	str.w	r7, [r5, #196]	@ 0xc4
 80014c0:	f00a f97c 	bl	800b7bc <_ZN6tflite24Register_FULLY_CONNECTEDEv>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80014c4:	463b      	mov	r3, r7
 80014c6:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 80014ca:	462f      	mov	r7, r5
 80014cc:	4629      	mov	r1, r5
 80014ce:	e006      	b.n	80014de <main+0xf2>
      if (registration.builtin_code == op) {
 80014d0:	f851 2c08 	ldr.w	r2, [r1, #-8]
 80014d4:	2a09      	cmp	r2, #9
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80014d6:	f103 0301 	add.w	r3, r3, #1
      if (registration.builtin_code == op) {
 80014da:	f000 81bc 	beq.w	8001856 <main+0x46a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80014de:	4283      	cmp	r3, r0
      if (registration.builtin_code == op) {
 80014e0:	f101 0120 	add.w	r1, r1, #32
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80014e4:	d1f4      	bne.n	80014d0 <main+0xe4>
                             op);
      }
      return kTfLiteError;
    }

    if (registrations_len_ >= tOpCount) {
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	f000 81c1 	beq.w	800186e <main+0x482>
                             op, tOpCount);
      }
      return kTfLiteError;
    }

    registrations_[registrations_len_] = registration;
 80014ec:	eb05 1843 	add.w	r8, r5, r3, lsl #5
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
    registrations_len_++;
 80014f0:	3301      	adds	r3, #1
 80014f2:	f8c5 30c4 	str.w	r3, [r5, #196]	@ 0xc4

    builtin_codes_[num_buitin_ops_] = op;
 80014f6:	f8d5 30e8 	ldr.w	r3, [r5, #232]	@ 0xe8
 80014fa:	18ea      	adds	r2, r5, r3
    registrations_[registrations_len_].builtin_code = op;
 80014fc:	f04f 0909 	mov.w	r9, #9
    builtin_codes_[num_buitin_ops_] = op;
 8001500:	f882 90c8 	strb.w	r9, [r2, #200]	@ 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
 8001504:	f103 0234 	add.w	r2, r3, #52	@ 0x34
    num_buitin_ops_++;
 8001508:	3301      	adds	r3, #1
 800150a:	f8c5 30e8 	str.w	r3, [r5, #232]	@ 0xe8
    registrations_[registrations_len_] = registration;
 800150e:	f50d 7ea2 	add.w	lr, sp, #324	@ 0x144
    builtin_parsers_[num_buitin_ops_] = parser;
 8001512:	4b87      	ldr	r3, [pc, #540]	@ (8001730 <main+0x344>)
 8001514:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    registrations_[registrations_len_] = registration;
 8001518:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800151c:	f108 0c04 	add.w	ip, r8, #4
 8001520:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001524:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001528:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return AddBuiltin(BuiltinOperator_CONV_2D, Register_CONV_2D(), ParseConv2D);
 800152c:	a851      	add	r0, sp, #324	@ 0x144
    registrations_[registrations_len_].builtin_code = op;
 800152e:	f8c8 9018 	str.w	r9, [r8, #24]
    return AddBuiltin(BuiltinOperator_CONV_2D, Register_CONV_2D(), ParseConv2D);
 8001532:	f009 f9ab 	bl	800a88c <_ZN6tflite16Register_CONV_2DEv>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001536:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 800153a:	4629      	mov	r1, r5
 800153c:	2300      	movs	r3, #0
 800153e:	e006      	b.n	800154e <main+0x162>
      if (registration.builtin_code == op) {
 8001540:	f851 2c08 	ldr.w	r2, [r1, #-8]
 8001544:	2a03      	cmp	r2, #3
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001546:	f103 0301 	add.w	r3, r3, #1
      if (registration.builtin_code == op) {
 800154a:	f000 81a5 	beq.w	8001898 <main+0x4ac>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800154e:	4283      	cmp	r3, r0
      if (registration.builtin_code == op) {
 8001550:	f101 0120 	add.w	r1, r1, #32
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001554:	d1f4      	bne.n	8001540 <main+0x154>
    if (registrations_len_ >= tOpCount) {
 8001556:	2b06      	cmp	r3, #6
 8001558:	f000 81aa 	beq.w	80018b0 <main+0x4c4>
    registrations_[registrations_len_] = registration;
 800155c:	eb05 1843 	add.w	r8, r5, r3, lsl #5
    registrations_len_++;
 8001560:	3301      	adds	r3, #1
 8001562:	f8c5 30c4 	str.w	r3, [r5, #196]	@ 0xc4
    builtin_codes_[num_buitin_ops_] = op;
 8001566:	f8d5 30e8 	ldr.w	r3, [r5, #232]	@ 0xe8
 800156a:	18ea      	adds	r2, r5, r3
    registrations_[registrations_len_].builtin_code = op;
 800156c:	f04f 0903 	mov.w	r9, #3
    builtin_codes_[num_buitin_ops_] = op;
 8001570:	f882 90c8 	strb.w	r9, [r2, #200]	@ 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
 8001574:	f103 0234 	add.w	r2, r3, #52	@ 0x34
    num_buitin_ops_++;
 8001578:	3301      	adds	r3, #1
 800157a:	f8c5 30e8 	str.w	r3, [r5, #232]	@ 0xe8
    registrations_[registrations_len_] = registration;
 800157e:	f50d 7ea2 	add.w	lr, sp, #324	@ 0x144
    builtin_parsers_[num_buitin_ops_] = parser;
 8001582:	4b6c      	ldr	r3, [pc, #432]	@ (8001734 <main+0x348>)
 8001584:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    registrations_[registrations_len_] = registration;
 8001588:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800158c:	f108 0c04 	add.w	ip, r8, #4
 8001590:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001594:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001598:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 800159c:	a851      	add	r0, sp, #324	@ 0x144
    registrations_[registrations_len_].builtin_code = op;
 800159e:	f8c8 9018 	str.w	r9, [r8, #24]
                      tflite::ops::micro::Register_RESHAPE(), ParseReshape);
 80015a2:	f007 fe15 	bl	80091d0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80015a6:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 80015aa:	4629      	mov	r1, r5
 80015ac:	2300      	movs	r3, #0
 80015ae:	e006      	b.n	80015be <main+0x1d2>
      if (registration.builtin_code == op) {
 80015b0:	f851 2c08 	ldr.w	r2, [r1, #-8]
 80015b4:	2a16      	cmp	r2, #22
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80015b6:	f103 0301 	add.w	r3, r3, #1
      if (registration.builtin_code == op) {
 80015ba:	f000 8161 	beq.w	8001880 <main+0x494>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80015be:	4283      	cmp	r3, r0
      if (registration.builtin_code == op) {
 80015c0:	f101 0120 	add.w	r1, r1, #32
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80015c4:	d1f4      	bne.n	80015b0 <main+0x1c4>
    if (registrations_len_ >= tOpCount) {
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	f000 8187 	beq.w	80018da <main+0x4ee>
    registrations_[registrations_len_] = registration;
 80015cc:	eb05 1843 	add.w	r8, r5, r3, lsl #5
    registrations_len_++;
 80015d0:	3301      	adds	r3, #1
 80015d2:	f8c5 30c4 	str.w	r3, [r5, #196]	@ 0xc4
    builtin_codes_[num_buitin_ops_] = op;
 80015d6:	f8d5 30e8 	ldr.w	r3, [r5, #232]	@ 0xe8
 80015da:	18ea      	adds	r2, r5, r3
    registrations_[registrations_len_].builtin_code = op;
 80015dc:	f04f 0916 	mov.w	r9, #22
    builtin_codes_[num_buitin_ops_] = op;
 80015e0:	f882 90c8 	strb.w	r9, [r2, #200]	@ 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
 80015e4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
    num_buitin_ops_++;
 80015e8:	3301      	adds	r3, #1
 80015ea:	f8c5 30e8 	str.w	r3, [r5, #232]	@ 0xe8
    registrations_[registrations_len_] = registration;
 80015ee:	f50d 7ea2 	add.w	lr, sp, #324	@ 0x144
    builtin_parsers_[num_buitin_ops_] = parser;
 80015f2:	4b51      	ldr	r3, [pc, #324]	@ (8001738 <main+0x34c>)
 80015f4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    registrations_[registrations_len_] = registration;
 80015f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80015fc:	f108 0c04 	add.w	ip, r8, #4
 8001600:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001604:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001608:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
                      tflite::ops::micro::Register_MAX_POOL_2D(), ParsePool);
 800160c:	a851      	add	r0, sp, #324	@ 0x144
    registrations_[registrations_len_].builtin_code = op;
 800160e:	f8c8 9018 	str.w	r9, [r8, #24]
                      tflite::ops::micro::Register_MAX_POOL_2D(), ParsePool);
 8001612:	f00b f917 	bl	800c844 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001616:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 800161a:	4629      	mov	r1, r5
 800161c:	2300      	movs	r3, #0
 800161e:	e006      	b.n	800162e <main+0x242>
      if (registration.builtin_code == op) {
 8001620:	f851 2c08 	ldr.w	r2, [r1, #-8]
 8001624:	2a11      	cmp	r2, #17
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001626:	f103 0301 	add.w	r3, r3, #1
      if (registration.builtin_code == op) {
 800162a:	f000 814a 	beq.w	80018c2 <main+0x4d6>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800162e:	4283      	cmp	r3, r0
      if (registration.builtin_code == op) {
 8001630:	f101 0120 	add.w	r1, r1, #32
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001634:	d1f4      	bne.n	8001620 <main+0x234>
    if (registrations_len_ >= tOpCount) {
 8001636:	2b06      	cmp	r3, #6
 8001638:	f000 8164 	beq.w	8001904 <main+0x518>
    registrations_[registrations_len_] = registration;
 800163c:	eb05 1843 	add.w	r8, r5, r3, lsl #5
    registrations_len_++;
 8001640:	3301      	adds	r3, #1
 8001642:	f8c5 30c4 	str.w	r3, [r5, #196]	@ 0xc4
    builtin_codes_[num_buitin_ops_] = op;
 8001646:	f8d5 30e8 	ldr.w	r3, [r5, #232]	@ 0xe8
 800164a:	18ea      	adds	r2, r5, r3
    registrations_[registrations_len_].builtin_code = op;
 800164c:	f04f 0911 	mov.w	r9, #17
    builtin_codes_[num_buitin_ops_] = op;
 8001650:	f882 90c8 	strb.w	r9, [r2, #200]	@ 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
 8001654:	f103 0234 	add.w	r2, r3, #52	@ 0x34
    num_buitin_ops_++;
 8001658:	3301      	adds	r3, #1
 800165a:	f8c5 30e8 	str.w	r3, [r5, #232]	@ 0xe8
    registrations_[registrations_len_] = registration;
 800165e:	f50d 7ea2 	add.w	lr, sp, #324	@ 0x144
    builtin_parsers_[num_buitin_ops_] = parser;
 8001662:	4b36      	ldr	r3, [pc, #216]	@ (800173c <main+0x350>)
 8001664:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    registrations_[registrations_len_] = registration;
 8001668:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800166c:	f108 0c04 	add.w	ip, r8, #4
 8001670:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8001674:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 8001678:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return AddBuiltin(BuiltinOperator_MEAN, tflite::ops::micro::Register_MEAN(),
 800167c:	a851      	add	r0, sp, #324	@ 0x144
    registrations_[registrations_len_].builtin_code = op;
 800167e:	f8c8 9018 	str.w	r9, [r8, #24]
    return AddBuiltin(BuiltinOperator_MEAN, tflite::ops::micro::Register_MEAN(),
 8001682:	f006 f8f9 	bl	8007878 <_ZN6tflite3ops5micro13Register_MEANEv>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001686:	f8d5 00c4 	ldr.w	r0, [r5, #196]	@ 0xc4
 800168a:	4629      	mov	r1, r5
 800168c:	2300      	movs	r3, #0
 800168e:	e006      	b.n	800169e <main+0x2b2>
      if (registration.builtin_code == op) {
 8001690:	f851 2c08 	ldr.w	r2, [r1, #-8]
 8001694:	2a28      	cmp	r2, #40	@ 0x28
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001696:	f103 0301 	add.w	r3, r3, #1
      if (registration.builtin_code == op) {
 800169a:	f000 8127 	beq.w	80018ec <main+0x500>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800169e:	4283      	cmp	r3, r0
      if (registration.builtin_code == op) {
 80016a0:	f101 0120 	add.w	r1, r1, #32
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80016a4:	d1f4      	bne.n	8001690 <main+0x2a4>
    if (registrations_len_ >= tOpCount) {
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	f000 8264 	beq.w	8001b74 <main+0x788>
    registrations_[registrations_len_] = registration;
 80016ac:	eb05 1843 	add.w	r8, r5, r3, lsl #5
    registrations_len_++;
 80016b0:	3301      	adds	r3, #1
 80016b2:	f8c5 30c4 	str.w	r3, [r5, #196]	@ 0xc4
    builtin_codes_[num_buitin_ops_] = op;
 80016b6:	f8d5 30e8 	ldr.w	r3, [r5, #232]	@ 0xe8
 80016ba:	18ea      	adds	r2, r5, r3
    registrations_[registrations_len_].builtin_code = op;
 80016bc:	f04f 0928 	mov.w	r9, #40	@ 0x28
    builtin_codes_[num_buitin_ops_] = op;
 80016c0:	f882 90c8 	strb.w	r9, [r2, #200]	@ 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
 80016c4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
    num_buitin_ops_++;
 80016c8:	3301      	adds	r3, #1
 80016ca:	f8c5 30e8 	str.w	r3, [r5, #232]	@ 0xe8
    registrations_[registrations_len_] = registration;
 80016ce:	f50d 7ea2 	add.w	lr, sp, #324	@ 0x144
    builtin_parsers_[num_buitin_ops_] = parser;
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <main+0x354>)
 80016d4:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    registrations_[registrations_len_] = registration;
 80016d8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80016dc:	f108 0c04 	add.w	ip, r8, #4
 80016e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80016e4:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80016e8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    return AddBuiltin(BuiltinOperator_SOFTMAX, Register_SOFTMAX(),
 80016ec:	a851      	add	r0, sp, #324	@ 0x144
    registrations_[registrations_len_].builtin_code = op;
 80016ee:	f8c8 9018 	str.w	r9, [r8, #24]
    return AddBuiltin(BuiltinOperator_SOFTMAX, Register_SOFTMAX(),
 80016f2:	f00b fa0f 	bl	800cb14 <_ZN6tflite16Register_SOFTMAXEv>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80016f6:	f8d5 10c4 	ldr.w	r1, [r5, #196]	@ 0xc4
 80016fa:	2300      	movs	r3, #0
 80016fc:	e02b      	b.n	8001756 <main+0x36a>
 80016fe:	bf00      	nop
 8001700:	40021000 	.word	0x40021000
 8001704:	2000e928 	.word	0x2000e928
 8001708:	40013800 	.word	0x40013800
 800170c:	20007110 	.word	0x20007110
 8001710:	08013d60 	.word	0x08013d60
 8001714:	2000e920 	.word	0x2000e920
 8001718:	20000000 	.word	0x20000000
 800171c:	08013d70 	.word	0x08013d70
 8001720:	20000004 	.word	0x20000004
 8001724:	08013d8c 	.word	0x08013d8c
 8001728:	08001071 	.word	0x08001071
 800172c:	08014824 	.word	0x08014824
 8001730:	08003885 	.word	0x08003885
 8001734:	080037a5 	.word	0x080037a5
 8001738:	08003a8d 	.word	0x08003a8d
 800173c:	08003959 	.word	0x08003959
 8001740:	08003a25 	.word	0x08003a25
 8001744:	2000e924 	.word	0x2000e924
      if (registration.builtin_code == op) {
 8001748:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800174c:	2a19      	cmp	r2, #25
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800174e:	f103 0301 	add.w	r3, r3, #1
      if (registration.builtin_code == op) {
 8001752:	f000 80e0 	beq.w	8001916 <main+0x52a>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001756:	428b      	cmp	r3, r1
      if (registration.builtin_code == op) {
 8001758:	f107 0720 	add.w	r7, r7, #32
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800175c:	d1f4      	bne.n	8001748 <main+0x35c>
    if (registrations_len_ >= tOpCount) {
 800175e:	2b06      	cmp	r3, #6
 8001760:	f000 81fe 	beq.w	8001b60 <main+0x774>
    registrations_[registrations_len_] = registration;
 8001764:	eb05 1b43 	add.w	fp, r5, r3, lsl #5
    registrations_len_++;
 8001768:	3301      	adds	r3, #1
 800176a:	f8c5 30c4 	str.w	r3, [r5, #196]	@ 0xc4
    builtin_codes_[num_buitin_ops_] = op;
 800176e:	f8d5 30e8 	ldr.w	r3, [r5, #232]	@ 0xe8
  buf_len = sprintf(buf, "ALL ADDED RIGHT\r\n");
 8001772:	f8df 82c4 	ldr.w	r8, [pc, #708]	@ 8001a38 <main+0x64c>
	  model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8001776:	f8df 92c4 	ldr.w	r9, [pc, #708]	@ 8001a3c <main+0x650>
 800177a:	18ea      	adds	r2, r5, r3
 800177c:	f04f 0119 	mov.w	r1, #25
 8001780:	f882 10c8 	strb.w	r1, [r2, #200]	@ 0xc8
    builtin_parsers_[num_buitin_ops_] = parser;
 8001784:	f103 0234 	add.w	r2, r3, #52	@ 0x34
    num_buitin_ops_++;
 8001788:	3301      	adds	r3, #1
 800178a:	f8c5 30e8 	str.w	r3, [r5, #232]	@ 0xe8
    registrations_[registrations_len_] = registration;
 800178e:	f50d 7ea2 	add.w	lr, sp, #324	@ 0x144
    builtin_parsers_[num_buitin_ops_] = parser;
 8001792:	4b94      	ldr	r3, [pc, #592]	@ (80019e4 <main+0x5f8>)
 8001794:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
    registrations_[registrations_len_] = registration;
 8001798:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800179c:	f10b 0c04 	add.w	ip, fp, #4
 80017a0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80017a4:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 80017a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    registrations_[registrations_len_].builtin_code = op;
 80017ac:	2319      	movs	r3, #25
 80017ae:	f8cb 3018 	str.w	r3, [fp, #24]
  buf_len = sprintf(buf, "ALL ADDED RIGHT\r\n");
 80017b2:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80017b6:	4627      	mov	r7, r4
 80017b8:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80017ba:	f8d8 3000 	ldr.w	r3, [r8]
 80017be:	803b      	strh	r3, [r7, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80017c0:	2211      	movs	r2, #17
 80017c2:	2364      	movs	r3, #100	@ 0x64
 80017c4:	4621      	mov	r1, r4
 80017c6:	4888      	ldr	r0, [pc, #544]	@ (80019e8 <main+0x5fc>)
 80017c8:	f001 fefe 	bl	80035c8 <HAL_UART_Transmit>
  buf_len = sprintf(buf, "Interpreter\r\n");
 80017cc:	4b87      	ldr	r3, [pc, #540]	@ (80019ec <main+0x600>)
 80017ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017d0:	4627      	mov	r7, r4
 80017d2:	c707      	stmia	r7!, {r0, r1, r2}
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80017d4:	4884      	ldr	r0, [pc, #528]	@ (80019e8 <main+0x5fc>)
  buf_len = sprintf(buf, "Interpreter\r\n");
 80017d6:	803b      	strh	r3, [r7, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80017d8:	220d      	movs	r2, #13
 80017da:	2364      	movs	r3, #100	@ 0x64
 80017dc:	4621      	mov	r1, r4
 80017de:	f001 fef3 	bl	80035c8 <HAL_UART_Transmit>
	  model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 80017e2:	f8d9 7000 	ldr.w	r7, [r9]
 80017e6:	f3bf 8f5b 	dmb	ish
 80017ea:	f017 0701 	ands.w	r7, r7, #1
 80017ee:	f000 819d 	beq.w	8001b2c <main+0x740>
  interpreter = &static_interpreter;
 80017f2:	4f7f      	ldr	r7, [pc, #508]	@ (80019f0 <main+0x604>)
  buf_len = sprintf(buf, "Successful\r\n");
 80017f4:	4e7f      	ldr	r6, [pc, #508]	@ (80019f4 <main+0x608>)
  interpreter = &static_interpreter;
 80017f6:	4b80      	ldr	r3, [pc, #512]	@ (80019f8 <main+0x60c>)
 80017f8:	603b      	str	r3, [r7, #0]
  buf_len = sprintf(buf, "Successful\r\n");
 80017fa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80017fe:	4625      	mov	r5, r4
 8001800:	c507      	stmia	r5!, {r0, r1, r2}
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001802:	220c      	movs	r2, #12
  buf_len = sprintf(buf, "Successful\r\n");
 8001804:	702b      	strb	r3, [r5, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001806:	4621      	mov	r1, r4
 8001808:	2364      	movs	r3, #100	@ 0x64
 800180a:	4877      	ldr	r0, [pc, #476]	@ (80019e8 <main+0x5fc>)
 800180c:	f001 fedc 	bl	80035c8 <HAL_UART_Transmit>
  buf_len = sprintf(buf, "Tensors\r\n");
 8001810:	4a7a      	ldr	r2, [pc, #488]	@ (80019fc <main+0x610>)
 8001812:	ca07      	ldmia	r2, {r0, r1, r2}
 8001814:	4625      	mov	r5, r4
 8001816:	c503      	stmia	r5!, {r0, r1}
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001818:	2364      	movs	r3, #100	@ 0x64
  buf_len = sprintf(buf, "Tensors\r\n");
 800181a:	802a      	strh	r2, [r5, #0]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 800181c:	4621      	mov	r1, r4
 800181e:	2209      	movs	r2, #9
 8001820:	4871      	ldr	r0, [pc, #452]	@ (80019e8 <main+0x5fc>)
 8001822:	f001 fed1 	bl	80035c8 <HAL_UART_Transmit>
  tflite_status = interpreter->AllocateTensors();
 8001826:	6838      	ldr	r0, [r7, #0]
 8001828:	f004 fb6a 	bl	8005f00 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
  if (tflite_status != kTfLiteOk)
 800182c:	4681      	mov	r9, r0
 800182e:	2800      	cmp	r0, #0
 8001830:	d07d      	beq.n	800192e <main+0x542>
	buf_len = sprintf(buf, "Failed tensors\r\n");
 8001832:	4e73      	ldr	r6, [pc, #460]	@ (8001a00 <main+0x614>)
 8001834:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001836:	4625      	mov	r5, r4
 8001838:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800183a:	6832      	ldr	r2, [r6, #0]
 800183c:	702a      	strb	r2, [r5, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 800183e:	4621      	mov	r1, r4
 8001840:	4869      	ldr	r0, [pc, #420]	@ (80019e8 <main+0x5fc>)
 8001842:	2364      	movs	r3, #100	@ 0x64
 8001844:	2210      	movs	r2, #16
 8001846:	f001 febf 	bl	80035c8 <HAL_UART_Transmit>
	error_reporter->Report("AllocateTensors() failed");
 800184a:	496e      	ldr	r1, [pc, #440]	@ (8001a04 <main+0x618>)
 800184c:	f8da 0000 	ldr.w	r0, [sl]
 8001850:	f001 ff66 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	while(1);
 8001854:	e7fe      	b.n	8001854 <main+0x468>
      if (error_reporter_ != nullptr) {
 8001856:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 800185a:	b110      	cbz	r0, 8001862 <main+0x476>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800185c:	496a      	ldr	r1, [pc, #424]	@ (8001a08 <main+0x61c>)
 800185e:	f001 ff5f 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	error_reporter->Report("Could not add FULLY CONNECTED op");
 8001862:	496a      	ldr	r1, [pc, #424]	@ (8001a0c <main+0x620>)
 8001864:	f8da 0000 	ldr.w	r0, [sl]
 8001868:	f001 ff5a 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	while(1);
 800186c:	e7fe      	b.n	800186c <main+0x480>
      if (error_reporter_) {
 800186e:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 8001872:	2800      	cmp	r0, #0
 8001874:	d0f5      	beq.n	8001862 <main+0x476>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001876:	4966      	ldr	r1, [pc, #408]	@ (8001a10 <main+0x624>)
 8001878:	2209      	movs	r2, #9
 800187a:	f001 ff51 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  if (tflite_status != kTfLiteOk)
 800187e:	e7f0      	b.n	8001862 <main+0x476>
      if (error_reporter_ != nullptr) {
 8001880:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 8001884:	b110      	cbz	r0, 800188c <main+0x4a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001886:	4960      	ldr	r1, [pc, #384]	@ (8001a08 <main+0x61c>)
 8001888:	f001 ff4a 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	error_reporter->Report("Could not add RESHAPE op");
 800188c:	4961      	ldr	r1, [pc, #388]	@ (8001a14 <main+0x628>)
 800188e:	f8da 0000 	ldr.w	r0, [sl]
 8001892:	f001 ff45 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	while(1);
 8001896:	e7fe      	b.n	8001896 <main+0x4aa>
      if (error_reporter_ != nullptr) {
 8001898:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 800189c:	b110      	cbz	r0, 80018a4 <main+0x4b8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800189e:	495a      	ldr	r1, [pc, #360]	@ (8001a08 <main+0x61c>)
 80018a0:	f001 ff3e 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	error_reporter->Report("Could not add CONV2D op");
 80018a4:	495c      	ldr	r1, [pc, #368]	@ (8001a18 <main+0x62c>)
 80018a6:	f8da 0000 	ldr.w	r0, [sl]
 80018aa:	f001 ff39 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  	while(1);
 80018ae:	e7fe      	b.n	80018ae <main+0x4c2>
      if (error_reporter_) {
 80018b0:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 80018b4:	2800      	cmp	r0, #0
 80018b6:	d0f5      	beq.n	80018a4 <main+0x4b8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80018b8:	4955      	ldr	r1, [pc, #340]	@ (8001a10 <main+0x624>)
 80018ba:	2203      	movs	r2, #3
 80018bc:	f001 ff30 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  if (tflite_status != kTfLiteOk)
 80018c0:	e7f0      	b.n	80018a4 <main+0x4b8>
      if (error_reporter_ != nullptr) {
 80018c2:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 80018c6:	b110      	cbz	r0, 80018ce <main+0x4e2>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80018c8:	494f      	ldr	r1, [pc, #316]	@ (8001a08 <main+0x61c>)
 80018ca:	f001 ff29 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	error_reporter->Report("Could not add MaxPool op");
 80018ce:	4953      	ldr	r1, [pc, #332]	@ (8001a1c <main+0x630>)
 80018d0:	f8da 0000 	ldr.w	r0, [sl]
 80018d4:	f001 ff24 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	while(1);
 80018d8:	e7fe      	b.n	80018d8 <main+0x4ec>
      if (error_reporter_) {
 80018da:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 80018de:	2800      	cmp	r0, #0
 80018e0:	d0d4      	beq.n	800188c <main+0x4a0>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80018e2:	494b      	ldr	r1, [pc, #300]	@ (8001a10 <main+0x624>)
 80018e4:	2216      	movs	r2, #22
 80018e6:	f001 ff1b 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  if (tflite_status != kTfLiteOk)
 80018ea:	e7cf      	b.n	800188c <main+0x4a0>
      if (error_reporter_ != nullptr) {
 80018ec:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 80018f0:	b110      	cbz	r0, 80018f8 <main+0x50c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80018f2:	4945      	ldr	r1, [pc, #276]	@ (8001a08 <main+0x61c>)
 80018f4:	f001 ff14 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  error_reporter->Report("Could not add Mean op");
 80018f8:	4949      	ldr	r1, [pc, #292]	@ (8001a20 <main+0x634>)
 80018fa:	f8da 0000 	ldr.w	r0, [sl]
 80018fe:	f001 ff0f 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  while(1);
 8001902:	e7fe      	b.n	8001902 <main+0x516>
      if (error_reporter_) {
 8001904:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 8001908:	2800      	cmp	r0, #0
 800190a:	d0e0      	beq.n	80018ce <main+0x4e2>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800190c:	4940      	ldr	r1, [pc, #256]	@ (8001a10 <main+0x624>)
 800190e:	2211      	movs	r2, #17
 8001910:	f001 ff06 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  if (tflite_status != kTfLiteOk)
 8001914:	e7db      	b.n	80018ce <main+0x4e2>
      if (error_reporter_ != nullptr) {
 8001916:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 800191a:	b110      	cbz	r0, 8001922 <main+0x536>
        TF_LITE_REPORT_ERROR(error_reporter_,
 800191c:	493a      	ldr	r1, [pc, #232]	@ (8001a08 <main+0x61c>)
 800191e:	f001 feff 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  error_reporter->Report("Could not add Softmax op");
 8001922:	4940      	ldr	r1, [pc, #256]	@ (8001a24 <main+0x638>)
 8001924:	f8da 0000 	ldr.w	r0, [sl]
 8001928:	f001 fefa 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  while(1);
 800192c:	e7fe      	b.n	800192c <main+0x540>
  buf_len = sprintf(buf, "Successful\r\n");
 800192e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001932:	46a4      	mov	ip, r4
 8001934:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001938:	4d2b      	ldr	r5, [pc, #172]	@ (80019e8 <main+0x5fc>)
  buf_len = sprintf(buf, "Successful\r\n");
 800193a:	f88c 3000 	strb.w	r3, [ip]
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 800193e:	220c      	movs	r2, #12
 8001940:	2364      	movs	r3, #100	@ 0x64
 8001942:	4621      	mov	r1, r4
 8001944:	4628      	mov	r0, r5
 8001946:	f001 fe3f 	bl	80035c8 <HAL_UART_Transmit>
  model_input = interpreter->input(0);
 800194a:	4649      	mov	r1, r9
 800194c:	6838      	ldr	r0, [r7, #0]
 800194e:	f8df 80f0 	ldr.w	r8, [pc, #240]	@ 8001a40 <main+0x654>
  model_output = interpreter->output(0);
 8001952:	f8df b0f0 	ldr.w	fp, [pc, #240]	@ 8001a44 <main+0x658>
  model_input = interpreter->input(0);
 8001956:	f004 f99f 	bl	8005c98 <_ZN6tflite16MicroInterpreter5inputEj>
  model_output = interpreter->output(0);
 800195a:	4649      	mov	r1, r9
  model_input = interpreter->input(0);
 800195c:	f8c8 0000 	str.w	r0, [r8]
  model_output = interpreter->output(0);
 8001960:	6838      	ldr	r0, [r7, #0]
 8001962:	f004 f9f9 	bl	8005d58 <_ZN6tflite16MicroInterpreter6outputEj>
  float input_size = model_input->dims->size;
 8001966:	f8d8 3000 	ldr.w	r3, [r8]
  model_output = interpreter->output(0);
 800196a:	f8cb 0000 	str.w	r0, [fp]
  float input_size = model_input->dims->size;
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	6818      	ldr	r0, [r3, #0]
  buf_len = sprintf(buf, "Model input size: %f\r\n", input_size);
 8001972:	ee07 0a90 	vmov	s15, r0
 8001976:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800197a:	ee17 0a90 	vmov	r0, s15
 800197e:	f7fe fded 	bl	800055c <__aeabi_f2d>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4620      	mov	r0, r4
 8001988:	4927      	ldr	r1, [pc, #156]	@ (8001a28 <main+0x63c>)
 800198a:	f00f ffd9 	bl	8011940 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 800198e:	2364      	movs	r3, #100	@ 0x64
 8001990:	b282      	uxth	r2, r0
 8001992:	4621      	mov	r1, r4
 8001994:	4628      	mov	r0, r5
 8001996:	f001 fe17 	bl	80035c8 <HAL_UART_Transmit>
  num_elements = model_input->bytes / sizeof(int) * 4;
 800199a:	f8d8 3000 	ldr.w	r3, [r8]
  buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 800199e:	4923      	ldr	r1, [pc, #140]	@ (8001a2c <main+0x640>)
  num_elements = model_input->bytes / sizeof(int) * 4;
 80019a0:	699e      	ldr	r6, [r3, #24]
 80019a2:	f026 0603 	bic.w	r6, r6, #3
  buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 80019a6:	4632      	mov	r2, r6
 80019a8:	4620      	mov	r0, r4
 80019aa:	f00f ffc9 	bl	8011940 <siprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80019ae:	2364      	movs	r3, #100	@ 0x64
 80019b0:	b282      	uxth	r2, r0
 80019b2:	4621      	mov	r1, r4
 80019b4:	4628      	mov	r0, r5
 80019b6:	f001 fe07 	bl	80035c8 <HAL_UART_Transmit>
	  buf_len = sprintf(buf, "In while loop\r\n");
 80019ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001a30 <main+0x644>)
 80019bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 80019c2:	2364      	movs	r3, #100	@ 0x64
 80019c4:	220f      	movs	r2, #15
 80019c6:	4621      	mov	r1, r4
 80019c8:	4628      	mov	r0, r5
 80019ca:	f001 fdfd 	bl	80035c8 <HAL_UART_Transmit>
	  signed char test[] = {
 80019ce:	4919      	ldr	r1, [pc, #100]	@ (8001a34 <main+0x648>)
 80019d0:	f240 72ec 	movw	r2, #2028	@ 0x7ec
 80019d4:	a851      	add	r0, sp, #324	@ 0x144
 80019d6:	f010 fab8 	bl	8011f4a <memcpy>
		  model_input->data.f[i] = test[i];
 80019da:	f8d8 0000 	ldr.w	r0, [r8]
 80019de:	a951      	add	r1, sp, #324	@ 0x144
	  for (uint32_t i = 0; i < num_elements; i++) {
 80019e0:	2300      	movs	r3, #0
 80019e2:	e03d      	b.n	8001a60 <main+0x674>
 80019e4:	08003b71 	.word	0x08003b71
 80019e8:	2000e928 	.word	0x2000e928
 80019ec:	08013ee4 	.word	0x08013ee4
 80019f0:	2000e91c 	.word	0x2000e91c
 80019f4:	08013f10 	.word	0x08013f10
 80019f8:	20007078 	.word	0x20007078
 80019fc:	08013f20 	.word	0x08013f20
 8001a00:	08013f2c 	.word	0x08013f2c
 8001a04:	08013f40 	.word	0x08013f40
 8001a08:	08013db0 	.word	0x08013db0
 8001a0c:	08013e44 	.word	0x08013e44
 8001a10:	08013e00 	.word	0x08013e00
 8001a14:	08013e80 	.word	0x08013e80
 8001a18:	08013e68 	.word	0x08013e68
 8001a1c:	08013e9c 	.word	0x08013e9c
 8001a20:	08013eb8 	.word	0x08013eb8
 8001a24:	08013ef4 	.word	0x08013ef4
 8001a28:	08013f5c 	.word	0x08013f5c
 8001a2c:	08013f74 	.word	0x08013f74
 8001a30:	08013f94 	.word	0x08013f94
 8001a34:	0801402c 	.word	0x0801402c
 8001a38:	08013ed0 	.word	0x08013ed0
 8001a3c:	20007074 	.word	0x20007074
 8001a40:	2000e918 	.word	0x2000e918
 8001a44:	2000e914 	.word	0x2000e914
		  model_input->data.f[i] = test[i];
 8001a48:	f911 2b01 	ldrsb.w	r2, [r1], #1
 8001a4c:	ee07 2a90 	vmov	s15, r2
 8001a50:	6842      	ldr	r2, [r0, #4]
 8001a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a56:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001a5a:	edc2 7a00 	vstr	s15, [r2]
	  for (uint32_t i = 0; i < num_elements; i++) {
 8001a5e:	3301      	adds	r3, #1
 8001a60:	42b3      	cmp	r3, r6
 8001a62:	d1f1      	bne.n	8001a48 <main+0x65c>
	  buf_len = sprintf(buf, "Timer reset\r\n");
 8001a64:	4b48      	ldr	r3, [pc, #288]	@ (8001b88 <main+0x79c>)
 8001a66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a68:	46a4      	mov	ip, r4
 8001a6a:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001a6e:	4621      	mov	r1, r4
	  buf_len = sprintf(buf, "Timer reset\r\n");
 8001a70:	f8ac 3000 	strh.w	r3, [ip]
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001a74:	220d      	movs	r2, #13
 8001a76:	2364      	movs	r3, #100	@ 0x64
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f001 fda5 	bl	80035c8 <HAL_UART_Transmit>
	  ResetTimer();
 8001a7e:	f7ff fabb 	bl	8000ff8 <_Z10ResetTimerv>
	  StartTimer();
 8001a82:	f7ff fad7 	bl	8001034 <_Z10StartTimerv>
	  tflite_status = interpreter->Invoke();
 8001a86:	6838      	ldr	r0, [r7, #0]
 8001a88:	f004 fb0e 	bl	80060a8 <_ZN6tflite16MicroInterpreter6InvokeEv>
 8001a8c:	4681      	mov	r9, r0
	  StopTimer();
 8001a8e:	f7ff fadb 	bl	8001048 <_Z9StopTimerv>
	  buf_len = sprintf(buf, "Timer result: %u\r\n",getCycles());
 8001a92:	f7ff fae1 	bl	8001058 <_Z9getCyclesv>
 8001a96:	493d      	ldr	r1, [pc, #244]	@ (8001b8c <main+0x7a0>)
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4620      	mov	r0, r4
 8001a9c:	f00f ff50 	bl	8011940 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001aa0:	2364      	movs	r3, #100	@ 0x64
 8001aa2:	b282      	uxth	r2, r0
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	f001 fd8e 	bl	80035c8 <HAL_UART_Transmit>
	  if(tflite_status != kTfLiteOk)
 8001aac:	f1b9 0f00 	cmp.w	r9, #0
 8001ab0:	d00e      	beq.n	8001ad0 <main+0x6e4>
		  buf_len = sprintf(buf, "Invoke failed\r\n");
 8001ab2:	4b37      	ldr	r3, [pc, #220]	@ (8001b90 <main+0x7a4>)
 8001ab4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ab6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001aba:	4621      	mov	r1, r4
 8001abc:	2364      	movs	r3, #100	@ 0x64
 8001abe:	220f      	movs	r2, #15
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	f001 fd81 	bl	80035c8 <HAL_UART_Transmit>
		  error_reporter->Report("Invoke failed");
 8001ac6:	4933      	ldr	r1, [pc, #204]	@ (8001b94 <main+0x7a8>)
 8001ac8:	f8da 0000 	ldr.w	r0, [sl]
 8001acc:	f001 fe28 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	  y_val_0 = model_output->data.int8[0];
 8001ad0:	f8db 2000 	ldr.w	r2, [fp]
	  buf_len = sprintf(buf, "Number of output elements: %lu\r\n", num_output_elements);
 8001ad4:	4930      	ldr	r1, [pc, #192]	@ (8001b98 <main+0x7ac>)
	  y_val_0 = model_output->data.int8[0];
 8001ad6:	6853      	ldr	r3, [r2, #4]
	  buf_len = sprintf(buf, "Number of output elements: %lu\r\n", num_output_elements);
 8001ad8:	6992      	ldr	r2, [r2, #24]
	  y_val_0 = model_output->data.int8[0];
 8001ada:	f993 9000 	ldrsb.w	r9, [r3]
	  y_val_1 = model_output->data.int8[1];
 8001ade:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001ae2:	9305      	str	r3, [sp, #20]
	  buf_len = sprintf(buf, "Number of output elements: %lu\r\n", num_output_elements);
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f00f ff2b 	bl	8011940 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001aea:	2364      	movs	r3, #100	@ 0x64
 8001aec:	b282      	uxth	r2, r0
 8001aee:	4621      	mov	r1, r4
 8001af0:	4628      	mov	r0, r5
 8001af2:	f001 fd69 	bl	80035c8 <HAL_UART_Transmit>
	  buf_len = sprintf(buf, "Output 0: %i\r\n", y_val_0);
 8001af6:	464a      	mov	r2, r9
 8001af8:	4928      	ldr	r1, [pc, #160]	@ (8001b9c <main+0x7b0>)
 8001afa:	4620      	mov	r0, r4
 8001afc:	f00f ff20 	bl	8011940 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001b00:	2364      	movs	r3, #100	@ 0x64
 8001b02:	b282      	uxth	r2, r0
 8001b04:	4621      	mov	r1, r4
 8001b06:	4628      	mov	r0, r5
 8001b08:	f001 fd5e 	bl	80035c8 <HAL_UART_Transmit>
	  buf_len = sprintf(buf, "Output 1: %i\r\n", y_val_1);
 8001b0c:	9a05      	ldr	r2, [sp, #20]
 8001b0e:	4924      	ldr	r1, [pc, #144]	@ (8001ba0 <main+0x7b4>)
 8001b10:	4620      	mov	r0, r4
 8001b12:	f00f ff15 	bl	8011940 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)buf, buf_len, 100);
 8001b16:	2364      	movs	r3, #100	@ 0x64
 8001b18:	b282      	uxth	r2, r0
 8001b1a:	4621      	mov	r1, r4
 8001b1c:	4628      	mov	r0, r5
 8001b1e:	f001 fd53 	bl	80035c8 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8001b22:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001b26:	f000 f9a3 	bl	8001e70 <HAL_Delay>
  }
 8001b2a:	e746      	b.n	80019ba <main+0x5ce>
	  model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8001b2c:	4648      	mov	r0, r9
 8001b2e:	f00e fef3 	bl	8010918 <__cxa_guard_acquire>
 8001b32:	2800      	cmp	r0, #0
 8001b34:	f43f ae5d 	beq.w	80017f2 <main+0x406>
 8001b38:	f8da 3000 	ldr.w	r3, [sl]
 8001b3c:	9702      	str	r7, [sp, #8]
 8001b3e:	6831      	ldr	r1, [r6, #0]
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	f44f 43f0 	mov.w	r3, #30720	@ 0x7800
 8001b46:	462a      	mov	r2, r5
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	4816      	ldr	r0, [pc, #88]	@ (8001ba4 <main+0x7b8>)
 8001b4c:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <main+0x7bc>)
 8001b4e:	f004 f817 	bl	8005b80 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
 8001b52:	4816      	ldr	r0, [pc, #88]	@ (8001bac <main+0x7c0>)
 8001b54:	f00f f9d8 	bl	8010f08 <atexit>
 8001b58:	4648      	mov	r0, r9
 8001b5a:	f00e fee9 	bl	8010930 <__cxa_guard_release>
 8001b5e:	e648      	b.n	80017f2 <main+0x406>
      if (error_reporter_) {
 8001b60:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 8001b64:	2800      	cmp	r0, #0
 8001b66:	f43f aedc 	beq.w	8001922 <main+0x536>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001b6a:	4911      	ldr	r1, [pc, #68]	@ (8001bb0 <main+0x7c4>)
 8001b6c:	2219      	movs	r2, #25
 8001b6e:	f001 fdd7 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  if (tflite_status != kTfLiteOk)
 8001b72:	e6d6      	b.n	8001922 <main+0x536>
      if (error_reporter_) {
 8001b74:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	f43f aebd 	beq.w	80018f8 <main+0x50c>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001b7e:	490c      	ldr	r1, [pc, #48]	@ (8001bb0 <main+0x7c4>)
 8001b80:	2228      	movs	r2, #40	@ 0x28
 8001b82:	f001 fdcd 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  if (tflite_status != kTfLiteOk)
 8001b86:	e6b7      	b.n	80018f8 <main+0x50c>
 8001b88:	08013fa4 	.word	0x08013fa4
 8001b8c:	08013fb4 	.word	0x08013fb4
 8001b90:	08013fc8 	.word	0x08013fc8
 8001b94:	08013fd8 	.word	0x08013fd8
 8001b98:	08013fe8 	.word	0x08013fe8
 8001b9c:	0801400c 	.word	0x0801400c
 8001ba0:	0801401c 	.word	0x0801401c
 8001ba4:	20007078 	.word	0x20007078
 8001ba8:	20007114 	.word	0x20007114
 8001bac:	080010e1 	.word	0x080010e1
 8001bb0:	08013e00 	.word	0x08013e00

08001bb4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8001be0 <HAL_MspInit+0x2c>)
 8001bb6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001bb8:	f042 0201 	orr.w	r2, r2, #1
 8001bbc:	661a      	str	r2, [r3, #96]	@ 0x60
 8001bbe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
{
 8001bc0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	f002 0201 	and.w	r2, r2, #1
 8001bc6:	9200      	str	r2, [sp, #0]
 8001bc8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bcc:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001bd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bdc:	b002      	add	sp, #8
 8001bde:	4770      	bx	lr
 8001be0:	40021000 	.word	0x40021000
 8001be4:	00000000 	.word	0x00000000

08001be8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be8:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8001bea:	4a1b      	ldr	r2, [pc, #108]	@ (8001c58 <HAL_UART_MspInit+0x70>)
 8001bec:	6801      	ldr	r1, [r0, #0]
{
 8001bee:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf0:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 8001bf2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8001bf8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001bfc:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART1)
 8001bfe:	d001      	beq.n	8001c04 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c00:	b008      	add	sp, #32
 8001c02:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c04:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001c08:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c0c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8001c50 <HAL_UART_MspInit+0x68>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c10:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	4812      	ldr	r0, [pc, #72]	@ (8001c5c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c14:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c18:	661a      	str	r2, [r3, #96]	@ 0x60
 8001c1a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c1c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001c20:	9200      	str	r2, [sp, #0]
 8001c22:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001c26:	f042 0202 	orr.w	r2, r2, #2
 8001c2a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2203      	movs	r2, #3
 8001c36:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c38:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001c3a:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c44:	f000 f98e 	bl	8001f64 <HAL_GPIO_Init>
}
 8001c48:	b008      	add	sp, #32
 8001c4a:	bd10      	pop	{r4, pc}
 8001c4c:	f3af 8000 	nop.w
 8001c50:	000000e0 	.word	0x000000e0
 8001c54:	00000002 	.word	0x00000002
 8001c58:	40013800 	.word	0x40013800
 8001c5c:	48000400 	.word	0x48000400

08001c60 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop

08001c64 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <HardFault_Handler>
 8001c66:	bf00      	nop

08001c68 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <MemManage_Handler>
 8001c6a:	bf00      	nop

08001c6c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <BusFault_Handler>
 8001c6e:	bf00      	nop

08001c70 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <UsageFault_Handler>
 8001c72:	bf00      	nop

08001c74 <SVC_Handler>:
}

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop

08001c78 <DebugMon_Handler>:
}

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop

08001c7c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop

08001c80 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c80:	f000 b8e4 	b.w	8001e4c <HAL_IncTick>

08001c84 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001c84:	2001      	movs	r0, #1
 8001c86:	4770      	bx	lr

08001c88 <_kill>:

int _kill(int pid, int sig)
{
 8001c88:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001c8a:	f010 f931 	bl	8011ef0 <__errno>
 8001c8e:	2316      	movs	r3, #22
 8001c90:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001c92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c96:	bd08      	pop	{r3, pc}

08001c98 <_exit>:

void _exit (int status)
{
 8001c98:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001c9a:	f010 f929 	bl	8011ef0 <__errno>
 8001c9e:	2316      	movs	r3, #22
 8001ca0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001ca2:	e7fe      	b.n	8001ca2 <_exit+0xa>

08001ca4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ca4:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	1e16      	subs	r6, r2, #0
 8001ca8:	dd07      	ble.n	8001cba <_read+0x16>
 8001caa:	460c      	mov	r4, r1
 8001cac:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8001cae:	f3af 8000 	nop.w
 8001cb2:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	42a5      	cmp	r5, r4
 8001cb8:	d1f9      	bne.n	8001cae <_read+0xa>
	}

return len;
}
 8001cba:	4630      	mov	r0, r6
 8001cbc:	bd70      	pop	{r4, r5, r6, pc}
 8001cbe:	bf00      	nop

08001cc0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc2:	1e16      	subs	r6, r2, #0
 8001cc4:	dd07      	ble.n	8001cd6 <_write+0x16>
 8001cc6:	460c      	mov	r4, r1
 8001cc8:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8001cca:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001cce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	42ac      	cmp	r4, r5
 8001cd4:	d1f9      	bne.n	8001cca <_write+0xa>
	}
	return len;
}
 8001cd6:	4630      	mov	r0, r6
 8001cd8:	bd70      	pop	{r4, r5, r6, pc}
 8001cda:	bf00      	nop

08001cdc <_close>:

int _close(int file)
{
	return -1;
}
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop

08001ce4 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001ce4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ce8:	604b      	str	r3, [r1, #4]
	return 0;
}
 8001cea:	2000      	movs	r0, #0
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop

08001cf0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	4770      	bx	lr

08001cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	4770      	bx	lr

08001cf8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cf8:	490c      	ldr	r1, [pc, #48]	@ (8001d2c <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cfa:	4a0d      	ldr	r2, [pc, #52]	@ (8001d30 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8001cfc:	680b      	ldr	r3, [r1, #0]
{
 8001cfe:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4c0c      	ldr	r4, [pc, #48]	@ (8001d34 <_sbrk+0x3c>)
 8001d02:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8001d04:	b12b      	cbz	r3, 8001d12 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d06:	4418      	add	r0, r3
 8001d08:	4290      	cmp	r0, r2
 8001d0a:	d807      	bhi.n	8001d1c <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001d0c:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8001d12:	4b09      	ldr	r3, [pc, #36]	@ (8001d38 <_sbrk+0x40>)
 8001d14:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8001d16:	4418      	add	r0, r3
 8001d18:	4290      	cmp	r0, r2
 8001d1a:	d9f7      	bls.n	8001d0c <_sbrk+0x14>
    errno = ENOMEM;
 8001d1c:	f010 f8e8 	bl	8011ef0 <__errno>
 8001d20:	230c      	movs	r3, #12
 8001d22:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	bd10      	pop	{r4, pc}
 8001d2c:	2000e9a8 	.word	0x2000e9a8
 8001d30:	20018000 	.word	0x20018000
 8001d34:	00004000 	.word	0x00004000
 8001d38:	2000ebb0 	.word	0x2000ebb0

08001d3c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d3c:	4911      	ldr	r1, [pc, #68]	@ (8001d84 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001d3e:	4b12      	ldr	r3, [pc, #72]	@ (8001d88 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d40:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8001d44:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
{
 8001d48:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d4a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  RCC->CR |= RCC_CR_MSION;
 8001d4e:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001d50:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8001d58:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	f022 52a8 	bic.w	r2, r2, #352321536	@ 0x15000000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001d60:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8001d64:	f422 2210 	bic.w	r2, r2, #589824	@ 0x90000
 8001d68:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8001d6a:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */

  RCC->CR &= 0xFFFBFFFFU;
 8001d6c:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d6e:	f04f 6400 	mov.w	r4, #134217728	@ 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 8001d72:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001d76:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 8001d78:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d7a:	608c      	str	r4, [r1, #8]
#endif
}
 8001d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00
 8001d88:	40021000 	.word	0x40021000

08001d8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dc4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d90:	f7ff ffd4 	bl	8001d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d94:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d96:	e003      	b.n	8001da0 <LoopCopyDataInit>

08001d98 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d98:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d9a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d9c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d9e:	3104      	adds	r1, #4

08001da0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001da0:	480a      	ldr	r0, [pc, #40]	@ (8001dcc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001da2:	4b0b      	ldr	r3, [pc, #44]	@ (8001dd0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001da4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001da6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001da8:	d3f6      	bcc.n	8001d98 <CopyDataInit>
	ldr	r2, =_sbss
 8001daa:	4a0a      	ldr	r2, [pc, #40]	@ (8001dd4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001dac:	e002      	b.n	8001db4 <LoopFillZerobss>

08001dae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001dae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001db0:	f842 3b04 	str.w	r3, [r2], #4

08001db4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <LoopForever+0x16>)
	cmp	r2, r3
 8001db6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001db8:	d3f9      	bcc.n	8001dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dba:	f010 f89f 	bl	8011efc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dbe:	f7ff fb15 	bl	80013ec <main>

08001dc2 <LoopForever>:

LoopForever:
    b LoopForever
 8001dc2:	e7fe      	b.n	8001dc2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dc4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001dc8:	080176bc 	.word	0x080176bc
	ldr	r0, =_sdata
 8001dcc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001dd0:	2000704c 	.word	0x2000704c
	ldr	r2, =_sbss
 8001dd4:	20007050 	.word	0x20007050
	ldr	r3, = _ebss
 8001dd8:	2000ebb0 	.word	0x2000ebb0

08001ddc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ddc:	e7fe      	b.n	8001ddc <ADC1_2_IRQHandler>
	...

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001de2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e20 <HAL_InitTick+0x40>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	b90b      	cbnz	r3, 8001dec <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8001de8:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8001dea:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001dec:	490d      	ldr	r1, [pc, #52]	@ (8001e24 <HAL_InitTick+0x44>)
 8001dee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001df2:	4605      	mov	r5, r0
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	6808      	ldr	r0, [r1, #0]
 8001dfa:	fbb0 f0f3 	udiv	r0, r0, r3
 8001dfe:	f000 f897 	bl	8001f30 <HAL_SYSTICK_Config>
 8001e02:	4604      	mov	r4, r0
 8001e04:	2800      	cmp	r0, #0
 8001e06:	d1ef      	bne.n	8001de8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e08:	2d0f      	cmp	r5, #15
 8001e0a:	d8ed      	bhi.n	8001de8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	4629      	mov	r1, r5
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e14:	f000 f850 	bl	8001eb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e18:	4b03      	ldr	r3, [pc, #12]	@ (8001e28 <HAL_InitTick+0x48>)
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	601d      	str	r5, [r3, #0]
}
 8001e1e:	bd38      	pop	{r3, r4, r5, pc}
 8001e20:	20006e78 	.word	0x20006e78
 8001e24:	20006e74 	.word	0x20006e74
 8001e28:	20006e7c 	.word	0x20006e7c

08001e2c <HAL_Init>:
{
 8001e2c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e2e:	2003      	movs	r0, #3
 8001e30:	f000 f830 	bl	8001e94 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7ff ffd3 	bl	8001de0 <HAL_InitTick>
 8001e3a:	b110      	cbz	r0, 8001e42 <HAL_Init+0x16>
    status = HAL_ERROR;
 8001e3c:	2401      	movs	r4, #1
}
 8001e3e:	4620      	mov	r0, r4
 8001e40:	bd10      	pop	{r4, pc}
 8001e42:	4604      	mov	r4, r0
    HAL_MspInit();
 8001e44:	f7ff feb6 	bl	8001bb4 <HAL_MspInit>
}
 8001e48:	4620      	mov	r0, r4
 8001e4a:	bd10      	pop	{r4, pc}

08001e4c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001e4c:	4a03      	ldr	r2, [pc, #12]	@ (8001e5c <HAL_IncTick+0x10>)
 8001e4e:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <HAL_IncTick+0x14>)
 8001e50:	6811      	ldr	r1, [r2, #0]
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	440b      	add	r3, r1
 8001e56:	6013      	str	r3, [r2, #0]
}
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	2000e9ac 	.word	0x2000e9ac
 8001e60:	20006e78 	.word	0x20006e78

08001e64 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001e64:	4b01      	ldr	r3, [pc, #4]	@ (8001e6c <HAL_GetTick+0x8>)
 8001e66:	6818      	ldr	r0, [r3, #0]
}
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	2000e9ac 	.word	0x2000e9ac

08001e70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e70:	b538      	push	{r3, r4, r5, lr}
 8001e72:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001e74:	f7ff fff6 	bl	8001e64 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e78:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8001e7a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8001e7c:	d002      	beq.n	8001e84 <HAL_Delay+0x14>
  {
    wait += (uint32_t)uwTickFreq;
 8001e7e:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <HAL_Delay+0x20>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e84:	f7ff ffee 	bl	8001e64 <HAL_GetTick>
 8001e88:	1b40      	subs	r0, r0, r5
 8001e8a:	42a0      	cmp	r0, r4
 8001e8c:	d3fa      	bcc.n	8001e84 <HAL_Delay+0x14>
  {
  }
}
 8001e8e:	bd38      	pop	{r3, r4, r5, pc}
 8001e90:	20006e78 	.word	0x20006e78

08001e94 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e94:	4907      	ldr	r1, [pc, #28]	@ (8001eb4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e96:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e98:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e9a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e9e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ea2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ea4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ea6:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001eaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001eae:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f28 <HAL_NVIC_SetPriority+0x70>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ec2:	f1c3 0e07 	rsb	lr, r3, #7
 8001ec6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eca:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ece:	bf28      	it	cs
 8001ed0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ed4:	f1bc 0f06 	cmp.w	ip, #6
 8001ed8:	d91c      	bls.n	8001f14 <HAL_NVIC_SetPriority+0x5c>
 8001eda:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ede:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ee2:	fa03 f30c 	lsl.w	r3, r3, ip
 8001ee6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001eee:	fa03 f30e 	lsl.w	r3, r3, lr
 8001ef2:	ea21 0303 	bic.w	r3, r1, r3
 8001ef6:	fa03 f30c 	lsl.w	r3, r3, ip
 8001efa:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efc:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8001efe:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8001f02:	db0a      	blt.n	8001f1a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f04:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001f08:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001f0c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001f10:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f14:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f16:	4694      	mov	ip, r2
 8001f18:	e7e7      	b.n	8001eea <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f1a:	4a04      	ldr	r2, [pc, #16]	@ (8001f2c <HAL_NVIC_SetPriority+0x74>)
 8001f1c:	f000 000f 	and.w	r0, r0, #15
 8001f20:	4402      	add	r2, r0
 8001f22:	7613      	strb	r3, [r2, #24]
 8001f24:	f85d fb04 	ldr.w	pc, [sp], #4
 8001f28:	e000ed00 	.word	0xe000ed00
 8001f2c:	e000ecfc 	.word	0xe000ecfc

08001f30 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	3801      	subs	r0, #1
 8001f32:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001f36:	d301      	bcc.n	8001f3c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f38:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001f3a:	4770      	bx	lr
{
 8001f3c:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f42:	4c07      	ldr	r4, [pc, #28]	@ (8001f60 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f44:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f46:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8001f4a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f4e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f50:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f52:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f54:	619a      	str	r2, [r3, #24]
}
 8001f56:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5a:	6119      	str	r1, [r3, #16]
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f68:	680c      	ldr	r4, [r1, #0]
{
 8001f6a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f6c:	2c00      	cmp	r4, #0
 8001f6e:	f000 80c0 	beq.w	80020f2 <HAL_GPIO_Init+0x18e>
  uint32_t position = 0x00u;
 8001f72:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f74:	f04f 0b01 	mov.w	fp, #1
 8001f78:	fa0b fe03 	lsl.w	lr, fp, r3

    if (iocurrent != 0x00u)
 8001f7c:	ea1e 0a04 	ands.w	sl, lr, r4
 8001f80:	f000 80b2 	beq.w	80020e8 <HAL_GPIO_Init+0x184>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f84:	684a      	ldr	r2, [r1, #4]
 8001f86:	f022 0510 	bic.w	r5, r2, #16
 8001f8a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001f8e:	3d01      	subs	r5, #1
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f90:	2603      	movs	r6, #3
 8001f92:	fa06 f70c 	lsl.w	r7, r6, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f96:	2d01      	cmp	r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001f98:	ea6f 0707 	mvn.w	r7, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f9c:	d810      	bhi.n	8001fc0 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR;
 8001f9e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001fa0:	ea05 0807 	and.w	r8, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001fa4:	68cd      	ldr	r5, [r1, #12]
 8001fa6:	fa05 f50c 	lsl.w	r5, r5, ip
 8001faa:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->OSPEEDR = temp;
 8001fae:	6085      	str	r5, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb0:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001fb2:	ea25 080e 	bic.w	r8, r5, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001fb6:	0915      	lsrs	r5, r2, #4
 8001fb8:	409d      	lsls	r5, r3
 8001fba:	ea45 0508 	orr.w	r5, r5, r8
        GPIOx->OTYPER = temp;
 8001fbe:	6045      	str	r5, [r0, #4]
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fc0:	688d      	ldr	r5, [r1, #8]
 8001fc2:	fa05 f80c 	lsl.w	r8, r5, ip
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001fc6:	f002 0503 	and.w	r5, r2, #3
 8001fca:	2d03      	cmp	r5, #3
 8001fcc:	f000 8094 	beq.w	80020f8 <HAL_GPIO_Init+0x194>
      temp = GPIOx->PUPDR;
 8001fd0:	f8d0 e00c 	ldr.w	lr, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001fd4:	ea0e 0e07 	and.w	lr, lr, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001fd8:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fdc:	2a02      	cmp	r2, #2
      GPIOx->PUPDR = temp;
 8001fde:	f8c0 e00c 	str.w	lr, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe2:	f040 809d 	bne.w	8002120 <HAL_GPIO_Init+0x1bc>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001fe6:	690e      	ldr	r6, [r1, #16]
        temp = GPIOx->AFR[position >> 3u];
 8001fe8:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001fec:	f003 0e07 	and.w	lr, r3, #7
 8001ff0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8001ff4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ff8:	fa06 f60e 	lsl.w	r6, r6, lr
        temp = GPIOx->AFR[position >> 3u];
 8001ffc:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002000:	9601      	str	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002002:	260f      	movs	r6, #15
 8002004:	fa06 fe0e 	lsl.w	lr, r6, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002008:	9e01      	ldr	r6, [sp, #4]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800200a:	ea29 090e 	bic.w	r9, r9, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800200e:	ea46 0e09 	orr.w	lr, r6, r9
        GPIOx->AFR[position >> 3u] = temp;
 8002012:	f8c8 e020 	str.w	lr, [r8, #32]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002016:	fa05 f50c 	lsl.w	r5, r5, ip
      temp = GPIOx->MODER;
 800201a:	f8d0 c000 	ldr.w	ip, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800201e:	ea0c 0707 	and.w	r7, ip, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002022:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002024:	00d7      	lsls	r7, r2, #3
      GPIOx->MODER = temp;
 8002026:	6005      	str	r5, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002028:	d55e      	bpl.n	80020e8 <HAL_GPIO_Init+0x184>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202a:	4f51      	ldr	r7, [pc, #324]	@ (8002170 <HAL_GPIO_Init+0x20c>)
 800202c:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 800202e:	f045 0501 	orr.w	r5, r5, #1
 8002032:	663d      	str	r5, [r7, #96]	@ 0x60
 8002034:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 8002036:	f005 0501 	and.w	r5, r5, #1
 800203a:	9503      	str	r5, [sp, #12]
 800203c:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2u];
 800203e:	f023 0503 	bic.w	r5, r3, #3
 8002042:	f105 4580 	add.w	r5, r5, #1073741824	@ 0x40000000
 8002046:	f505 3580 	add.w	r5, r5, #65536	@ 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800204a:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 800204e:	68af      	ldr	r7, [r5, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002050:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002054:	260f      	movs	r6, #15
 8002056:	fa06 fe0c 	lsl.w	lr, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800205a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800205e:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002062:	d01d      	beq.n	80020a0 <HAL_GPIO_Init+0x13c>
 8002064:	4e43      	ldr	r6, [pc, #268]	@ (8002174 <HAL_GPIO_Init+0x210>)
 8002066:	42b0      	cmp	r0, r6
 8002068:	d065      	beq.n	8002136 <HAL_GPIO_Init+0x1d2>
 800206a:	4e43      	ldr	r6, [pc, #268]	@ (8002178 <HAL_GPIO_Init+0x214>)
 800206c:	42b0      	cmp	r0, r6
 800206e:	d069      	beq.n	8002144 <HAL_GPIO_Init+0x1e0>
 8002070:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 8002180 <HAL_GPIO_Init+0x21c>
 8002074:	4570      	cmp	r0, lr
 8002076:	d057      	beq.n	8002128 <HAL_GPIO_Init+0x1c4>
 8002078:	f8df e108 	ldr.w	lr, [pc, #264]	@ 8002184 <HAL_GPIO_Init+0x220>
 800207c:	4570      	cmp	r0, lr
 800207e:	d068      	beq.n	8002152 <HAL_GPIO_Init+0x1ee>
 8002080:	f8df e104 	ldr.w	lr, [pc, #260]	@ 8002188 <HAL_GPIO_Init+0x224>
 8002084:	4570      	cmp	r0, lr
 8002086:	d06b      	beq.n	8002160 <HAL_GPIO_Init+0x1fc>
 8002088:	f8df e100 	ldr.w	lr, [pc, #256]	@ 800218c <HAL_GPIO_Init+0x228>
 800208c:	4570      	cmp	r0, lr
 800208e:	bf0c      	ite	eq
 8002090:	f04f 0e06 	moveq.w	lr, #6
 8002094:	f04f 0e07 	movne.w	lr, #7
 8002098:	fa0e fc0c 	lsl.w	ip, lr, ip
 800209c:	ea47 070c 	orr.w	r7, r7, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020a0:	60af      	str	r7, [r5, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020a2:	4d36      	ldr	r5, [pc, #216]	@ (800217c <HAL_GPIO_Init+0x218>)
 80020a4:	682d      	ldr	r5, [r5, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020a6:	03d6      	lsls	r6, r2, #15
        temp &= ~(iocurrent);
 80020a8:	ea6f 070a 	mvn.w	r7, sl
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 80020ac:	4e33      	ldr	r6, [pc, #204]	@ (800217c <HAL_GPIO_Init+0x218>)
        temp &= ~(iocurrent);
 80020ae:	bf54      	ite	pl
 80020b0:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80020b2:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->IMR1 = temp;
 80020b6:	6035      	str	r5, [r6, #0]

        temp = EXTI->EMR1;
 80020b8:	6875      	ldr	r5, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020ba:	0396      	lsls	r6, r2, #14
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 80020bc:	4e2f      	ldr	r6, [pc, #188]	@ (800217c <HAL_GPIO_Init+0x218>)
        temp &= ~(iocurrent);
 80020be:	bf54      	ite	pl
 80020c0:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80020c2:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->EMR1 = temp;
 80020c6:	6075      	str	r5, [r6, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020c8:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020ca:	02d6      	lsls	r6, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80020cc:	4e2b      	ldr	r6, [pc, #172]	@ (800217c <HAL_GPIO_Init+0x218>)
        temp &= ~(iocurrent);
 80020ce:	bf54      	ite	pl
 80020d0:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80020d2:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->RTSR1 = temp;
 80020d6:	60b5      	str	r5, [r6, #8]

        temp = EXTI->FTSR1;
 80020d8:	68f5      	ldr	r5, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020da:	0292      	lsls	r2, r2, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80020dc:	4a27      	ldr	r2, [pc, #156]	@ (800217c <HAL_GPIO_Init+0x218>)
        temp &= ~(iocurrent);
 80020de:	bf54      	ite	pl
 80020e0:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80020e2:	ea4a 0505 	orrmi.w	r5, sl, r5
        EXTI->FTSR1 = temp;
 80020e6:	60d5      	str	r5, [r2, #12]
      }
    }

    position++;
 80020e8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ea:	fa34 f203 	lsrs.w	r2, r4, r3
 80020ee:	f47f af43 	bne.w	8001f78 <HAL_GPIO_Init+0x14>
  }
}
 80020f2:	b005      	add	sp, #20
 80020f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->ASCR;
 80020f8:	f8d0 902c 	ldr.w	r9, [r0, #44]	@ 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80020fc:	ea29 090e 	bic.w	r9, r9, lr
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002100:	f3c2 0ec0 	ubfx	lr, r2, #3, #1
 8002104:	fa0e fe03 	lsl.w	lr, lr, r3
 8002108:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->ASCR = temp;
 800210c:	f8c0 e02c 	str.w	lr, [r0, #44]	@ 0x2c
      temp = GPIOx->PUPDR;
 8002110:	f8d0 e00c 	ldr.w	lr, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002114:	ea0e 0e07 	and.w	lr, lr, r7
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002118:	ea4e 0e08 	orr.w	lr, lr, r8
      GPIOx->PUPDR = temp;
 800211c:	f8c0 e00c 	str.w	lr, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002120:	2a12      	cmp	r2, #18
 8002122:	f47f af78 	bne.w	8002016 <HAL_GPIO_Init+0xb2>
 8002126:	e75e      	b.n	8001fe6 <HAL_GPIO_Init+0x82>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002128:	f04f 0e03 	mov.w	lr, #3
 800212c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002130:	ea47 070c 	orr.w	r7, r7, ip
 8002134:	e7b4      	b.n	80020a0 <HAL_GPIO_Init+0x13c>
 8002136:	f04f 0e01 	mov.w	lr, #1
 800213a:	fa0e fc0c 	lsl.w	ip, lr, ip
 800213e:	ea47 070c 	orr.w	r7, r7, ip
 8002142:	e7ad      	b.n	80020a0 <HAL_GPIO_Init+0x13c>
 8002144:	f04f 0e02 	mov.w	lr, #2
 8002148:	fa0e fc0c 	lsl.w	ip, lr, ip
 800214c:	ea47 070c 	orr.w	r7, r7, ip
 8002150:	e7a6      	b.n	80020a0 <HAL_GPIO_Init+0x13c>
 8002152:	f04f 0e04 	mov.w	lr, #4
 8002156:	fa0e fc0c 	lsl.w	ip, lr, ip
 800215a:	ea47 070c 	orr.w	r7, r7, ip
 800215e:	e79f      	b.n	80020a0 <HAL_GPIO_Init+0x13c>
 8002160:	f04f 0e05 	mov.w	lr, #5
 8002164:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002168:	ea47 070c 	orr.w	r7, r7, ip
 800216c:	e798      	b.n	80020a0 <HAL_GPIO_Init+0x13c>
 800216e:	bf00      	nop
 8002170:	40021000 	.word	0x40021000
 8002174:	48000400 	.word	0x48000400
 8002178:	48000800 	.word	0x48000800
 800217c:	40010400 	.word	0x40010400
 8002180:	48000c00 	.word	0x48000c00
 8002184:	48001000 	.word	0x48001000
 8002188:	48001400 	.word	0x48001400
 800218c:	48001800 	.word	0x48001800

08002190 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002190:	4b02      	ldr	r3, [pc, #8]	@ (800219c <HAL_PWREx_GetVoltageRange+0xc>)
 8002192:	6818      	ldr	r0, [r3, #0]
#endif
}
 8002194:	f400 60c0 	and.w	r0, r0, #1536	@ 0x600
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40007000 	.word	0x40007000

080021a0 <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021a0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 80021a4:	d00e      	beq.n	80021c4 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021a6:	4a1b      	ldr	r2, [pc, #108]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021a8:	6813      	ldr	r3, [r2, #0]
 80021aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80021b2:	d005      	beq.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x20>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021b4:	6813      	ldr	r3, [r2, #0]
 80021b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80021be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021c0:	2000      	movs	r0, #0
 80021c2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c4:	4913      	ldr	r1, [pc, #76]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80021c6:	680b      	ldr	r3, [r1, #0]
 80021c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021d0:	d0f6      	beq.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x20>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d2:	680b      	ldr	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021d4:	4a10      	ldr	r2, [pc, #64]	@ (8002218 <HAL_PWREx_ControlVoltageScaling+0x78>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021d6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021de:	600b      	str	r3, [r1, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021e0:	6813      	ldr	r3, [r2, #0]
 80021e2:	4a0e      	ldr	r2, [pc, #56]	@ (800221c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80021e4:	2032      	movs	r0, #50	@ 0x32
 80021e6:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ea:	6948      	ldr	r0, [r1, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ec:	fba2 2303 	umull	r2, r3, r2, r3
 80021f0:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f2:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021f4:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f8:	d506      	bpl.n	8002208 <HAL_PWREx_ControlVoltageScaling+0x68>
 80021fa:	e000      	b.n	80021fe <HAL_PWREx_ControlVoltageScaling+0x5e>
 80021fc:	b123      	cbz	r3, 8002208 <HAL_PWREx_ControlVoltageScaling+0x68>
 80021fe:	694a      	ldr	r2, [r1, #20]
 8002200:	0552      	lsls	r2, r2, #21
        wait_loop_index--;
 8002202:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002206:	d4f9      	bmi.n	80021fc <HAL_PWREx_ControlVoltageScaling+0x5c>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002208:	4b02      	ldr	r3, [pc, #8]	@ (8002214 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	055b      	lsls	r3, r3, #21
 800220e:	d5d7      	bpl.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x20>
        return HAL_TIMEOUT;
 8002210:	2003      	movs	r0, #3
}
 8002212:	4770      	bx	lr
 8002214:	40007000 	.word	0x40007000
 8002218:	20006e74 	.word	0x20006e74
 800221c:	431bde83 	.word	0x431bde83

08002220 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002220:	b530      	push	{r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002222:	4d20      	ldr	r5, [pc, #128]	@ (80022a4 <RCC_SetFlashLatencyFromMSIRange+0x84>)
 8002224:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002226:	00db      	lsls	r3, r3, #3
{
 8002228:	b083      	sub	sp, #12
 800222a:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800222c:	d51a      	bpl.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x44>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800222e:	f7ff ffaf 	bl	8002190 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002232:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8002236:	d027      	beq.n	8002288 <RCC_SetFlashLatencyFromMSIRange+0x68>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002238:	2c80      	cmp	r4, #128	@ 0x80
 800223a:	d82c      	bhi.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x76>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800223c:	d02f      	beq.n	800229e <RCC_SetFlashLatencyFromMSIRange+0x7e>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 800223e:	f1a4 0470 	sub.w	r4, r4, #112	@ 0x70
 8002242:	fab4 f484 	clz	r4, r4
 8002246:	0964      	lsrs	r4, r4, #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002248:	4917      	ldr	r1, [pc, #92]	@ (80022a8 <RCC_SetFlashLatencyFromMSIRange+0x88>)
 800224a:	680b      	ldr	r3, [r1, #0]
 800224c:	f023 0307 	bic.w	r3, r3, #7
 8002250:	4323      	orrs	r3, r4
 8002252:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002254:	6808      	ldr	r0, [r1, #0]
 8002256:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800225a:	1b00      	subs	r0, r0, r4
 800225c:	bf18      	it	ne
 800225e:	2001      	movne	r0, #1
 8002260:	b003      	add	sp, #12
 8002262:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002266:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800226a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800226c:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 800226e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002272:	9301      	str	r3, [sp, #4]
 8002274:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002276:	f7ff ff8b 	bl	8002190 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800227a:	6dab      	ldr	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800227c:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
    __HAL_RCC_PWR_CLK_DISABLE();
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002284:	65ab      	str	r3, [r5, #88]	@ 0x58
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002286:	d1d7      	bne.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x18>
    if(msirange > RCC_MSIRANGE_8)
 8002288:	2c80      	cmp	r4, #128	@ 0x80
 800228a:	d906      	bls.n	800229a <RCC_SetFlashLatencyFromMSIRange+0x7a>
        latency = FLASH_LATENCY_2; /* 2WS */
 800228c:	2ca1      	cmp	r4, #161	@ 0xa1
 800228e:	bf34      	ite	cc
 8002290:	2401      	movcc	r4, #1
 8002292:	2402      	movcs	r4, #2
 8002294:	e7d8      	b.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x28>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002296:	2403      	movs	r4, #3
 8002298:	e7d6      	b.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x28>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800229a:	2400      	movs	r4, #0
 800229c:	e7d4      	b.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x28>
        latency = FLASH_LATENCY_2; /* 2WS */
 800229e:	2402      	movs	r4, #2
 80022a0:	e7d2      	b.n	8002248 <RCC_SetFlashLatencyFromMSIRange+0x28>
 80022a2:	bf00      	nop
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40022000 	.word	0x40022000

080022ac <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ac:	4a28      	ldr	r2, [pc, #160]	@ (8002350 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022ae:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022b0:	68d2      	ldr	r2, [r2, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022b2:	f013 030c 	ands.w	r3, r3, #12
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x18>
 80022b8:	2b0c      	cmp	r3, #12
 80022ba:	d035      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x7c>
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022bc:	2b04      	cmp	r3, #4
 80022be:	d141      	bne.n	8002344 <HAL_RCC_GetSysClockFreq+0x98>
    sysclockfreq = HSI_VALUE;
 80022c0:	4824      	ldr	r0, [pc, #144]	@ (8002354 <HAL_RCC_GetSysClockFreq+0xa8>)
 80022c2:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022c4:	4a22      	ldr	r2, [pc, #136]	@ (8002350 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022c6:	6811      	ldr	r1, [r2, #0]
 80022c8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022ca:	bf54      	ite	pl
 80022cc:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	@ 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022d0:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 80022d2:	4921      	ldr	r1, [pc, #132]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022d4:	bf54      	ite	pl
 80022d6:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022da:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 80022de:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022e2:	b303      	cbz	r3, 8002326 <HAL_RCC_GetSysClockFreq+0x7a>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	d11d      	bne.n	8002324 <HAL_RCC_GetSysClockFreq+0x78>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022e8:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d025      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x94>
 80022f4:	4a19      	ldr	r2, [pc, #100]	@ (800235c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	bf08      	it	eq
 80022fa:	4610      	moveq	r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022fc:	4b14      	ldr	r3, [pc, #80]	@ (8002350 <HAL_RCC_GetSysClockFreq+0xa4>)
 80022fe:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002300:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002308:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800230c:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002310:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002312:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002316:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002318:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800231a:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 800231e:	fbb2 f0f3 	udiv	r0, r2, r3
 8002322:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002324:	2000      	movs	r0, #0
}
 8002326:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002328:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800232c:	2a01      	cmp	r2, #1
 800232e:	d0c9      	beq.n	80022c4 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002330:	4b07      	ldr	r3, [pc, #28]	@ (8002350 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8002338:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800233a:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 800233e:	d1d9      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0x48>
      pllvco = HSI_VALUE;
 8002340:	4804      	ldr	r0, [pc, #16]	@ (8002354 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002342:	e7db      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0x50>
    sysclockfreq = HSE_VALUE;
 8002344:	2b08      	cmp	r3, #8
 8002346:	4805      	ldr	r0, [pc, #20]	@ (800235c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002348:	bf18      	it	ne
 800234a:	2000      	movne	r0, #0
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	00f42400 	.word	0x00f42400
 8002358:	08014844 	.word	0x08014844
 800235c:	007a1200 	.word	0x007a1200

08002360 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002360:	2800      	cmp	r0, #0
 8002362:	f000 8208 	beq.w	8002776 <HAL_RCC_OscConfig+0x416>
{
 8002366:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236a:	4a8a      	ldr	r2, [pc, #552]	@ (8002594 <HAL_RCC_OscConfig+0x234>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800236c:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800236e:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002370:	68d6      	ldr	r6, [r2, #12]
 8002372:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002374:	06d8      	lsls	r0, r3, #27
{
 8002376:	b083      	sub	sp, #12
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002378:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800237c:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002380:	d52e      	bpl.n	80023e0 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002382:	2d00      	cmp	r5, #0
 8002384:	f000 810d 	beq.w	80025a2 <HAL_RCC_OscConfig+0x242>
 8002388:	2d0c      	cmp	r5, #12
 800238a:	f000 8107 	beq.w	800259c <HAL_RCC_OscConfig+0x23c>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800238e:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8002390:	4f80      	ldr	r7, [pc, #512]	@ (8002594 <HAL_RCC_OscConfig+0x234>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002392:	2b00      	cmp	r3, #0
 8002394:	f000 817e 	beq.w	8002694 <HAL_RCC_OscConfig+0x334>
        __HAL_RCC_MSI_ENABLE();
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f043 0301 	orr.w	r3, r3, #1
 800239e:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 80023a0:	f7ff fd60 	bl	8001e64 <HAL_GetTick>
 80023a4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023a6:	e006      	b.n	80023b6 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023a8:	f7ff fd5c 	bl	8001e64 <HAL_GetTick>
 80023ac:	eba0 0008 	sub.w	r0, r0, r8
 80023b0:	2802      	cmp	r0, #2
 80023b2:	f200 817f 	bhi.w	80026b4 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	079b      	lsls	r3, r3, #30
 80023ba:	d5f5      	bpl.n	80023a8 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f043 0308 	orr.w	r3, r3, #8
 80023c2:	603b      	str	r3, [r7, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6a22      	ldr	r2, [r4, #32]
 80023c8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80023cc:	4313      	orrs	r3, r2
 80023ce:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69e2      	ldr	r2, [r4, #28]
 80023d4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023d8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80023dc:	607b      	str	r3, [r7, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	07d9      	lsls	r1, r3, #31
 80023e2:	f100 80ad 	bmi.w	8002540 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023e6:	0799      	lsls	r1, r3, #30
 80023e8:	d523      	bpl.n	8002432 <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023ea:	2d04      	cmp	r5, #4
 80023ec:	f000 8142 	beq.w	8002674 <HAL_RCC_OscConfig+0x314>
 80023f0:	2d0c      	cmp	r5, #12
 80023f2:	f000 813c 	beq.w	800266e <HAL_RCC_OscConfig+0x30e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023f6:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80023f8:	4e66      	ldr	r6, [pc, #408]	@ (8002594 <HAL_RCC_OscConfig+0x234>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	f000 8175 	beq.w	80026ea <HAL_RCC_OscConfig+0x38a>
        __HAL_RCC_HSI_ENABLE();
 8002400:	6833      	ldr	r3, [r6, #0]
 8002402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002406:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002408:	f7ff fd2c 	bl	8001e64 <HAL_GetTick>
 800240c:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240e:	e005      	b.n	800241c <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002410:	f7ff fd28 	bl	8001e64 <HAL_GetTick>
 8002414:	1bc0      	subs	r0, r0, r7
 8002416:	2802      	cmp	r0, #2
 8002418:	f200 814c 	bhi.w	80026b4 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800241c:	6833      	ldr	r3, [r6, #0]
 800241e:	055b      	lsls	r3, r3, #21
 8002420:	d5f6      	bpl.n	8002410 <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002422:	6873      	ldr	r3, [r6, #4]
 8002424:	6922      	ldr	r2, [r4, #16]
 8002426:	f023 53f8 	bic.w	r3, r3, #520093696	@ 0x1f000000
 800242a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800242e:	6073      	str	r3, [r6, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002430:	6823      	ldr	r3, [r4, #0]
 8002432:	0719      	lsls	r1, r3, #28
 8002434:	d519      	bpl.n	800246a <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002436:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002438:	4e56      	ldr	r6, [pc, #344]	@ (8002594 <HAL_RCC_OscConfig+0x234>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 8103 	beq.w	8002646 <HAL_RCC_OscConfig+0x2e6>
      __HAL_RCC_LSI_ENABLE();
 8002440:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800244c:	f7ff fd0a 	bl	8001e64 <HAL_GetTick>
 8002450:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002452:	e005      	b.n	8002460 <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002454:	f7ff fd06 	bl	8001e64 <HAL_GetTick>
 8002458:	1bc0      	subs	r0, r0, r7
 800245a:	2802      	cmp	r0, #2
 800245c:	f200 812a 	bhi.w	80026b4 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002460:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002464:	079a      	lsls	r2, r3, #30
 8002466:	d5f5      	bpl.n	8002454 <HAL_RCC_OscConfig+0xf4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	0758      	lsls	r0, r3, #29
 800246c:	d53e      	bpl.n	80024ec <HAL_RCC_OscConfig+0x18c>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800246e:	4b49      	ldr	r3, [pc, #292]	@ (8002594 <HAL_RCC_OscConfig+0x234>)
 8002470:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002472:	00d1      	lsls	r1, r2, #3
 8002474:	f100 8137 	bmi.w	80026e6 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002478:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800247a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800247e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800248a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248c:	4f42      	ldr	r7, [pc, #264]	@ (8002598 <HAL_RCC_OscConfig+0x238>)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	05da      	lsls	r2, r3, #23
 8002492:	f140 8172 	bpl.w	800277a <HAL_RCC_OscConfig+0x41a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002496:	68a3      	ldr	r3, [r4, #8]
 8002498:	2b01      	cmp	r3, #1
 800249a:	f000 8138 	beq.w	800270e <HAL_RCC_OscConfig+0x3ae>
 800249e:	2b05      	cmp	r3, #5
 80024a0:	f000 81f9 	beq.w	8002896 <HAL_RCC_OscConfig+0x536>
 80024a4:	4f3b      	ldr	r7, [pc, #236]	@ (8002594 <HAL_RCC_OscConfig+0x234>)
 80024a6:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80024aa:	f022 0201 	bic.w	r2, r2, #1
 80024ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80024b2:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80024b6:	f022 0204 	bic.w	r2, r2, #4
 80024ba:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 812c 	bne.w	800271c <HAL_RCC_OscConfig+0x3bc>
      tickstart = HAL_GetTick();
 80024c4:	f7ff fcce 	bl	8001e64 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f241 3988 	movw	r9, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80024cc:	4680      	mov	r8, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024ce:	e006      	b.n	80024de <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d0:	f7ff fcc8 	bl	8001e64 <HAL_GetTick>
 80024d4:	eba0 0008 	sub.w	r0, r0, r8
 80024d8:	4548      	cmp	r0, r9
 80024da:	f200 80eb 	bhi.w	80026b4 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80024e2:	0799      	lsls	r1, r3, #30
 80024e4:	d4f4      	bmi.n	80024d0 <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 80024e6:	2e00      	cmp	r6, #0
 80024e8:	f040 815e 	bne.w	80027a8 <HAL_RCC_OscConfig+0x448>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80024ee:	b31b      	cbz	r3, 8002538 <HAL_RCC_OscConfig+0x1d8>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	f000 8172 	beq.w	80027da <HAL_RCC_OscConfig+0x47a>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80024f6:	2d0c      	cmp	r5, #12
 80024f8:	f000 8095 	beq.w	8002626 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 80024fc:	4b25      	ldr	r3, [pc, #148]	@ (8002594 <HAL_RCC_OscConfig+0x234>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8002504:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	f012 5f20 	tst.w	r2, #671088640	@ 0x28000000
 800250c:	f000 8147 	beq.w	800279e <HAL_RCC_OscConfig+0x43e>
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002510:	4c20      	ldr	r4, [pc, #128]	@ (8002594 <HAL_RCC_OscConfig+0x234>)
 8002512:	68e3      	ldr	r3, [r4, #12]
 8002514:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8002518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800251c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800251e:	f7ff fca1 	bl	8001e64 <HAL_GetTick>
 8002522:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002524:	e005      	b.n	8002532 <HAL_RCC_OscConfig+0x1d2>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002526:	f7ff fc9d 	bl	8001e64 <HAL_GetTick>
 800252a:	1b40      	subs	r0, r0, r5
 800252c:	2802      	cmp	r0, #2
 800252e:	f200 80c1 	bhi.w	80026b4 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002532:	6823      	ldr	r3, [r4, #0]
 8002534:	019b      	lsls	r3, r3, #6
 8002536:	d4f6      	bmi.n	8002526 <HAL_RCC_OscConfig+0x1c6>
  return HAL_OK;
 8002538:	2000      	movs	r0, #0
}
 800253a:	b003      	add	sp, #12
 800253c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002540:	2d08      	cmp	r5, #8
 8002542:	d076      	beq.n	8002632 <HAL_RCC_OscConfig+0x2d2>
 8002544:	2d0c      	cmp	r5, #12
 8002546:	d072      	beq.n	800262e <HAL_RCC_OscConfig+0x2ce>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002548:	6863      	ldr	r3, [r4, #4]
 800254a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800254e:	f000 80b5 	beq.w	80026bc <HAL_RCC_OscConfig+0x35c>
 8002552:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002556:	f000 8133 	beq.w	80027c0 <HAL_RCC_OscConfig+0x460>
 800255a:	4f0e      	ldr	r7, [pc, #56]	@ (8002594 <HAL_RCC_OscConfig+0x234>)
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002562:	603a      	str	r2, [r7, #0]
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800256a:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800256c:	2b00      	cmp	r3, #0
 800256e:	f040 80aa 	bne.w	80026c6 <HAL_RCC_OscConfig+0x366>
        tickstart = HAL_GetTick();
 8002572:	f7ff fc77 	bl	8001e64 <HAL_GetTick>
 8002576:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002578:	e006      	b.n	8002588 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800257a:	f7ff fc73 	bl	8001e64 <HAL_GetTick>
 800257e:	eba0 0008 	sub.w	r0, r0, r8
 8002582:	2864      	cmp	r0, #100	@ 0x64
 8002584:	f200 8096 	bhi.w	80026b4 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	0398      	lsls	r0, r3, #14
 800258c:	d4f5      	bmi.n	800257a <HAL_RCC_OscConfig+0x21a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	e729      	b.n	80023e6 <HAL_RCC_OscConfig+0x86>
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	40007000 	.word	0x40007000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800259c:	2e01      	cmp	r6, #1
 800259e:	f47f aef6 	bne.w	800238e <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025a2:	4b9b      	ldr	r3, [pc, #620]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	0799      	lsls	r1, r3, #30
 80025a8:	d43a      	bmi.n	8002620 <HAL_RCC_OscConfig+0x2c0>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025aa:	4b99      	ldr	r3, [pc, #612]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 80025ac:	6a20      	ldr	r0, [r4, #32]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	0712      	lsls	r2, r2, #28
 80025b2:	bf56      	itet	pl
 80025b4:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	@ 0x94
 80025b8:	681b      	ldrmi	r3, [r3, #0]
 80025ba:	091b      	lsrpl	r3, r3, #4
 80025bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025c0:	4298      	cmp	r0, r3
 80025c2:	f200 80c0 	bhi.w	8002746 <HAL_RCC_OscConfig+0x3e6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025c6:	4b92      	ldr	r3, [pc, #584]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	f042 0208 	orr.w	r2, r2, #8
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80025d6:	4302      	orrs	r2, r0
 80025d8:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	69e1      	ldr	r1, [r4, #28]
 80025de:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80025e2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025e6:	605a      	str	r2, [r3, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025e8:	2d00      	cmp	r5, #0
 80025ea:	f000 80e3 	beq.w	80027b4 <HAL_RCC_OscConfig+0x454>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ee:	f7ff fe5d 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 80025f2:	4b87      	ldr	r3, [pc, #540]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 80025f4:	4a87      	ldr	r2, [pc, #540]	@ (8002814 <HAL_RCC_OscConfig+0x4b4>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80025fc:	5cd3      	ldrb	r3, [r2, r3]
        status = HAL_InitTick(uwTickPrio);
 80025fe:	4a86      	ldr	r2, [pc, #536]	@ (8002818 <HAL_RCC_OscConfig+0x4b8>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8002608:	6810      	ldr	r0, [r2, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800260a:	4a84      	ldr	r2, [pc, #528]	@ (800281c <HAL_RCC_OscConfig+0x4bc>)
 800260c:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800260e:	f7ff fbe7 	bl	8001de0 <HAL_InitTick>
        if(status != HAL_OK)
 8002612:	2800      	cmp	r0, #0
 8002614:	d191      	bne.n	800253a <HAL_RCC_OscConfig+0x1da>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002616:	6823      	ldr	r3, [r4, #0]
 8002618:	07d9      	lsls	r1, r3, #31
 800261a:	f57f aee4 	bpl.w	80023e6 <HAL_RCC_OscConfig+0x86>
 800261e:	e78f      	b.n	8002540 <HAL_RCC_OscConfig+0x1e0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002620:	69a3      	ldr	r3, [r4, #24]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1c1      	bne.n	80025aa <HAL_RCC_OscConfig+0x24a>
    return HAL_ERROR;
 8002626:	2001      	movs	r0, #1
}
 8002628:	b003      	add	sp, #12
 800262a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800262e:	2e03      	cmp	r6, #3
 8002630:	d18a      	bne.n	8002548 <HAL_RCC_OscConfig+0x1e8>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002632:	4a77      	ldr	r2, [pc, #476]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 8002634:	6812      	ldr	r2, [r2, #0]
 8002636:	0392      	lsls	r2, r2, #14
 8002638:	f57f aed5 	bpl.w	80023e6 <HAL_RCC_OscConfig+0x86>
 800263c:	6862      	ldr	r2, [r4, #4]
 800263e:	2a00      	cmp	r2, #0
 8002640:	f47f aed1 	bne.w	80023e6 <HAL_RCC_OscConfig+0x86>
 8002644:	e7ef      	b.n	8002626 <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_LSI_DISABLE();
 8002646:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 800264a:	f023 0301 	bic.w	r3, r3, #1
 800264e:	f8c6 3094 	str.w	r3, [r6, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8002652:	f7ff fc07 	bl	8001e64 <HAL_GetTick>
 8002656:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002658:	e004      	b.n	8002664 <HAL_RCC_OscConfig+0x304>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265a:	f7ff fc03 	bl	8001e64 <HAL_GetTick>
 800265e:	1bc0      	subs	r0, r0, r7
 8002660:	2802      	cmp	r0, #2
 8002662:	d827      	bhi.n	80026b4 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002664:	f8d6 3094 	ldr.w	r3, [r6, #148]	@ 0x94
 8002668:	079b      	lsls	r3, r3, #30
 800266a:	d4f6      	bmi.n	800265a <HAL_RCC_OscConfig+0x2fa>
 800266c:	e6fc      	b.n	8002468 <HAL_RCC_OscConfig+0x108>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800266e:	2e02      	cmp	r6, #2
 8002670:	f47f aec1 	bne.w	80023f6 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002674:	4a66      	ldr	r2, [pc, #408]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	0552      	lsls	r2, r2, #21
 800267a:	d502      	bpl.n	8002682 <HAL_RCC_OscConfig+0x322>
 800267c:	68e2      	ldr	r2, [r4, #12]
 800267e:	2a00      	cmp	r2, #0
 8002680:	d0d1      	beq.n	8002626 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4963      	ldr	r1, [pc, #396]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 8002684:	6920      	ldr	r0, [r4, #16]
 8002686:	684a      	ldr	r2, [r1, #4]
 8002688:	f022 52f8 	bic.w	r2, r2, #520093696	@ 0x1f000000
 800268c:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002690:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002692:	e6ce      	b.n	8002432 <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	f023 0301 	bic.w	r3, r3, #1
 800269a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 800269c:	f7ff fbe2 	bl	8001e64 <HAL_GetTick>
 80026a0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	0798      	lsls	r0, r3, #30
 80026a6:	d5b6      	bpl.n	8002616 <HAL_RCC_OscConfig+0x2b6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a8:	f7ff fbdc 	bl	8001e64 <HAL_GetTick>
 80026ac:	eba0 0008 	sub.w	r0, r0, r8
 80026b0:	2802      	cmp	r0, #2
 80026b2:	d9f6      	bls.n	80026a2 <HAL_RCC_OscConfig+0x342>
            return HAL_TIMEOUT;
 80026b4:	2003      	movs	r0, #3
}
 80026b6:	b003      	add	sp, #12
 80026b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026bc:	4a54      	ldr	r2, [pc, #336]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 80026be:	6813      	ldr	r3, [r2, #0]
 80026c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80026c6:	f7ff fbcd 	bl	8001e64 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ca:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8002810 <HAL_RCC_OscConfig+0x4b0>
        tickstart = HAL_GetTick();
 80026ce:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026d0:	e004      	b.n	80026dc <HAL_RCC_OscConfig+0x37c>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d2:	f7ff fbc7 	bl	8001e64 <HAL_GetTick>
 80026d6:	1bc0      	subs	r0, r0, r7
 80026d8:	2864      	cmp	r0, #100	@ 0x64
 80026da:	d8eb      	bhi.n	80026b4 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026dc:	f8d8 3000 	ldr.w	r3, [r8]
 80026e0:	039b      	lsls	r3, r3, #14
 80026e2:	d5f6      	bpl.n	80026d2 <HAL_RCC_OscConfig+0x372>
 80026e4:	e753      	b.n	800258e <HAL_RCC_OscConfig+0x22e>
    FlagStatus       pwrclkchanged = RESET;
 80026e6:	2600      	movs	r6, #0
 80026e8:	e6d0      	b.n	800248c <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 80026ea:	6833      	ldr	r3, [r6, #0]
 80026ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026f0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80026f2:	f7ff fbb7 	bl	8001e64 <HAL_GetTick>
 80026f6:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026f8:	e004      	b.n	8002704 <HAL_RCC_OscConfig+0x3a4>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7ff fbb3 	bl	8001e64 <HAL_GetTick>
 80026fe:	1bc0      	subs	r0, r0, r7
 8002700:	2802      	cmp	r0, #2
 8002702:	d8d7      	bhi.n	80026b4 <HAL_RCC_OscConfig+0x354>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002704:	6833      	ldr	r3, [r6, #0]
 8002706:	0558      	lsls	r0, r3, #21
 8002708:	d4f7      	bmi.n	80026fa <HAL_RCC_OscConfig+0x39a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270a:	6823      	ldr	r3, [r4, #0]
 800270c:	e691      	b.n	8002432 <HAL_RCC_OscConfig+0xd2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800270e:	4a40      	ldr	r2, [pc, #256]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 8002710:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 800271c:	f7ff fba2 	bl	8001e64 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002720:	f8df 80ec 	ldr.w	r8, [pc, #236]	@ 8002810 <HAL_RCC_OscConfig+0x4b0>
      tickstart = HAL_GetTick();
 8002724:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f241 3988 	movw	r9, #5000	@ 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272a:	e004      	b.n	8002736 <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7ff fb9a 	bl	8001e64 <HAL_GetTick>
 8002730:	1bc0      	subs	r0, r0, r7
 8002732:	4548      	cmp	r0, r9
 8002734:	d8be      	bhi.n	80026b4 <HAL_RCC_OscConfig+0x354>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002736:	f8d8 3090 	ldr.w	r3, [r8, #144]	@ 0x90
 800273a:	0798      	lsls	r0, r3, #30
 800273c:	d5f6      	bpl.n	800272c <HAL_RCC_OscConfig+0x3cc>
    if(pwrclkchanged == SET)
 800273e:	2e00      	cmp	r6, #0
 8002740:	f43f aed4 	beq.w	80024ec <HAL_RCC_OscConfig+0x18c>
 8002744:	e030      	b.n	80027a8 <HAL_RCC_OscConfig+0x448>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002746:	f7ff fd6b 	bl	8002220 <RCC_SetFlashLatencyFromMSIRange>
 800274a:	2800      	cmp	r0, #0
 800274c:	f47f af6b 	bne.w	8002626 <HAL_RCC_OscConfig+0x2c6>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002750:	4b2f      	ldr	r3, [pc, #188]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	f042 0208 	orr.w	r2, r2, #8
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	6a21      	ldr	r1, [r4, #32]
 800275e:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002762:	430a      	orrs	r2, r1
 8002764:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	69e1      	ldr	r1, [r4, #28]
 800276a:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 800276e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002772:	605a      	str	r2, [r3, #4]
 8002774:	e73b      	b.n	80025ee <HAL_RCC_OscConfig+0x28e>
    return HAL_ERROR;
 8002776:	2001      	movs	r0, #1
}
 8002778:	4770      	bx	lr
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002780:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002782:	f7ff fb6f 	bl	8001e64 <HAL_GetTick>
 8002786:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	05db      	lsls	r3, r3, #23
 800278c:	f53f ae83 	bmi.w	8002496 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002790:	f7ff fb68 	bl	8001e64 <HAL_GetTick>
 8002794:	eba0 0008 	sub.w	r0, r0, r8
 8002798:	2802      	cmp	r0, #2
 800279a:	d9f5      	bls.n	8002788 <HAL_RCC_OscConfig+0x428>
 800279c:	e78a      	b.n	80026b4 <HAL_RCC_OscConfig+0x354>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800279e:	68da      	ldr	r2, [r3, #12]
 80027a0:	f022 0203 	bic.w	r2, r2, #3
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	e6b3      	b.n	8002510 <HAL_RCC_OscConfig+0x1b0>
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a8:	4a19      	ldr	r2, [pc, #100]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 80027aa:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80027ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80027b2:	e69b      	b.n	80024ec <HAL_RCC_OscConfig+0x18c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027b4:	f7ff fd34 	bl	8002220 <RCC_SetFlashLatencyFromMSIRange>
 80027b8:	2800      	cmp	r0, #0
 80027ba:	f43f af18 	beq.w	80025ee <HAL_RCC_OscConfig+0x28e>
 80027be:	e732      	b.n	8002626 <HAL_RCC_OscConfig+0x2c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80027c4:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80027d6:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027d8:	e775      	b.n	80026c6 <HAL_RCC_OscConfig+0x366>
      pll_config = RCC->PLLCFGR;
 80027da:	4e0d      	ldr	r6, [pc, #52]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027dc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
      pll_config = RCC->PLLCFGR;
 80027de:	68f3      	ldr	r3, [r6, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e0:	f003 0103 	and.w	r1, r3, #3
 80027e4:	4291      	cmp	r1, r2
 80027e6:	d064      	beq.n	80028b2 <HAL_RCC_OscConfig+0x552>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027e8:	2d0c      	cmp	r5, #12
 80027ea:	f43f af1c 	beq.w	8002626 <HAL_RCC_OscConfig+0x2c6>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80027ee:	4d08      	ldr	r5, [pc, #32]	@ (8002810 <HAL_RCC_OscConfig+0x4b0>)
 80027f0:	682b      	ldr	r3, [r5, #0]
 80027f2:	015a      	lsls	r2, r3, #5
 80027f4:	f53f af17 	bmi.w	8002626 <HAL_RCC_OscConfig+0x2c6>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027f8:	682b      	ldr	r3, [r5, #0]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	f53f af13 	bmi.w	8002626 <HAL_RCC_OscConfig+0x2c6>
            __HAL_RCC_PLL_DISABLE();
 8002800:	682b      	ldr	r3, [r5, #0]
 8002802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002806:	602b      	str	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8002808:	f7ff fb2c 	bl	8001e64 <HAL_GetTick>
 800280c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280e:	e00d      	b.n	800282c <HAL_RCC_OscConfig+0x4cc>
 8002810:	40021000 	.word	0x40021000
 8002814:	0801487c 	.word	0x0801487c
 8002818:	20006e7c 	.word	0x20006e7c
 800281c:	20006e74 	.word	0x20006e74
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002820:	f7ff fb20 	bl	8001e64 <HAL_GetTick>
 8002824:	1b80      	subs	r0, r0, r6
 8002826:	2802      	cmp	r0, #2
 8002828:	f63f af44 	bhi.w	80026b4 <HAL_RCC_OscConfig+0x354>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800282c:	682b      	ldr	r3, [r5, #0]
 800282e:	019f      	lsls	r7, r3, #6
 8002830:	d4f6      	bmi.n	8002820 <HAL_RCC_OscConfig+0x4c0>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002832:	68e9      	ldr	r1, [r5, #12]
 8002834:	4b3f      	ldr	r3, [pc, #252]	@ (8002934 <HAL_RCC_OscConfig+0x5d4>)
 8002836:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002838:	4e3f      	ldr	r6, [pc, #252]	@ (8002938 <HAL_RCC_OscConfig+0x5d8>)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800283a:	400b      	ands	r3, r1
 800283c:	4313      	orrs	r3, r2
 800283e:	e9d4 210c 	ldrd	r2, r1, [r4, #48]	@ 0x30
 8002842:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002846:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	@ 0x38
 800284a:	3a01      	subs	r2, #1
 800284c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002850:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002852:	0900      	lsrs	r0, r0, #4
 8002854:	0849      	lsrs	r1, r1, #1
 8002856:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 800285a:	3901      	subs	r1, #1
 800285c:	0852      	lsrs	r2, r2, #1
 800285e:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002862:	3a01      	subs	r2, #1
 8002864:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002868:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 800286a:	682b      	ldr	r3, [r5, #0]
 800286c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002870:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002872:	68eb      	ldr	r3, [r5, #12]
 8002874:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002878:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 800287a:	f7ff faf3 	bl	8001e64 <HAL_GetTick>
 800287e:	4604      	mov	r4, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002880:	e005      	b.n	800288e <HAL_RCC_OscConfig+0x52e>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002882:	f7ff faef 	bl	8001e64 <HAL_GetTick>
 8002886:	1b00      	subs	r0, r0, r4
 8002888:	2802      	cmp	r0, #2
 800288a:	f63f af13 	bhi.w	80026b4 <HAL_RCC_OscConfig+0x354>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288e:	6833      	ldr	r3, [r6, #0]
 8002890:	0198      	lsls	r0, r3, #6
 8002892:	d5f6      	bpl.n	8002882 <HAL_RCC_OscConfig+0x522>
 8002894:	e650      	b.n	8002538 <HAL_RCC_OscConfig+0x1d8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002896:	4b28      	ldr	r3, [pc, #160]	@ (8002938 <HAL_RCC_OscConfig+0x5d8>)
 8002898:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800289c:	f042 0204 	orr.w	r2, r2, #4
 80028a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80028a4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b0:	e734      	b.n	800271c <HAL_RCC_OscConfig+0x3bc>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028b2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80028b4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80028b8:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ba:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80028be:	d193      	bne.n	80027e8 <HAL_RCC_OscConfig+0x488>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80028c2:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028c6:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80028ca:	d18d      	bne.n	80027e8 <HAL_RCC_OscConfig+0x488>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028cc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80028ce:	3a07      	subs	r2, #7
 80028d0:	f403 3100 	and.w	r1, r3, #131072	@ 0x20000
 80028d4:	bf18      	it	ne
 80028d6:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028d8:	4291      	cmp	r1, r2
 80028da:	d185      	bne.n	80027e8 <HAL_RCC_OscConfig+0x488>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028dc:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80028de:	0852      	lsrs	r2, r2, #1
 80028e0:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80028e4:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80028e6:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80028ea:	f47f af7d 	bne.w	80027e8 <HAL_RCC_OscConfig+0x488>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028ee:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80028f0:	0852      	lsrs	r2, r2, #1
 80028f2:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80028f6:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f8:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80028fc:	f47f af74 	bne.w	80027e8 <HAL_RCC_OscConfig+0x488>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002900:	6833      	ldr	r3, [r6, #0]
 8002902:	0199      	lsls	r1, r3, #6
 8002904:	f53f ae18 	bmi.w	8002538 <HAL_RCC_OscConfig+0x1d8>
          __HAL_RCC_PLL_ENABLE();
 8002908:	6833      	ldr	r3, [r6, #0]
 800290a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800290e:	6033      	str	r3, [r6, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002910:	68f3      	ldr	r3, [r6, #12]
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002916:	60f3      	str	r3, [r6, #12]
          tickstart = HAL_GetTick();
 8002918:	f7ff faa4 	bl	8001e64 <HAL_GetTick>
 800291c:	4604      	mov	r4, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	e005      	b.n	800292c <HAL_RCC_OscConfig+0x5cc>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7ff faa0 	bl	8001e64 <HAL_GetTick>
 8002924:	1b03      	subs	r3, r0, r4
 8002926:	2b02      	cmp	r3, #2
 8002928:	f63f aec4 	bhi.w	80026b4 <HAL_RCC_OscConfig+0x354>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292c:	6833      	ldr	r3, [r6, #0]
 800292e:	019a      	lsls	r2, r3, #6
 8002930:	d5f6      	bpl.n	8002920 <HAL_RCC_OscConfig+0x5c0>
 8002932:	e601      	b.n	8002538 <HAL_RCC_OscConfig+0x1d8>
 8002934:	f99d808c 	.word	0xf99d808c
 8002938:	40021000 	.word	0x40021000

0800293c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800293c:	2800      	cmp	r0, #0
 800293e:	f000 8081 	beq.w	8002a44 <HAL_RCC_ClockConfig+0x108>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002942:	4a45      	ldr	r2, [pc, #276]	@ (8002a58 <HAL_RCC_ClockConfig+0x11c>)
 8002944:	6813      	ldr	r3, [r2, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	428b      	cmp	r3, r1
{
 800294c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002950:	460d      	mov	r5, r1
 8002952:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002954:	d20c      	bcs.n	8002970 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002956:	6813      	ldr	r3, [r2, #0]
 8002958:	f023 0307 	bic.w	r3, r3, #7
 800295c:	430b      	orrs	r3, r1
 800295e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002960:	6813      	ldr	r3, [r2, #0]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	428b      	cmp	r3, r1
 8002968:	d002      	beq.n	8002970 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800296a:	2001      	movs	r0, #1
}
 800296c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002970:	6823      	ldr	r3, [r4, #0]
 8002972:	07da      	lsls	r2, r3, #31
 8002974:	d43f      	bmi.n	80029f6 <HAL_RCC_ClockConfig+0xba>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002976:	0799      	lsls	r1, r3, #30
 8002978:	d506      	bpl.n	8002988 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800297a:	4938      	ldr	r1, [pc, #224]	@ (8002a5c <HAL_RCC_ClockConfig+0x120>)
 800297c:	68a0      	ldr	r0, [r4, #8]
 800297e:	688a      	ldr	r2, [r1, #8]
 8002980:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002984:	4302      	orrs	r2, r0
 8002986:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002988:	4933      	ldr	r1, [pc, #204]	@ (8002a58 <HAL_RCC_ClockConfig+0x11c>)
 800298a:	680a      	ldr	r2, [r1, #0]
 800298c:	f002 0207 	and.w	r2, r2, #7
 8002990:	42aa      	cmp	r2, r5
 8002992:	d909      	bls.n	80029a8 <HAL_RCC_ClockConfig+0x6c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002994:	680a      	ldr	r2, [r1, #0]
 8002996:	f022 0207 	bic.w	r2, r2, #7
 800299a:	432a      	orrs	r2, r5
 800299c:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800299e:	680a      	ldr	r2, [r1, #0]
 80029a0:	f002 0207 	and.w	r2, r2, #7
 80029a4:	42aa      	cmp	r2, r5
 80029a6:	d1e0      	bne.n	800296a <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a8:	075a      	lsls	r2, r3, #29
 80029aa:	d506      	bpl.n	80029ba <HAL_RCC_ClockConfig+0x7e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ac:	492b      	ldr	r1, [pc, #172]	@ (8002a5c <HAL_RCC_ClockConfig+0x120>)
 80029ae:	68e0      	ldr	r0, [r4, #12]
 80029b0:	688a      	ldr	r2, [r1, #8]
 80029b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80029b6:	4302      	orrs	r2, r0
 80029b8:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ba:	071b      	lsls	r3, r3, #28
 80029bc:	d507      	bpl.n	80029ce <HAL_RCC_ClockConfig+0x92>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029be:	4a27      	ldr	r2, [pc, #156]	@ (8002a5c <HAL_RCC_ClockConfig+0x120>)
 80029c0:	6921      	ldr	r1, [r4, #16]
 80029c2:	6893      	ldr	r3, [r2, #8]
 80029c4:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80029c8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80029cc:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029ce:	f7ff fc6d 	bl	80022ac <HAL_RCC_GetSysClockFreq>
 80029d2:	4a22      	ldr	r2, [pc, #136]	@ (8002a5c <HAL_RCC_ClockConfig+0x120>)
 80029d4:	4c22      	ldr	r4, [pc, #136]	@ (8002a60 <HAL_RCC_ClockConfig+0x124>)
 80029d6:	6892      	ldr	r2, [r2, #8]
 80029d8:	4922      	ldr	r1, [pc, #136]	@ (8002a64 <HAL_RCC_ClockConfig+0x128>)
 80029da:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80029de:	4603      	mov	r3, r0
 80029e0:	5ca2      	ldrb	r2, [r4, r2]
  status = HAL_InitTick(uwTickPrio);
 80029e2:	4821      	ldr	r0, [pc, #132]	@ (8002a68 <HAL_RCC_ClockConfig+0x12c>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029e4:	f002 021f 	and.w	r2, r2, #31
 80029e8:	40d3      	lsrs	r3, r2
}
 80029ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 80029ee:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029f0:	600b      	str	r3, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80029f2:	f7ff b9f5 	b.w	8001de0 <HAL_InitTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029f6:	6862      	ldr	r2, [r4, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029f8:	4b18      	ldr	r3, [pc, #96]	@ (8002a5c <HAL_RCC_ClockConfig+0x120>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fa:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029fc:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fe:	d023      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x10c>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a00:	2a02      	cmp	r2, #2
 8002a02:	d01c      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x102>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a04:	bb2a      	cbnz	r2, 8002a52 <HAL_RCC_ClockConfig+0x116>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a06:	079e      	lsls	r6, r3, #30
 8002a08:	d5af      	bpl.n	800296a <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a0a:	4e14      	ldr	r6, [pc, #80]	@ (8002a5c <HAL_RCC_ClockConfig+0x120>)
 8002a0c:	68b3      	ldr	r3, [r6, #8]
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	4313      	orrs	r3, r2
 8002a14:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002a16:	f7ff fa25 	bl	8001e64 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a1a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8002a1e:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a20:	e004      	b.n	8002a2c <HAL_RCC_ClockConfig+0xf0>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a22:	f7ff fa1f 	bl	8001e64 <HAL_GetTick>
 8002a26:	1bc0      	subs	r0, r0, r7
 8002a28:	4540      	cmp	r0, r8
 8002a2a:	d810      	bhi.n	8002a4e <HAL_RCC_ClockConfig+0x112>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a2c:	68b3      	ldr	r3, [r6, #8]
 8002a2e:	6862      	ldr	r2, [r4, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a38:	d1f3      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xe6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a3a:	6823      	ldr	r3, [r4, #0]
 8002a3c:	e79b      	b.n	8002976 <HAL_RCC_ClockConfig+0x3a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3e:	039f      	lsls	r7, r3, #14
 8002a40:	d4e3      	bmi.n	8002a0a <HAL_RCC_ClockConfig+0xce>
 8002a42:	e792      	b.n	800296a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002a44:	2001      	movs	r0, #1
}
 8002a46:	4770      	bx	lr
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a48:	019b      	lsls	r3, r3, #6
 8002a4a:	d4de      	bmi.n	8002a0a <HAL_RCC_ClockConfig+0xce>
 8002a4c:	e78d      	b.n	800296a <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8002a4e:	2003      	movs	r0, #3
 8002a50:	e78c      	b.n	800296c <HAL_RCC_ClockConfig+0x30>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a52:	0558      	lsls	r0, r3, #21
 8002a54:	d589      	bpl.n	800296a <HAL_RCC_ClockConfig+0x2e>
 8002a56:	e7d8      	b.n	8002a0a <HAL_RCC_ClockConfig+0xce>
 8002a58:	40022000 	.word	0x40022000
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	0801487c 	.word	0x0801487c
 8002a64:	20006e74 	.word	0x20006e74
 8002a68:	20006e7c 	.word	0x20006e7c

08002a6c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a6c:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002a6e:	4a06      	ldr	r2, [pc, #24]	@ (8002a88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002a70:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002a72:	4906      	ldr	r1, [pc, #24]	@ (8002a8c <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a74:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002a78:	6808      	ldr	r0, [r1, #0]
 8002a7a:	5cd3      	ldrb	r3, [r2, r3]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
}
 8002a80:	40d8      	lsrs	r0, r3
 8002a82:	4770      	bx	lr
 8002a84:	40021000 	.word	0x40021000
 8002a88:	08014874 	.word	0x08014874
 8002a8c:	20006e74 	.word	0x20006e74

08002a90 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a90:	4b05      	ldr	r3, [pc, #20]	@ (8002aa8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a92:	4a06      	ldr	r2, [pc, #24]	@ (8002aac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a94:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002a96:	4906      	ldr	r1, [pc, #24]	@ (8002ab0 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a98:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a9c:	6808      	ldr	r0, [r1, #0]
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	f003 031f 	and.w	r3, r3, #31
}
 8002aa4:	40d8      	lsrs	r0, r3
 8002aa6:	4770      	bx	lr
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	08014874 	.word	0x08014874
 8002ab0:	20006e74 	.word	0x20006e74

08002ab4 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ab4:	4a45      	ldr	r2, [pc, #276]	@ (8002bcc <RCCEx_PLLSAI1_Config+0x118>)
{
 8002ab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ab8:	68d6      	ldr	r6, [r2, #12]
{
 8002aba:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002abc:	07b1      	lsls	r1, r6, #30
{
 8002abe:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ac0:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ac2:	d006      	beq.n	8002ad2 <RCCEx_PLLSAI1_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ac4:	68d1      	ldr	r1, [r2, #12]
 8002ac6:	f001 0103 	and.w	r1, r1, #3
 8002aca:	4281      	cmp	r1, r0
 8002acc:	d04c      	beq.n	8002b68 <RCCEx_PLLSAI1_Config+0xb4>
 8002ace:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8002ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8002ad2:	2802      	cmp	r0, #2
 8002ad4:	d059      	beq.n	8002b8a <RCCEx_PLLSAI1_Config+0xd6>
 8002ad6:	2803      	cmp	r0, #3
 8002ad8:	d050      	beq.n	8002b7c <RCCEx_PLLSAI1_Config+0xc8>
 8002ada:	2801      	cmp	r0, #1
 8002adc:	d1f7      	bne.n	8002ace <RCCEx_PLLSAI1_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	0793      	lsls	r3, r2, #30
 8002ae2:	d5f5      	bpl.n	8002ad0 <RCCEx_PLLSAI1_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ae4:	4939      	ldr	r1, [pc, #228]	@ (8002bcc <RCCEx_PLLSAI1_Config+0x118>)
 8002ae6:	68ca      	ldr	r2, [r1, #12]
 8002ae8:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8002aec:	ea42 0300 	orr.w	r3, r2, r0
 8002af0:	6862      	ldr	r2, [r4, #4]
 8002af2:	3a01      	subs	r2, #1
 8002af4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002af8:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 8002afa:	4e34      	ldr	r6, [pc, #208]	@ (8002bcc <RCCEx_PLLSAI1_Config+0x118>)
 8002afc:	6833      	ldr	r3, [r6, #0]
 8002afe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002b02:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002b04:	f7ff f9ae 	bl	8001e64 <HAL_GetTick>
 8002b08:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b0a:	e004      	b.n	8002b16 <RCCEx_PLLSAI1_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b0c:	f7ff f9aa 	bl	8001e64 <HAL_GetTick>
 8002b10:	1bc3      	subs	r3, r0, r7
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d83d      	bhi.n	8002b92 <RCCEx_PLLSAI1_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b16:	6833      	ldr	r3, [r6, #0]
 8002b18:	011a      	lsls	r2, r3, #4
 8002b1a:	d4f7      	bmi.n	8002b0c <RCCEx_PLLSAI1_Config+0x58>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b1c:	68a3      	ldr	r3, [r4, #8]
 8002b1e:	021a      	lsls	r2, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002b20:	2d00      	cmp	r5, #0
 8002b22:	d138      	bne.n	8002b96 <RCCEx_PLLSAI1_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b24:	6933      	ldr	r3, [r6, #16]
 8002b26:	68e1      	ldr	r1, [r4, #12]
 8002b28:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b30:	0909      	lsrs	r1, r1, #4
 8002b32:	4313      	orrs	r3, r2
 8002b34:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002b38:	6133      	str	r3, [r6, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b3a:	4d24      	ldr	r5, [pc, #144]	@ (8002bcc <RCCEx_PLLSAI1_Config+0x118>)
 8002b3c:	682b      	ldr	r3, [r5, #0]
 8002b3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002b42:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002b44:	f7ff f98e 	bl	8001e64 <HAL_GetTick>
 8002b48:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b4a:	e004      	b.n	8002b56 <RCCEx_PLLSAI1_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b4c:	f7ff f98a 	bl	8001e64 <HAL_GetTick>
 8002b50:	1b80      	subs	r0, r0, r6
 8002b52:	2802      	cmp	r0, #2
 8002b54:	d81d      	bhi.n	8002b92 <RCCEx_PLLSAI1_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b56:	682b      	ldr	r3, [r5, #0]
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	d5f7      	bpl.n	8002b4c <RCCEx_PLLSAI1_Config+0x98>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b5c:	692b      	ldr	r3, [r5, #16]
 8002b5e:	69a2      	ldr	r2, [r4, #24]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	2000      	movs	r0, #0
 8002b64:	612b      	str	r3, [r5, #16]
}
 8002b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002b68:	2900      	cmp	r1, #0
 8002b6a:	d0b0      	beq.n	8002ace <RCCEx_PLLSAI1_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b6c:	68d3      	ldr	r3, [r2, #12]
       ||
 8002b6e:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b70:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002b74:	3301      	adds	r3, #1
       ||
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d1a9      	bne.n	8002ace <RCCEx_PLLSAI1_Config+0x1a>
 8002b7a:	e7be      	b.n	8002afa <RCCEx_PLLSAI1_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b7c:	6811      	ldr	r1, [r2, #0]
 8002b7e:	038e      	lsls	r6, r1, #14
 8002b80:	d4b0      	bmi.n	8002ae4 <RCCEx_PLLSAI1_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b82:	6812      	ldr	r2, [r2, #0]
 8002b84:	0351      	lsls	r1, r2, #13
 8002b86:	d5a2      	bpl.n	8002ace <RCCEx_PLLSAI1_Config+0x1a>
 8002b88:	e7ac      	b.n	8002ae4 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b8a:	6812      	ldr	r2, [r2, #0]
 8002b8c:	0557      	lsls	r7, r2, #21
 8002b8e:	d59e      	bpl.n	8002ace <RCCEx_PLLSAI1_Config+0x1a>
 8002b90:	e7a8      	b.n	8002ae4 <RCCEx_PLLSAI1_Config+0x30>
 8002b92:	2003      	movs	r0, #3
}
 8002b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b96:	2d01      	cmp	r5, #1
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b98:	6933      	ldr	r3, [r6, #16]
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b9a:	d00b      	beq.n	8002bb4 <RCCEx_PLLSAI1_Config+0x100>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b9c:	6961      	ldr	r1, [r4, #20]
 8002b9e:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ba2:	0849      	lsrs	r1, r1, #1
 8002ba4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ba8:	3901      	subs	r1, #1
 8002baa:	4313      	orrs	r3, r2
 8002bac:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002bb0:	6133      	str	r3, [r6, #16]
 8002bb2:	e7c2      	b.n	8002b3a <RCCEx_PLLSAI1_Config+0x86>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bb4:	6921      	ldr	r1, [r4, #16]
 8002bb6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002bba:	0849      	lsrs	r1, r1, #1
 8002bbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002bc0:	3901      	subs	r1, #1
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8002bc8:	6133      	str	r3, [r6, #16]
 8002bca:	e7b6      	b.n	8002b3a <RCCEx_PLLSAI1_Config+0x86>
 8002bcc:	40021000 	.word	0x40021000

08002bd0 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bd0:	4a3e      	ldr	r2, [pc, #248]	@ (8002ccc <RCCEx_PLLSAI2_Config+0xfc>)
{
 8002bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bd4:	68d6      	ldr	r6, [r2, #12]
{
 8002bd6:	460d      	mov	r5, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bd8:	07b1      	lsls	r1, r6, #30
{
 8002bda:	4604      	mov	r4, r0
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002bdc:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bde:	d006      	beq.n	8002bee <RCCEx_PLLSAI2_Config+0x1e>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002be0:	68d1      	ldr	r1, [r2, #12]
 8002be2:	f001 0103 	and.w	r1, r1, #3
 8002be6:	4281      	cmp	r1, r0
 8002be8:	d04c      	beq.n	8002c84 <RCCEx_PLLSAI2_Config+0xb4>
 8002bea:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 8002bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 8002bee:	2802      	cmp	r0, #2
 8002bf0:	d059      	beq.n	8002ca6 <RCCEx_PLLSAI2_Config+0xd6>
 8002bf2:	2803      	cmp	r0, #3
 8002bf4:	d050      	beq.n	8002c98 <RCCEx_PLLSAI2_Config+0xc8>
 8002bf6:	2801      	cmp	r0, #1
 8002bf8:	d1f7      	bne.n	8002bea <RCCEx_PLLSAI2_Config+0x1a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	0793      	lsls	r3, r2, #30
 8002bfe:	d5f5      	bpl.n	8002bec <RCCEx_PLLSAI2_Config+0x1c>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c00:	4932      	ldr	r1, [pc, #200]	@ (8002ccc <RCCEx_PLLSAI2_Config+0xfc>)
 8002c02:	68ca      	ldr	r2, [r1, #12]
 8002c04:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8002c08:	ea42 0300 	orr.w	r3, r2, r0
 8002c0c:	6862      	ldr	r2, [r4, #4]
 8002c0e:	3a01      	subs	r2, #1
 8002c10:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002c14:	60cb      	str	r3, [r1, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c16:	4e2d      	ldr	r6, [pc, #180]	@ (8002ccc <RCCEx_PLLSAI2_Config+0xfc>)
 8002c18:	6833      	ldr	r3, [r6, #0]
 8002c1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002c20:	f7ff f920 	bl	8001e64 <HAL_GetTick>
 8002c24:	4607      	mov	r7, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c26:	e004      	b.n	8002c32 <RCCEx_PLLSAI2_Config+0x62>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c28:	f7ff f91c 	bl	8001e64 <HAL_GetTick>
 8002c2c:	1bc3      	subs	r3, r0, r7
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d83d      	bhi.n	8002cae <RCCEx_PLLSAI2_Config+0xde>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c32:	6833      	ldr	r3, [r6, #0]
 8002c34:	009a      	lsls	r2, r3, #2
 8002c36:	d4f7      	bmi.n	8002c28 <RCCEx_PLLSAI2_Config+0x58>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c38:	68a3      	ldr	r3, [r4, #8]
 8002c3a:	021a      	lsls	r2, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002c3c:	2d00      	cmp	r5, #0
 8002c3e:	d138      	bne.n	8002cb2 <RCCEx_PLLSAI2_Config+0xe2>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c40:	6973      	ldr	r3, [r6, #20]
 8002c42:	68e1      	ldr	r1, [r4, #12]
 8002c44:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c4c:	0909      	lsrs	r1, r1, #4
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002c54:	6173      	str	r3, [r6, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c56:	4d1d      	ldr	r5, [pc, #116]	@ (8002ccc <RCCEx_PLLSAI2_Config+0xfc>)
 8002c58:	682b      	ldr	r3, [r5, #0]
 8002c5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c5e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002c60:	f7ff f900 	bl	8001e64 <HAL_GetTick>
 8002c64:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c66:	e004      	b.n	8002c72 <RCCEx_PLLSAI2_Config+0xa2>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c68:	f7ff f8fc 	bl	8001e64 <HAL_GetTick>
 8002c6c:	1b80      	subs	r0, r0, r6
 8002c6e:	2802      	cmp	r0, #2
 8002c70:	d81d      	bhi.n	8002cae <RCCEx_PLLSAI2_Config+0xde>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c72:	682b      	ldr	r3, [r5, #0]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	d5f7      	bpl.n	8002c68 <RCCEx_PLLSAI2_Config+0x98>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c78:	696b      	ldr	r3, [r5, #20]
 8002c7a:	6962      	ldr	r2, [r4, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	2000      	movs	r0, #0
 8002c80:	616b      	str	r3, [r5, #20]
}
 8002c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ||
 8002c84:	2900      	cmp	r1, #0
 8002c86:	d0b0      	beq.n	8002bea <RCCEx_PLLSAI2_Config+0x1a>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c88:	68d3      	ldr	r3, [r2, #12]
       ||
 8002c8a:	6862      	ldr	r2, [r4, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002c8c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002c90:	3301      	adds	r3, #1
       ||
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d1a9      	bne.n	8002bea <RCCEx_PLLSAI2_Config+0x1a>
 8002c96:	e7be      	b.n	8002c16 <RCCEx_PLLSAI2_Config+0x46>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c98:	6811      	ldr	r1, [r2, #0]
 8002c9a:	038e      	lsls	r6, r1, #14
 8002c9c:	d4b0      	bmi.n	8002c00 <RCCEx_PLLSAI2_Config+0x30>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c9e:	6812      	ldr	r2, [r2, #0]
 8002ca0:	0351      	lsls	r1, r2, #13
 8002ca2:	d5a2      	bpl.n	8002bea <RCCEx_PLLSAI2_Config+0x1a>
 8002ca4:	e7ac      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ca6:	6812      	ldr	r2, [r2, #0]
 8002ca8:	0557      	lsls	r7, r2, #21
 8002caa:	d59e      	bpl.n	8002bea <RCCEx_PLLSAI2_Config+0x1a>
 8002cac:	e7a8      	b.n	8002c00 <RCCEx_PLLSAI2_Config+0x30>
 8002cae:	2003      	movs	r0, #3
}
 8002cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002cb2:	6973      	ldr	r3, [r6, #20]
 8002cb4:	6921      	ldr	r1, [r4, #16]
 8002cb6:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002cba:	0849      	lsrs	r1, r1, #1
 8002cbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cc0:	3901      	subs	r1, #1
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002cc8:	6173      	str	r3, [r6, #20]
 8002cca:	e7c4      	b.n	8002c56 <RCCEx_PLLSAI2_Config+0x86>
 8002ccc:	40021000 	.word	0x40021000

08002cd0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002cd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cd4:	6803      	ldr	r3, [r0, #0]
 8002cd6:	f413 6600 	ands.w	r6, r3, #2048	@ 0x800
{
 8002cda:	b083      	sub	sp, #12
 8002cdc:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cde:	d016      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002ce0:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 8002ce2:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8002ce6:	f000 81dd 	beq.w	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>
 8002cea:	f200 8117 	bhi.w	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8002cee:	2900      	cmp	r1, #0
 8002cf0:	f000 81ac 	beq.w	800304c <HAL_RCCEx_PeriphCLKConfig+0x37c>
 8002cf4:	f5b1 0f80 	cmp.w	r1, #4194304	@ 0x400000
 8002cf8:	f040 81c6 	bne.w	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	3020      	adds	r0, #32
 8002d00:	f7ff ff66 	bl	8002bd0 <RCCEx_PLLSAI2_Config>
 8002d04:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d06:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8002d08:	2e00      	cmp	r6, #0
 8002d0a:	f000 81d8 	beq.w	80030be <HAL_RCCEx_PeriphCLKConfig+0x3ee>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d0e:	04d8      	lsls	r0, r3, #19
 8002d10:	f140 8115 	bpl.w	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x26e>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002d14:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8002d16:	f1b1 7f00 	cmp.w	r1, #33554432	@ 0x2000000
 8002d1a:	f000 81c9 	beq.w	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8002d1e:	f200 816f 	bhi.w	8003000 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002d22:	2900      	cmp	r1, #0
 8002d24:	f000 819b 	beq.w	800305e <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8002d28:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
 8002d2c:	f040 81ae 	bne.w	800308c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d30:	2100      	movs	r1, #0
 8002d32:	f104 0020 	add.w	r0, r4, #32
 8002d36:	f7ff ff4b 	bl	8002bd0 <RCCEx_PLLSAI2_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d3a:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d3c:	4607      	mov	r7, r0
    if(ret == HAL_OK)
 8002d3e:	2f00      	cmp	r7, #0
 8002d40:	f040 8165 	bne.w	800300e <HAL_RCCEx_PeriphCLKConfig+0x33e>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d44:	49b3      	ldr	r1, [pc, #716]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d46:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8002d48:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002d4c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d50:	4302      	orrs	r2, r0
 8002d52:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d56:	0399      	lsls	r1, r3, #14
 8002d58:	f100 80f5 	bmi.w	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x276>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d5c:	07da      	lsls	r2, r3, #31
 8002d5e:	d508      	bpl.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d60:	49ac      	ldr	r1, [pc, #688]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d62:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002d64:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002d68:	f022 0203 	bic.w	r2, r2, #3
 8002d6c:	4302      	orrs	r2, r0
 8002d6e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d72:	079f      	lsls	r7, r3, #30
 8002d74:	d508      	bpl.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d76:	49a7      	ldr	r1, [pc, #668]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d78:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002d7a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002d7e:	f022 020c 	bic.w	r2, r2, #12
 8002d82:	4302      	orrs	r2, r0
 8002d84:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d88:	075d      	lsls	r5, r3, #29
 8002d8a:	d508      	bpl.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0xce>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d8c:	49a1      	ldr	r1, [pc, #644]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002d8e:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8002d90:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002d94:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8002d98:	4302      	orrs	r2, r0
 8002d9a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d9e:	0718      	lsls	r0, r3, #28
 8002da0:	d508      	bpl.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002da2:	499c      	ldr	r1, [pc, #624]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002da4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8002da6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002daa:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8002dae:	4302      	orrs	r2, r0
 8002db0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002db4:	06d9      	lsls	r1, r3, #27
 8002db6:	d508      	bpl.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002db8:	4996      	ldr	r1, [pc, #600]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002dba:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
 8002dbc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002dc0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002dc4:	4302      	orrs	r2, r0
 8002dc6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002dca:	069a      	lsls	r2, r3, #26
 8002dcc:	d508      	bpl.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002dce:	4991      	ldr	r1, [pc, #580]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002dd0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8002dd2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002dd6:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8002dda:	4302      	orrs	r2, r0
 8002ddc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002de0:	059f      	lsls	r7, r3, #22
 8002de2:	d508      	bpl.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002de4:	498b      	ldr	r1, [pc, #556]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002de6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8002de8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002dec:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8002df0:	4302      	orrs	r2, r0
 8002df2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002df6:	055d      	lsls	r5, r3, #21
 8002df8:	d508      	bpl.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dfa:	4986      	ldr	r1, [pc, #536]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002dfc:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8002dfe:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002e02:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8002e06:	4302      	orrs	r2, r0
 8002e08:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e0c:	0658      	lsls	r0, r3, #25
 8002e0e:	d508      	bpl.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e10:	4980      	ldr	r1, [pc, #512]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e12:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8002e14:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002e18:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8002e1c:	4302      	orrs	r2, r0
 8002e1e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e22:	0619      	lsls	r1, r3, #24
 8002e24:	d508      	bpl.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e26:	497b      	ldr	r1, [pc, #492]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e28:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8002e2a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002e2e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8002e32:	4302      	orrs	r2, r0
 8002e34:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e38:	05da      	lsls	r2, r3, #23
 8002e3a:	d508      	bpl.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e3c:	4975      	ldr	r1, [pc, #468]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e3e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e40:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002e44:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8002e48:	4302      	orrs	r2, r0
 8002e4a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e4e:	049f      	lsls	r7, r3, #18
 8002e50:	d510      	bpl.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e52:	4970      	ldr	r1, [pc, #448]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e54:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8002e56:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002e5a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8002e5e:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e60:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e64:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e68:	f000 8104 	beq.w	8003074 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e6c:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8002e70:	f000 8132 	beq.w	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e74:	031d      	lsls	r5, r3, #12
 8002e76:	d510      	bpl.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e78:	4966      	ldr	r1, [pc, #408]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002e7a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8002e7c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002e80:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8002e84:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e86:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e8a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e8e:	f000 80f6 	beq.w	800307e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e92:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8002e96:	f000 8129 	beq.w	80030ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e9a:	0358      	lsls	r0, r3, #13
 8002e9c:	d510      	bpl.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e9e:	495d      	ldr	r1, [pc, #372]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ea0:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8002ea2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002ea6:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8002eaa:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eac:	f1b0 6f00 	cmp.w	r0, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002eb0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eb4:	f000 80d9 	beq.w	800306a <HAL_RCCEx_PeriphCLKConfig+0x39a>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002eb8:	f1b0 6f80 	cmp.w	r0, #67108864	@ 0x4000000
 8002ebc:	f000 8120 	beq.w	8003100 <HAL_RCCEx_PeriphCLKConfig+0x430>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ec0:	0459      	lsls	r1, r3, #17
 8002ec2:	d510      	bpl.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ec4:	4853      	ldr	r0, [pc, #332]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ec6:	6fa1      	ldr	r1, [r4, #120]	@ 0x78
 8002ec8:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8002ecc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ed0:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ed2:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ed6:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002eda:	f000 80d9 	beq.w	8003090 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ede:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 8002ee2:	f000 80ee 	beq.w	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ee6:	041a      	lsls	r2, r3, #16
 8002ee8:	d508      	bpl.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002eea:	494a      	ldr	r1, [pc, #296]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002eec:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8002eee:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8002ef2:	f022 4280 	bic.w	r2, r2, #1073741824	@ 0x40000000
 8002ef6:	4302      	orrs	r2, r0
 8002ef8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002efc:	03db      	lsls	r3, r3, #15
 8002efe:	d509      	bpl.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x244>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f00:	4a44      	ldr	r2, [pc, #272]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f02:	f8d4 1080 	ldr.w	r1, [r4, #128]	@ 0x80
 8002f06:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8002f0a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8002f14:	4630      	mov	r0, r6
 8002f16:	b003      	add	sp, #12
 8002f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Sai1ClockSelection)
 8002f1c:	f5b1 0f40 	cmp.w	r1, #12582912	@ 0xc00000
 8002f20:	f040 80b2 	bne.w	8003088 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f24:	483b      	ldr	r0, [pc, #236]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f26:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8002f2a:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f34:	04d8      	lsls	r0, r3, #19
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f36:	f04f 0600 	mov.w	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002f3a:	f53f aeeb 	bmi.w	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002f3e:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f40:	0399      	lsls	r1, r3, #14
 8002f42:	f57f af0b 	bpl.w	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f46:	4b33      	ldr	r3, [pc, #204]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002f48:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f4a:	00d2      	lsls	r2, r2, #3
 8002f4c:	d566      	bpl.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x34c>
    FlagStatus       pwrclkchanged = RESET;
 8002f4e:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f52:	4d31      	ldr	r5, [pc, #196]	@ (8003018 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002f54:	682b      	ldr	r3, [r5, #0]
 8002f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f5a:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8002f5c:	f7fe ff82 	bl	8001e64 <HAL_GetTick>
 8002f60:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f62:	e005      	b.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f64:	f7fe ff7e 	bl	8001e64 <HAL_GetTick>
 8002f68:	eba0 0309 	sub.w	r3, r0, r9
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d861      	bhi.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x364>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	05db      	lsls	r3, r3, #23
 8002f74:	d5f6      	bpl.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x294>
    if(ret == HAL_OK)
 8002f76:	2f00      	cmp	r7, #0
 8002f78:	f040 80cc 	bne.w	8003114 <HAL_RCCEx_PeriphCLKConfig+0x444>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f7c:	4d25      	ldr	r5, [pc, #148]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f7e:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f82:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f86:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002f8a:	d026      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d024      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x30a>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f90:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f94:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8002f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f9c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fa0:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8002fa4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa8:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fac:	07c8      	lsls	r0, r1, #31
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fae:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        RCC->BDCR = tmpregister;
 8002fb2:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fb6:	d510      	bpl.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x30a>
        tickstart = HAL_GetTick();
 8002fb8:	f7fe ff54 	bl	8001e64 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f241 3988 	movw	r9, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8002fc0:	4607      	mov	r7, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fc2:	e004      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x2fe>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc4:	f7fe ff4e 	bl	8001e64 <HAL_GetTick>
 8002fc8:	1bc0      	subs	r0, r0, r7
 8002fca:	4548      	cmp	r0, r9
 8002fcc:	d832      	bhi.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x364>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fce:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8002fd2:	0799      	lsls	r1, r3, #30
 8002fd4:	d5f6      	bpl.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fd6:	f8d4 2084 	ldr.w	r2, [r4, #132]	@ 0x84
 8002fda:	490e      	ldr	r1, [pc, #56]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002fdc:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8002fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fea:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8002fec:	f1b8 0f00 	cmp.w	r8, #0
 8002ff0:	f43f aeb4 	beq.w	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff4:	4907      	ldr	r1, [pc, #28]	@ (8003014 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002ff6:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8002ff8:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8002ffc:	658a      	str	r2, [r1, #88]	@ 0x58
 8002ffe:	e6ad      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8003000:	f1b1 7f40 	cmp.w	r1, #50331648	@ 0x3000000
 8003004:	d142      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003006:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 8003008:	2f00      	cmp	r7, #0
 800300a:	f43f ae9b 	beq.w	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800300e:	463e      	mov	r6, r7
 8003010:	e796      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x270>
 8003012:	bf00      	nop
 8003014:	40021000 	.word	0x40021000
 8003018:	40007000 	.word	0x40007000
      __HAL_RCC_PWR_CLK_ENABLE();
 800301c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800301e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003022:	659a      	str	r2, [r3, #88]	@ 0x58
 8003024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302a:	9301      	str	r3, [sp, #4]
 800302c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800302e:	f04f 0801 	mov.w	r8, #1
 8003032:	e78e      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x282>
        ret = HAL_TIMEOUT;
 8003034:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003036:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8003038:	f1b8 0f00 	cmp.w	r8, #0
 800303c:	f43f ae8e 	beq.w	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003040:	4935      	ldr	r1, [pc, #212]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8003042:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8003044:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8003048:	658a      	str	r2, [r1, #88]	@ 0x58
 800304a:	e687      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800304c:	3004      	adds	r0, #4
 800304e:	f7ff fd31 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
 8003052:	4606      	mov	r6, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003054:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8003056:	2e00      	cmp	r6, #0
 8003058:	f47f ae59 	bne.w	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x3e>
 800305c:	e02f      	b.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x3ee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800305e:	1d20      	adds	r0, r4, #4
 8003060:	f7ff fd28 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003064:	6823      	ldr	r3, [r4, #0]
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003066:	4607      	mov	r7, r0
      break;
 8003068:	e669      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800306a:	68ca      	ldr	r2, [r1, #12]
 800306c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003070:	60ca      	str	r2, [r1, #12]
 8003072:	e725      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003074:	68ca      	ldr	r2, [r1, #12]
 8003076:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800307a:	60ca      	str	r2, [r1, #12]
 800307c:	e6fa      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800307e:	68ca      	ldr	r2, [r1, #12]
 8003080:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003084:	60ca      	str	r2, [r1, #12]
 8003086:	e708      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003088:	2601      	movs	r6, #1
 800308a:	e640      	b.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    switch(PeriphClkInit->Sai2ClockSelection)
 800308c:	2601      	movs	r6, #1
 800308e:	e756      	b.n	8002f3e <HAL_RCCEx_PeriphCLKConfig+0x26e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003090:	2102      	movs	r1, #2
 8003092:	1d20      	adds	r0, r4, #4
 8003094:	f7ff fd0e 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003098:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800309a:	2800      	cmp	r0, #0
 800309c:	f43f af23 	beq.w	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030a0:	4606      	mov	r6, r0
 80030a2:	e720      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x216>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030a4:	481c      	ldr	r0, [pc, #112]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80030a6:	68c2      	ldr	r2, [r0, #12]
 80030a8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030ac:	60c2      	str	r2, [r0, #12]
    if(ret == HAL_OK)
 80030ae:	e739      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x254>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030b0:	4919      	ldr	r1, [pc, #100]	@ (8003118 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80030b2:	68ca      	ldr	r2, [r1, #12]
 80030b4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80030b8:	60ca      	str	r2, [r1, #12]
    switch(PeriphClkInit->Sai1ClockSelection)
 80030ba:	4637      	mov	r7, r6
 80030bc:	e7a4      	b.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x338>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030be:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80030c0:	e730      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x254>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80030c2:	2102      	movs	r1, #2
 80030c4:	f104 0020 	add.w	r0, r4, #32
 80030c8:	f7ff fd82 	bl	8002bd0 <RCCEx_PLLSAI2_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030cc:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80030ce:	2800      	cmp	r0, #0
 80030d0:	f43f af09 	beq.w	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030d4:	4606      	mov	r6, r0
 80030d6:	e706      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x216>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030d8:	2101      	movs	r1, #1
 80030da:	1d20      	adds	r0, r4, #4
 80030dc:	f7ff fcea 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030e0:	6823      	ldr	r3, [r4, #0]
        if(ret != HAL_OK)
 80030e2:	2800      	cmp	r0, #0
 80030e4:	f43f aec6 	beq.w	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80030e8:	4606      	mov	r6, r0
 80030ea:	e6c3      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030ec:	2101      	movs	r1, #1
 80030ee:	1d20      	adds	r0, r4, #4
 80030f0:	f7ff fce0 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030f4:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 80030f6:	2800      	cmp	r0, #0
 80030f8:	f43f aecf 	beq.w	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030fc:	4606      	mov	r6, r0
 80030fe:	e6cc      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003100:	2101      	movs	r1, #1
 8003102:	1d20      	adds	r0, r4, #4
 8003104:	f7ff fcd6 	bl	8002ab4 <RCCEx_PLLSAI1_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003108:	6823      	ldr	r3, [r4, #0]
      if(ret != HAL_OK)
 800310a:	2800      	cmp	r0, #0
 800310c:	f43f aed8 	beq.w	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003110:	4606      	mov	r6, r0
 8003112:	e6d5      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003114:	463e      	mov	r6, r7
 8003116:	e78e      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x366>
 8003118:	40021000 	.word	0x40021000

0800311c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800311c:	b538      	push	{r3, r4, r5, lr}
 800311e:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003120:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003122:	6882      	ldr	r2, [r0, #8]
 8003124:	6900      	ldr	r0, [r0, #16]
 8003126:	6961      	ldr	r1, [r4, #20]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003128:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800312a:	4302      	orrs	r2, r0
 800312c:	430a      	orrs	r2, r1
 800312e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003130:	4982      	ldr	r1, [pc, #520]	@ (800333c <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003132:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003134:	4029      	ands	r1, r5
 8003136:	430a      	orrs	r2, r1
 8003138:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800313a:	685a      	ldr	r2, [r3, #4]
 800313c:	68e1      	ldr	r1, [r4, #12]
 800313e:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8003142:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003144:	497e      	ldr	r1, [pc, #504]	@ (8003340 <UART_SetConfig+0x224>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003146:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003148:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800314a:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800314c:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800314e:	d03f      	beq.n	80031d0 <UART_SetConfig+0xb4>
    tmpreg |= huart->Init.OneBitSampling;
 8003150:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003152:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8003156:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003158:	430a      	orrs	r2, r1
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800315a:	497a      	ldr	r1, [pc, #488]	@ (8003344 <UART_SetConfig+0x228>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800315c:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800315e:	428b      	cmp	r3, r1
 8003160:	d115      	bne.n	800318e <UART_SetConfig+0x72>
 8003162:	4b79      	ldr	r3, [pc, #484]	@ (8003348 <UART_SetConfig+0x22c>)
 8003164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	2b02      	cmp	r3, #2
 800316e:	f000 808e 	beq.w	800328e <UART_SetConfig+0x172>
 8003172:	2b03      	cmp	r3, #3
 8003174:	d077      	beq.n	8003266 <UART_SetConfig+0x14a>
 8003176:	2b01      	cmp	r3, #1
 8003178:	d06d      	beq.n	8003256 <UART_SetConfig+0x13a>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800317a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800317e:	f000 80d1 	beq.w	8003324 <UART_SetConfig+0x208>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
        break;
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003182:	f7ff fc85 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8003186:	2800      	cmp	r0, #0
 8003188:	d172      	bne.n	8003270 <UART_SetConfig+0x154>
        pclk = (uint32_t) HSI_VALUE;
 800318a:	2000      	movs	r0, #0
 800318c:	e01c      	b.n	80031c8 <UART_SetConfig+0xac>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800318e:	4a6f      	ldr	r2, [pc, #444]	@ (800334c <UART_SetConfig+0x230>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d10f      	bne.n	80031b4 <UART_SetConfig+0x98>
 8003194:	4b6c      	ldr	r3, [pc, #432]	@ (8003348 <UART_SetConfig+0x22c>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b0c      	cmp	r3, #12
 80031a0:	d811      	bhi.n	80031c6 <UART_SetConfig+0xaa>
 80031a2:	e8df f003 	tbb	[pc, r3]
 80031a6:	1083      	.short	0x1083
 80031a8:	10581010 	.word	0x10581010
 80031ac:	10741010 	.word	0x10741010
 80031b0:	1010      	.short	0x1010
 80031b2:	60          	.byte	0x60
 80031b3:	00          	.byte	0x00
 80031b4:	4a66      	ldr	r2, [pc, #408]	@ (8003350 <UART_SetConfig+0x234>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d07e      	beq.n	80032b8 <UART_SetConfig+0x19c>
 80031ba:	4a66      	ldr	r2, [pc, #408]	@ (8003354 <UART_SetConfig+0x238>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d03f      	beq.n	8003240 <UART_SetConfig+0x124>
 80031c0:	4a65      	ldr	r2, [pc, #404]	@ (8003358 <UART_SetConfig+0x23c>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d068      	beq.n	8003298 <UART_SetConfig+0x17c>
        ret = HAL_ERROR;
 80031c6:	2001      	movs	r0, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e9c4 3318 	strd	r3, r3, [r4, #96]	@ 0x60
  huart->TxISR = NULL;

  return ret;
}
 80031ce:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031d0:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031d4:	485c      	ldr	r0, [pc, #368]	@ (8003348 <UART_SetConfig+0x22c>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031d6:	430a      	orrs	r2, r1
 80031d8:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031da:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 80031de:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031e6:	d07f      	beq.n	80032e8 <UART_SetConfig+0x1cc>
 80031e8:	d807      	bhi.n	80031fa <UART_SetConfig+0xde>
 80031ea:	b323      	cbz	r3, 8003236 <UART_SetConfig+0x11a>
 80031ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031f0:	d1e9      	bne.n	80031c6 <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 80031f2:	f7ff f85b 	bl	80022ac <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80031f6:	b928      	cbnz	r0, 8003204 <UART_SetConfig+0xe8>
 80031f8:	e7c7      	b.n	800318a <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031fe:	d1e2      	bne.n	80031c6 <UART_SetConfig+0xaa>
        pclk = (uint32_t) LSE_VALUE;
 8003200:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003204:	6862      	ldr	r2, [r4, #4]
 8003206:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800320a:	4283      	cmp	r3, r0
 800320c:	d8db      	bhi.n	80031c6 <UART_SetConfig+0xaa>
 800320e:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8003212:	d8d8      	bhi.n	80031c6 <UART_SetConfig+0xaa>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003214:	0851      	lsrs	r1, r2, #1
 8003216:	2300      	movs	r3, #0
 8003218:	468c      	mov	ip, r1
 800321a:	f44f 7580 	mov.w	r5, #256	@ 0x100
 800321e:	4619      	mov	r1, r3
 8003220:	fbe0 c105 	umlal	ip, r1, r0, r5
 8003224:	4660      	mov	r0, ip
 8003226:	f7fd fd19 	bl	8000c5c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800322a:	4b4c      	ldr	r3, [pc, #304]	@ (800335c <UART_SetConfig+0x240>)
 800322c:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8003230:	429a      	cmp	r2, r3
 8003232:	d8c8      	bhi.n	80031c6 <UART_SetConfig+0xaa>
 8003234:	e028      	b.n	8003288 <UART_SetConfig+0x16c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003236:	f7ff fc19 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800323a:	2800      	cmp	r0, #0
 800323c:	d1e2      	bne.n	8003204 <UART_SetConfig+0xe8>
 800323e:	e7a4      	b.n	800318a <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003240:	4b41      	ldr	r3, [pc, #260]	@ (8003348 <UART_SetConfig+0x22c>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003246:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800324a:	2b80      	cmp	r3, #128	@ 0x80
 800324c:	d01f      	beq.n	800328e <UART_SetConfig+0x172>
 800324e:	d840      	bhi.n	80032d2 <UART_SetConfig+0x1b6>
 8003250:	b363      	cbz	r3, 80032ac <UART_SetConfig+0x190>
 8003252:	2b40      	cmp	r3, #64	@ 0x40
 8003254:	d1b7      	bne.n	80031c6 <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003256:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800325a:	d06b      	beq.n	8003334 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 800325c:	f7ff f826 	bl	80022ac <HAL_RCC_GetSysClockFreq>
        break;
 8003260:	e791      	b.n	8003186 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003262:	2b30      	cmp	r3, #48	@ 0x30
 8003264:	d1af      	bne.n	80031c6 <UART_SetConfig+0xaa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003266:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800326a:	d060      	beq.n	800332e <UART_SetConfig+0x212>
        pclk = (uint32_t) LSE_VALUE;
 800326c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003270:	6863      	ldr	r3, [r4, #4]
 8003272:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003276:	fbb0 f0f3 	udiv	r0, r0, r3
 800327a:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800327c:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8003280:	f1a0 0310 	sub.w	r3, r0, #16
 8003284:	4293      	cmp	r3, r2
 8003286:	d89e      	bhi.n	80031c6 <UART_SetConfig+0xaa>
        huart->Instance->BRR = usartdiv;
 8003288:	6823      	ldr	r3, [r4, #0]
 800328a:	60d8      	str	r0, [r3, #12]
 800328c:	e77d      	b.n	800318a <UART_SetConfig+0x6e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800328e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003292:	d04a      	beq.n	800332a <UART_SetConfig+0x20e>
        pclk = (uint32_t) HSI_VALUE;
 8003294:	4832      	ldr	r0, [pc, #200]	@ (8003360 <UART_SetConfig+0x244>)
 8003296:	e7eb      	b.n	8003270 <UART_SetConfig+0x154>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003298:	4b2b      	ldr	r3, [pc, #172]	@ (8003348 <UART_SetConfig+0x22c>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800329e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032a6:	d0f2      	beq.n	800328e <UART_SetConfig+0x172>
 80032a8:	d81a      	bhi.n	80032e0 <UART_SetConfig+0x1c4>
 80032aa:	b9ab      	cbnz	r3, 80032d8 <UART_SetConfig+0x1bc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032ac:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80032b0:	d01c      	beq.n	80032ec <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80032b2:	f7ff fbdb 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
        break;
 80032b6:	e766      	b.n	8003186 <UART_SetConfig+0x6a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032b8:	4b23      	ldr	r3, [pc, #140]	@ (8003348 <UART_SetConfig+0x22c>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032be:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80032c2:	2b20      	cmp	r3, #32
 80032c4:	d0e3      	beq.n	800328e <UART_SetConfig+0x172>
 80032c6:	d8cc      	bhi.n	8003262 <UART_SetConfig+0x146>
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0ef      	beq.n	80032ac <UART_SetConfig+0x190>
 80032cc:	2b10      	cmp	r3, #16
 80032ce:	d0c2      	beq.n	8003256 <UART_SetConfig+0x13a>
 80032d0:	e779      	b.n	80031c6 <UART_SetConfig+0xaa>
 80032d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80032d4:	d0c7      	beq.n	8003266 <UART_SetConfig+0x14a>
 80032d6:	e776      	b.n	80031c6 <UART_SetConfig+0xaa>
 80032d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032dc:	d0bb      	beq.n	8003256 <UART_SetConfig+0x13a>
 80032de:	e772      	b.n	80031c6 <UART_SetConfig+0xaa>
 80032e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80032e4:	d0bf      	beq.n	8003266 <UART_SetConfig+0x14a>
 80032e6:	e76e      	b.n	80031c6 <UART_SetConfig+0xaa>
        pclk = (uint32_t) HSI_VALUE;
 80032e8:	481d      	ldr	r0, [pc, #116]	@ (8003360 <UART_SetConfig+0x244>)
 80032ea:	e78b      	b.n	8003204 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ec:	f7ff fbbe 	bl	8002a6c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80032f0:	2800      	cmp	r0, #0
 80032f2:	f43f af4a 	beq.w	800318a <UART_SetConfig+0x6e>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032f6:	0040      	lsls	r0, r0, #1
 80032f8:	6863      	ldr	r3, [r4, #4]
 80032fa:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80032fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003302:	b29a      	uxth	r2, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003304:	f1a2 0010 	sub.w	r0, r2, #16
 8003308:	f64f 71ef 	movw	r1, #65519	@ 0xffef
 800330c:	4288      	cmp	r0, r1
 800330e:	f63f af5a 	bhi.w	80031c6 <UART_SetConfig+0xaa>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003312:	f023 030f 	bic.w	r3, r3, #15
        huart->Instance->BRR = brrtemp;
 8003316:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003318:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800331a:	f3c2 0242 	ubfx	r2, r2, #1, #3
        huart->Instance->BRR = brrtemp;
 800331e:	4313      	orrs	r3, r2
 8003320:	60cb      	str	r3, [r1, #12]
 8003322:	e732      	b.n	800318a <UART_SetConfig+0x6e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003324:	f7ff fbb4 	bl	8002a90 <HAL_RCC_GetPCLK2Freq>
        break;
 8003328:	e7e2      	b.n	80032f0 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800332a:	480e      	ldr	r0, [pc, #56]	@ (8003364 <UART_SetConfig+0x248>)
 800332c:	e7e4      	b.n	80032f8 <UART_SetConfig+0x1dc>
 800332e:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8003332:	e7e1      	b.n	80032f8 <UART_SetConfig+0x1dc>
        pclk = HAL_RCC_GetSysClockFreq();
 8003334:	f7fe ffba 	bl	80022ac <HAL_RCC_GetSysClockFreq>
        break;
 8003338:	e7da      	b.n	80032f0 <UART_SetConfig+0x1d4>
 800333a:	bf00      	nop
 800333c:	efff69f3 	.word	0xefff69f3
 8003340:	40008000 	.word	0x40008000
 8003344:	40013800 	.word	0x40013800
 8003348:	40021000 	.word	0x40021000
 800334c:	40004400 	.word	0x40004400
 8003350:	40004800 	.word	0x40004800
 8003354:	40004c00 	.word	0x40004c00
 8003358:	40005000 	.word	0x40005000
 800335c:	000ffcff 	.word	0x000ffcff
 8003360:	00f42400 	.word	0x00f42400
 8003364:	01e84800 	.word	0x01e84800

08003368 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003368:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800336a:	07da      	lsls	r2, r3, #31
{
 800336c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800336e:	d506      	bpl.n	800337e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003370:	6801      	ldr	r1, [r0, #0]
 8003372:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 8003374:	684a      	ldr	r2, [r1, #4]
 8003376:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800337a:	4322      	orrs	r2, r4
 800337c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800337e:	079c      	lsls	r4, r3, #30
 8003380:	d506      	bpl.n	8003390 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003382:	6801      	ldr	r1, [r0, #0]
 8003384:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8003386:	684a      	ldr	r2, [r1, #4]
 8003388:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800338c:	4322      	orrs	r2, r4
 800338e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003390:	0759      	lsls	r1, r3, #29
 8003392:	d506      	bpl.n	80033a2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003394:	6801      	ldr	r1, [r0, #0]
 8003396:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8003398:	684a      	ldr	r2, [r1, #4]
 800339a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800339e:	4322      	orrs	r2, r4
 80033a0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033a2:	071a      	lsls	r2, r3, #28
 80033a4:	d506      	bpl.n	80033b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033a6:	6801      	ldr	r1, [r0, #0]
 80033a8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80033aa:	684a      	ldr	r2, [r1, #4]
 80033ac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80033b0:	4322      	orrs	r2, r4
 80033b2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b4:	06dc      	lsls	r4, r3, #27
 80033b6:	d506      	bpl.n	80033c6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033b8:	6801      	ldr	r1, [r0, #0]
 80033ba:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80033bc:	688a      	ldr	r2, [r1, #8]
 80033be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033c2:	4322      	orrs	r2, r4
 80033c4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033c6:	0699      	lsls	r1, r3, #26
 80033c8:	d506      	bpl.n	80033d8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033ca:	6801      	ldr	r1, [r0, #0]
 80033cc:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80033ce:	688a      	ldr	r2, [r1, #8]
 80033d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033d4:	4322      	orrs	r2, r4
 80033d6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033d8:	065a      	lsls	r2, r3, #25
 80033da:	d509      	bpl.n	80033f0 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033dc:	6801      	ldr	r1, [r0, #0]
 80033de:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80033e0:	684a      	ldr	r2, [r1, #4]
 80033e2:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80033e6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033e8:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ec:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033ee:	d00b      	beq.n	8003408 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033f0:	061b      	lsls	r3, r3, #24
 80033f2:	d506      	bpl.n	8003402 <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033f4:	6802      	ldr	r2, [r0, #0]
 80033f6:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 80033f8:	6853      	ldr	r3, [r2, #4]
 80033fa:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80033fe:	430b      	orrs	r3, r1
 8003400:	6053      	str	r3, [r2, #4]
  }
}
 8003402:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003406:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003408:	684a      	ldr	r2, [r1, #4]
 800340a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800340c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8003410:	4322      	orrs	r2, r4
 8003412:	604a      	str	r2, [r1, #4]
 8003414:	e7ec      	b.n	80033f0 <UART_AdvFeatureConfig+0x88>
 8003416:	bf00      	nop

08003418 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003418:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341a:	2300      	movs	r3, #0
{
 800341c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341e:	67c3      	str	r3, [r0, #124]	@ 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003420:	f7fe fd20 	bl	8001e64 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003424:	6823      	ldr	r3, [r4, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 800342a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800342c:	d40a      	bmi.n	8003444 <UART_CheckIdleState+0x2c>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	0752      	lsls	r2, r2, #29
 8003432:	d428      	bmi.n	8003486 <UART_CheckIdleState+0x6e>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003434:	2320      	movs	r3, #32
 8003436:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->RxState = HAL_UART_STATE_READY;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 8003438:	2000      	movs	r0, #0
  huart->RxState = HAL_UART_STATE_READY;
 800343a:	67a3      	str	r3, [r4, #120]	@ 0x78
          huart->gState = HAL_UART_STATE_READY;
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800343c:	2300      	movs	r3, #0
 800343e:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8003442:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	0292      	lsls	r2, r2, #10
 8003448:	d4f1      	bmi.n	800342e <UART_CheckIdleState+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344a:	f7fe fd0b 	bl	8001e64 <HAL_GetTick>
 800344e:	1b43      	subs	r3, r0, r5
 8003450:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003454:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003456:	d227      	bcs.n	80034a8 <UART_CheckIdleState+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	0750      	lsls	r0, r2, #29
 800345c:	d5f2      	bpl.n	8003444 <UART_CheckIdleState+0x2c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	0511      	lsls	r1, r2, #20
 8003462:	d5ef      	bpl.n	8003444 <UART_CheckIdleState+0x2c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003464:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003468:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800346a:	6819      	ldr	r1, [r3, #0]
 800346c:	f421 71d0 	bic.w	r1, r1, #416	@ 0x1a0
 8003470:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003472:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003474:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003476:	f021 0101 	bic.w	r1, r1, #1
 800347a:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 800347c:	6762      	str	r2, [r4, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800347e:	67a2      	str	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003480:	67e2      	str	r2, [r4, #124]	@ 0x7c
      return HAL_TIMEOUT;
 8003482:	2003      	movs	r0, #3
 8003484:	e7da      	b.n	800343c <UART_CheckIdleState+0x24>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003486:	69db      	ldr	r3, [r3, #28]
 8003488:	0258      	lsls	r0, r3, #9
 800348a:	d4d3      	bmi.n	8003434 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348c:	f7fe fcea 	bl	8001e64 <HAL_GetTick>
 8003490:	1b43      	subs	r3, r0, r5
 8003492:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003496:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003498:	d206      	bcs.n	80034a8 <UART_CheckIdleState+0x90>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	0751      	lsls	r1, r2, #29
 800349e:	d5f2      	bpl.n	8003486 <UART_CheckIdleState+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034a0:	69da      	ldr	r2, [r3, #28]
 80034a2:	0512      	lsls	r2, r2, #20
 80034a4:	d5ef      	bpl.n	8003486 <UART_CheckIdleState+0x6e>
 80034a6:	e7dd      	b.n	8003464 <UART_CheckIdleState+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80034ae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b0:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80034b2:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80034ba:	6761      	str	r1, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80034bc:	67a1      	str	r1, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 80034be:	e7e0      	b.n	8003482 <UART_CheckIdleState+0x6a>

080034c0 <HAL_UART_Init>:
  if (huart == NULL)
 80034c0:	b370      	cbz	r0, 8003520 <HAL_UART_Init+0x60>
  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	6f43      	ldr	r3, [r0, #116]	@ 0x74
{
 80034c4:	b510      	push	{r4, lr}
 80034c6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80034c8:	b32b      	cbz	r3, 8003516 <HAL_UART_Init+0x56>
  __HAL_UART_DISABLE(huart);
 80034ca:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80034cc:	2324      	movs	r3, #36	@ 0x24
 80034ce:	6763      	str	r3, [r4, #116]	@ 0x74
  __HAL_UART_DISABLE(huart);
 80034d0:	6813      	ldr	r3, [r2, #0]
 80034d2:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034d6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 80034d8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034da:	f7ff fe1f 	bl	800311c <UART_SetConfig>
 80034de:	2801      	cmp	r0, #1
 80034e0:	d017      	beq.n	8003512 <HAL_UART_Init+0x52>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80034e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80034e4:	b98b      	cbnz	r3, 800350a <HAL_UART_Init+0x4a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034e6:	6823      	ldr	r3, [r4, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80034ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80034f6:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80034fe:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003500:	601a      	str	r2, [r3, #0]
}
 8003502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003506:	f7ff bf87 	b.w	8003418 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 800350a:	4620      	mov	r0, r4
 800350c:	f7ff ff2c 	bl	8003368 <UART_AdvFeatureConfig>
 8003510:	e7e9      	b.n	80034e6 <HAL_UART_Init+0x26>
}
 8003512:	2001      	movs	r0, #1
 8003514:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003516:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
    HAL_UART_MspInit(huart);
 800351a:	f7fe fb65 	bl	8001be8 <HAL_UART_MspInit>
 800351e:	e7d4      	b.n	80034ca <HAL_UART_Init+0xa>
}
 8003520:	2001      	movs	r0, #1
 8003522:	4770      	bx	lr

08003524 <UART_WaitOnFlagUntilTimeout>:
{
 8003524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003528:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352c:	6804      	ldr	r4, [r0, #0]
 800352e:	f1b8 3fff 	cmp.w	r8, #4294967295	@ 0xffffffff
{
 8003532:	460d      	mov	r5, r1
 8003534:	4616      	mov	r6, r2
 8003536:	d10a      	bne.n	800354e <UART_WaitOnFlagUntilTimeout+0x2a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003538:	69e3      	ldr	r3, [r4, #28]
 800353a:	ea35 0303 	bics.w	r3, r5, r3
 800353e:	bf0c      	ite	eq
 8003540:	2301      	moveq	r3, #1
 8003542:	2300      	movne	r3, #0
 8003544:	42b3      	cmp	r3, r6
 8003546:	d0f7      	beq.n	8003538 <UART_WaitOnFlagUntilTimeout+0x14>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003548:	2000      	movs	r0, #0
}
 800354a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800354e:	4607      	mov	r7, r0
 8003550:	4699      	mov	r9, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003552:	69e2      	ldr	r2, [r4, #28]
 8003554:	ea35 0202 	bics.w	r2, r5, r2
 8003558:	bf0c      	ite	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	2300      	movne	r3, #0
 800355e:	42b3      	cmp	r3, r6
 8003560:	d1f2      	bne.n	8003548 <UART_WaitOnFlagUntilTimeout+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fe fc7f 	bl	8001e64 <HAL_GetTick>
 8003566:	eba0 0009 	sub.w	r0, r0, r9
 800356a:	4540      	cmp	r0, r8
 800356c:	d81e      	bhi.n	80035ac <UART_WaitOnFlagUntilTimeout+0x88>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800356e:	683c      	ldr	r4, [r7, #0]
 8003570:	4623      	mov	r3, r4
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003572:	f1b8 0f00 	cmp.w	r8, #0
 8003576:	d01a      	beq.n	80035ae <UART_WaitOnFlagUntilTimeout+0x8a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003578:	6823      	ldr	r3, [r4, #0]
 800357a:	0759      	lsls	r1, r3, #29
 800357c:	d5e9      	bpl.n	8003552 <UART_WaitOnFlagUntilTimeout+0x2e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800357e:	69e3      	ldr	r3, [r4, #28]
 8003580:	051a      	lsls	r2, r3, #20
 8003582:	d5e6      	bpl.n	8003552 <UART_WaitOnFlagUntilTimeout+0x2e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003584:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003588:	6223      	str	r3, [r4, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800358a:	6822      	ldr	r2, [r4, #0]
 800358c:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 8003590:	6022      	str	r2, [r4, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003592:	68a2      	ldr	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003594:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003596:	f022 0201 	bic.w	r2, r2, #1
 800359a:	60a2      	str	r2, [r4, #8]
          huart->gState = HAL_UART_STATE_READY;
 800359c:	677b      	str	r3, [r7, #116]	@ 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800359e:	67bb      	str	r3, [r7, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
          __HAL_UNLOCK(huart);
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
        return HAL_TIMEOUT;
 80035a8:	2003      	movs	r0, #3
 80035aa:	e7ce      	b.n	800354a <UART_WaitOnFlagUntilTimeout+0x26>
 80035ac:	683b      	ldr	r3, [r7, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	f422 72d0 	bic.w	r2, r2, #416	@ 0x1a0
 80035b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b6:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80035b8:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80035c0:	6779      	str	r1, [r7, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80035c2:	67b9      	str	r1, [r7, #120]	@ 0x78
        return HAL_TIMEOUT;
 80035c4:	e7ed      	b.n	80035a2 <UART_WaitOnFlagUntilTimeout+0x7e>
 80035c6:	bf00      	nop

080035c8 <HAL_UART_Transmit>:
{
 80035c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035cc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 80035ce:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80035d0:	2820      	cmp	r0, #32
{
 80035d2:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80035d4:	d178      	bne.n	80036c8 <HAL_UART_Transmit+0x100>
    if ((pData == NULL) || (Size == 0U))
 80035d6:	4689      	mov	r9, r1
 80035d8:	2900      	cmp	r1, #0
 80035da:	d045      	beq.n	8003668 <HAL_UART_Transmit+0xa0>
 80035dc:	4617      	mov	r7, r2
 80035de:	2a00      	cmp	r2, #0
 80035e0:	d042      	beq.n	8003668 <HAL_UART_Transmit+0xa0>
 80035e2:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 80035e4:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d06d      	beq.n	80036c8 <HAL_UART_Transmit+0x100>
 80035ec:	2301      	movs	r3, #1
 80035ee:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f2:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f6:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035f8:	f8c4 807c 	str.w	r8, [r4, #124]	@ 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035fc:	6763      	str	r3, [r4, #116]	@ 0x74
    tickstart = HAL_GetTick();
 80035fe:	f7fe fc31 	bl	8001e64 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003602:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8003604:	f8a4 7050 	strh.w	r7, [r4, #80]	@ 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003608:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800360c:	f8a4 7052 	strh.w	r7, [r4, #82]	@ 0x52
    tickstart = HAL_GetTick();
 8003610:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003612:	d05d      	beq.n	80036d0 <HAL_UART_Transmit+0x108>
      pdata16bits = NULL;
 8003614:	4647      	mov	r7, r8
    while (huart->TxXferCount > 0U)
 8003616:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
    __HAL_UNLOCK(huart);
 800361a:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 800361c:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 800361e:	f884 2070 	strb.w	r2, [r4, #112]	@ 0x70
    while (huart->TxXferCount > 0U)
 8003622:	b1b3      	cbz	r3, 8003652 <HAL_UART_Transmit+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003624:	6823      	ldr	r3, [r4, #0]
 8003626:	1c6a      	adds	r2, r5, #1
 8003628:	d122      	bne.n	8003670 <HAL_UART_Transmit+0xa8>
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	0611      	lsls	r1, r2, #24
 800362e:	d5fc      	bpl.n	800362a <HAL_UART_Transmit+0x62>
      if (pdata8bits == NULL)
 8003630:	f1b9 0f00 	cmp.w	r9, #0
 8003634:	d043      	beq.n	80036be <HAL_UART_Transmit+0xf6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003636:	f819 2b01 	ldrb.w	r2, [r9], #1
 800363a:	851a      	strh	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 800363c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8003640:	3a01      	subs	r2, #1
 8003642:	b292      	uxth	r2, r2
 8003644:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003648:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 800364c:	b292      	uxth	r2, r2
 800364e:	2a00      	cmp	r2, #0
 8003650:	d1e9      	bne.n	8003626 <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003652:	9500      	str	r5, [sp, #0]
 8003654:	4633      	mov	r3, r6
 8003656:	2200      	movs	r2, #0
 8003658:	2140      	movs	r1, #64	@ 0x40
 800365a:	4620      	mov	r0, r4
 800365c:	f7ff ff62 	bl	8003524 <UART_WaitOnFlagUntilTimeout>
 8003660:	bb48      	cbnz	r0, 80036b6 <HAL_UART_Transmit+0xee>
    huart->gState = HAL_UART_STATE_READY;
 8003662:	2320      	movs	r3, #32
 8003664:	6763      	str	r3, [r4, #116]	@ 0x74
    return HAL_OK;
 8003666:	e000      	b.n	800366a <HAL_UART_Transmit+0xa2>
      return  HAL_ERROR;
 8003668:	2001      	movs	r0, #1
}
 800366a:	b003      	add	sp, #12
 800366c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	f012 0880 	ands.w	r8, r2, #128	@ 0x80
 8003676:	d1db      	bne.n	8003630 <HAL_UART_Transmit+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003678:	f7fe fbf4 	bl	8001e64 <HAL_GetTick>
 800367c:	1b80      	subs	r0, r0, r6
 800367e:	4285      	cmp	r5, r0
 8003680:	d32c      	bcc.n	80036dc <HAL_UART_Transmit+0x114>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	461a      	mov	r2, r3
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003686:	b355      	cbz	r5, 80036de <HAL_UART_Transmit+0x116>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	0752      	lsls	r2, r2, #29
 800368c:	d5f0      	bpl.n	8003670 <HAL_UART_Transmit+0xa8>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800368e:	69da      	ldr	r2, [r3, #28]
 8003690:	0510      	lsls	r0, r2, #20
 8003692:	d5ed      	bpl.n	8003670 <HAL_UART_Transmit+0xa8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003694:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003698:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	f421 71d0 	bic.w	r1, r1, #416	@ 0x1a0
 80036a0:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a2:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80036a4:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a6:	f021 0101 	bic.w	r1, r1, #1
 80036aa:	6099      	str	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80036ac:	6762      	str	r2, [r4, #116]	@ 0x74
          __HAL_UNLOCK(huart);
 80036ae:	f884 8070 	strb.w	r8, [r4, #112]	@ 0x70
          huart->RxState = HAL_UART_STATE_READY;
 80036b2:	67a2      	str	r2, [r4, #120]	@ 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036b4:	67e2      	str	r2, [r4, #124]	@ 0x7c
        return HAL_TIMEOUT;
 80036b6:	2003      	movs	r0, #3
}
 80036b8:	b003      	add	sp, #12
 80036ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036be:	f837 2b02 	ldrh.w	r2, [r7], #2
 80036c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036c6:	e7b8      	b.n	800363a <HAL_UART_Transmit+0x72>
    __HAL_LOCK(huart);
 80036c8:	2002      	movs	r0, #2
}
 80036ca:	b003      	add	sp, #12
 80036cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d0:	6923      	ldr	r3, [r4, #16]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d19e      	bne.n	8003614 <HAL_UART_Transmit+0x4c>
 80036d6:	464f      	mov	r7, r9
      pdata8bits  = NULL;
 80036d8:	4699      	mov	r9, r3
 80036da:	e79c      	b.n	8003616 <HAL_UART_Transmit+0x4e>
 80036dc:	6822      	ldr	r2, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036de:	6813      	ldr	r3, [r2, #0]
 80036e0:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80036e4:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e6:	6893      	ldr	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80036e8:	2120      	movs	r1, #32
        __HAL_UNLOCK(huart);
 80036ea:	2000      	movs	r0, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ec:	f023 0301 	bic.w	r3, r3, #1
 80036f0:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80036f2:	6761      	str	r1, [r4, #116]	@ 0x74
        __HAL_UNLOCK(huart);
 80036f4:	f884 0070 	strb.w	r0, [r4, #112]	@ 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80036f8:	67a1      	str	r1, [r4, #120]	@ 0x78
        return HAL_TIMEOUT;
 80036fa:	2003      	movs	r0, #3
 80036fc:	e7dc      	b.n	80036b8 <HAL_UART_Transmit+0xf0>
 80036fe:	bf00      	nop

08003700 <TfLiteIntArrayGetSizeInBytes>:
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 8003700:	3001      	adds	r0, #1
}
 8003702:	0080      	lsls	r0, r0, #2
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop

08003708 <TfLiteTypeGetName>:
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
  switch (type) {
 8003708:	280c      	cmp	r0, #12
 800370a:	bf9a      	itte	ls
 800370c:	4b02      	ldrls	r3, [pc, #8]	@ (8003718 <TfLiteTypeGetName+0x10>)
 800370e:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
const char* TfLiteTypeGetName(TfLiteType type) {
 8003712:	4802      	ldrhi	r0, [pc, #8]	@ (800371c <TfLiteTypeGetName+0x14>)
      return "FLOAT16";
    case kTfLiteFloat64:
      return "FLOAT64";
  }
  return "Unknown type";
}
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	0801490c 	.word	0x0801490c
 800371c:	0801488c 	.word	0x0801488c

08003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8003720:	b40e      	push	{r1, r2, r3}
 8003722:	b500      	push	{lr}
 8003724:	b082      	sub	sp, #8
 8003726:	aa03      	add	r2, sp, #12
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
 8003728:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::Report(const char* format, ...) {
 800372a:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
 800372e:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
 8003730:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
 8003732:	4798      	blx	r3
  va_end(args);
  return code;
}
 8003734:	b002      	add	sp, #8
 8003736:	f85d eb04 	ldr.w	lr, [sp], #4
 800373a:	b003      	add	sp, #12
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop

08003740 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 8003740:	b40c      	push	{r2, r3}
 8003742:	b500      	push	{lr}
 8003744:	b083      	sub	sp, #12
 8003746:	aa04      	add	r2, sp, #16
  va_list args;
  va_start(args, format);
  int code = Report(format, args);
 8003748:	6803      	ldr	r3, [r0, #0]
int ErrorReporter::ReportError(void*, const char* format, ...) {
 800374a:	f852 1b04 	ldr.w	r1, [r2], #4
  int code = Report(format, args);
 800374e:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
 8003750:	9201      	str	r2, [sp, #4]
  int code = Report(format, args);
 8003752:	4798      	blx	r3
  va_end(args);
  return code;
}
 8003754:	b003      	add	sp, #12
 8003756:	f85d eb04 	ldr.w	lr, [sp], #4
 800375a:	b002      	add	sp, #8
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop

08003760 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 8003760:	b508      	push	{r3, lr}
 8003762:	4694      	mov	ip, r2
 8003764:	460b      	mov	r3, r1
  switch (tensor_type) {
 8003766:	280b      	cmp	r0, #11
 8003768:	d811      	bhi.n	800378e <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x2e>
 800376a:	e8df f000 	tbb	[pc, r0]
 800376e:	060a      	.short	0x060a
 8003770:	07070707 	.word	0x07070707
 8003774:	07070707 	.word	0x07070707
 8003778:	0c0e      	.short	0x0c0e
 800377a:	200a      	movs	r0, #10
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
      return kTfLiteOk;
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 800377c:	7018      	strb	r0, [r3, #0]
      return kTfLiteOk;
 800377e:	2000      	movs	r0, #0
      *type = kTfLiteNoType;
      TF_LITE_REPORT_ERROR(error_reporter,
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
  }
}
 8003780:	bd08      	pop	{r3, pc}
  switch (tensor_type) {
 8003782:	2001      	movs	r0, #1
 8003784:	e7fa      	b.n	800377c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      return kTfLiteOk;
 8003786:	200c      	movs	r0, #12
 8003788:	e7f8      	b.n	800377c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      return kTfLiteOk;
 800378a:	200b      	movs	r0, #11
 800378c:	e7f6      	b.n	800377c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>
      *type = kTfLiteNoType;
 800378e:	2200      	movs	r2, #0
 8003790:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 8003792:	4903      	ldr	r1, [pc, #12]	@ (80037a0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x40>)
 8003794:	4602      	mov	r2, r0
 8003796:	4660      	mov	r0, ip
 8003798:	f7ff ffc2 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 800379c:	2001      	movs	r0, #1
}
 800379e:	bd08      	pop	{r3, pc}
 80037a0:	08014940 	.word	0x08014940

080037a4 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  *builtin_data = params.release();
  return kTfLiteOk;
}

TfLiteStatus ParseConv2D(const Operator* op, ErrorReporter* error_reporter,
                         BuiltinDataAllocator* allocator, void** builtin_data) {
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	4604      	mov	r4, r0
  TFLITE_DCHECK(op != nullptr);
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d069      	beq.n	8003880 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
  TFLITE_DCHECK(error_reporter != nullptr);
 80037ac:	2900      	cmp	r1, #0
 80037ae:	d067      	beq.n	8003880 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
  TFLITE_DCHECK(allocator != nullptr);
 80037b0:	4610      	mov	r0, r2
 80037b2:	2a00      	cmp	r2, #0
 80037b4:	d064      	beq.n	8003880 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
  TFLITE_DCHECK(builtin_data != nullptr);
 80037b6:	461d      	mov	r5, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d061      	beq.n	8003880 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>
  template <typename T>
  T* AllocatePOD() {
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80037bc:	6813      	ldr	r3, [r2, #0]
 80037be:	2118      	movs	r1, #24
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2204      	movs	r2, #4
 80037c4:	4798      	blx	r3
    return data_ - ReadScalar<soffset_t>(data_);
 80037c6:	6823      	ldr	r3, [r4, #0]
 80037c8:	1ae3      	subs	r3, r4, r3
    return new (allocated_memory) T();
 80037ca:	2100      	movs	r1, #0
 80037cc:	e9c0 1100 	strd	r1, r1, [r0]
 80037d0:	e9c0 1102 	strd	r1, r1, [r0, #8]
 80037d4:	e9c0 1104 	strd	r1, r1, [r0, #16]
 80037d8:	8819      	ldrh	r1, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80037da:	290a      	cmp	r1, #10
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80037dc:	4602      	mov	r2, r0
 80037de:	d918      	bls.n	8003812 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
 80037e0:	8958      	ldrh	r0, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80037e2:	b1b0      	cbz	r0, 8003812 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
 80037e4:	f814 c000 	ldrb.w	ip, [r4, r0]
  const void *builtin_options() const {
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
  }
  template<typename T> const T *builtin_options_as() const;
  const tflite::Conv2DOptions *builtin_options_as_Conv2DOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_Conv2DOptions ? static_cast<const tflite::Conv2DOptions *>(builtin_options()) : nullptr;
 80037e8:	f1bc 0f01 	cmp.w	ip, #1
 80037ec:	d111      	bne.n	8003812 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80037ee:	290c      	cmp	r1, #12
 80037f0:	d90f      	bls.n	8003812 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
 80037f2:	899b      	ldrh	r3, [r3, #12]
  }

  template<typename P> P GetPointer(voffset_t field) {
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
 80037f4:	18e0      	adds	r0, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80037f6:	b163      	cbz	r3, 8003812 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6e>
 80037f8:	58e1      	ldr	r1, [r4, r3]
    return data_ - ReadScalar<soffset_t>(data_);
 80037fa:	5843      	ldr	r3, [r0, r1]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80037fc:	4408      	add	r0, r1
    return data_ - ReadScalar<soffset_t>(data_);
 80037fe:	1ac3      	subs	r3, r0, r3
 8003800:	881c      	ldrh	r4, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003802:	2c04      	cmp	r4, #4
 8003804:	d808      	bhi.n	8003818 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x74>
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const Conv2DOptions* schema_params = op->builtin_options_as_Conv2DOptions();

  if (schema_params != nullptr) {
    params->padding = ConvertPadding(schema_params->padding());
 8003806:	2301      	movs	r3, #1
 8003808:	7013      	strb	r3, [r2, #0]
    params->stride_width = schema_params->stride_w();
    params->stride_height = schema_params->stride_h();
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());

    params->dilation_width_factor = schema_params->dilation_w_factor();
 800380a:	2301      	movs	r3, #1
 800380c:	6113      	str	r3, [r2, #16]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800380e:	2301      	movs	r3, #1
    params->dilation_height_factor = schema_params->dilation_h_factor();
 8003810:	6153      	str	r3, [r2, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003812:	602a      	str	r2, [r5, #0]
  return kTfLiteOk;
}
 8003814:	2000      	movs	r0, #0
 8003816:	bd38      	pop	{r3, r4, r5, pc}
 8003818:	8899      	ldrh	r1, [r3, #4]
 800381a:	b141      	cbz	r1, 800382e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8a>
 800381c:	5641      	ldrsb	r1, [r0, r1]
  switch (padding) {
 800381e:	b131      	cbz	r1, 800382e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x8a>
 8003820:	f1a1 0101 	sub.w	r1, r1, #1
 8003824:	fab1 f181 	clz	r1, r1
 8003828:	0949      	lsrs	r1, r1, #5
 800382a:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800382e:	2c06      	cmp	r4, #6
    params->padding = ConvertPadding(schema_params->padding());
 8003830:	f882 c000 	strb.w	ip, [r2]
 8003834:	d9e9      	bls.n	800380a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x66>
 8003836:	88d9      	ldrh	r1, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003838:	b101      	cbz	r1, 800383c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
 800383a:	5841      	ldr	r1, [r0, r1]
    params->stride_width = schema_params->stride_w();
 800383c:	6051      	str	r1, [r2, #4]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800383e:	2c08      	cmp	r4, #8
 8003840:	d9e3      	bls.n	800380a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x66>
 8003842:	8919      	ldrh	r1, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003844:	b101      	cbz	r1, 8003848 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xa4>
 8003846:	5841      	ldr	r1, [r0, r1]
    params->stride_height = schema_params->stride_h();
 8003848:	6091      	str	r1, [r2, #8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800384a:	2c0a      	cmp	r4, #10
 800384c:	d9dd      	bls.n	800380a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x66>
 800384e:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003850:	b131      	cbz	r1, 8003860 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbc>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8003852:	5c41      	ldrb	r1, [r0, r1]
 8003854:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 8003858:	f1bc 0f04 	cmp.w	ip, #4
 800385c:	bf88      	it	hi
 800385e:	2100      	movhi	r1, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003860:	2c0c      	cmp	r4, #12
    params->activation =
 8003862:	7311      	strb	r1, [r2, #12]
 8003864:	d9d1      	bls.n	800380a <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x66>
 8003866:	8999      	ldrh	r1, [r3, #12]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003868:	b141      	cbz	r1, 800387c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
 800386a:	5841      	ldr	r1, [r0, r1]
    params->dilation_width_factor = schema_params->dilation_w_factor();
 800386c:	6111      	str	r1, [r2, #16]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800386e:	2c0e      	cmp	r4, #14
 8003870:	d9cd      	bls.n	800380e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6a>
 8003872:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0ca      	beq.n	800380e <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6a>
 8003878:	58c3      	ldr	r3, [r0, r3]
 800387a:	e7c9      	b.n	8003810 <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6c>
 800387c:	2101      	movs	r1, #1
 800387e:	e7f5      	b.n	800386c <_ZN6tflite11ParseConv2DEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc8>
  TFLITE_DCHECK(op != nullptr);
 8003880:	f00d fb1c 	bl	8010ebc <abort>

08003884 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 8003884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(op != nullptr);
 8003888:	2800      	cmp	r0, #0
 800388a:	d060      	beq.n	800394e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
  TFLITE_DCHECK(error_reporter != nullptr);
 800388c:	4688      	mov	r8, r1
 800388e:	2900      	cmp	r1, #0
 8003890:	d05d      	beq.n	800394e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
  TFLITE_DCHECK(allocator != nullptr);
 8003892:	4614      	mov	r4, r2
 8003894:	2a00      	cmp	r2, #0
 8003896:	d05a      	beq.n	800394e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003898:	461f      	mov	r7, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d057      	beq.n	800394e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xca>
 800389e:	6813      	ldr	r3, [r2, #0]
 80038a0:	4605      	mov	r5, r0
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2201      	movs	r2, #1
 80038a6:	2104      	movs	r1, #4
 80038a8:	4620      	mov	r0, r4
 80038aa:	4798      	blx	r3
    return data_ - ReadScalar<soffset_t>(data_);
 80038ac:	682b      	ldr	r3, [r5, #0]
 80038ae:	1aeb      	subs	r3, r5, r3
    return new (allocated_memory) T();
 80038b0:	2200      	movs	r2, #0
 80038b2:	6002      	str	r2, [r0, #0]
 80038b4:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80038b6:	2a0a      	cmp	r2, #10
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 80038b8:	4606      	mov	r6, r0
 80038ba:	d901      	bls.n	80038c0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
 80038bc:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80038be:	b919      	cbnz	r1, 80038c8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x44>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80038c0:	603e      	str	r6, [r7, #0]
  return kTfLiteOk;
 80038c2:	2000      	movs	r0, #0
}
 80038c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  const tflite::RNNOptions *builtin_options_as_RNNOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_RNNOptions ? static_cast<const tflite::RNNOptions *>(builtin_options()) : nullptr;
  }
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 80038c8:	5c69      	ldrb	r1, [r5, r1]
 80038ca:	2908      	cmp	r1, #8
 80038cc:	d1f8      	bne.n	80038c0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80038ce:	2a0c      	cmp	r2, #12
 80038d0:	d9f6      	bls.n	80038c0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
 80038d2:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
 80038d4:	18e9      	adds	r1, r5, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d0f2      	beq.n	80038c0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
 80038da:	58e8      	ldr	r0, [r5, r3]
    return data_ - ReadScalar<soffset_t>(data_);
 80038dc:	580b      	ldr	r3, [r1, r0]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80038de:	4408      	add	r0, r1
    return data_ - ReadScalar<soffset_t>(data_);
 80038e0:	1ac3      	subs	r3, r0, r3
 80038e2:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80038e4:	2a04      	cmp	r2, #4
 80038e6:	d9eb      	bls.n	80038c0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
 80038e8:	8899      	ldrh	r1, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80038ea:	b121      	cbz	r1, 80038f6 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x72>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 80038ec:	5c41      	ldrb	r1, [r0, r1]
 80038ee:	1e4d      	subs	r5, r1, #1
 80038f0:	2d04      	cmp	r5, #4
 80038f2:	bf88      	it	hi
 80038f4:	2100      	movhi	r1, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80038f6:	2a08      	cmp	r2, #8
    params->activation =
 80038f8:	7031      	strb	r1, [r6, #0]
 80038fa:	d925      	bls.n	8003948 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc4>
 80038fc:	8919      	ldrh	r1, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80038fe:	b119      	cbz	r1, 8003908 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x84>
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8003900:	5c41      	ldrb	r1, [r0, r1]
 8003902:	3900      	subs	r1, #0
 8003904:	bf18      	it	ne
 8003906:	2101      	movne	r1, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003908:	2a0a      	cmp	r2, #10
    params->keep_num_dims = schema_params->keep_num_dims();
 800390a:	70b1      	strb	r1, [r6, #2]
 800390c:	d906      	bls.n	800391c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
 800390e:	895a      	ldrh	r2, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003910:	b122      	cbz	r2, 800391c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8003912:	5c82      	ldrb	r2, [r0, r2]
 8003914:	3a00      	subs	r2, #0
 8003916:	bf18      	it	ne
 8003918:	2201      	movne	r2, #1
 800391a:	70f2      	strb	r2, [r6, #3]
 800391c:	88db      	ldrh	r3, [r3, #6]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0ce      	beq.n	80038c0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
 8003922:	56c3      	ldrsb	r3, [r0, r3]
    switch (schema_params->weights_format()) {
 8003924:	2b00      	cmp	r3, #0
 8003926:	d0cb      	beq.n	80038c0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xac>
        params->weights_format =
 800392c:	7073      	strb	r3, [r6, #1]
        break;
 800392e:	e7c7      	b.n	80038c0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
        TF_LITE_REPORT_ERROR(error_reporter,
 8003930:	4908      	ldr	r1, [pc, #32]	@ (8003954 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd0>)
 8003932:	4640      	mov	r0, r8
 8003934:	f7ff fef4 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    void operator()(void* data) { allocator_->Deallocate(data); }
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	4620      	mov	r0, r4
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	4631      	mov	r1, r6
 8003940:	4798      	blx	r3
        return kTfLiteError;
 8003942:	2001      	movs	r0, #1
}
 8003944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003948:	2a06      	cmp	r2, #6
 800394a:	d9b9      	bls.n	80038c0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x3c>
 800394c:	e7e6      	b.n	800391c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x98>
  TFLITE_DCHECK(op != nullptr);
 800394e:	f00d fab5 	bl	8010ebc <abort>
 8003952:	bf00      	nop
 8003954:	08014964 	.word	0x08014964

08003958 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
                        void**) {
  return kTfLiteOk;
}

TfLiteStatus ParsePool(const Operator* op, ErrorReporter* error_reporter,
                       BuiltinDataAllocator* allocator, void** builtin_data) {
 8003958:	b570      	push	{r4, r5, r6, lr}
 800395a:	4604      	mov	r4, r0
  TFLITE_DCHECK(op != nullptr);
 800395c:	2800      	cmp	r0, #0
 800395e:	d05e      	beq.n	8003a1e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003960:	2900      	cmp	r1, #0
 8003962:	d05c      	beq.n	8003a1e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
  TFLITE_DCHECK(allocator != nullptr);
 8003964:	4610      	mov	r0, r2
 8003966:	2a00      	cmp	r2, #0
 8003968:	d059      	beq.n	8003a1e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
  TFLITE_DCHECK(builtin_data != nullptr);
 800396a:	461e      	mov	r6, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d056      	beq.n	8003a1e <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc6>
 8003970:	6813      	ldr	r3, [r2, #0]
 8003972:	2128      	movs	r1, #40	@ 0x28
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2204      	movs	r2, #4
 8003978:	4798      	blx	r3
    return new (allocated_memory) T();
 800397a:	2228      	movs	r2, #40	@ 0x28
 800397c:	2100      	movs	r1, #0
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 800397e:	4605      	mov	r5, r0
    return new (allocated_memory) T();
 8003980:	f00e fa34 	bl	8011dec <memset>
    return data_ - ReadScalar<soffset_t>(data_);
 8003984:	6823      	ldr	r3, [r4, #0]
 8003986:	1ae3      	subs	r3, r4, r3
 8003988:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800398a:	2a0a      	cmp	r2, #10
 800398c:	d914      	bls.n	80039b8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
 800398e:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003990:	b191      	cbz	r1, 80039b8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    return builtin_options_type() == tflite::BuiltinOptions_Pool2DOptions ? static_cast<const tflite::Pool2DOptions *>(builtin_options()) : nullptr;
 8003992:	5c61      	ldrb	r1, [r4, r1]
 8003994:	2905      	cmp	r1, #5
 8003996:	d10f      	bne.n	80039b8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003998:	2a0c      	cmp	r2, #12
 800399a:	d90d      	bls.n	80039b8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
 800399c:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
 800399e:	18e2      	adds	r2, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80039a0:	b153      	cbz	r3, 80039b8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
 80039a2:	58e3      	ldr	r3, [r4, r3]
 80039a4:	18d1      	adds	r1, r2, r3
    return data_ - ReadScalar<soffset_t>(data_);
 80039a6:	58d3      	ldr	r3, [r2, r3]
 80039a8:	1acb      	subs	r3, r1, r3
 80039aa:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80039ac:	2a04      	cmp	r2, #4
 80039ae:	d806      	bhi.n	80039be <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x66>
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const Pool2DOptions* schema_params = op->builtin_options_as_Pool2DOptions();

  if (schema_params != nullptr) {
    params->padding = ConvertPadding(schema_params->padding());
 80039b0:	2301      	movs	r3, #1
 80039b2:	702b      	strb	r3, [r5, #0]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80039b4:	2300      	movs	r3, #0
    params->stride_width = schema_params->stride_w();
    params->stride_height = schema_params->stride_h();
    params->filter_width = schema_params->filter_width();
    params->filter_height = schema_params->filter_height();
    params->activation =
 80039b6:	752b      	strb	r3, [r5, #20]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80039b8:	6035      	str	r5, [r6, #0]
  return kTfLiteOk;
}
 80039ba:	2000      	movs	r0, #0
 80039bc:	bd70      	pop	{r4, r5, r6, pc}
 80039be:	8898      	ldrh	r0, [r3, #4]
 80039c0:	b358      	cbz	r0, 8003a1a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
 80039c2:	5608      	ldrsb	r0, [r1, r0]
  switch (padding) {
 80039c4:	b348      	cbz	r0, 8003a1a <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xc2>
 80039c6:	f1a0 0001 	sub.w	r0, r0, #1
 80039ca:	fab0 f080 	clz	r0, r0
 80039ce:	0940      	lsrs	r0, r0, #5
 80039d0:	0040      	lsls	r0, r0, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80039d2:	2a06      	cmp	r2, #6
    params->padding = ConvertPadding(schema_params->padding());
 80039d4:	7028      	strb	r0, [r5, #0]
 80039d6:	d9ed      	bls.n	80039b4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
 80039d8:	88d8      	ldrh	r0, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80039da:	b100      	cbz	r0, 80039de <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x86>
 80039dc:	5808      	ldr	r0, [r1, r0]
    params->stride_width = schema_params->stride_w();
 80039de:	6068      	str	r0, [r5, #4]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80039e0:	2a08      	cmp	r2, #8
 80039e2:	d9e7      	bls.n	80039b4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
 80039e4:	8918      	ldrh	r0, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80039e6:	b100      	cbz	r0, 80039ea <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x92>
 80039e8:	5808      	ldr	r0, [r1, r0]
    params->stride_height = schema_params->stride_h();
 80039ea:	60a8      	str	r0, [r5, #8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80039ec:	2a0a      	cmp	r2, #10
 80039ee:	d9e1      	bls.n	80039b4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
 80039f0:	8958      	ldrh	r0, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80039f2:	b100      	cbz	r0, 80039f6 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x9e>
 80039f4:	5808      	ldr	r0, [r1, r0]
    params->filter_width = schema_params->filter_width();
 80039f6:	60e8      	str	r0, [r5, #12]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80039f8:	2a0c      	cmp	r2, #12
 80039fa:	d9db      	bls.n	80039b4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
 80039fc:	8998      	ldrh	r0, [r3, #12]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80039fe:	b100      	cbz	r0, 8003a02 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xaa>
 8003a00:	5808      	ldr	r0, [r1, r0]
    params->filter_height = schema_params->filter_height();
 8003a02:	6128      	str	r0, [r5, #16]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003a04:	2a0e      	cmp	r2, #14
 8003a06:	d9d5      	bls.n	80039b4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
 8003a08:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0d2      	beq.n	80039b4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8003a0e:	5ccb      	ldrb	r3, [r1, r3]
 8003a10:	1e5a      	subs	r2, r3, #1
 8003a12:	2a04      	cmp	r2, #4
 8003a14:	d8ce      	bhi.n	80039b4 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5c>
    params->activation =
 8003a16:	752b      	strb	r3, [r5, #20]
 8003a18:	e7ce      	b.n	80039b8 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x60>
      return kTfLitePaddingSame;
 8003a1a:	2001      	movs	r0, #1
 8003a1c:	e7d9      	b.n	80039d2 <_ZN6tflite9ParsePoolEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x7a>
  TFLITE_DCHECK(op != nullptr);
 8003a1e:	f00d fa4d 	bl	8010ebc <abort>
 8003a22:	bf00      	nop

08003a24 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReducer(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4604      	mov	r4, r0
  TFLITE_DCHECK(op != nullptr);
 8003a28:	b370      	cbz	r0, 8003a88 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003a2a:	b369      	cbz	r1, 8003a88 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>
  TFLITE_DCHECK(allocator != nullptr);
 8003a2c:	4610      	mov	r0, r2
 8003a2e:	b35a      	cbz	r2, 8003a88 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003a30:	461d      	mov	r5, r3
 8003a32:	b34b      	cbz	r3, 8003a88 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x64>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003a34:	6813      	ldr	r3, [r2, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4611      	mov	r1, r2
 8003a3c:	4798      	blx	r3
    return data_ - ReadScalar<soffset_t>(data_);
 8003a3e:	6823      	ldr	r3, [r4, #0]
 8003a40:	1ae3      	subs	r3, r4, r3
    return new (allocated_memory) T();
 8003a42:	2200      	movs	r2, #0
 8003a44:	7002      	strb	r2, [r0, #0]
 8003a46:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003a48:	2a0a      	cmp	r2, #10
 8003a4a:	d917      	bls.n	8003a7c <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
 8003a4c:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003a4e:	b1a9      	cbz	r1, 8003a7c <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
  }
  const tflite::TransposeOptions *builtin_options_as_TransposeOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_TransposeOptions ? static_cast<const tflite::TransposeOptions *>(builtin_options()) : nullptr;
  }
  const tflite::ReducerOptions *builtin_options_as_ReducerOptions() const {
    return builtin_options_type() == tflite::BuiltinOptions_ReducerOptions ? static_cast<const tflite::ReducerOptions *>(builtin_options()) : nullptr;
 8003a50:	5c61      	ldrb	r1, [r4, r1]
 8003a52:	291b      	cmp	r1, #27
 8003a54:	d112      	bne.n	8003a7c <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003a56:	2a0c      	cmp	r2, #12
 8003a58:	d910      	bls.n	8003a7c <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
 8003a5a:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
 8003a5c:	18e1      	adds	r1, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003a5e:	b16b      	cbz	r3, 8003a7c <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
 8003a60:	58e3      	ldr	r3, [r4, r3]
 8003a62:	18ca      	adds	r2, r1, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8003a64:	58cb      	ldr	r3, [r1, r3]
 8003a66:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003a68:	8819      	ldrh	r1, [r3, #0]
 8003a6a:	2904      	cmp	r1, #4
 8003a6c:	d909      	bls.n	8003a82 <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
 8003a6e:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003a70:	b11b      	cbz	r3, 8003a7a <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x56>
    return GetField<uint8_t>(VT_KEEP_DIMS, 0) != 0;
 8003a72:	5cd3      	ldrb	r3, [r2, r3]
 8003a74:	3b00      	subs	r3, #0
 8003a76:	bf18      	it	ne
 8003a78:	2301      	movne	r3, #1
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const ReducerOptions* schema_params = op->builtin_options_as_ReducerOptions();

  if (schema_params != nullptr) {
    params->keep_dims = schema_params->keep_dims();
 8003a7a:	7003      	strb	r3, [r0, #0]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003a7c:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
}
 8003a7e:	2000      	movs	r0, #0
 8003a80:	bd38      	pop	{r3, r4, r5, pc}
 8003a82:	2300      	movs	r3, #0
    params->keep_dims = schema_params->keep_dims();
 8003a84:	7003      	strb	r3, [r0, #0]
 8003a86:	e7f9      	b.n	8003a7c <_ZN6tflite12ParseReducerEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x58>
  TFLITE_DCHECK(op != nullptr);
 8003a88:	f00d fa18 	bl	8010ebc <abort>

08003a8c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseReshape(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8003a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TFLITE_DCHECK(op != nullptr);
 8003a90:	2800      	cmp	r0, #0
 8003a92:	d067      	beq.n	8003b64 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003a94:	4688      	mov	r8, r1
 8003a96:	2900      	cmp	r1, #0
 8003a98:	d064      	beq.n	8003b64 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
  TFLITE_DCHECK(allocator != nullptr);
 8003a9a:	4614      	mov	r4, r2
 8003a9c:	2a00      	cmp	r2, #0
 8003a9e:	d061      	beq.n	8003b64 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003aa0:	461f      	mov	r7, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d05e      	beq.n	8003b64 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd8>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	4605      	mov	r5, r0
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2204      	movs	r2, #4
 8003aae:	2124      	movs	r1, #36	@ 0x24
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	4798      	blx	r3
    return new (allocated_memory) T();
 8003ab4:	2224      	movs	r2, #36	@ 0x24
 8003ab6:	2100      	movs	r1, #0
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003ab8:	4606      	mov	r6, r0
    return new (allocated_memory) T();
 8003aba:	f00e f997 	bl	8011dec <memset>
    return data_ - ReadScalar<soffset_t>(data_);
 8003abe:	682b      	ldr	r3, [r5, #0]
 8003ac0:	1aeb      	subs	r3, r5, r3
 8003ac2:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003ac4:	2a0a      	cmp	r2, #10
 8003ac6:	d901      	bls.n	8003acc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
 8003ac8:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003aca:	b919      	cbnz	r1, 8003ad4 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x48>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003acc:	603e      	str	r6, [r7, #0]
  return kTfLiteOk;
 8003ace:	2000      	movs	r0, #0
}
 8003ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return builtin_options_type() == tflite::BuiltinOptions_ReshapeOptions ? static_cast<const tflite::ReshapeOptions *>(builtin_options()) : nullptr;
 8003ad4:	5c69      	ldrb	r1, [r5, r1]
 8003ad6:	2911      	cmp	r1, #17
 8003ad8:	d1f8      	bne.n	8003acc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003ada:	2a0c      	cmp	r2, #12
 8003adc:	d9f6      	bls.n	8003acc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
 8003ade:	899a      	ldrh	r2, [r3, #12]
    auto p = data_ + field_offset;
 8003ae0:	18ab      	adds	r3, r5, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003ae2:	2a00      	cmp	r2, #0
 8003ae4:	d0f2      	beq.n	8003acc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
 8003ae6:	58a9      	ldr	r1, [r5, r2]
    return data_ - ReadScalar<soffset_t>(data_);
 8003ae8:	585a      	ldr	r2, [r3, r1]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003aea:	440b      	add	r3, r1
    return data_ - ReadScalar<soffset_t>(data_);
 8003aec:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003aee:	8811      	ldrh	r1, [r2, #0]
 8003af0:	2904      	cmp	r1, #4
 8003af2:	d9eb      	bls.n	8003acc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
 8003af4:	8892      	ldrh	r2, [r2, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003af6:	2a00      	cmp	r2, #0
 8003af8:	d0e8      	beq.n	8003acc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
 8003afa:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 8003afc:	4413      	add	r3, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003afe:	185a      	adds	r2, r3, r1
  uoffset_t size() const { return EndianScalar(length_); }
 8003b00:	585b      	ldr	r3, [r3, r1]
    if (num_dimensions > max_size_of_buffer / sizeof(int)) {
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d821      	bhi.n	8003b4a <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xbe>
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003b06:	b1f3      	cbz	r3, 8003b46 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xba>
        buffer[i] = flat_vector->Get(i);
 8003b08:	6851      	ldr	r1, [r2, #4]
 8003b0a:	6031      	str	r1, [r6, #0]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d01a      	beq.n	8003b46 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xba>
        buffer[i] = flat_vector->Get(i);
 8003b10:	6891      	ldr	r1, [r2, #8]
 8003b12:	6071      	str	r1, [r6, #4]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d016      	beq.n	8003b46 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xba>
        buffer[i] = flat_vector->Get(i);
 8003b18:	68d1      	ldr	r1, [r2, #12]
 8003b1a:	60b1      	str	r1, [r6, #8]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003b1c:	2b03      	cmp	r3, #3
 8003b1e:	d012      	beq.n	8003b46 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xba>
        buffer[i] = flat_vector->Get(i);
 8003b20:	6911      	ldr	r1, [r2, #16]
 8003b22:	60f1      	str	r1, [r6, #12]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d00e      	beq.n	8003b46 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xba>
        buffer[i] = flat_vector->Get(i);
 8003b28:	6951      	ldr	r1, [r2, #20]
 8003b2a:	6131      	str	r1, [r6, #16]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003b2c:	2b05      	cmp	r3, #5
 8003b2e:	d00a      	beq.n	8003b46 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xba>
        buffer[i] = flat_vector->Get(i);
 8003b30:	6991      	ldr	r1, [r2, #24]
 8003b32:	6171      	str	r1, [r6, #20]
      for (size_t i = 0; i < num_dimensions; ++i) {
 8003b34:	2b06      	cmp	r3, #6
 8003b36:	d006      	beq.n	8003b46 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xba>
 8003b38:	2b08      	cmp	r3, #8
        buffer[i] = flat_vector->Get(i);
 8003b3a:	69d1      	ldr	r1, [r2, #28]
 8003b3c:	bf08      	it	eq
 8003b3e:	6a12      	ldreq	r2, [r2, #32]
 8003b40:	61b1      	str	r1, [r6, #24]
 8003b42:	bf08      	it	eq
 8003b44:	61f2      	streq	r2, [r6, #28]
      params->num_dimensions = new_shape->size();
 8003b46:	6233      	str	r3, [r6, #32]
 8003b48:	e7c0      	b.n	8003acc <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x40>
      TF_LITE_REPORT_ERROR(
 8003b4a:	4a07      	ldr	r2, [pc, #28]	@ (8003b68 <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xdc>)
 8003b4c:	4907      	ldr	r1, [pc, #28]	@ (8003b6c <_ZN6tflite12ParseReshapeEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe0>)
 8003b4e:	4640      	mov	r0, r8
 8003b50:	f7ff fde6 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    void operator()(void* data) { allocator_->Deallocate(data); }
 8003b54:	6823      	ldr	r3, [r4, #0]
 8003b56:	4620      	mov	r0, r4
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	4798      	blx	r3
 8003b5e:	2001      	movs	r0, #1
}
 8003b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(op != nullptr);
 8003b64:	f00d f9aa 	bl	8010ebc <abort>
 8003b68:	08014990 	.word	0x08014990
 8003b6c:	08014998 	.word	0x08014998

08003b70 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
  return kTfLiteOk;
}

TfLiteStatus ParseSoftmax(const Operator* op, ErrorReporter* error_reporter,
                          BuiltinDataAllocator* allocator,
                          void** builtin_data) {
 8003b70:	b538      	push	{r3, r4, r5, lr}
 8003b72:	4604      	mov	r4, r0
  TFLITE_DCHECK(op != nullptr);
 8003b74:	b358      	cbz	r0, 8003bce <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
  TFLITE_DCHECK(error_reporter != nullptr);
 8003b76:	b351      	cbz	r1, 8003bce <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
  TFLITE_DCHECK(allocator != nullptr);
 8003b78:	4610      	mov	r0, r2
 8003b7a:	b342      	cbz	r2, 8003bce <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
  TFLITE_DCHECK(builtin_data != nullptr);
 8003b7c:	461d      	mov	r5, r3
 8003b7e:	b333      	cbz	r3, 8003bce <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5e>
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8003b80:	6813      	ldr	r3, [r2, #0]
 8003b82:	2204      	movs	r2, #4
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4611      	mov	r1, r2
 8003b88:	4798      	blx	r3
    return data_ - ReadScalar<soffset_t>(data_);
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	1ae3      	subs	r3, r4, r3
    return new (allocated_memory) T();
 8003b8e:	2200      	movs	r2, #0
 8003b90:	6002      	str	r2, [r0, #0]
 8003b92:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003b94:	2a0a      	cmp	r2, #10
 8003b96:	d915      	bls.n	8003bc4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54>
 8003b98:	8959      	ldrh	r1, [r3, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003b9a:	b199      	cbz	r1, 8003bc4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54>
    return builtin_options_type() == tflite::BuiltinOptions_SoftmaxOptions ? static_cast<const tflite::SoftmaxOptions *>(builtin_options()) : nullptr;
 8003b9c:	5c61      	ldrb	r1, [r4, r1]
 8003b9e:	2909      	cmp	r1, #9
 8003ba0:	d110      	bne.n	8003bc4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003ba2:	2a0c      	cmp	r2, #12
 8003ba4:	d90e      	bls.n	8003bc4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54>
 8003ba6:	899b      	ldrh	r3, [r3, #12]
    auto p = data_ + field_offset;
 8003ba8:	18e1      	adds	r1, r4, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003baa:	b15b      	cbz	r3, 8003bc4 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x54>
 8003bac:	58e3      	ldr	r3, [r4, r3]
 8003bae:	18ca      	adds	r2, r1, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8003bb0:	58cb      	ldr	r3, [r1, r3]
 8003bb2:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003bb4:	8819      	ldrh	r1, [r3, #0]
 8003bb6:	2904      	cmp	r1, #4
 8003bb8:	d907      	bls.n	8003bca <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5a>
 8003bba:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003bbc:	b12b      	cbz	r3, 8003bca <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x5a>
 8003bbe:	441a      	add	r2, r3
 8003bc0:	6813      	ldr	r3, [r2, #0]
  TF_LITE_ENSURE(error_reporter, params != nullptr);

  const SoftmaxOptions* schema_params = op->builtin_options_as_SoftmaxOptions();

  if (schema_params != nullptr) {
    params->beta = schema_params->beta();
 8003bc2:	6003      	str	r3, [r0, #0]
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 8003bc4:	6028      	str	r0, [r5, #0]
  return kTfLiteOk;
}
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	bd38      	pop	{r3, r4, r5, pc}
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e7f9      	b.n	8003bc2 <_ZN6tflite12ParseSoftmaxEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x52>
  TFLITE_DCHECK(op != nullptr);
 8003bce:	f00d f975 	bl	8010ebc <abort>
 8003bd2:	bf00      	nop

08003bd4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 8003bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bd8:	461e      	mov	r6, r3
 8003bda:	4605      	mov	r5, r0
  TfLiteStatus status = kTfLiteOk;
  *registration = nullptr;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	6033      	str	r3, [r6, #0]
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 8003be0:	460f      	mov	r7, r1
 8003be2:	4690      	mov	r8, r2
  auto builtin_code = GetBuiltinCode(opcode);
 8003be4:	f00c fe7a 	bl	80108dc <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
    return data_ - ReadScalar<soffset_t>(data_);
 8003be8:	682b      	ldr	r3, [r5, #0]
 8003bea:	eba5 0c03 	sub.w	ip, r5, r3
 8003bee:	4604      	mov	r4, r0
 8003bf0:	f8bc 3000 	ldrh.w	r3, [ip]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d929      	bls.n	8003c4c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x78>
 8003bf8:	f8bc 3008 	ldrh.w	r3, [ip, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003bfc:	b1c3      	cbz	r3, 8003c30 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x5c>
  int version = opcode->version();

  if (builtin_code > BuiltinOperator_MAX ||
 8003bfe:	2880      	cmp	r0, #128	@ 0x80
 8003c00:	d81d      	bhi.n	8003c3e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x6a>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 8003c02:	2820      	cmp	r0, #32
 8003c04:	f855 9003 	ldr.w	r9, [r5, r3]
 8003c08:	d126      	bne.n	8003c58 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x84>
 8003c0a:	f8bc 3006 	ldrh.w	r3, [ip, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8003c0e:	b383      	cbz	r3, 8003c72 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9e>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8003c10:	58e9      	ldr	r1, [r5, r3]
    auto p = data_ + field_offset;
 8003c12:	441d      	add	r5, r3
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
  } else {
    const char* name = opcode->custom_code()->c_str();
    *registration = op_resolver.FindOp(name, version);
 8003c14:	683b      	ldr	r3, [r7, #0]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8003c16:	3104      	adds	r1, #4
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	464a      	mov	r2, r9
 8003c1c:	4429      	add	r1, r5
 8003c1e:	4638      	mov	r0, r7
 8003c20:	4798      	blx	r3
 8003c22:	4603      	mov	r3, r0
    if (*registration == nullptr) {
 8003c24:	fab0 f080 	clz	r0, r0
    *registration = op_resolver.FindOp(name, version);
 8003c28:	6033      	str	r3, [r6, #0]
    if (*registration == nullptr) {
 8003c2a:	0940      	lsrs	r0, r0, #5
      // while preparing ops.
      status = kTfLiteError;
    }
  }
  return status;
}
 8003c2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (builtin_code > BuiltinOperator_MAX ||
 8003c30:	2880      	cmp	r0, #128	@ 0x80
 8003c32:	d804      	bhi.n	8003c3e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x6a>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 8003c34:	2820      	cmp	r0, #32
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003c36:	f04f 0901 	mov.w	r9, #1
 8003c3a:	d10d      	bne.n	8003c58 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x84>
 8003c3c:	e7e5      	b.n	8003c0a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
    TF_LITE_REPORT_ERROR(
 8003c3e:	4915      	ldr	r1, [pc, #84]	@ (8003c94 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc0>)
 8003c40:	4622      	mov	r2, r4
 8003c42:	4640      	mov	r0, r8
 8003c44:	f7ff fd6c 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
 8003c48:	2001      	movs	r0, #1
 8003c4a:	e7ef      	b.n	8003c2c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x58>
  if (builtin_code > BuiltinOperator_MAX ||
 8003c4c:	2880      	cmp	r0, #128	@ 0x80
 8003c4e:	d8f6      	bhi.n	8003c3e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x6a>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 8003c50:	2820      	cmp	r0, #32
 8003c52:	d00c      	beq.n	8003c6e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x9a>
 8003c54:	f04f 0901 	mov.w	r9, #1
    *registration = op_resolver.FindOp(builtin_code, version);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	4638      	mov	r0, r7
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	464a      	mov	r2, r9
 8003c60:	4621      	mov	r1, r4
 8003c62:	4798      	blx	r3
 8003c64:	6030      	str	r0, [r6, #0]
    if (*registration == nullptr) {
 8003c66:	b148      	cbz	r0, 8003c7c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa8>
  TfLiteStatus status = kTfLiteOk;
 8003c68:	2000      	movs	r0, #0
}
 8003c6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8003c6e:	2b06      	cmp	r3, #6
 8003c70:	d80d      	bhi.n	8003c8e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xba>
    TF_LITE_REPORT_ERROR(
 8003c72:	4909      	ldr	r1, [pc, #36]	@ (8003c98 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc4>)
 8003c74:	4640      	mov	r0, r8
 8003c76:	f7ff fd53 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    status = kTfLiteError;
 8003c7a:	e7e5      	b.n	8003c48 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x74>
  return EnumNamesBuiltinOperator()[index];
 8003c7c:	4b07      	ldr	r3, [pc, #28]	@ (8003c9c <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xc8>)
      TF_LITE_REPORT_ERROR(
 8003c7e:	4908      	ldr	r1, [pc, #32]	@ (8003ca0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xcc>)
 8003c80:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
 8003c84:	4640      	mov	r0, r8
 8003c86:	464b      	mov	r3, r9
 8003c88:	f7ff fd4a 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      status = kTfLiteError;
 8003c8c:	e7dc      	b.n	8003c48 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x74>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8003c8e:	f04f 0901 	mov.w	r9, #1
 8003c92:	e7ba      	b.n	8003c0a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x36>
 8003c94:	080149dc 	.word	0x080149dc
 8003c98:	08014a68 	.word	0x08014a68
 8003c9c:	08015078 	.word	0x08015078
 8003ca0:	08014a30 	.word	0x08014a30

08003ca4 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8003ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca8:	ec57 6b10 	vmov	r6, r7, d0
 8003cac:	4680      	mov	r8, r0
 8003cae:	460d      	mov	r5, r1
  if (double_multiplier == 0.) {
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	4630      	mov	r0, r6
 8003cb6:	4639      	mov	r1, r7
 8003cb8:	f7fc ff10 	bl	8000adc <__aeabi_dcmpeq>
 8003cbc:	b128      	cbz	r0, 8003cca <_ZN6tflite18QuantizeMultiplierEdPlPi+0x26>
    *quantized_multiplier = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	f8c8 3000 	str.w	r3, [r8]
    *shift = 0;
 8003cc4:	602b      	str	r3, [r5, #0]
  if (*shift < -31) {
    *shift = 0;
    q_fixed = 0;
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
}
 8003cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  const double q = std::frexp(double_multiplier, shift);
 8003cca:	ec47 6b10 	vmov	d0, r6, r7
 8003cce:	4604      	mov	r4, r0
 8003cd0:	4628      	mov	r0, r5
 8003cd2:	f00c feb1 	bl	8010a38 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8003cd6:	4b14      	ldr	r3, [pc, #80]	@ (8003d28 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x84>)
 8003cd8:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
 8003cda:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8003cde:	f7fc fc95 	bl	800060c <__aeabi_dmul>
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 8003ce2:	ec41 0b10 	vmov	d0, r0, r1
 8003ce6:	f00d f827 	bl	8010d38 <round>
 8003cea:	ec51 0b10 	vmov	r0, r1, d0
 8003cee:	f7fc ffcd 	bl	8000c8c <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8003cf2:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8003cf6:	4286      	cmp	r6, r0
 8003cf8:	eb74 0201 	sbcs.w	r2, r4, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8003cfc:	4603      	mov	r3, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8003cfe:	db10      	blt.n	8003d22 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x7e>
  if (q_fixed == (1ll << 31)) {
 8003d00:	42a1      	cmp	r1, r4
 8003d02:	bf08      	it	eq
 8003d04:	42b0      	cmpeq	r0, r6
    ++*shift;
 8003d06:	682a      	ldr	r2, [r5, #0]
  if (q_fixed == (1ll << 31)) {
 8003d08:	d103      	bne.n	8003d12 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x6e>
    ++*shift;
 8003d0a:	3201      	adds	r2, #1
 8003d0c:	602a      	str	r2, [r5, #0]
    q_fixed /= 2;
 8003d0e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  if (*shift < -31) {
 8003d12:	321f      	adds	r2, #31
    *shift = 0;
 8003d14:	bfbc      	itt	lt
 8003d16:	2300      	movlt	r3, #0
 8003d18:	602b      	strlt	r3, [r5, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8003d1a:	f8c8 3000 	str.w	r3, [r8]
}
 8003d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8003d22:	f00d f8cb 	bl	8010ebc <abort>
 8003d26:	bf00      	nop
 8003d28:	41e00000 	.word	0x41e00000
 8003d2c:	00000000 	.word	0x00000000

08003d30 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 8003d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 8003d34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003d38:	fa23 f000 	lsr.w	r0, r3, r0
                              int32_t* quantized_multiplier, int* left_shift) {
 8003d3c:	ec57 6b11 	vmov	r6, r7, d1
 8003d40:	ec59 8b10 	vmov	r8, r9, d0
 8003d44:	4614      	mov	r4, r2
 8003d46:	460d      	mov	r5, r1
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 8003d48:	f7fc fbf6 	bl	8000538 <__aeabi_i2d>
 8003d4c:	4632      	mov	r2, r6
 8003d4e:	463b      	mov	r3, r7
 8003d50:	4606      	mov	r6, r0
 8003d52:	460f      	mov	r7, r1
 8003d54:	4640      	mov	r0, r8
 8003d56:	4649      	mov	r1, r9
 8003d58:	f7fc fc58 	bl	800060c <__aeabi_dmul>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4630      	mov	r0, r6
 8003d62:	4639      	mov	r1, r7
 8003d64:	f7fc fc52 	bl	800060c <__aeabi_dmul>
    min(const _Tp& __a, const _Tp& __b)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8003d68:	a329      	add	r3, pc, #164	@ (adr r3, 8003e10 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xe0>)
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	4606      	mov	r6, r0
 8003d70:	460f      	mov	r7, r1
 8003d72:	f7fc fedb 	bl	8000b2c <__aeabi_dcmpgt>
 8003d76:	b9a0      	cbnz	r0, 8003da2 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x72>
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8003d78:	4680      	mov	r8, r0
 8003d7a:	4b27      	ldr	r3, [pc, #156]	@ (8003e18 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xe8>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	4630      	mov	r0, r6
 8003d80:	4639      	mov	r1, r7
 8003d82:	f7fc fed3 	bl	8000b2c <__aeabi_dcmpgt>
 8003d86:	b3c8      	cbz	r0, 8003dfc <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xcc>
  if (double_multiplier == 0.) {
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	4630      	mov	r0, r6
 8003d8e:	4639      	mov	r1, r7
 8003d90:	f7fc fea4 	bl	8000adc <__aeabi_dcmpeq>
 8003d94:	b140      	cbz	r0, 8003da8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x78>
    *quantized_multiplier = 0;
 8003d96:	f8c5 8000 	str.w	r8, [r5]
    *shift = 0;
 8003d9a:	f8c4 8000 	str.w	r8, [r4]
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
                                   quantized_multiplier, left_shift);
}
 8003d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return __b;
 8003da2:	a71b      	add	r7, pc, #108	@ (adr r7, 8003e10 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xe0>)
 8003da4:	e9d7 6700 	ldrd	r6, r7, [r7]
  const double q = std::frexp(double_multiplier, shift);
 8003da8:	ec47 6b10 	vmov	d0, r6, r7
 8003dac:	4620      	mov	r0, r4
 8003dae:	f00c fe43 	bl	8010a38 <frexp>
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8003db2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e1c <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xec>)
 8003db4:	2200      	movs	r2, #0
  const double q = std::frexp(double_multiplier, shift);
 8003db6:	ec51 0b10 	vmov	r0, r1, d0
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8003dba:	f7fc fc27 	bl	800060c <__aeabi_dmul>
 8003dbe:	ec41 0b10 	vmov	d0, r0, r1
 8003dc2:	f00c ffb9 	bl	8010d38 <round>
 8003dc6:	ec51 0b10 	vmov	r0, r1, d0
 8003dca:	f7fc ff5f 	bl	8000c8c <__aeabi_d2lz>
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8003dce:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	4286      	cmp	r6, r0
 8003dd6:	eb72 0301 	sbcs.w	r3, r2, r1
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8003dda:	4607      	mov	r7, r0
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8003ddc:	db0e      	blt.n	8003dfc <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xcc>
  if (q_fixed == (1ll << 31)) {
 8003dde:	4291      	cmp	r1, r2
 8003de0:	bf08      	it	eq
 8003de2:	42b0      	cmpeq	r0, r6
    ++*shift;
 8003de4:	6823      	ldr	r3, [r4, #0]
  if (q_fixed == (1ll << 31)) {
 8003de6:	d103      	bne.n	8003df0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xc0>
    ++*shift;
 8003de8:	3301      	adds	r3, #1
 8003dea:	6023      	str	r3, [r4, #0]
    q_fixed /= 2;
 8003dec:	f04f 4780 	mov.w	r7, #1073741824	@ 0x40000000
  if (*shift < -31) {
 8003df0:	f113 0f1f 	cmn.w	r3, #31
 8003df4:	db04      	blt.n	8003e00 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0xd0>
  TFLITE_CHECK_GE(*left_shift, 0);
 8003df6:	2b00      	cmp	r3, #0
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8003df8:	602f      	str	r7, [r5, #0]
  TFLITE_CHECK_GE(*left_shift, 0);
 8003dfa:	dad0      	bge.n	8003d9e <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x6e>
  TFLITE_CHECK_GT(double_multiplier, 1.);
 8003dfc:	f00d f85e 	bl	8010ebc <abort>
    *shift = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	6023      	str	r3, [r4, #0]
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8003e04:	602b      	str	r3, [r5, #0]
}
 8003e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e0a:	bf00      	nop
 8003e0c:	f3af 8000 	nop.w
 8003e10:	ffc00000 	.word	0xffc00000
 8003e14:	41dfffff 	.word	0x41dfffff
 8003e18:	3ff00000 	.word	0x3ff00000
 8003e1c:	41e00000 	.word	0x41e00000

08003e20 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 8003e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 8003e24:	2401      	movs	r4, #1
                         int total_signed_bits) {
 8003e26:	4607      	mov	r7, r0
      1.0 * ((1 << input_integer_bits) - 1) *
 8003e28:	fa04 f000 	lsl.w	r0, r4, r0
 8003e2c:	3801      	subs	r0, #1
                         int total_signed_bits) {
 8003e2e:	460e      	mov	r6, r1
 8003e30:	4615      	mov	r5, r2
      1.0 * ((1 << input_integer_bits) - 1) *
 8003e32:	f7fc fb81 	bl	8000538 <__aeabi_i2d>
      (1ll << (total_signed_bits - input_integer_bits)) /
 8003e36:	1bed      	subs	r5, r5, r7
      1.0 * ((1 << input_integer_bits) - 1) *
 8003e38:	4689      	mov	r9, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 8003e3a:	f1c5 0320 	rsb	r3, r5, #32
 8003e3e:	f1a5 0120 	sub.w	r1, r5, #32
 8003e42:	fa24 f303 	lsr.w	r3, r4, r3
 8003e46:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8003e4a:	4680      	mov	r8, r0
 8003e4c:	4319      	orrs	r1, r3
 8003e4e:	fa04 f005 	lsl.w	r0, r4, r5
 8003e52:	f7fc fbad 	bl	80005b0 <__aeabi_l2d>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4640      	mov	r0, r8
 8003e5c:	4649      	mov	r1, r9
 8003e5e:	f7fc fbd5 	bl	800060c <__aeabi_dmul>
      (1ll << input_left_shift);
 8003e62:	f1c6 0320 	rsb	r3, r6, #32
      1.0 * ((1 << input_integer_bits) - 1) *
 8003e66:	4689      	mov	r9, r1
      (1ll << input_left_shift);
 8003e68:	f1a6 0120 	sub.w	r1, r6, #32
 8003e6c:	fa24 f303 	lsr.w	r3, r4, r3
 8003e70:	fa04 f101 	lsl.w	r1, r4, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 8003e74:	4680      	mov	r8, r0
      (1ll << (total_signed_bits - input_integer_bits)) /
 8003e76:	4319      	orrs	r1, r3
 8003e78:	fa04 f006 	lsl.w	r0, r4, r6
 8003e7c:	f7fc fb98 	bl	80005b0 <__aeabi_l2d>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
  const double max_input_rescaled =
 8003e84:	4640      	mov	r0, r8
 8003e86:	4649      	mov	r1, r9
 8003e88:	f7fc fcea 	bl	8000860 <__aeabi_ddiv>
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 8003e8c:	ec41 0b10 	vmov	d0, r0, r1
 8003e90:	f00c fed6 	bl	8010c40 <floor>
 8003e94:	ec51 0b10 	vmov	r0, r1, d0
 8003e98:	f7fc fe68 	bl	8000b6c <__aeabi_d2iz>
#endif  // TFLITE_EMULATE_FLOAT
}
 8003e9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
  return -1;
}

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
  const int tensor_index = ValidateTensorIndexing(
 8003ea0:	6809      	ldr	r1, [r1, #0]
  if (index >= 0 && index < max_size) {
 8003ea2:	2a00      	cmp	r2, #0
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 8003ea4:	b410      	push	{r4}
  const int tensor_index = ValidateTensorIndexing(
 8003ea6:	f851 4b04 	ldr.w	r4, [r1], #4
  if (index >= 0 && index < max_size) {
 8003eaa:	db10      	blt.n	8003ece <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
 8003eac:	42a2      	cmp	r2, r4
 8003eae:	da0e      	bge.n	8003ece <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
    const int tensor_index = tensor_indices[index];
 8003eb0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
  if (tensor_index < 0) {
 8003eb4:	2900      	cmp	r1, #0
 8003eb6:	db0a      	blt.n	8003ece <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
  if (context->tensors != nullptr) {
 8003eb8:	6882      	ldr	r2, [r0, #8]
 8003eba:	b122      	cbz	r2, 8003ec6 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x26>
    return &context->tensors[tensor_index];
 8003ebc:	eb02 1081 	add.w	r0, r2, r1, lsl #6
  return GetMutableInput(context, node, index);
}
 8003ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ec4:	4770      	bx	lr
    return context->GetTensor(context, tensor_index);
 8003ec6:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8003ec8:	f85d 4b04 	ldr.w	r4, [sp], #4
    return context->GetTensor(context, tensor_index);
 8003ecc:	4718      	bx	r3
    return nullptr;
 8003ece:	2000      	movs	r0, #0
}
 8003ed0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop

08003ed8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
  const int tensor_index = ValidateTensorIndexing(
 8003ed8:	6849      	ldr	r1, [r1, #4]
  if (index >= 0 && index < max_size) {
 8003eda:	2a00      	cmp	r2, #0
                        int index) {
 8003edc:	b410      	push	{r4}
  const int tensor_index = ValidateTensorIndexing(
 8003ede:	f851 4b04 	ldr.w	r4, [r1], #4
  if (index >= 0 && index < max_size) {
 8003ee2:	db10      	blt.n	8003f06 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
 8003ee4:	4294      	cmp	r4, r2
 8003ee6:	dd0e      	ble.n	8003f06 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
    const int tensor_index = tensor_indices[index];
 8003ee8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
      context, index, node->outputs->size, node->outputs->data);
  if (tensor_index < 0) {
 8003eec:	2900      	cmp	r1, #0
 8003eee:	db0a      	blt.n	8003f06 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
  if (context->tensors != nullptr) {
 8003ef0:	6882      	ldr	r2, [r0, #8]
 8003ef2:	b122      	cbz	r2, 8003efe <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x26>
    return &context->tensors[tensor_index];
 8003ef4:	eb02 1081 	add.w	r0, r2, r1, lsl #6
    return nullptr;
  }
  return GetTensorAtIndex(context, tensor_index);
}
 8003ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003efc:	4770      	bx	lr
    return context->GetTensor(context, tensor_index);
 8003efe:	6d03      	ldr	r3, [r0, #80]	@ 0x50
}
 8003f00:	f85d 4b04 	ldr.w	r4, [sp], #4
    return context->GetTensor(context, tensor_index);
 8003f04:	4718      	bx	r3
    return nullptr;
 8003f06:	2000      	movs	r0, #0
}
 8003f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop

08003f10 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
                                          node->outputs->data, &tensor_index));
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
 8003f10:	6809      	ldr	r1, [r1, #0]
 8003f12:	2a00      	cmp	r2, #0
 8003f14:	b410      	push	{r4}
 8003f16:	f851 4b04 	ldr.w	r4, [r1], #4
 8003f1a:	db10      	blt.n	8003f3e <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x2e>
 8003f1c:	42a2      	cmp	r2, r4
 8003f1e:	da0e      	bge.n	8003f3e <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x2e>
 8003f20:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8003f24:	2900      	cmp	r1, #0
 8003f26:	db0a      	blt.n	8003f3e <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x2e>
 8003f28:	6882      	ldr	r2, [r0, #8]
 8003f2a:	b122      	cbz	r2, 8003f36 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei+0x26>
 8003f2c:	eb02 1081 	add.w	r0, r2, r1, lsl #6
 8003f30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8003f38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f3c:	4718      	bx	r3
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop

08003f48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8003f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f4c:	ed2d 8b02 	vpush	{d8}
 8003f50:	b082      	sub	sp, #8
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8003f52:	ed91 8a03 	vldr	s16, [r1, #12]
                                              double* multiplier) {
 8003f56:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
                                     static_cast<double>(filter->params.scale);
 8003f5a:	edd2 8a03 	vldr	s17, [r2, #12]
                                              double* multiplier) {
 8003f5e:	4605      	mov	r5, r0
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 8003f60:	b373      	cbz	r3, 8003fc0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x78>
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8003f62:	ee18 0a10 	vmov	r0, s16
 8003f66:	461c      	mov	r4, r3
 8003f68:	f7fc faf8 	bl	800055c <__aeabi_f2d>
 8003f6c:	4606      	mov	r6, r0
                                     static_cast<double>(filter->params.scale);
 8003f6e:	ee18 0a90 	vmov	r0, s17
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8003f72:	460f      	mov	r7, r1
                                     static_cast<double>(filter->params.scale);
 8003f74:	f7fc faf2 	bl	800055c <__aeabi_f2d>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	4639      	mov	r1, r7
 8003f80:	f7fc fb44 	bl	800060c <__aeabi_dmul>
 8003f84:	4606      	mov	r6, r0
    const double bias_scale = static_cast<double>(bias->params.scale);
 8003f86:	68e0      	ldr	r0, [r4, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8003f88:	460f      	mov	r7, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
 8003f8a:	f7fc fae7 	bl	800055c <__aeabi_f2d>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	460b      	mov	r3, r1
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 8003f92:	4630      	mov	r0, r6
 8003f94:	4639      	mov	r1, r7
 8003f96:	f7fc f981 	bl	800029c <__aeabi_dsub>
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8003f9a:	4606      	mov	r6, r0
    const double output_scale = static_cast<double>(output->params.scale);
 8003f9c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8003fa0:	f021 4700 	bic.w	r7, r1, #2147483648	@ 0x80000000
 8003fa4:	f7fc fada 	bl	800055c <__aeabi_f2d>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8003fac:	4630      	mov	r0, r6
 8003fae:	4639      	mov	r1, r7
 8003fb0:	f7fc fc56 	bl	8000860 <__aeabi_ddiv>
 8003fb4:	a324      	add	r3, pc, #144	@ (adr r3, 8004048 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 8003fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fba:	f7fc fda3 	bl	8000b04 <__aeabi_dcmple>
 8003fbe:	b308      	cbz	r0, 8004004 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xbc>
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8003fc0:	ee28 8a28 	vmul.f32	s16, s16, s17
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8003fc4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8003fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fcc:	db29      	blt.n	8004022 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xda>
  const double input_product_scale =
 8003fce:	ee18 0a10 	vmov	r0, s16
 8003fd2:	f7fc fac3 	bl	800055c <__aeabi_f2d>
 8003fd6:	4604      	mov	r4, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8003fd8:	f8d8 000c 	ldr.w	r0, [r8, #12]
  const double input_product_scale =
 8003fdc:	460d      	mov	r5, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8003fde:	f7fc fabd 	bl	800055c <__aeabi_f2d>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	460b      	mov	r3, r1
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	4629      	mov	r1, r5
 8003fea:	f7fc fc39 	bl	8000860 <__aeabi_ddiv>
 8003fee:	460b      	mov	r3, r1
 8003ff0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003ff2:	4602      	mov	r2, r0

  return kTfLiteOk;
 8003ff4:	2000      	movs	r0, #0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8003ff6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003ffa:	b002      	add	sp, #8
 8003ffc:	ecbd 8b02 	vpop	{d8}
 8004000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8004004:	4b0c      	ldr	r3, [pc, #48]	@ (8004038 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf0>)
 8004006:	696c      	ldr	r4, [r5, #20]
 8004008:	4a0c      	ldr	r2, [pc, #48]	@ (800403c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf4>)
 800400a:	9300      	str	r3, [sp, #0]
 800400c:	490c      	ldr	r1, [pc, #48]	@ (8004040 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800400e:	f240 1335 	movw	r3, #309	@ 0x135
 8004012:	4628      	mov	r0, r5
 8004014:	47a0      	blx	r4
                                              double* multiplier) {
 8004016:	2001      	movs	r0, #1
}
 8004018:	b002      	add	sp, #8
 800401a:	ecbd 8b02 	vpop	{d8}
 800401e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8004022:	4b08      	ldr	r3, [pc, #32]	@ (8004044 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8004024:	696c      	ldr	r4, [r5, #20]
 8004026:	4a05      	ldr	r2, [pc, #20]	@ (800403c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf4>)
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	4905      	ldr	r1, [pc, #20]	@ (8004040 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800402c:	f44f 73a1 	mov.w	r3, #322	@ 0x142
 8004030:	4628      	mov	r0, r5
 8004032:	47a0      	blx	r4
 8004034:	e7ef      	b.n	8004016 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xce>
 8004036:	bf00      	nop
 8004038:	080152cc 	.word	0x080152cc
 800403c:	08015280 	.word	0x08015280
 8004040:	080152b4 	.word	0x080152b4
 8004044:	080152f0 	.word	0x080152f0
 8004048:	47ae147b 	.word	0x47ae147b
 800404c:	3f947ae1 	.word	0x3f947ae1

08004050 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8004050:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_t qmin = 0;
  int32_t qmax = 0;
  if (output->type == kTfLiteUInt8) {
 8004052:	f892 c000 	ldrb.w	ip, [r2]
                                               int32_t* act_max) {
 8004056:	ed2d 8b02 	vpush	{d8}
  if (output->type == kTfLiteUInt8) {
 800405a:	f1bc 0f03 	cmp.w	ip, #3
                                               int32_t* act_max) {
 800405e:	b083      	sub	sp, #12
 8004060:	461c      	mov	r4, r3
  if (output->type == kTfLiteUInt8) {
 8004062:	d03e      	beq.n	80040e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
    qmin = std::numeric_limits<uint8_t>::min();
    qmax = std::numeric_limits<uint8_t>::max();
  } else if (output->type == kTfLiteInt8) {
 8004064:	f1bc 0f09 	cmp.w	ip, #9
 8004068:	d023      	beq.n	80040b2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x62>
    qmin = std::numeric_limits<int8_t>::min();
    qmax = std::numeric_limits<int8_t>::max();
  } else if (output->type == kTfLiteInt16) {
 800406a:	f1bc 0f07 	cmp.w	ip, #7
 800406e:	d113      	bne.n	8004098 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x48>
    qmin = std::numeric_limits<int16_t>::min();
 8004070:	4d34      	ldr	r5, [pc, #208]	@ (8004144 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf4>)
    qmax = std::numeric_limits<int16_t>::max();
 8004072:	f647 77ff 	movw	r7, #32767	@ 0x7fff
  if (activation == kTfLiteActRelu) {
 8004076:	2901      	cmp	r1, #1
 8004078:	ed92 8a03 	vldr	s16, [r2, #12]
 800407c:	6916      	ldr	r6, [r2, #16]
 800407e:	d021      	beq.n	80040c4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8004080:	2903      	cmp	r1, #3
 8004082:	d031      	beq.n	80040e8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x98>
  } else if (activation == kTfLiteActReluN1To1) {
 8004084:	2902      	cmp	r1, #2
 8004086:	d04c      	beq.n	8004122 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xd2>
    *act_max = std::min(qmax, quantize(6.0));
 8004088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    *act_min = std::max(qmin, quantize(0.0));
 800408a:	6025      	str	r5, [r4, #0]
    TF_LITE_ENSURE(context, false);
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
                                        act_max);
  return kTfLiteOk;
 800408c:	2000      	movs	r0, #0
    *act_max = std::min(qmax, quantize(6.0));
 800408e:	601f      	str	r7, [r3, #0]
}
 8004090:	b003      	add	sp, #12
 8004092:	ecbd 8b02 	vpop	{d8}
 8004096:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TF_LITE_ENSURE(context, false);
 8004098:	4b2b      	ldr	r3, [pc, #172]	@ (8004148 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xf8>)
 800409a:	6944      	ldr	r4, [r0, #20]
 800409c:	4a2b      	ldr	r2, [pc, #172]	@ (800414c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xfc>)
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	492b      	ldr	r1, [pc, #172]	@ (8004150 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x100>)
 80040a2:	f240 1375 	movw	r3, #373	@ 0x175
 80040a6:	47a0      	blx	r4
 80040a8:	2001      	movs	r0, #1
}
 80040aa:	b003      	add	sp, #12
 80040ac:	ecbd 8b02 	vpop	{d8}
 80040b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (activation == kTfLiteActRelu) {
 80040b2:	2901      	cmp	r1, #1
 80040b4:	ed92 8a03 	vldr	s16, [r2, #12]
 80040b8:	6916      	ldr	r6, [r2, #16]
    qmax = std::numeric_limits<int8_t>::max();
 80040ba:	f04f 077f 	mov.w	r7, #127	@ 0x7f
    qmin = std::numeric_limits<int8_t>::min();
 80040be:	f06f 057f 	mvn.w	r5, #127	@ 0x7f
  if (activation == kTfLiteActRelu) {
 80040c2:	d1dd      	bne.n	8004080 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x30>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 80040c4:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8004154 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80040c8:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80040cc:	f00c fc50 	bl	8010970 <roundf>
 80040d0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80040d4:	ee10 3a10 	vmov	r3, s0
 80040d8:	4433      	add	r3, r6
 80040da:	429d      	cmp	r5, r3
 80040dc:	bfb8      	it	lt
 80040de:	461d      	movlt	r5, r3
    *act_max = qmax;
 80040e0:	e7d2      	b.n	8004088 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x38>
    qmax = std::numeric_limits<uint8_t>::max();
 80040e2:	27ff      	movs	r7, #255	@ 0xff
    qmin = std::numeric_limits<uint8_t>::min();
 80040e4:	2500      	movs	r5, #0
 80040e6:	e7c6      	b.n	8004076 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x26>
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 80040e8:	ed9f 0a1a 	vldr	s0, [pc, #104]	@ 8004154 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x104>
 80040ec:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80040f0:	f00c fc3e 	bl	8010970 <roundf>
 80040f4:	eef1 7a08 	vmov.f32	s15, #24	@ 0x40c00000  6.0
 80040f8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80040fc:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8004100:	ee17 3a10 	vmov	r3, s14
 8004104:	4433      	add	r3, r6
 8004106:	429d      	cmp	r5, r3
 8004108:	bfb8      	it	lt
 800410a:	461d      	movlt	r5, r3
 800410c:	f00c fc30 	bl	8010970 <roundf>
 8004110:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004114:	ee10 3a10 	vmov	r3, s0
 8004118:	4433      	add	r3, r6
 800411a:	429f      	cmp	r7, r3
 800411c:	bfa8      	it	ge
 800411e:	461f      	movge	r7, r3
 8004120:	e7b2      	b.n	8004088 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x38>
 8004122:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8004126:	eec7 8a88 	vdiv.f32	s17, s15, s16
 800412a:	eeb0 0a68 	vmov.f32	s0, s17
 800412e:	f00c fc1f 	bl	8010970 <roundf>
 8004132:	eef0 7a40 	vmov.f32	s15, s0
 8004136:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800413a:	eeb1 0a68 	vneg.f32	s0, s17
 800413e:	ee17 3a90 	vmov	r3, s15
 8004142:	e7df      	b.n	8004104 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xb4>
 8004144:	ffff8000 	.word	0xffff8000
 8004148:	0801530c 	.word	0x0801530c
 800414c:	08015280 	.word	0x08015280
 8004150:	080152b4 	.word	0x080152b4
 8004154:	00000000 	.word	0x00000000

08004158 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 8004158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800415c:	ed2d 8b02 	vpush	{d8}
 8004160:	b095      	sub	sp, #84	@ 0x54
 8004162:	469b      	mov	fp, r3
 8004164:	e9dd a320 	ldrd	sl, r3, [sp, #128]	@ 0x80
 8004168:	9304      	str	r3, [sp, #16]
 800416a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800416c:	9307      	str	r3, [sp, #28]
 800416e:	460c      	mov	r4, r1
 8004170:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 8004172:	f891 1030 	ldrb.w	r1, [r1, #48]	@ 0x30
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 8004176:	930c      	str	r3, [sp, #48]	@ 0x30
 8004178:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800417a:	9305      	str	r3, [sp, #20]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800417c:	2901      	cmp	r1, #1
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 800417e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8004180:	9306      	str	r3, [sp, #24]
 8004182:	e9dd 7626 	ldrd	r7, r6, [sp, #152]	@ 0x98
 8004186:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8004188:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800418a:	d011      	beq.n	80041b0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x58>
 800418c:	4ba2      	ldr	r3, [pc, #648]	@ (8004418 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 800418e:	4ea3      	ldr	r6, [pc, #652]	@ (800441c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>)
 8004190:	2201      	movs	r2, #1
 8004192:	9203      	str	r2, [sp, #12]
 8004194:	6944      	ldr	r4, [r0, #20]
 8004196:	4aa2      	ldr	r2, [pc, #648]	@ (8004420 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c8>)
 8004198:	9102      	str	r1, [sp, #8]
 800419a:	e9cd 3600 	strd	r3, r6, [sp]
 800419e:	49a1      	ldr	r1, [pc, #644]	@ (8004424 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2cc>)
 80041a0:	23d0      	movs	r3, #208	@ 0xd0
 80041a2:	47a0      	blx	r4
 80041a4:	2001      	movs	r0, #1
}
 80041a6:	b015      	add	sp, #84	@ 0x54
 80041a8:	ecbd 8b02 	vpop	{d8}
 80041ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 80041b0:	f892 c030 	ldrb.w	ip, [r2, #48]	@ 0x30
 80041b4:	f1bc 0f01 	cmp.w	ip, #1
 80041b8:	d00b      	beq.n	80041d2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x7a>
 80041ba:	4e98      	ldr	r6, [pc, #608]	@ (800441c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>)
 80041bc:	4b9a      	ldr	r3, [pc, #616]	@ (8004428 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d0>)
 80041be:	6944      	ldr	r4, [r0, #20]
 80041c0:	4a97      	ldr	r2, [pc, #604]	@ (8004420 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c8>)
 80041c2:	e9cd c102 	strd	ip, r1, [sp, #8]
 80041c6:	e9cd 3600 	strd	r3, r6, [sp]
 80041ca:	4996      	ldr	r1, [pc, #600]	@ (8004424 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2cc>)
 80041cc:	23d2      	movs	r3, #210	@ 0xd2
 80041ce:	47a0      	blx	r4
 80041d0:	e7e8      	b.n	80041a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x4c>
  const auto* affine_quantization =
 80041d2:	6b51      	ldr	r1, [r2, #52]	@ 0x34
  TF_LITE_ENSURE(context, affine_quantization);
 80041d4:	2900      	cmp	r1, #0
 80041d6:	f000 80ff 	beq.w	80043d8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x280>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 80041da:	f8d1 8000 	ldr.w	r8, [r1]
 80041de:	f1b8 0f00 	cmp.w	r8, #0
 80041e2:	f000 80e3 	beq.w	80043ac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x254>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 80041e6:	f8d8 c000 	ldr.w	ip, [r8]
  if (is_per_channel) {
 80041ea:	f1bc 0f01 	cmp.w	ip, #1
 80041ee:	dd23      	ble.n	8004238 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xe0>
    TF_LITE_ENSURE(context,
 80041f0:	f894 e000 	ldrb.w	lr, [r4]
 80041f4:	f1be 0f09 	cmp.w	lr, #9
 80041f8:	d00a      	beq.n	8004210 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb8>
 80041fa:	f1be 0f07 	cmp.w	lr, #7
 80041fe:	d007      	beq.n	8004210 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb8>
 8004200:	4b8a      	ldr	r3, [pc, #552]	@ (800442c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d4>)
 8004202:	6944      	ldr	r4, [r0, #20]
 8004204:	4a86      	ldr	r2, [pc, #536]	@ (8004420 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c8>)
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	4989      	ldr	r1, [pc, #548]	@ (8004430 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d8>)
 800420a:	23e2      	movs	r3, #226	@ 0xe2
 800420c:	47a0      	blx	r4
 800420e:	e7c9      	b.n	80041a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x4c>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 8004210:	7810      	ldrb	r0, [r2, #0]
 8004212:	2809      	cmp	r0, #9
 8004214:	f040 80d2 	bne.w	80043bc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x264>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 8004218:	459c      	cmp	ip, r3
 800421a:	f000 80e5 	beq.w	80043e8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>
 800421e:	e9cd c302 	strd	ip, r3, [sp, #8]
 8004222:	4984      	ldr	r1, [pc, #528]	@ (8004434 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2dc>)
 8004224:	4a84      	ldr	r2, [pc, #528]	@ (8004438 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e0>)
 8004226:	696c      	ldr	r4, [r5, #20]
 8004228:	23e5      	movs	r3, #229	@ 0xe5
 800422a:	e9cd 2100 	strd	r2, r1, [sp]
 800422e:	4628      	mov	r0, r5
 8004230:	4a7b      	ldr	r2, [pc, #492]	@ (8004420 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c8>)
 8004232:	497c      	ldr	r1, [pc, #496]	@ (8004424 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2cc>)
 8004234:	47a0      	blx	r4
 8004236:	e7b5      	b.n	80041a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x4c>
  for (int i = 0; i < num_channels; ++i) {
 8004238:	2b00      	cmp	r3, #0
  const float input_scale = input->params.scale;
 800423a:	68e0      	ldr	r0, [r4, #12]
  const float output_scale = output->params.scale;
 800423c:	f8da 900c 	ldr.w	r9, [sl, #12]
  for (int i = 0; i < num_channels; ++i) {
 8004240:	930d      	str	r3, [sp, #52]	@ 0x34
 8004242:	dd3c      	ble.n	80042be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x166>
 8004244:	920e      	str	r2, [sp, #56]	@ 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 8004246:	f7fc f989 	bl	800055c <__aeabi_f2d>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	ec43 2b17 	vmov	d7, r2, r3
                                          static_cast<double>(output_scale);
 8004252:	4648      	mov	r0, r9
    const double effective_output_scale = static_cast<double>(input_scale) *
 8004254:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
                                          static_cast<double>(output_scale);
 8004258:	f7fc f980 	bl	800055c <__aeabi_f2d>
 800425c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800425e:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
 8004262:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004266:	a913      	add	r1, sp, #76	@ 0x4c
 8004268:	a812      	add	r0, sp, #72	@ 0x48
 800426a:	e9cd 540f 	strd	r5, r4, [sp, #60]	@ 0x3c
 800426e:	3f04      	subs	r7, #4
 8004270:	3e04      	subs	r6, #4
  for (int i = 0; i < num_channels; ++i) {
 8004272:	f04f 0900 	mov.w	r9, #0
 8004276:	461c      	mov	r4, r3
 8004278:	4605      	mov	r5, r0
 800427a:	468a      	mov	sl, r1
    const double filter_scale = static_cast<double>(scale);
 800427c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8004280:	f7fc f96c 	bl	800055c <__aeabi_f2d>
    const double effective_output_scale = static_cast<double>(input_scale) *
 8004284:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8004288:	f7fc f9c0 	bl	800060c <__aeabi_dmul>
 800428c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004290:	f7fc fae6 	bl	8000860 <__aeabi_ddiv>
 8004294:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 8004298:	4651      	mov	r1, sl
 800429a:	4628      	mov	r0, r5
 800429c:	f7ff fd02 	bl	8003ca4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  for (int i = 0; i < num_channels; ++i) {
 80042a0:	f109 0901 	add.w	r9, r9, #1
    per_channel_multiplier[i] = significand;
 80042a4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80042a6:	f847 3f04 	str.w	r3, [r7, #4]!
  for (int i = 0; i < num_channels; ++i) {
 80042aa:	454c      	cmp	r4, r9
    per_channel_shift[i] = channel_shift;
 80042ac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80042ae:	f846 3f04 	str.w	r3, [r6, #4]!
  for (int i = 0; i < num_channels; ++i) {
 80042b2:	d1e3      	bne.n	800427c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x124>
 80042b4:	e9dd 540f 	ldrd	r5, r4, [sp, #60]	@ 0x3c
 80042b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80042ba:	f8dd a044 	ldr.w	sl, [sp, #68]	@ 0x44
  if (input->type == kTfLiteUInt8) {
 80042be:	7823      	ldrb	r3, [r4, #0]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d005      	beq.n	80042d0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x178>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 80042c4:	2b09      	cmp	r3, #9
 80042c6:	d063      	beq.n	8004390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x238>
 80042c8:	2b07      	cmp	r3, #7
 80042ca:	d061      	beq.n	8004390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x238>
  return kTfLiteOk;
 80042cc:	2000      	movs	r0, #0
 80042ce:	e76a      	b.n	80041a6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x4e>
                                     static_cast<double>(filter->params.scale);
 80042d0:	edd2 8a03 	vldr	s17, [r2, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80042d4:	ed94 8a03 	vldr	s16, [r4, #12]
  if (bias) {
 80042d8:	f1bb 0f00 	cmp.w	fp, #0
 80042dc:	d031      	beq.n	8004342 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1ea>
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80042de:	ee18 0a10 	vmov	r0, s16
 80042e2:	f7fc f93b 	bl	800055c <__aeabi_f2d>
 80042e6:	4606      	mov	r6, r0
                                     static_cast<double>(filter->params.scale);
 80042e8:	ee18 0a90 	vmov	r0, s17
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80042ec:	460f      	mov	r7, r1
                                     static_cast<double>(filter->params.scale);
 80042ee:	f7fc f935 	bl	800055c <__aeabi_f2d>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80042f6:	4630      	mov	r0, r6
 80042f8:	4639      	mov	r1, r7
 80042fa:	f7fc f987 	bl	800060c <__aeabi_dmul>
 80042fe:	4606      	mov	r6, r0
    const double bias_scale = static_cast<double>(bias->params.scale);
 8004300:	f8db 000c 	ldr.w	r0, [fp, #12]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8004304:	460f      	mov	r7, r1
    const double bias_scale = static_cast<double>(bias->params.scale);
 8004306:	f7fc f929 	bl	800055c <__aeabi_f2d>
 800430a:	460b      	mov	r3, r1
 800430c:	4602      	mov	r2, r0
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800430e:	4639      	mov	r1, r7
 8004310:	4630      	mov	r0, r6
 8004312:	f7fb ffc3 	bl	800029c <__aeabi_dsub>
 8004316:	4602      	mov	r2, r0
    const double output_scale = static_cast<double>(output->params.scale);
 8004318:	f8da 000c 	ldr.w	r0, [sl, #12]
 800431c:	4616      	mov	r6, r2
 800431e:	f021 4700 	bic.w	r7, r1, #2147483648	@ 0x80000000
 8004322:	f7fc f91b 	bl	800055c <__aeabi_f2d>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800432a:	4630      	mov	r0, r6
 800432c:	4639      	mov	r1, r7
 800432e:	f7fc fa97 	bl	8000860 <__aeabi_ddiv>
 8004332:	a337      	add	r3, pc, #220	@ (adr r3, 8004410 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f7fc fbe4 	bl	8000b04 <__aeabi_dcmple>
 800433c:	2800      	cmp	r0, #0
 800433e:	f000 80c5 	beq.w	80044cc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x374>
      static_cast<double>(input->params.scale * filter->params.scale);
 8004342:	ee28 8a28 	vmul.f32	s16, s16, s17
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8004346:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800434a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434e:	f2c0 80c7 	blt.w	80044e0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x388>
  const double input_product_scale =
 8004352:	ee18 0a10 	vmov	r0, s16
 8004356:	f7fc f901 	bl	800055c <__aeabi_f2d>
 800435a:	4606      	mov	r6, r0
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800435c:	f8da 000c 	ldr.w	r0, [sl, #12]
  const double input_product_scale =
 8004360:	460f      	mov	r7, r1
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 8004362:	f7fc f8fb 	bl	800055c <__aeabi_f2d>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4630      	mov	r0, r6
 800436c:	4639      	mov	r1, r7
 800436e:	f7fc fa77 	bl	8000860 <__aeabi_ddiv>
 8004372:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 8004376:	a913      	add	r1, sp, #76	@ 0x4c
 8004378:	9807      	ldr	r0, [sp, #28]
 800437a:	f7ff fc93 	bl	8003ca4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800437e:	7823      	ldrb	r3, [r4, #0]
    *shift = -exponent;
 8004380:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8004382:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004384:	4252      	negs	r2, r2
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 8004386:	2b09      	cmp	r3, #9
    *shift = -exponent;
 8004388:	600a      	str	r2, [r1, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800438a:	d001      	beq.n	8004390 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x238>
 800438c:	2b03      	cmp	r3, #3
 800438e:	d19b      	bne.n	80042c8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x170>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8004390:	9b04      	ldr	r3, [sp, #16]
 8004392:	7819      	ldrb	r1, [r3, #0]
 8004394:	9b06      	ldr	r3, [sp, #24]
 8004396:	9320      	str	r3, [sp, #128]	@ 0x80
 8004398:	9b05      	ldr	r3, [sp, #20]
 800439a:	4652      	mov	r2, sl
 800439c:	4628      	mov	r0, r5
}
 800439e:	b015      	add	sp, #84	@ 0x54
 80043a0:	ecbd 8b02 	vpop	{d8}
 80043a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 80043a8:	f7ff be52 	b.w	8004050 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 80043ac:	4b23      	ldr	r3, [pc, #140]	@ (800443c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>)
 80043ae:	6944      	ldr	r4, [r0, #20]
 80043b0:	4a1b      	ldr	r2, [pc, #108]	@ (8004420 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c8>)
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	491e      	ldr	r1, [pc, #120]	@ (8004430 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d8>)
 80043b6:	23de      	movs	r3, #222	@ 0xde
 80043b8:	47a0      	blx	r4
 80043ba:	e6f3      	b.n	80041a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x4c>
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 80043bc:	4a20      	ldr	r2, [pc, #128]	@ (8004440 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e8>)
 80043be:	4b21      	ldr	r3, [pc, #132]	@ (8004444 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ec>)
 80043c0:	2109      	movs	r1, #9
 80043c2:	9103      	str	r1, [sp, #12]
 80043c4:	696c      	ldr	r4, [r5, #20]
 80043c6:	4917      	ldr	r1, [pc, #92]	@ (8004424 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2cc>)
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	e9cd 2001 	strd	r2, r0, [sp, #4]
 80043ce:	23e4      	movs	r3, #228	@ 0xe4
 80043d0:	4a13      	ldr	r2, [pc, #76]	@ (8004420 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c8>)
 80043d2:	4628      	mov	r0, r5
 80043d4:	47a0      	blx	r4
 80043d6:	e6e5      	b.n	80041a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x4c>
  TF_LITE_ENSURE(context, affine_quantization);
 80043d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004448 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2f0>)
 80043da:	6944      	ldr	r4, [r0, #20]
 80043dc:	4a10      	ldr	r2, [pc, #64]	@ (8004420 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c8>)
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	4913      	ldr	r1, [pc, #76]	@ (8004430 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2d8>)
 80043e2:	23dd      	movs	r3, #221	@ 0xdd
 80043e4:	47a0      	blx	r4
 80043e6:	e6dd      	b.n	80041a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x4c>
    TF_LITE_ENSURE_EQ(
 80043e8:	6888      	ldr	r0, [r1, #8]
 80043ea:	6891      	ldr	r1, [r2, #8]
 80043ec:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80043f0:	6849      	ldr	r1, [r1, #4]
 80043f2:	4561      	cmp	r1, ip
 80043f4:	d02c      	beq.n	8004450 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2f8>
 80043f6:	e9cd c102 	strd	ip, r1, [sp, #8]
 80043fa:	4a14      	ldr	r2, [pc, #80]	@ (800444c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2f4>)
 80043fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2dc>)
 80043fe:	696c      	ldr	r4, [r5, #20]
 8004400:	4908      	ldr	r1, [pc, #32]	@ (8004424 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2cc>)
 8004402:	e9cd 3200 	strd	r3, r2, [sp]
 8004406:	4628      	mov	r0, r5
 8004408:	4a05      	ldr	r2, [pc, #20]	@ (8004420 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c8>)
 800440a:	23e6      	movs	r3, #230	@ 0xe6
 800440c:	47a0      	blx	r4
 800440e:	e6c9      	b.n	80041a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x4c>
 8004410:	47ae147b 	.word	0x47ae147b
 8004414:	3f947ae1 	.word	0x3f947ae1
 8004418:	0801534c 	.word	0x0801534c
 800441c:	08015330 	.word	0x08015330
 8004420:	08015280 	.word	0x08015280
 8004424:	08015314 	.word	0x08015314
 8004428:	08015368 	.word	0x08015368
 800442c:	080153b4 	.word	0x080153b4
 8004430:	080152b4 	.word	0x080152b4
 8004434:	0801540c 	.word	0x0801540c
 8004438:	0801541c 	.word	0x0801541c
 800443c:	08015398 	.word	0x08015398
 8004440:	080153f0 	.word	0x080153f0
 8004444:	080153fc 	.word	0x080153fc
 8004448:	08015384 	.word	0x08015384
 800444c:	08015440 	.word	0x08015440
    const double effective_output_scale = static_cast<double>(input_scale) *
 8004450:	68e0      	ldr	r0, [r4, #12]
 8004452:	9311      	str	r3, [sp, #68]	@ 0x44
 8004454:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004456:	f7fc f881 	bl	800055c <__aeabi_f2d>
 800445a:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
                                          static_cast<double>(output_scale);
 800445e:	f8da 000c 	ldr.w	r0, [sl, #12]
 8004462:	f7fc f87b 	bl	800055c <__aeabi_f2d>
 8004466:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004468:	f8cd b040 	str.w	fp, [sp, #64]	@ 0x40
 800446c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004470:	a913      	add	r1, sp, #76	@ 0x4c
 8004472:	a812      	add	r0, sp, #72	@ 0x48
 8004474:	e9cd 540d 	strd	r5, r4, [sp, #52]	@ 0x34
 8004478:	f108 0804 	add.w	r8, r8, #4
 800447c:	3f04      	subs	r7, #4
 800447e:	3e04      	subs	r6, #4
  for (int i = 0; i < num_channels; ++i) {
 8004480:	f04f 0900 	mov.w	r9, #0
 8004484:	461c      	mov	r4, r3
 8004486:	4605      	mov	r5, r0
 8004488:	468b      	mov	fp, r1
    const double filter_scale = static_cast<double>(scale);
 800448a:	f858 0b04 	ldr.w	r0, [r8], #4
 800448e:	f7fc f865 	bl	800055c <__aeabi_f2d>
    const double effective_output_scale = static_cast<double>(input_scale) *
 8004492:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8004496:	f7fc f8b9 	bl	800060c <__aeabi_dmul>
 800449a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800449e:	f7fc f9df 	bl	8000860 <__aeabi_ddiv>
 80044a2:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 80044a6:	4659      	mov	r1, fp
 80044a8:	4628      	mov	r0, r5
 80044aa:	f7ff fbfb 	bl	8003ca4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  for (int i = 0; i < num_channels; ++i) {
 80044ae:	f109 0901 	add.w	r9, r9, #1
    per_channel_multiplier[i] = significand;
 80044b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80044b4:	f847 3f04 	str.w	r3, [r7, #4]!
  for (int i = 0; i < num_channels; ++i) {
 80044b8:	454c      	cmp	r4, r9
    per_channel_shift[i] = channel_shift;
 80044ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80044bc:	f846 3f04 	str.w	r3, [r6, #4]!
  for (int i = 0; i < num_channels; ++i) {
 80044c0:	d1e3      	bne.n	800448a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x332>
 80044c2:	e9dd 540d 	ldrd	r5, r4, [sp, #52]	@ 0x34
 80044c6:	e9dd 2b0f 	ldrd	r2, fp, [sp, #60]	@ 0x3c
 80044ca:	e6f8      	b.n	80042be <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x166>
    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 80044cc:	4b09      	ldr	r3, [pc, #36]	@ (80044f4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x39c>)
 80044ce:	696c      	ldr	r4, [r5, #20]
 80044d0:	4a09      	ldr	r2, [pc, #36]	@ (80044f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x3a0>)
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	4909      	ldr	r1, [pc, #36]	@ (80044fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x3a4>)
 80044d6:	f240 1335 	movw	r3, #309	@ 0x135
 80044da:	4628      	mov	r0, r5
 80044dc:	47a0      	blx	r4
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80044de:	e661      	b.n	80041a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x4c>
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80044e0:	4b07      	ldr	r3, [pc, #28]	@ (8004500 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x3a8>)
 80044e2:	696c      	ldr	r4, [r5, #20]
 80044e4:	4a04      	ldr	r2, [pc, #16]	@ (80044f8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x3a0>)
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	4904      	ldr	r1, [pc, #16]	@ (80044fc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x3a4>)
 80044ea:	f44f 73a1 	mov.w	r3, #322	@ 0x142
 80044ee:	4628      	mov	r0, r5
 80044f0:	47a0      	blx	r4
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 80044f2:	e657      	b.n	80041a4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x4c>
 80044f4:	080152cc 	.word	0x080152cc
 80044f8:	08015280 	.word	0x08015280
 80044fc:	080152b4 	.word	0x080152b4
 8004500:	080152f0 	.word	0x080152f0

08004504 <_ZN6tflite14AlignPointerUpEPhj>:
namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8004504:	1e4b      	subs	r3, r1, #1
 8004506:	4418      	add	r0, r3
 8004508:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
 800450c:	fb01 f000 	mul.w	r0, r1, r0
 8004510:	4770      	bx	lr
 8004512:	bf00      	nop

08004514 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8004514:	fbb0 f0f1 	udiv	r0, r0, r1
  return aligned_result;
}
 8004518:	fb01 f000 	mul.w	r0, r1, r0
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop

08004520 <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8004520:	1e43      	subs	r3, r0, #1
 8004522:	440b      	add	r3, r1
 8004524:	fbb3 f3f1 	udiv	r3, r3, r1
  return aligned_size;
}
 8004528:	fb01 f003 	mul.w	r0, r1, r3
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop

08004530 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
  switch (type) {
 8004530:	3801      	subs	r0, #1
 8004532:	280b      	cmp	r0, #11
 8004534:	d811      	bhi.n	800455a <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x2a>
 8004536:	e8df f000 	tbb	[pc, r0]
 800453a:	0e0e      	.short	0x0e0e
 800453c:	06100a06 	.word	0x06100a06
 8004540:	10060a14 	.word	0x10060a14
 8004544:	1210      	.short	0x1210
    case kTfLiteInt32:
      *size = sizeof(int32_t);
      break;
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
      break;
 8004546:	2301      	movs	r3, #1
      *size = sizeof(float);
 8004548:	600b      	str	r3, [r1, #0]
      *size = sizeof(double) * 2;
      break;
    default:
      return kTfLiteError;
  }
  return kTfLiteOk;
 800454a:	2000      	movs	r0, #0
 800454c:	4770      	bx	lr
      break;
 800454e:	2308      	movs	r3, #8
      *size = sizeof(float);
 8004550:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
 8004552:	2000      	movs	r0, #0
 8004554:	4770      	bx	lr
  switch (type) {
 8004556:	2304      	movs	r3, #4
 8004558:	e7f6      	b.n	8004548 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x18>
 800455a:	2001      	movs	r0, #1
}
 800455c:	4770      	bx	lr
      break;
 800455e:	2310      	movs	r3, #16
 8004560:	e7f2      	b.n	8004548 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x18>
  switch (type) {
 8004562:	2302      	movs	r3, #2
 8004564:	e7f0      	b.n	8004548 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x18>
 8004566:	bf00      	nop

08004568 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8004568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return data_ - ReadScalar<soffset_t>(data_);
 800456c:	6804      	ldr	r4, [r0, #0]
 800456e:	eba0 0e04 	sub.w	lr, r0, r4
 8004572:	4617      	mov	r7, r2
 8004574:	f8be 8000 	ldrh.w	r8, [lr]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004578:	f1b8 0f04 	cmp.w	r8, #4
 800457c:	b082      	sub	sp, #8
 800457e:	460e      	mov	r6, r1
 8004580:	461a      	mov	r2, r3
 8004582:	d92a      	bls.n	80045da <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x72>
 8004584:	f8be 3004 	ldrh.w	r3, [lr, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004588:	b3a3      	cbz	r3, 80045f4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x8c>
 800458a:	58c1      	ldr	r1, [r0, r3]
    auto p = data_ + field_offset;
 800458c:	4403      	add	r3, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800458e:	eb03 0c01 	add.w	ip, r3, r1
  uoffset_t size() const { return EndianScalar(length_); }
 8004592:	5859      	ldr	r1, [r3, r1]
  int element_count = 1;
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8004594:	b371      	cbz	r1, 80045f4 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x8c>
 8004596:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
  int element_count = 1;
 800459a:	2401      	movs	r4, #1
      element_count *= flatbuffer_tensor.shape()->Get(n);
 800459c:	f85c 5f04 	ldr.w	r5, [ip, #4]!
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 80045a0:	458c      	cmp	ip, r1
      element_count *= flatbuffer_tensor.shape()->Get(n);
 80045a2:	fb05 f404 	mul.w	r4, r5, r4
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 80045a6:	d1f9      	bne.n	800459c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x34>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80045a8:	f1b8 0f06 	cmp.w	r8, #6
 80045ac:	d932      	bls.n	8004614 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xac>
 80045ae:	f8be 3006 	ldrh.w	r3, [lr, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80045b2:	b1eb      	cbz	r3, 80045f0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x88>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 80045b4:	5cc0      	ldrb	r0, [r0, r3]
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 80045b6:	f10d 0107 	add.w	r1, sp, #7
 80045ba:	f7ff f8d1 	bl	8003760 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80045be:	b9a0      	cbnz	r0, 80045ea <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x82>
  switch (type) {
 80045c0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80045c4:	3b01      	subs	r3, #1
 80045c6:	2b0b      	cmp	r3, #11
 80045c8:	d822      	bhi.n	8004610 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xa8>
 80045ca:	e8df f003 	tbb	[pc, r3]
 80045ce:	1f1f      	.short	0x1f1f
 80045d0:	15211d15 	.word	0x15211d15
 80045d4:	21151d27 	.word	0x21151d27
 80045d8:	2521      	.short	0x2521
 80045da:	2000      	movs	r0, #0
  int element_count = 1;
 80045dc:	2401      	movs	r4, #1
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 80045de:	f10d 0107 	add.w	r1, sp, #7
 80045e2:	f7ff f8bd 	bl	8003760 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80045e6:	2800      	cmp	r0, #0
 80045e8:	d0ea      	beq.n	80045c0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x58>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
  *bytes = element_count * (*type_size);
  return kTfLiteOk;
}
 80045ea:	b002      	add	sp, #8
 80045ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045f0:	4618      	mov	r0, r3
 80045f2:	e7f4      	b.n	80045de <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x76>
  int element_count = 1;
 80045f4:	2401      	movs	r4, #1
 80045f6:	e7d7      	b.n	80045a8 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x40>
    case kTfLiteUInt8:
 80045f8:	2301      	movs	r3, #1
  *bytes = element_count * (*type_size);
 80045fa:	fb03 f404 	mul.w	r4, r3, r4
      *size = sizeof(int16_t);
 80045fe:	603b      	str	r3, [r7, #0]
  *bytes = element_count * (*type_size);
 8004600:	6034      	str	r4, [r6, #0]
}
 8004602:	b002      	add	sp, #8
 8004604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case kTfLiteInt64:
 8004608:	2308      	movs	r3, #8
 800460a:	e7f6      	b.n	80045fa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
  switch (type) {
 800460c:	2304      	movs	r3, #4
 800460e:	e7f4      	b.n	80045fa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 8004610:	2001      	movs	r0, #1
 8004612:	e7ea      	b.n	80045ea <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x82>
 8004614:	2000      	movs	r0, #0
 8004616:	e7e2      	b.n	80045de <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x76>
    case kTfLiteComplex128:
 8004618:	2310      	movs	r3, #16
 800461a:	e7ee      	b.n	80045fa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
  switch (type) {
 800461c:	2302      	movs	r3, #2
 800461e:	e7ec      	b.n	80045fa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>

08004620 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 8004620:	b538      	push	{r3, r4, r5, lr}
  TFLITE_DCHECK(out_bytes != nullptr);
 8004622:	b369      	cbz	r1, 8004680 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x60>

  int element_count = 1;
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 8004624:	6842      	ldr	r2, [r0, #4]
 8004626:	b312      	cbz	r2, 800466e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4e>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8004628:	6815      	ldr	r5, [r2, #0]
 800462a:	2d00      	cmp	r5, #0
 800462c:	dd1f      	ble.n	800466e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4e>
 800462e:	2300      	movs	r3, #0
  int element_count = 1;
 8004630:	f04f 0c01 	mov.w	ip, #1
      element_count *= eval_tensor->dims->data[n];
 8004634:	f852 4f04 	ldr.w	r4, [r2, #4]!
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8004638:	3301      	adds	r3, #1
 800463a:	42ab      	cmp	r3, r5
      element_count *= eval_tensor->dims->data[n];
 800463c:	fb04 fc0c 	mul.w	ip, r4, ip
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8004640:	d1f8      	bne.n	8004634 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
  switch (type) {
 8004642:	7a03      	ldrb	r3, [r0, #8]
 8004644:	3b01      	subs	r3, #1
 8004646:	2b0b      	cmp	r3, #11
 8004648:	d814      	bhi.n	8004674 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x54>
 800464a:	e8df f003 	tbb	[pc, r3]
 800464e:	0c0c      	.short	0x0c0c
 8004650:	06130e06 	.word	0x06130e06
 8004654:	13060e15 	.word	0x13060e15
 8004658:	1713      	.short	0x1713
 800465a:	2301      	movs	r3, #1
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
  *out_bytes = element_count * type_size;
 800465c:	fb03 f30c 	mul.w	r3, r3, ip
 8004660:	600b      	str	r3, [r1, #0]
  return kTfLiteOk;
 8004662:	2000      	movs	r0, #0
}
 8004664:	bd38      	pop	{r3, r4, r5, pc}
      *size = sizeof(float);
 8004666:	2304      	movs	r3, #4
 8004668:	e7f8      	b.n	800465c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3c>
      *size = sizeof(int64_t);
 800466a:	2308      	movs	r3, #8
 800466c:	e7f6      	b.n	800465c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3c>
  int element_count = 1;
 800466e:	f04f 0c01 	mov.w	ip, #1
 8004672:	e7e6      	b.n	8004642 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x22>
  switch (type) {
 8004674:	2001      	movs	r0, #1
}
 8004676:	bd38      	pop	{r3, r4, r5, pc}
      *size = sizeof(int16_t);
 8004678:	2302      	movs	r3, #2
 800467a:	e7ef      	b.n	800465c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3c>
      *size = sizeof(double) * 2;
 800467c:	2310      	movs	r3, #16
 800467e:	e7ed      	b.n	800465c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x3c>
  TFLITE_DCHECK(out_bytes != nullptr);
 8004680:	f00c fc1c 	bl	8010ebc <abort>

08004684 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
      : memory_allocator_(memory_allocator) {}

  void* Allocate(size_t size, size_t alignment_hint) override {
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 8004684:	6840      	ldr	r0, [r0, #4]
 8004686:	6803      	ldr	r3, [r0, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	4718      	bx	r3

0800468c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  }
  void Deallocate(void* data) override {
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop

08004690 <_ZN6tflite14MicroAllocatorD1Ev>:
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}

MicroAllocator::~MicroAllocator() {}
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop

08004694 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:
  model_is_allocating_ = false;
  return kTfLiteOk;
}

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 8004694:	6840      	ldr	r0, [r0, #4]
 8004696:	6803      	ldr	r3, [r0, #0]
 8004698:	2210      	movs	r2, #16
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	4718      	bx	r3
 800469e:	bf00      	nop

080046a0 <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:
  }
  return tensor;
}

void MicroAllocator::ResetTempAllocations() {
  memory_allocator_->ResetTempAllocations();
 80046a0:	6840      	ldr	r0, [r0, #4]
 80046a2:	6803      	ldr	r3, [r0, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	4718      	bx	r3

080046a8 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEPKNS_5ModelEP16TfLiteEvalTensori>:
  return kTfLiteOk;
}

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 80046a8:	6840      	ldr	r0, [r0, #4]
 80046aa:	6803      	ldr	r3, [r0, #0]
 80046ac:	2204      	movs	r2, #4
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	2140      	movs	r1, #64	@ 0x40
 80046b2:	4718      	bx	r3

080046b4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop

080046b8 <_ZN6tflite14MicroAllocatorD0Ev>:
MicroAllocator::~MicroAllocator() {}
 80046b8:	b510      	push	{r4, lr}
 80046ba:	2118      	movs	r1, #24
 80046bc:	4604      	mov	r4, r0
 80046be:	f00c f927 	bl	8010910 <_ZdlPvj>
 80046c2:	4620      	mov	r0, r4
 80046c4:	bd10      	pop	{r4, pc}
 80046c6:	bf00      	nop

080046c8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 80046c8:	b510      	push	{r4, lr}
 80046ca:	2108      	movs	r1, #8
 80046cc:	4604      	mov	r4, r0
 80046ce:	f00c f91f 	bl	8010910 <_ZdlPvj>
 80046d2:	4620      	mov	r0, r4
 80046d4:	bd10      	pop	{r4, pc}
 80046d6:	bf00      	nop

080046d8 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
}

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 80046d8:	b510      	push	{r4, lr}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 80046da:	b161      	cbz	r1, 80046f6 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1e>

  if (scratch_buffer_request_count_ == 0) {
 80046dc:	4613      	mov	r3, r2
 80046de:	6902      	ldr	r2, [r0, #16]
 80046e0:	b13a      	cbz	r2, 80046f2 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x1a>
 80046e2:	6840      	ldr	r0, [r0, #4]
 80046e4:	460c      	mov	r4, r1
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 80046e6:	0099      	lsls	r1, r3, #2
 80046e8:	6803      	ldr	r3, [r0, #0]
 80046ea:	2204      	movs	r2, #4
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	4798      	blx	r3
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 80046f0:	6020      	str	r0, [r4, #0]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));

  return kTfLiteOk;
}
 80046f2:	2000      	movs	r0, #0
 80046f4:	bd10      	pop	{r4, pc}
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 80046f6:	f00c fbe1 	bl	8010ebc <abort>
 80046fa:	bf00      	nop

080046fc <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:
                                               TfLiteEvalTensor* eval_tensors) {
 80046fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004700:	4688      	mov	r8, r1
 8004702:	6809      	ldr	r1, [r1, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8004704:	eba8 0101 	sub.w	r1, r8, r1
 8004708:	b082      	sub	sp, #8
 800470a:	880b      	ldrh	r3, [r1, #0]
 800470c:	4607      	mov	r7, r0
 800470e:	4616      	mov	r6, r2
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8004710:	2500      	movs	r5, #0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004712:	2b04      	cmp	r3, #4
 8004714:	d81c      	bhi.n	8004750 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x54>
  uoffset_t size() const { return EndianScalar(length_); }
 8004716:	2300      	movs	r3, #0
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	deff      	udf	#255	@ 0xff
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800471c:	f858 0003 	ldr.w	r0, [r8, r3]
    auto p = data_ + field_offset;
 8004720:	4443      	add	r3, r8
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004722:	181a      	adds	r2, r3, r0
 8004724:	581b      	ldr	r3, [r3, r0]
 8004726:	429d      	cmp	r5, r3
 8004728:	d22b      	bcs.n	8004782 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x86>
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800472a:	3501      	adds	r5, #1
    p += i * sizeof(uoffset_t);
 800472c:	eb02 0385 	add.w	r3, r2, r5, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004730:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8004734:	589c      	ldr	r4, [r3, r2]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004736:	4413      	add	r3, r2
    return data_ - ReadScalar<soffset_t>(data_);
 8004738:	eba3 0c04 	sub.w	ip, r3, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800473c:	f8bc 2000 	ldrh.w	r2, [ip]
 8004740:	2a0e      	cmp	r2, #14
 8004742:	d904      	bls.n	800474e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x52>
 8004744:	f8bc 200e 	ldrh.w	r2, [ip, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004748:	b10a      	cbz	r2, 800474e <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x52>
    if (tensor->is_variable()) {
 800474a:	5c9b      	ldrb	r3, [r3, r2]
 800474c:	b92b      	cbnz	r3, 800475a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x5e>
 800474e:	360c      	adds	r6, #12
 8004750:	888b      	ldrh	r3, [r1, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1e2      	bne.n	800471c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x20>
  uoffset_t size() const { return EndianScalar(length_); }
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	deff      	udf	#255	@ 0xff
      TF_LITE_ENSURE_STATUS(
 800475a:	a901      	add	r1, sp, #4
 800475c:	4630      	mov	r0, r6
 800475e:	f7ff ff5f 	bl	8004620 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8004762:	b978      	cbnz	r0, 8004784 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x88>
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	9901      	ldr	r1, [sp, #4]
 8004768:	6803      	ldr	r3, [r0, #0]
 800476a:	2210      	movs	r2, #16
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	4798      	blx	r3
      eval_tensors[i].data.data =
 8004770:	6030      	str	r0, [r6, #0]
      if (eval_tensors[i].data.data == nullptr) {
 8004772:	b150      	cbz	r0, 800478a <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x8e>
 8004774:	f8d8 1000 	ldr.w	r1, [r8]
    return data_ - ReadScalar<soffset_t>(data_);
 8004778:	eba8 0101 	sub.w	r1, r8, r1
 800477c:	360c      	adds	r6, #12
 800477e:	880b      	ldrh	r3, [r1, #0]
 8004780:	e7c7      	b.n	8004712 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x16>
  return kTfLiteOk;
 8004782:	2000      	movs	r0, #0
}
 8004784:	b002      	add	sp, #8
 8004786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        TF_LITE_REPORT_ERROR(error_reporter_,
 800478a:	9a01      	ldr	r2, [sp, #4]
 800478c:	4902      	ldr	r1, [pc, #8]	@ (8004798 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x9c>)
 800478e:	68b8      	ldr	r0, [r7, #8]
 8004790:	f7fe ffc6 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
 8004794:	2001      	movs	r0, #1
 8004796:	e7f5      	b.n	8004784 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x88>
 8004798:	08015480 	.word	0x08015480

0800479c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE>:
    const Model* model, NodeAndRegistration** node_and_registrations) {
 800479c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  TFLITE_DCHECK(node_and_registrations);
 800479e:	2a00      	cmp	r2, #0
 80047a0:	d032      	beq.n	8004808 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x6c>
 80047a2:	680b      	ldr	r3, [r1, #0]
 80047a4:	1acb      	subs	r3, r1, r3
 80047a6:	4614      	mov	r4, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80047a8:	881a      	ldrh	r2, [r3, #0]
 80047aa:	2a08      	cmp	r2, #8
 80047ac:	d92e      	bls.n	800480c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
 80047ae:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80047b0:	b363      	cbz	r3, 800480c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
    auto p = data_ + field_offset;
 80047b2:	18ca      	adds	r2, r1, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80047b4:	58cb      	ldr	r3, [r1, r3]
  if (subgraphs->size() != 1) {
 80047b6:	58d6      	ldr	r6, [r2, r3]
 80047b8:	2e01      	cmp	r6, #1
 80047ba:	4605      	mov	r5, r0
 80047bc:	eb02 0103 	add.w	r1, r2, r3
 80047c0:	d11e      	bne.n	8004800 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x64>
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80047c2:	684b      	ldr	r3, [r1, #4]
      memory_allocator_->AllocateFromTail(
 80047c4:	6840      	ldr	r0, [r0, #4]
 80047c6:	3304      	adds	r3, #4
 80047c8:	18ca      	adds	r2, r1, r3
    return data_ - ReadScalar<soffset_t>(data_);
 80047ca:	58cb      	ldr	r3, [r1, r3]
 80047cc:	6807      	ldr	r7, [r0, #0]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	68ff      	ldr	r7, [r7, #12]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80047d2:	8819      	ldrh	r1, [r3, #0]
 80047d4:	290a      	cmp	r1, #10
 80047d6:	d919      	bls.n	800480c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
 80047d8:	895b      	ldrh	r3, [r3, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80047da:	b1bb      	cbz	r3, 800480c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
  uoffset_t size() const { return EndianScalar(length_); }
 80047dc:	58d1      	ldr	r1, [r2, r3]
    auto p = data_ + field_offset;
 80047de:	441a      	add	r2, r3
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 80047e0:	5851      	ldr	r1, [r2, r1]
 80047e2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
      memory_allocator_->AllocateFromTail(
 80047e6:	00c9      	lsls	r1, r1, #3
 80047e8:	2204      	movs	r2, #4
 80047ea:	47b8      	blx	r7
  if (output == nullptr) {
 80047ec:	b110      	cbz	r0, 80047f4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x58>
  *node_and_registrations = output;
 80047ee:	6020      	str	r0, [r4, #0]
  return kTfLiteOk;
 80047f0:	2000      	movs	r0, #0
}
 80047f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(
 80047f4:	4907      	ldr	r1, [pc, #28]	@ (8004814 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x78>)
 80047f6:	68a8      	ldr	r0, [r5, #8]
 80047f8:	f7fe ff92 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 80047fc:	4630      	mov	r0, r6
}
 80047fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
 8004800:	4905      	ldr	r1, [pc, #20]	@ (8004818 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x7c>)
 8004802:	6880      	ldr	r0, [r0, #8]
 8004804:	f7fe ff8c 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TFLITE_DCHECK(subgraph != nullptr);
 8004808:	f00c fb58 	bl	8010ebc <abort>
  uoffset_t size() const { return EndianScalar(length_); }
 800480c:	2300      	movs	r3, #0
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	deff      	udf	#255	@ 0xff
 8004812:	bf00      	nop
 8004814:	080154dc 	.word	0x080154dc
 8004818:	080154b0 	.word	0x080154b0

0800481c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:
    NodeAndRegistration* node_and_registrations) {
 800481c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004820:	b08b      	sub	sp, #44	@ 0x2c
 8004822:	9201      	str	r2, [sp, #4]
  TFLITE_DCHECK(model != nullptr);
 8004824:	2900      	cmp	r1, #0
 8004826:	f000 80a7 	beq.w	8004978 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x15c>
  TFLITE_DCHECK(node_and_registrations != nullptr);
 800482a:	461c      	mov	r4, r3
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80a3 	beq.w	8004978 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x15c>
    return data_ - ReadScalar<soffset_t>(data_);
 8004832:	680a      	ldr	r2, [r1, #0]
 8004834:	1a8a      	subs	r2, r1, r2
 8004836:	4684      	mov	ip, r0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004838:	8810      	ldrh	r0, [r2, #0]
 800483a:	2808      	cmp	r0, #8
 800483c:	d97e      	bls.n	800493c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x120>
 800483e:	8910      	ldrh	r0, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004840:	2800      	cmp	r0, #0
 8004842:	f000 811a 	beq.w	8004a7a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x25e>
 8004846:	580b      	ldr	r3, [r1, r0]
    auto p = data_ + field_offset;
 8004848:	4408      	add	r0, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800484a:	18c5      	adds	r5, r0, r3
  if (subgraphs->size() != 1) {
 800484c:	58c3      	ldr	r3, [r0, r3]
 800484e:	2b01      	cmp	r3, #1
 8004850:	f040 810d 	bne.w	8004a6e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x252>
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004854:	686b      	ldr	r3, [r5, #4]
 8004856:	88d2      	ldrh	r2, [r2, #6]
 8004858:	3304      	adds	r3, #4
 800485a:	eb05 0b03 	add.w	fp, r5, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800485e:	2a00      	cmp	r2, #0
 8004860:	f000 80c2 	beq.w	80049e8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1cc>
 8004864:	588b      	ldr	r3, [r1, r2]
    auto p = data_ + field_offset;
 8004866:	eb01 0a02 	add.w	sl, r1, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800486a:	449a      	add	sl, r3
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 800486c:	f8dc 3004 	ldr.w	r3, [ip, #4]
      : memory_allocator_(memory_allocator) {}
 8004870:	9309      	str	r3, [sp, #36]	@ 0x24
 8004872:	4b83      	ldr	r3, [pc, #524]	@ (8004a80 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x264>)
 8004874:	9308      	str	r3, [sp, #32]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 8004876:	2600      	movs	r6, #0
 8004878:	f8cd c000 	str.w	ip, [sp]
    return data_ - ReadScalar<soffset_t>(data_);
 800487c:	f8db 3000 	ldr.w	r3, [fp]
 8004880:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004884:	881a      	ldrh	r2, [r3, #0]
 8004886:	2a0a      	cmp	r2, #10
 8004888:	d958      	bls.n	800493c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x120>
 800488a:	895b      	ldrh	r3, [r3, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800488c:	2b00      	cmp	r3, #0
 800488e:	f000 80a6 	beq.w	80049de <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1c2>
 8004892:	f85b 1003 	ldr.w	r1, [fp, r3]
    auto p = data_ + field_offset;
 8004896:	445b      	add	r3, fp
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004898:	185a      	adds	r2, r3, r1
 800489a:	585b      	ldr	r3, [r3, r1]
 800489c:	429e      	cmp	r6, r3
 800489e:	f080 80e2 	bcs.w	8004a66 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x24a>
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80048a2:	3601      	adds	r6, #1
    p += i * sizeof(uoffset_t);
 80048a4:	eb02 0986 	add.w	r9, r2, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80048a8:	f852 8026 	ldr.w	r8, [r2, r6, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 80048ac:	f859 3008 	ldr.w	r3, [r9, r8]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80048b0:	eb09 0508 	add.w	r5, r9, r8
    return data_ - ReadScalar<soffset_t>(data_);
 80048b4:	1aeb      	subs	r3, r5, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80048b6:	881a      	ldrh	r2, [r3, #0]
 80048b8:	2a04      	cmp	r2, #4
 80048ba:	d942      	bls.n	8004942 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x126>
 80048bc:	889f      	ldrh	r7, [r3, #4]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80048be:	b107      	cbz	r7, 80048c2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xa6>
 80048c0:	59ef      	ldr	r7, [r5, r7]
    if (index >= opcodes->size()) {
 80048c2:	f8da 3000 	ldr.w	r3, [sl]
      TF_LITE_REPORT_ERROR(error_reporter_,
 80048c6:	9a00      	ldr	r2, [sp, #0]
    if (index >= opcodes->size()) {
 80048c8:	42bb      	cmp	r3, r7
      TF_LITE_REPORT_ERROR(error_reporter_,
 80048ca:	6892      	ldr	r2, [r2, #8]
    if (index >= opcodes->size()) {
 80048cc:	f240 808e 	bls.w	80049ec <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1d0>
    p += i * sizeof(uoffset_t);
 80048d0:	1c7b      	adds	r3, r7, #1
 80048d2:	eb0a 0183 	add.w	r1, sl, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80048d6:	f85a 0023 	ldr.w	r0, [sl, r3, lsl #2]
    p += i * sizeof(uoffset_t);
 80048da:	9103      	str	r1, [sp, #12]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80048dc:	4401      	add	r1, r0
 80048de:	9005      	str	r0, [sp, #20]
 80048e0:	9104      	str	r1, [sp, #16]
 80048e2:	4608      	mov	r0, r1
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 80048e4:	f104 0324 	add.w	r3, r4, #36	@ 0x24
 80048e8:	9901      	ldr	r1, [sp, #4]
 80048ea:	f7ff f973 	bl	8003bd4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
                                  &(node_and_registrations[i].registration));
 80048ee:	9402      	str	r4, [sp, #8]
    if (status != kTfLiteOk) {
 80048f0:	2800      	cmp	r0, #0
 80048f2:	f040 8081 	bne.w	80049f8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1dc>
    const auto* registration = node_and_registrations[i].registration;
 80048f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    if (registration == nullptr) {
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	f000 8093 	beq.w	8004a24 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x208>
    BuiltinOperator op_type =
 80048fe:	7d19      	ldrb	r1, [r3, #20]
    return data_ - ReadScalar<soffset_t>(data_);
 8004900:	f859 3008 	ldr.w	r3, [r9, r8]
    unsigned char* builtin_data = nullptr;
 8004904:	9007      	str	r0, [sp, #28]
 8004906:	1aeb      	subs	r3, r5, r3
    if (op_type == BuiltinOperator_CUSTOM) {
 8004908:	2920      	cmp	r1, #32
 800490a:	881a      	ldrh	r2, [r3, #0]
 800490c:	d036      	beq.n	800497c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x160>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800490e:	2a0e      	cmp	r2, #14
 8004910:	d919      	bls.n	8004946 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x12a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004912:	89db      	ldrh	r3, [r3, #14]
 8004914:	b1bb      	cbz	r3, 8004946 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x12a>
  return (v < low) || (high < v);
 8004916:	2980      	cmp	r1, #128	@ 0x80
        TF_LITE_REPORT_ERROR(
 8004918:	f8dd c000 	ldr.w	ip, [sp]
  return EnumNamesBuiltinOperator()[index];
 800491c:	bf98      	it	ls
 800491e:	4b59      	ldrls	r3, [pc, #356]	@ (8004a84 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x268>)
 8004920:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8004924:	bf94      	ite	ls
 8004926:	f853 2021 	ldrls.w	r2, [r3, r1, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 800492a:	4a57      	ldrhi	r2, [pc, #348]	@ (8004a88 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26c>)
 800492c:	4957      	ldr	r1, [pc, #348]	@ (8004a8c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x270>)
 800492e:	f7fe fef7 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 8004932:	2301      	movs	r3, #1
}
 8004934:	4618      	mov	r0, r3
 8004936:	b00b      	add	sp, #44	@ 0x2c
 8004938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uoffset_t size() const { return EndianScalar(length_); }
 800493c:	2300      	movs	r3, #0
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	deff      	udf	#255	@ 0xff
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004942:	2700      	movs	r7, #0
 8004944:	e7bd      	b.n	80048c2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xa6>
          op_resolver.GetOpDataParser(op_type);
 8004946:	9801      	ldr	r0, [sp, #4]
 8004948:	9103      	str	r1, [sp, #12]
 800494a:	6803      	ldr	r3, [r0, #0]
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	4798      	blx	r3
      if (parser == nullptr) {
 8004950:	9903      	ldr	r1, [sp, #12]
 8004952:	4607      	mov	r7, r0
 8004954:	2800      	cmp	r0, #0
 8004956:	d075      	beq.n	8004a44 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x228>
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
 8004958:	9b00      	ldr	r3, [sp, #0]
 800495a:	aa08      	add	r2, sp, #32
 800495c:	6899      	ldr	r1, [r3, #8]
 800495e:	4628      	mov	r0, r5
 8004960:	ab07      	add	r3, sp, #28
 8004962:	47b8      	blx	r7
 8004964:	2800      	cmp	r0, #0
 8004966:	d17c      	bne.n	8004a62 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x246>
    return data_ - ReadScalar<soffset_t>(data_);
 8004968:	f859 3008 	ldr.w	r3, [r9, r8]
 800496c:	1aeb      	subs	r3, r5, r3
 800496e:	881a      	ldrh	r2, [r3, #0]
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8004970:	9900      	ldr	r1, [sp, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004972:	2a06      	cmp	r2, #6
 8004974:	6889      	ldr	r1, [r1, #8]
 8004976:	d82e      	bhi.n	80049d6 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ba>
  TFLITE_DCHECK(subgraph != nullptr);
 8004978:	f00c faa0 	bl	8010ebc <abort>
 800497c:	2a0e      	cmp	r2, #14
 800497e:	d9f7      	bls.n	8004970 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x154>
 8004980:	89d9      	ldrh	r1, [r3, #14]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004982:	b371      	cbz	r1, 80049e2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1c6>
 8004984:	5868      	ldr	r0, [r5, r1]
    auto p = data_ + field_offset;
 8004986:	eb05 0801 	add.w	r8, r5, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800498a:	eb08 0900 	add.w	r9, r8, r0
  uoffset_t size() const { return EndianScalar(length_); }
 800498e:	f858 8000 	ldr.w	r8, [r8, r0]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004992:	f109 0904 	add.w	r9, r9, #4
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8004996:	9900      	ldr	r1, [sp, #0]
 8004998:	6889      	ldr	r1, [r1, #8]
 800499a:	88df      	ldrh	r7, [r3, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800499c:	2f00      	cmp	r7, #0
 800499e:	d0eb      	beq.n	8004978 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x15c>
 80049a0:	59e8      	ldr	r0, [r5, r7]
    auto p = data_ + field_offset;
 80049a2:	442f      	add	r7, r5
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80049a4:	4407      	add	r7, r0
  TFLITE_DCHECK(error_reporter != nullptr);
 80049a6:	2900      	cmp	r1, #0
 80049a8:	d0e6      	beq.n	8004978 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x15c>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80049aa:	2a08      	cmp	r2, #8
 80049ac:	d9e4      	bls.n	8004978 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x15c>
 80049ae:	891a      	ldrh	r2, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80049b0:	3428      	adds	r4, #40	@ 0x28
    auto p = data_ + field_offset;
 80049b2:	18ab      	adds	r3, r5, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80049b4:	2a00      	cmp	r2, #0
 80049b6:	d0df      	beq.n	8004978 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x15c>
 80049b8:	58ad      	ldr	r5, [r5, r2]
    *node = {};
 80049ba:	9802      	ldr	r0, [sp, #8]
 80049bc:	2224      	movs	r2, #36	@ 0x24
 80049be:	2100      	movs	r1, #0
 80049c0:	441d      	add	r5, r3
 80049c2:	f00d fa13 	bl	8011dec <memset>
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 80049c6:	9b07      	ldr	r3, [sp, #28]
 80049c8:	f844 3c14 	str.w	r3, [r4, #-20]
    node->outputs = outputs_array;
 80049cc:	e944 750a 	strd	r7, r5, [r4, #-40]	@ 0x28
    node->custom_initial_data_size = custom_data_size;
 80049d0:	e944 9804 	strd	r9, r8, [r4, #-16]
 80049d4:	e752      	b.n	800487c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x60>
 80049d6:	f04f 0800 	mov.w	r8, #0
 80049da:	46c1      	mov	r9, r8
 80049dc:	e7dd      	b.n	800499a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x17e>
  uoffset_t size() const { return EndianScalar(length_); }
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	deff      	udf	#255	@ 0xff
    size_t custom_data_size = 0;
 80049e2:	4688      	mov	r8, r1
    const char* custom_data = nullptr;
 80049e4:	4689      	mov	r9, r1
 80049e6:	e7d6      	b.n	8004996 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x17a>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80049e8:	4692      	mov	sl, r2
 80049ea:	e73f      	b.n	800486c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x50>
      TF_LITE_REPORT_ERROR(error_reporter_,
 80049ec:	4928      	ldr	r1, [pc, #160]	@ (8004a90 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x274>)
 80049ee:	4610      	mov	r0, r2
 80049f0:	463a      	mov	r2, r7
 80049f2:	f7fe fe95 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 80049f6:	e79c      	b.n	8004932 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x116>
    return data_ - ReadScalar<soffset_t>(data_);
 80049f8:	9905      	ldr	r1, [sp, #20]
 80049fa:	9a03      	ldr	r2, [sp, #12]
 80049fc:	9c04      	ldr	r4, [sp, #16]
 80049fe:	5852      	ldr	r2, [r2, r1]
 8004a00:	f8dd c000 	ldr.w	ip, [sp]
 8004a04:	1aa2      	subs	r2, r4, r2
 8004a06:	4603      	mov	r3, r0
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004a08:	8811      	ldrh	r1, [r2, #0]
      TF_LITE_REPORT_ERROR(error_reporter_,
 8004a0a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8004a0e:	290a      	cmp	r1, #10
 8004a10:	d911      	bls.n	8004a36 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x21a>
 8004a12:	8952      	ldrh	r2, [r2, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004a14:	b17a      	cbz	r2, 8004a36 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x21a>
  return (v < low) || (high < v);
 8004a16:	5ca2      	ldrb	r2, [r4, r2]
 8004a18:	2a80      	cmp	r2, #128	@ 0x80
 8004a1a:	d826      	bhi.n	8004a6a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x24e>
  return EnumNamesBuiltinOperator()[index];
 8004a1c:	4919      	ldr	r1, [pc, #100]	@ (8004a84 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x268>)
 8004a1e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8004a22:	e009      	b.n	8004a38 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x21c>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 8004a24:	f8dd c000 	ldr.w	ip, [sp]
 8004a28:	491a      	ldr	r1, [pc, #104]	@ (8004a94 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x278>)
 8004a2a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8004a2e:	463a      	mov	r2, r7
 8004a30:	f7fe fe76 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 8004a34:	e77d      	b.n	8004932 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x116>
 8004a36:	4a18      	ldr	r2, [pc, #96]	@ (8004a98 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x27c>)
      TF_LITE_REPORT_ERROR(error_reporter_,
 8004a38:	4918      	ldr	r1, [pc, #96]	@ (8004a9c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x280>)
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	f7fe fe70 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return status;
 8004a40:	9b00      	ldr	r3, [sp, #0]
 8004a42:	e777      	b.n	8004934 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x118>
 8004a44:	2980      	cmp	r1, #128	@ 0x80
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 8004a46:	f8dd c000 	ldr.w	ip, [sp]
 8004a4a:	bf98      	it	ls
 8004a4c:	4b0d      	ldrls	r3, [pc, #52]	@ (8004a84 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x268>)
 8004a4e:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8004a52:	bf94      	ite	ls
 8004a54:	f853 2021 	ldrls.w	r2, [r3, r1, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 8004a58:	4a0b      	ldrhi	r2, [pc, #44]	@ (8004a88 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26c>)
 8004a5a:	4911      	ldr	r1, [pc, #68]	@ (8004aa0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x284>)
 8004a5c:	f7fe fe60 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        return kTfLiteError;
 8004a60:	e767      	b.n	8004932 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x116>
 8004a62:	4603      	mov	r3, r0
 8004a64:	e766      	b.n	8004934 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x118>
  return kTfLiteOk;
 8004a66:	2300      	movs	r3, #0
  }

  virtual ~BuiltinDataAllocator() {}
 8004a68:	e764      	b.n	8004934 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x118>
 8004a6a:	4a07      	ldr	r2, [pc, #28]	@ (8004a88 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26c>)
 8004a6c:	e7e4      	b.n	8004a38 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x21c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8004a6e:	490d      	ldr	r1, [pc, #52]	@ (8004aa4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x288>)
 8004a70:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8004a74:	f7fe fe54 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
 8004a78:	e77e      	b.n	8004978 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x15c>
  uoffset_t size() const { return EndianScalar(length_); }
 8004a7a:	6803      	ldr	r3, [r0, #0]
 8004a7c:	deff      	udf	#255	@ 0xff
 8004a7e:	bf00      	nop
 8004a80:	08015cdc 	.word	0x08015cdc
 8004a84:	08015078 	.word	0x08015078
 8004a88:	08013d6c 	.word	0x08013d6c
 8004a8c:	08015594 	.word	0x08015594
 8004a90:	08015514 	.word	0x08015514
 8004a94:	08015570 	.word	0x08015570
 8004a98:	08014aa0 	.word	0x08014aa0
 8004a9c:	08015540 	.word	0x08015540
 8004aa0:	080155dc 	.word	0x080155dc
 8004aa4:	080154b0 	.word	0x080154b0

08004aa8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8004aa8:	b508      	push	{r3, lr}
    return data_ - ReadScalar<soffset_t>(data_);
 8004aaa:	6803      	ldr	r3, [r0, #0]
 8004aac:	1ac3      	subs	r3, r0, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004aae:	881a      	ldrh	r2, [r3, #0]
 8004ab0:	2a08      	cmp	r2, #8
 8004ab2:	d918      	bls.n	8004ae6 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x3e>
 8004ab4:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004ab6:	b9d3      	cbnz	r3, 8004aee <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x46>
    FLATBUFFERS_ASSERT(i < size());
 8004ab8:	680a      	ldr	r2, [r1, #0]
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d219      	bcs.n	8004af2 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x4a>
    p += i * sizeof(uoffset_t);
 8004abe:	3301      	adds	r3, #1
 8004ac0:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004ac4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8004ac8:	5853      	ldr	r3, [r2, r1]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004aca:	440a      	add	r2, r1
    return data_ - ReadScalar<soffset_t>(data_);
 8004acc:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004ace:	8819      	ldrh	r1, [r3, #0]
 8004ad0:	2904      	cmp	r1, #4
 8004ad2:	d90a      	bls.n	8004aea <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x42>
 8004ad4:	8898      	ldrh	r0, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004ad6:	b128      	cbz	r0, 8004ae4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x3c>
 8004ad8:	5813      	ldr	r3, [r2, r0]
    auto p = data_ + field_offset;
 8004ada:	4402      	add	r2, r0
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004adc:	18d1      	adds	r1, r2, r3
      if (array->size()) {
 8004ade:	58d0      	ldr	r0, [r2, r3]
 8004ae0:	b100      	cbz	r0, 8004ae4 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x3c>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004ae2:	1d08      	adds	r0, r1, #4
}
 8004ae4:	bd08      	pop	{r3, pc}
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e7e6      	b.n	8004ab8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x10>
  void* out_buffer = nullptr;
 8004aea:	2000      	movs	r0, #0
}
 8004aec:	bd08      	pop	{r3, pc}
 8004aee:	58c3      	ldr	r3, [r0, r3]
 8004af0:	e7e2      	b.n	8004ab8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x10>
    FLATBUFFERS_ASSERT(i < size());
 8004af2:	4b03      	ldr	r3, [pc, #12]	@ (8004b00 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x58>)
 8004af4:	4a03      	ldr	r2, [pc, #12]	@ (8004b04 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x5c>)
 8004af6:	4804      	ldr	r0, [pc, #16]	@ (8004b08 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x60>)
 8004af8:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8004afc:	f00c f9e6 	bl	8010ecc <__assert_func>
 8004b00:	080155fc 	.word	0x080155fc
 8004b04:	08015608 	.word	0x08015608
 8004b08:	080156e8 	.word	0x080156e8

08004b0c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor>:
    const Model* model, TfLiteEvalTensor** eval_tensors) {
 8004b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b10:	b087      	sub	sp, #28
 8004b12:	9001      	str	r0, [sp, #4]
  TFLITE_DCHECK(eval_tensors != nullptr);
 8004b14:	2a00      	cmp	r2, #0
 8004b16:	f000 80d9 	beq.w	8004ccc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1c0>
    return data_ - ReadScalar<soffset_t>(data_);
 8004b1a:	680b      	ldr	r3, [r1, #0]
 8004b1c:	1acb      	subs	r3, r1, r3
 8004b1e:	4616      	mov	r6, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004b20:	881a      	ldrh	r2, [r3, #0]
 8004b22:	2a08      	cmp	r2, #8
 8004b24:	468a      	mov	sl, r1
 8004b26:	f240 80c9 	bls.w	8004cbc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1b0>
 8004b2a:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 80c5 	beq.w	8004cbc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1b0>
    auto p = data_ + field_offset;
 8004b32:	4419      	add	r1, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b34:	f85a 3003 	ldr.w	r3, [sl, r3]
  if (subgraphs->size() != 1) {
 8004b38:	58ca      	ldr	r2, [r1, r3]
 8004b3a:	2a01      	cmp	r2, #1
 8004b3c:	4419      	add	r1, r3
 8004b3e:	f040 80c0 	bne.w	8004cc2 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1b6>
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004b42:	684a      	ldr	r2, [r1, #4]
 8004b44:	3204      	adds	r2, #4
 8004b46:	eb01 0802 	add.w	r8, r1, r2
    return data_ - ReadScalar<soffset_t>(data_);
 8004b4a:	588a      	ldr	r2, [r1, r2]
 8004b4c:	eba8 0202 	sub.w	r2, r8, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004b50:	8811      	ldrh	r1, [r2, #0]
 8004b52:	2904      	cmp	r1, #4
 8004b54:	f240 80b2 	bls.w	8004cbc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1b0>
 8004b58:	8892      	ldrh	r2, [r2, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004b5a:	2a00      	cmp	r2, #0
 8004b5c:	f000 80ae 	beq.w	8004cbc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1b0>
  uoffset_t size() const { return EndianScalar(length_); }
 8004b60:	f858 1002 	ldr.w	r1, [r8, r2]
    auto p = data_ + field_offset;
 8004b64:	4442      	add	r2, r8
  uoffset_t size() const { return EndianScalar(length_); }
 8004b66:	5853      	ldr	r3, [r2, r1]
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 8004b68:	9a01      	ldr	r2, [sp, #4]
 8004b6a:	9303      	str	r3, [sp, #12]
 8004b6c:	6850      	ldr	r0, [r2, #4]
 8004b6e:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8004b72:	6802      	ldr	r2, [r0, #0]
 8004b74:	00a4      	lsls	r4, r4, #2
 8004b76:	68d5      	ldr	r5, [r2, #12]
 8004b78:	4621      	mov	r1, r4
 8004b7a:	2204      	movs	r2, #4
 8004b7c:	47a8      	blx	r5
  if (tensors == nullptr) {
 8004b7e:	4607      	mov	r7, r0
 8004b80:	2800      	cmp	r0, #0
 8004b82:	f000 808d 	beq.w	8004ca0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x194>
  for (size_t i = 0; i < alloc_count; ++i) {
 8004b86:	9b03      	ldr	r3, [sp, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8082 	beq.w	8004c92 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x186>
 8004b8e:	e9cd 0604 	strd	r0, r6, [sp, #16]
 8004b92:	f04f 0b00 	mov.w	fp, #0
 8004b96:	f100 0408 	add.w	r4, r0, #8
    return data_ - ReadScalar<soffset_t>(data_);
 8004b9a:	f8d8 2000 	ldr.w	r2, [r8]
 8004b9e:	eba8 0202 	sub.w	r2, r8, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004ba2:	8811      	ldrh	r1, [r2, #0]
 8004ba4:	2904      	cmp	r1, #4
 8004ba6:	f240 8089 	bls.w	8004cbc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1b0>
 8004baa:	8892      	ldrh	r2, [r2, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004bac:	2a00      	cmp	r2, #0
 8004bae:	f000 8085 	beq.w	8004cbc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1b0>
 8004bb2:	f858 1002 	ldr.w	r1, [r8, r2]
    auto p = data_ + field_offset;
 8004bb6:	4442      	add	r2, r8
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004bb8:	1855      	adds	r5, r2, r1
    FLATBUFFERS_ASSERT(i < size());
 8004bba:	5852      	ldr	r2, [r2, r1]
 8004bbc:	4593      	cmp	fp, r2
 8004bbe:	d276      	bcs.n	8004cae <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1a2>
    return data_ - ReadScalar<soffset_t>(data_);
 8004bc0:	f8da 2000 	ldr.w	r2, [sl]
 8004bc4:	ebaa 0202 	sub.w	r2, sl, r2
 8004bc8:	f10b 0601 	add.w	r6, fp, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004bcc:	8811      	ldrh	r1, [r2, #0]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004bce:	f855 9026 	ldr.w	r9, [r5, r6, lsl #2]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004bd2:	290c      	cmp	r1, #12
    p += i * sizeof(uoffset_t);
 8004bd4:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004bd8:	eb05 0709 	add.w	r7, r5, r9
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004bdc:	d94c      	bls.n	8004c78 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x16c>
 8004bde:	8992      	ldrh	r2, [r2, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004be0:	2a00      	cmp	r2, #0
 8004be2:	d05b      	beq.n	8004c9c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x190>
 8004be4:	f85a 1002 	ldr.w	r1, [sl, r2]
    auto p = data_ + field_offset;
 8004be8:	4452      	add	r2, sl
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004bea:	1853      	adds	r3, r2, r1
 8004bec:	9302      	str	r3, [sp, #8]
    return data_ - ReadScalar<soffset_t>(data_);
 8004bee:	f855 1009 	ldr.w	r1, [r5, r9]
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8004bf2:	9b01      	ldr	r3, [sp, #4]
 8004bf4:	1a79      	subs	r1, r7, r1
 8004bf6:	689b      	ldr	r3, [r3, #8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004bf8:	8808      	ldrh	r0, [r1, #0]
 8004bfa:	9300      	str	r3, [sp, #0]
  *result = {};
 8004bfc:	f1a4 0208 	sub.w	r2, r4, #8
 8004c00:	2300      	movs	r3, #0
 8004c02:	2806      	cmp	r0, #6
 8004c04:	e944 3302 	strd	r3, r3, [r4, #-8]
 8004c08:	6093      	str	r3, [r2, #8]
 8004c0a:	d911      	bls.n	8004c30 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x124>
 8004c0c:	88c8      	ldrh	r0, [r1, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004c0e:	b100      	cbz	r0, 8004c12 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x106>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8004c10:	5c38      	ldrb	r0, [r7, r0]
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8004c12:	9a00      	ldr	r2, [sp, #0]
 8004c14:	4621      	mov	r1, r4
 8004c16:	f7fe fda3 	bl	8003760 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8004c1a:	b180      	cbz	r0, 8004c3e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x132>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 8004c1c:	9b01      	ldr	r3, [sp, #4]
 8004c1e:	492c      	ldr	r1, [pc, #176]	@ (8004cd0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1c4>)
 8004c20:	6898      	ldr	r0, [r3, #8]
 8004c22:	465a      	mov	r2, fp
 8004c24:	f7fe fd7c 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8004c28:	2001      	movs	r0, #1
}
 8004c2a:	b007      	add	sp, #28
 8004c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8004c30:	9a00      	ldr	r2, [sp, #0]
 8004c32:	2000      	movs	r0, #0
 8004c34:	4621      	mov	r1, r4
 8004c36:	f7fe fd93 	bl	8003760 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d1ee      	bne.n	8004c1c <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x110>
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8004c3e:	9902      	ldr	r1, [sp, #8]
 8004c40:	4638      	mov	r0, r7
 8004c42:	f7ff ff31 	bl	8004aa8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    return data_ - ReadScalar<soffset_t>(data_);
 8004c46:	f855 3009 	ldr.w	r3, [r5, r9]
 8004c4a:	f844 0c08 	str.w	r0, [r4, #-8]
 8004c4e:	1afb      	subs	r3, r7, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004c50:	881a      	ldrh	r2, [r3, #0]
 8004c52:	2a04      	cmp	r2, #4
 8004c54:	d913      	bls.n	8004c7e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x172>
 8004c56:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c58:	b18b      	cbz	r3, 8004c7e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x172>
 8004c5a:	58fa      	ldr	r2, [r7, r3]
    auto p = data_ + field_offset;
 8004c5c:	441f      	add	r7, r3
  TFLITE_DCHECK(error_reporter != nullptr);
 8004c5e:	9b00      	ldr	r3, [sp, #0]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c60:	4417      	add	r7, r2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d032      	beq.n	8004ccc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1c0>
  for (size_t i = 0; i < alloc_count; ++i) {
 8004c66:	9b03      	ldr	r3, [sp, #12]
    *result = const_cast<kTfLiteArrayType*>(
 8004c68:	f844 7c04 	str.w	r7, [r4, #-4]
  for (size_t i = 0; i < alloc_count; ++i) {
 8004c6c:	42b3      	cmp	r3, r6
 8004c6e:	f104 040c 	add.w	r4, r4, #12
 8004c72:	d00c      	beq.n	8004c8e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x182>
 8004c74:	46b3      	mov	fp, r6
 8004c76:	e790      	b.n	8004b9a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x8e>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	9302      	str	r3, [sp, #8]
 8004c7c:	e7b7      	b.n	8004bee <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe2>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8004c7e:	4b15      	ldr	r3, [pc, #84]	@ (8004cd4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1c8>)
 8004c80:	f844 3c04 	str.w	r3, [r4, #-4]
  for (size_t i = 0; i < alloc_count; ++i) {
 8004c84:	9b03      	ldr	r3, [sp, #12]
 8004c86:	42b3      	cmp	r3, r6
 8004c88:	f104 040c 	add.w	r4, r4, #12
 8004c8c:	d1f2      	bne.n	8004c74 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x168>
 8004c8e:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
  return kTfLiteOk;
 8004c92:	2000      	movs	r0, #0
  *eval_tensors = tensors;
 8004c94:	6037      	str	r7, [r6, #0]
}
 8004c96:	b007      	add	sp, #28
 8004c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c9c:	9202      	str	r2, [sp, #8]
 8004c9e:	e7a6      	b.n	8004bee <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe2>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8004ca0:	9b01      	ldr	r3, [sp, #4]
 8004ca2:	490d      	ldr	r1, [pc, #52]	@ (8004cd8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1cc>)
 8004ca4:	6898      	ldr	r0, [r3, #8]
 8004ca6:	4622      	mov	r2, r4
 8004ca8:	f7fe fd3a 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8004cac:	e7bc      	b.n	8004c28 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x11c>
    FLATBUFFERS_ASSERT(i < size());
 8004cae:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1d0>)
 8004cb0:	4a0b      	ldr	r2, [pc, #44]	@ (8004ce0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1d4>)
 8004cb2:	480c      	ldr	r0, [pc, #48]	@ (8004ce4 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1d8>)
 8004cb4:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8004cb8:	f00c f908 	bl	8010ecc <__assert_func>
  uoffset_t size() const { return EndianScalar(length_); }
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	deff      	udf	#255	@ 0xff
    TF_LITE_REPORT_ERROR(error_reporter_,
 8004cc2:	9b01      	ldr	r3, [sp, #4]
 8004cc4:	4908      	ldr	r1, [pc, #32]	@ (8004ce8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x1dc>)
 8004cc6:	6898      	ldr	r0, [r3, #8]
 8004cc8:	f7fe fd2a 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TFLITE_DCHECK(subgraph != nullptr);
 8004ccc:	f00c f8f6 	bl	8010ebc <abort>
 8004cd0:	08015854 	.word	0x08015854
 8004cd4:	08015cec 	.word	0x08015cec
 8004cd8:	0801572c 	.word	0x0801572c
 8004cdc:	080155fc 	.word	0x080155fc
 8004ce0:	08015774 	.word	0x08015774
 8004ce4:	080156e8 	.word	0x080156e8
 8004ce8:	080154b0 	.word	0x080154b0

08004cec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 8004cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	e9dd 960e 	ldrd	r9, r6, [sp, #56]	@ 0x38
  TFLITE_DCHECK(result != nullptr);
 8004cf6:	2e00      	cmp	r6, #0
 8004cf8:	f000 80ad 	beq.w	8004e56 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16a>
 8004cfc:	4615      	mov	r5, r2
 8004cfe:	4607      	mov	r7, r0
  *result = {};
 8004d00:	2240      	movs	r2, #64	@ 0x40
 8004d02:	4688      	mov	r8, r1
 8004d04:	4630      	mov	r0, r6
 8004d06:	2100      	movs	r1, #0
 8004d08:	469a      	mov	sl, r3
 8004d0a:	f00d f86f 	bl	8011dec <memset>
    return data_ - ReadScalar<soffset_t>(data_);
 8004d0e:	682a      	ldr	r2, [r5, #0]
 8004d10:	1aaa      	subs	r2, r5, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004d12:	8813      	ldrh	r3, [r2, #0]
 8004d14:	2b06      	cmp	r3, #6
 8004d16:	f240 80a6 	bls.w	8004e66 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x17a>
 8004d1a:	88d0      	ldrh	r0, [r2, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	f040 80a4 	bne.w	8004e6a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x17e>
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8004d22:	464a      	mov	r2, r9
 8004d24:	4631      	mov	r1, r6
 8004d26:	f7fe fd1b 	bl	8003760 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	f040 8096 	bne.w	8004e5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x172>
    return data_ - ReadScalar<soffset_t>(data_);
 8004d32:	682b      	ldr	r3, [r5, #0]
 8004d34:	1aeb      	subs	r3, r5, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004d36:	881a      	ldrh	r2, [r3, #0]
 8004d38:	2a0e      	cmp	r2, #14
 8004d3a:	d905      	bls.n	8004d48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5c>
 8004d3c:	89dc      	ldrh	r4, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004d3e:	b11c      	cbz	r4, 8004d48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x5c>
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8004d40:	5d2c      	ldrb	r4, [r5, r4]
 8004d42:	3c00      	subs	r4, #0
 8004d44:	bf18      	it	ne
 8004d46:	2401      	movne	r4, #1
  result->is_variable = flatbuffer_tensor.is_variable();
 8004d48:	f886 402d 	strb.w	r4, [r6, #45]	@ 0x2d
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8004d4c:	4651      	mov	r1, sl
 8004d4e:	4628      	mov	r0, r5
 8004d50:	f7ff feaa 	bl	8004aa8 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
    result->allocation_type = kTfLiteArenaRw;
 8004d54:	2800      	cmp	r0, #0
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2302      	moveq	r3, #2
  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8004d5c:	6070      	str	r0, [r6, #4]
  if (result->data.data == nullptr) {
 8004d5e:	7533      	strb	r3, [r6, #20]
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8004d60:	aa03      	add	r2, sp, #12
 8004d62:	464b      	mov	r3, r9
 8004d64:	f106 0118 	add.w	r1, r6, #24
 8004d68:	4628      	mov	r0, r5
 8004d6a:	f7ff fbfd 	bl	8004568 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8004d6e:	4604      	mov	r4, r0
 8004d70:	2800      	cmp	r0, #0
 8004d72:	d174      	bne.n	8004e5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x172>
    return data_ - ReadScalar<soffset_t>(data_);
 8004d74:	682b      	ldr	r3, [r5, #0]
 8004d76:	1aeb      	subs	r3, r5, r3
 8004d78:	8819      	ldrh	r1, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004d7a:	2904      	cmp	r1, #4
 8004d7c:	d96d      	bls.n	8004e5a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
 8004d7e:	889a      	ldrh	r2, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004d80:	2a00      	cmp	r2, #0
 8004d82:	d074      	beq.n	8004e6e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x182>
 8004d84:	58a8      	ldr	r0, [r5, r2]
    auto p = data_ + field_offset;
 8004d86:	442a      	add	r2, r5
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004d88:	4402      	add	r2, r0
  TFLITE_DCHECK(error_reporter != nullptr);
 8004d8a:	f1b9 0f00 	cmp.w	r9, #0
 8004d8e:	d062      	beq.n	8004e56 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16a>
    *result = const_cast<kTfLiteArrayType*>(
 8004d90:	60b2      	str	r2, [r6, #8]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004d92:	290c      	cmp	r1, #12
 8004d94:	d963      	bls.n	8004e5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x172>
 8004d96:	899a      	ldrh	r2, [r3, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004d98:	2a00      	cmp	r2, #0
 8004d9a:	d060      	beq.n	8004e5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x172>
 8004d9c:	58ab      	ldr	r3, [r5, r2]
    auto p = data_ + field_offset;
 8004d9e:	4415      	add	r5, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004da0:	eb05 0a03 	add.w	sl, r5, r3
    return data_ - ReadScalar<soffset_t>(data_);
 8004da4:	58ea      	ldr	r2, [r5, r3]
 8004da6:	ebaa 0202 	sub.w	r2, sl, r2
 8004daa:	8810      	ldrh	r0, [r2, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004dac:	2808      	cmp	r0, #8
 8004dae:	d956      	bls.n	8004e5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x172>
 8004db0:	8911      	ldrh	r1, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004db2:	2900      	cmp	r1, #0
 8004db4:	d053      	beq.n	8004e5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x172>
 8004db6:	f85a c001 	ldr.w	ip, [sl, r1]
    auto p = data_ + field_offset;
 8004dba:	4451      	add	r1, sl
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004dbc:	eb01 0e0c 	add.w	lr, r1, ip
  if (src_quantization && src_quantization->scale() &&
 8004dc0:	f851 100c 	ldr.w	r1, [r1, ip]
 8004dc4:	2900      	cmp	r1, #0
 8004dc6:	d04a      	beq.n	8004e5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x172>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004dc8:	280a      	cmp	r0, #10
 8004dca:	d948      	bls.n	8004e5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x172>
 8004dcc:	8952      	ldrh	r2, [r2, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004dce:	2a00      	cmp	r2, #0
 8004dd0:	d045      	beq.n	8004e5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x172>
 8004dd2:	f85a 1002 	ldr.w	r1, [sl, r2]
    auto p = data_ + field_offset;
 8004dd6:	4452      	add	r2, sl
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004dd8:	1850      	adds	r0, r2, r1
      src_quantization->zero_point() &&
 8004dda:	5852      	ldr	r2, [r2, r1]
 8004ddc:	2a00      	cmp	r2, #0
 8004dde:	d03e      	beq.n	8004e5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x172>
    result->params.zero_point =
 8004de0:	6841      	ldr	r1, [r0, #4]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8004de2:	f8de 2004 	ldr.w	r2, [lr, #4]
 8004de6:	6131      	str	r1, [r6, #16]
    result->params.scale = src_quantization->scale()->Get(0);
 8004de8:	60f2      	str	r2, [r6, #12]
    return data_ - ReadScalar<soffset_t>(data_);
 8004dea:	58ea      	ldr	r2, [r5, r3]
 8004dec:	ebaa 0202 	sub.w	r2, sl, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004df0:	8811      	ldrh	r1, [r2, #0]
 8004df2:	2908      	cmp	r1, #8
 8004df4:	f240 8098 	bls.w	8004f28 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x23c>
 8004df8:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004dfa:	2a00      	cmp	r2, #0
 8004dfc:	f000 8094 	beq.w	8004f28 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x23c>
  uoffset_t size() const { return EndianScalar(length_); }
 8004e00:	f85a 1002 	ldr.w	r1, [sl, r2]
 8004e04:	9300      	str	r3, [sp, #0]
    auto p = data_ + field_offset;
 8004e06:	4452      	add	r2, sl
    int channels = src_quantization->scale()->size();
 8004e08:	f852 b001 	ldr.w	fp, [r2, r1]
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 8004e0c:	683a      	ldr	r2, [r7, #0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8004e0e:	f1b8 0f00 	cmp.w	r8, #0
 8004e12:	d02f      	beq.n	8004e74 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x188>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
 8004e14:	f8d2 8010 	ldr.w	r8, [r2, #16]
 8004e18:	210c      	movs	r1, #12
 8004e1a:	2204      	movs	r2, #4
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	47c0      	blx	r8
    if (quantization == nullptr) {
 8004e20:	9b00      	ldr	r3, [sp, #0]
 8004e22:	4680      	mov	r8, r0
 8004e24:	2800      	cmp	r0, #0
 8004e26:	d06d      	beq.n	8004f04 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x218>
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8004e28:	683a      	ldr	r2, [r7, #0]
 8004e2a:	9301      	str	r3, [sp, #4]
 8004e2c:	6913      	ldr	r3, [r2, #16]
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8004e2e:	9300      	str	r3, [sp, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8004e30:	4658      	mov	r0, fp
 8004e32:	f7fe fc65 	bl	8003700 <TfLiteIntArrayGetSizeInBytes>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8004e36:	9b00      	ldr	r3, [sp, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8004e38:	4601      	mov	r1, r0
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8004e3a:	2204      	movs	r2, #4
 8004e3c:	4638      	mov	r0, r7
 8004e3e:	4798      	blx	r3
 8004e40:	9b01      	ldr	r3, [sp, #4]
    quantization->zero_point =
 8004e42:	f8c8 0004 	str.w	r0, [r8, #4]
    if (quantization->zero_point == nullptr) {
 8004e46:	2800      	cmp	r0, #0
 8004e48:	d062      	beq.n	8004f10 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x224>
    return data_ - ReadScalar<soffset_t>(data_);
 8004e4a:	58ed      	ldr	r5, [r5, r3]
 8004e4c:	ebaa 0505 	sub.w	r5, sl, r5
 8004e50:	882f      	ldrh	r7, [r5, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004e52:	2f08      	cmp	r7, #8
 8004e54:	d81c      	bhi.n	8004e90 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a4>
  TFLITE_DCHECK(result != nullptr);
 8004e56:	f00c f831 	bl	8010ebc <abort>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8004e5a:	4b35      	ldr	r3, [pc, #212]	@ (8004f30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>)
 8004e5c:	60b3      	str	r3, [r6, #8]
}
 8004e5e:	4620      	mov	r0, r4
 8004e60:	b005      	add	sp, #20
 8004e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e66:	2000      	movs	r0, #0
 8004e68:	e75b      	b.n	8004d22 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8004e6a:	5c28      	ldrb	r0, [r5, r0]
 8004e6c:	e759      	b.n	8004d22 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x36>
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8004e6e:	4a30      	ldr	r2, [pc, #192]	@ (8004f30 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>)
 8004e70:	60b2      	str	r2, [r6, #8]
 8004e72:	e78e      	b.n	8004d92 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa6>
                  allocator->AllocateFromTail(
 8004e74:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8004e78:	210c      	movs	r1, #12
 8004e7a:	2204      	movs	r2, #4
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	47c0      	blx	r8
    if (quantization == nullptr) {
 8004e80:	9b00      	ldr	r3, [sp, #0]
 8004e82:	4680      	mov	r8, r0
 8004e84:	2800      	cmp	r0, #0
 8004e86:	d03d      	beq.n	8004f04 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x218>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	9301      	str	r3, [sp, #4]
 8004e8c:	68d3      	ldr	r3, [r2, #12]
 8004e8e:	e7ce      	b.n	8004e2e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 8004e90:	892b      	ldrh	r3, [r5, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0df      	beq.n	8004e56 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16a>
 8004e96:	f85a 2003 	ldr.w	r2, [sl, r3]
    auto p = data_ + field_offset;
 8004e9a:	4453      	add	r3, sl
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004e9c:	4413      	add	r3, r2
  TFLITE_DCHECK(error_reporter != nullptr);
 8004e9e:	f1b9 0f00 	cmp.w	r9, #0
 8004ea2:	d0d8      	beq.n	8004e56 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16a>
    for (int i = 0; i < channels; i++) {
 8004ea4:	f1bb 0f00 	cmp.w	fp, #0
    *result = const_cast<kTfLiteArrayType*>(
 8004ea8:	f8c8 3000 	str.w	r3, [r8]
    quantization->zero_point->size = channels;
 8004eac:	f8c0 b000 	str.w	fp, [r0]
    for (int i = 0; i < channels; i++) {
 8004eb0:	dd17      	ble.n	8004ee2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f6>
 8004eb2:	2f0a      	cmp	r7, #10
 8004eb4:	d938      	bls.n	8004f28 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x23c>
 8004eb6:	896b      	ldrh	r3, [r5, #10]
 8004eb8:	b3b3      	cbz	r3, 8004f28 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x23c>
    auto p = data_ + field_offset;
 8004eba:	eb0a 0c03 	add.w	ip, sl, r3
 8004ebe:	2204      	movs	r2, #4
 8004ec0:	f8dc 3000 	ldr.w	r3, [ip]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004ec4:	449c      	add	ip, r3
 8004ec6:	2300      	movs	r3, #0
    FLATBUFFERS_ASSERT(i < size());
 8004ec8:	f8dc 1000 	ldr.w	r1, [ip]
 8004ecc:	4299      	cmp	r1, r3
 8004ece:	d924      	bls.n	8004f1a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x22e>
 8004ed0:	3301      	adds	r3, #1
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8004ed2:	f85c 1002 	ldr.w	r1, [ip, r2]
 8004ed6:	f840 1f04 	str.w	r1, [r0, #4]!
    for (int i = 0; i < channels; i++) {
 8004eda:	459b      	cmp	fp, r3
 8004edc:	f102 0208 	add.w	r2, r2, #8
 8004ee0:	d1f2      	bne.n	8004ec8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1dc>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004ee2:	2f10      	cmp	r7, #16
 8004ee4:	d808      	bhi.n	8004ef8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20c>
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004ee6:	2300      	movs	r3, #0
    result->quantization = {kTfLiteAffineQuantization, quantization};
 8004ee8:	2201      	movs	r2, #1
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8004eea:	f8c8 3008 	str.w	r3, [r8, #8]
    result->quantization = {kTfLiteAffineQuantization, quantization};
 8004eee:	f886 2030 	strb.w	r2, [r6, #48]	@ 0x30
 8004ef2:	f8c6 8034 	str.w	r8, [r6, #52]	@ 0x34
 8004ef6:	e7b2      	b.n	8004e5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x172>
 8004ef8:	8a2b      	ldrh	r3, [r5, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d0f4      	beq.n	8004ee8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1fc>
 8004efe:	f85a 3003 	ldr.w	r3, [sl, r3]
 8004f02:	e7f1      	b.n	8004ee8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1fc>
      TF_LITE_REPORT_ERROR(error_reporter,
 8004f04:	490b      	ldr	r1, [pc, #44]	@ (8004f34 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x248>)
 8004f06:	4648      	mov	r0, r9
 8004f08:	f7fe fc0a 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 8004f0c:	2401      	movs	r4, #1
 8004f0e:	e7a6      	b.n	8004e5e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x172>
      TF_LITE_REPORT_ERROR(error_reporter,
 8004f10:	4909      	ldr	r1, [pc, #36]	@ (8004f38 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x24c>)
 8004f12:	4648      	mov	r0, r9
 8004f14:	f7fe fc04 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
      return kTfLiteError;
 8004f18:	e7f8      	b.n	8004f0c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x220>
    FLATBUFFERS_ASSERT(i < size());
 8004f1a:	4b08      	ldr	r3, [pc, #32]	@ (8004f3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x250>)
 8004f1c:	4a08      	ldr	r2, [pc, #32]	@ (8004f40 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x254>)
 8004f1e:	4809      	ldr	r0, [pc, #36]	@ (8004f44 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>)
 8004f20:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8004f24:	f00b ffd2 	bl	8010ecc <__assert_func>
  uoffset_t size() const { return EndianScalar(length_); }
 8004f28:	2300      	movs	r3, #0
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	deff      	udf	#255	@ 0xff
 8004f2e:	bf00      	nop
 8004f30:	08015cec 	.word	0x08015cec
 8004f34:	08015874 	.word	0x08015874
 8004f38:	080158a4 	.word	0x080158a4
 8004f3c:	080155fc 	.word	0x080155fc
 8004f40:	080158d4 	.word	0x080158d4
 8004f44:	080156e8 	.word	0x080156e8

08004f48 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib>:
    int tensor_index, bool allocate_temp) {
 8004f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4c:	468e      	mov	lr, r1
    return data_ - ReadScalar<soffset_t>(data_);
 8004f4e:	6811      	ldr	r1, [r2, #0]
 8004f50:	9c06      	ldr	r4, [sp, #24]
 8004f52:	eba2 0c01 	sub.w	ip, r2, r1
 8004f56:	461e      	mov	r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004f58:	f8bc 3000 	ldrh.w	r3, [ip]
 8004f5c:	f89d 101c 	ldrb.w	r1, [sp, #28]
 8004f60:	2b04      	cmp	r3, #4
 8004f62:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8004f64:	6840      	ldr	r0, [r0, #4]
 8004f66:	d92d      	bls.n	8004fc4 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x7c>
 8004f68:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004f6c:	b353      	cbz	r3, 8004fc4 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x7c>
 8004f6e:	58d7      	ldr	r7, [r2, r3]
    auto p = data_ + field_offset;
 8004f70:	441a      	add	r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004f72:	eb02 0c07 	add.w	ip, r2, r7
    FLATBUFFERS_ASSERT(i < size());
 8004f76:	59d3      	ldr	r3, [r2, r7]
 8004f78:	429c      	cmp	r4, r3
 8004f7a:	d21c      	bcs.n	8004fb6 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x6e>
    p += i * sizeof(uoffset_t);
 8004f7c:	1c62      	adds	r2, r4, #1
    return data_ - ReadScalar<soffset_t>(data_);
 8004f7e:	f8de 3000 	ldr.w	r3, [lr]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004f82:	f85c 4022 	ldr.w	r4, [ip, r2, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8004f86:	ebae 0303 	sub.w	r3, lr, r3
    p += i * sizeof(uoffset_t);
 8004f8a:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8004f8e:	4422      	add	r2, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004f90:	881c      	ldrh	r4, [r3, #0]
 8004f92:	2c0c      	cmp	r4, #12
 8004f94:	d907      	bls.n	8004fa6 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x5e>
 8004f96:	899b      	ldrh	r3, [r3, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004f98:	b133      	cbz	r3, 8004fa8 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x60>
 8004f9a:	f85e 4003 	ldr.w	r4, [lr, r3]
    auto p = data_ + field_offset;
 8004f9e:	449e      	add	lr, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004fa0:	eb0e 0304 	add.w	r3, lr, r4
 8004fa4:	e000      	b.n	8004fa8 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x60>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9607      	str	r6, [sp, #28]
 8004faa:	68ac      	ldr	r4, [r5, #8]
 8004fac:	9406      	str	r4, [sp, #24]
}
 8004fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8004fb2:	f7ff be9b 	b.w	8004cec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
    FLATBUFFERS_ASSERT(i < size());
 8004fb6:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x84>)
 8004fb8:	4a05      	ldr	r2, [pc, #20]	@ (8004fd0 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x88>)
 8004fba:	4806      	ldr	r0, [pc, #24]	@ (8004fd4 <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib+0x8c>)
 8004fbc:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8004fc0:	f00b ff84 	bl	8010ecc <__assert_func>
  uoffset_t size() const { return EndianScalar(length_); }
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	deff      	udf	#255	@ 0xff
 8004fca:	bf00      	nop
 8004fcc:	080155fc 	.word	0x080155fc
 8004fd0:	08015774 	.word	0x08015774
 8004fd4:	080156e8 	.word	0x080156e8

08004fd8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 8004fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fdc:	460c      	mov	r4, r1
    return data_ - ReadScalar<soffset_t>(data_);
 8004fde:	6809      	ldr	r1, [r1, #0]
 8004fe0:	1a61      	subs	r1, r4, r1
 8004fe2:	461e      	mov	r6, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8004fe4:	880b      	ldrh	r3, [r1, #0]
 8004fe6:	2b08      	cmp	r3, #8
 8004fe8:	b085      	sub	sp, #20
 8004fea:	d972      	bls.n	80050d2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xfa>
T ReadScalar(const void *p) {
 8004fec:	4690      	mov	r8, r2
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004fee:	890a      	ldrh	r2, [r1, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004ff0:	2a00      	cmp	r2, #0
 8004ff2:	d06e      	beq.n	80050d2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xfa>
 8004ff4:	58a1      	ldr	r1, [r4, r2]
    auto p = data_ + field_offset;
 8004ff6:	4422      	add	r2, r4
T ReadScalar(const void *p) {
 8004ff8:	4605      	mov	r5, r0
  if (subgraphs->size() != 1) {
 8004ffa:	5853      	ldr	r3, [r2, r1]
 8004ffc:	9303      	str	r3, [sp, #12]
 8004ffe:	2b01      	cmp	r3, #1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005000:	eb02 0b01 	add.w	fp, r2, r1
 8005004:	d15f      	bne.n	80050c6 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xee>
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005006:	f8db 2004 	ldr.w	r2, [fp, #4]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 800500a:	6840      	ldr	r0, [r0, #4]
 800500c:	f102 0904 	add.w	r9, r2, #4
 8005010:	6802      	ldr	r2, [r0, #0]
 8005012:	2140      	movs	r1, #64	@ 0x40
 8005014:	6917      	ldr	r7, [r2, #16]
 8005016:	2204      	movs	r2, #4
 8005018:	47b8      	blx	r7
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 800501a:	682a      	ldr	r2, [r5, #0]
 800501c:	492e      	ldr	r1, [pc, #184]	@ (80050d8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x100>)
 800501e:	f8d2 a02c 	ldr.w	sl, [r2, #44]	@ 0x2c
 8005022:	458a      	cmp	sl, r1
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8005024:	4607      	mov	r7, r0
 8005026:	eb0b 0209 	add.w	r2, fp, r9
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 800502a:	d137      	bne.n	800509c <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xc4>
    return data_ - ReadScalar<soffset_t>(data_);
 800502c:	f85b 3009 	ldr.w	r3, [fp, r9]
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8005030:	6868      	ldr	r0, [r5, #4]
 8005032:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005034:	8819      	ldrh	r1, [r3, #0]
 8005036:	2904      	cmp	r1, #4
 8005038:	d94b      	bls.n	80050d2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xfa>
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800503a:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800503c:	2b00      	cmp	r3, #0
 800503e:	d048      	beq.n	80050d2 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xfa>
 8005040:	58d1      	ldr	r1, [r2, r3]
    auto p = data_ + field_offset;
 8005042:	441a      	add	r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005044:	1853      	adds	r3, r2, r1
    FLATBUFFERS_ASSERT(i < size());
 8005046:	5852      	ldr	r2, [r2, r1]
 8005048:	4296      	cmp	r6, r2
 800504a:	d235      	bcs.n	80050b8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xe0>
    return data_ - ReadScalar<soffset_t>(data_);
 800504c:	6821      	ldr	r1, [r4, #0]
 800504e:	1a61      	subs	r1, r4, r1
    p += i * sizeof(uoffset_t);
 8005050:	1c72      	adds	r2, r6, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005052:	f8b1 c000 	ldrh.w	ip, [r1]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005056:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800505a:	f1bc 0f0c 	cmp.w	ip, #12
    p += i * sizeof(uoffset_t);
 800505e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005062:	eb03 020e 	add.w	r2, r3, lr
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005066:	d917      	bls.n	8005098 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xc0>
 8005068:	898b      	ldrh	r3, [r1, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800506a:	b113      	cbz	r3, 8005072 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x9a>
 800506c:	58e1      	ldr	r1, [r4, r3]
    auto p = data_ + field_offset;
 800506e:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005070:	440b      	add	r3, r1
 8005072:	9701      	str	r7, [sp, #4]
 8005074:	68a9      	ldr	r1, [r5, #8]
 8005076:	9100      	str	r1, [sp, #0]
 8005078:	2101      	movs	r1, #1
 800507a:	f7ff fe37 	bl	8004cec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 800507e:	b9a8      	cbnz	r0, 80050ac <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xd4>
  if (eval_tensors != nullptr) {
 8005080:	f1b8 0f00 	cmp.w	r8, #0
 8005084:	d004      	beq.n	8005090 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xb8>
    tensor->data.data = eval_tensors[tensor_index].data.data;
 8005086:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800508a:	f858 3026 	ldr.w	r3, [r8, r6, lsl #2]
 800508e:	607b      	str	r3, [r7, #4]
}
 8005090:	4638      	mov	r0, r7
 8005092:	b005      	add	sp, #20
 8005094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005098:	2300      	movs	r3, #0
 800509a:	e7ea      	b.n	8005072 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x9a>
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 800509c:	9b03      	ldr	r3, [sp, #12]
 800509e:	4621      	mov	r1, r4
 80050a0:	e9cd 6300 	strd	r6, r3, [sp]
 80050a4:	4603      	mov	r3, r0
 80050a6:	4628      	mov	r0, r5
 80050a8:	47d0      	blx	sl
 80050aa:	e7e8      	b.n	800507e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xa6>
    TF_LITE_REPORT_ERROR(
 80050ac:	490b      	ldr	r1, [pc, #44]	@ (80050dc <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x104>)
 80050ae:	68a8      	ldr	r0, [r5, #8]
 80050b0:	f7fe fb36 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 80050b4:	2700      	movs	r7, #0
 80050b6:	e7eb      	b.n	8005090 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xb8>
    FLATBUFFERS_ASSERT(i < size());
 80050b8:	4b09      	ldr	r3, [pc, #36]	@ (80050e0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x108>)
 80050ba:	4a0a      	ldr	r2, [pc, #40]	@ (80050e4 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x10c>)
 80050bc:	480a      	ldr	r0, [pc, #40]	@ (80050e8 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x110>)
 80050be:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80050c2:	f00b ff03 	bl	8010ecc <__assert_func>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80050c6:	4909      	ldr	r1, [pc, #36]	@ (80050ec <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x114>)
 80050c8:	6880      	ldr	r0, [r0, #8]
 80050ca:	f7fe fb29 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TFLITE_DCHECK(subgraph != nullptr);
 80050ce:	f00b fef5 	bl	8010ebc <abort>
  uoffset_t size() const { return EndianScalar(length_); }
 80050d2:	2300      	movs	r3, #0
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	deff      	udf	#255	@ 0xff
 80050d8:	08004f49 	.word	0x08004f49
 80050dc:	08015994 	.word	0x08015994
 80050e0:	080155fc 	.word	0x080155fc
 80050e4:	08015774 	.word	0x08015774
 80050e8:	080156e8 	.word	0x080156e8
 80050ec:	080154b0 	.word	0x080154b0

080050f0 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 80050f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ - ReadScalar<soffset_t>(data_);
 80050f4:	680e      	ldr	r6, [r1, #0]
 80050f6:	eba1 0c06 	sub.w	ip, r1, r6
 80050fa:	b085      	sub	sp, #20
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80050fc:	f8bc e000 	ldrh.w	lr, [ip]
 8005100:	9203      	str	r2, [sp, #12]
 8005102:	f1be 0f08 	cmp.w	lr, #8
 8005106:	f240 8081 	bls.w	800520c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x11c>
 800510a:	f8bc c008 	ldrh.w	ip, [ip, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800510e:	f1bc 0f00 	cmp.w	ip, #0
 8005112:	d07b      	beq.n	800520c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x11c>
 8005114:	f851 e00c 	ldr.w	lr, [r1, ip]
    auto p = data_ + field_offset;
 8005118:	448c      	add	ip, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800511a:	eb0c 080e 	add.w	r8, ip, lr
  if (subgraphs->size() != 1) {
 800511e:	f85c c00e 	ldr.w	ip, [ip, lr]
 8005122:	f1bc 0f01 	cmp.w	ip, #1
 8005126:	4605      	mov	r5, r0
 8005128:	460c      	mov	r4, r1
 800512a:	d172      	bne.n	8005212 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x122>
      AllocatePersistentTfLiteTensorInternal(model, eval_tensors, tensor_index);
 800512c:	6807      	ldr	r7, [r0, #0]
 800512e:	f8df c108 	ldr.w	ip, [pc, #264]	@ 8005238 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x148>
 8005132:	f8d7 a028 	ldr.w	sl, [r7, #40]	@ 0x28
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005136:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800513a:	45e2      	cmp	sl, ip
 800513c:	f107 0904 	add.w	r9, r7, #4
 8005140:	461e      	mov	r6, r3
 8005142:	eb08 0b09 	add.w	fp, r8, r9
  TfLiteTensor* tensor =
 8005146:	d150      	bne.n	80051ea <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xfa>
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8005148:	6840      	ldr	r0, [r0, #4]
 800514a:	6803      	ldr	r3, [r0, #0]
 800514c:	2204      	movs	r2, #4
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	2140      	movs	r1, #64	@ 0x40
 8005152:	4798      	blx	r3
 8005154:	4682      	mov	sl, r0
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8005156:	682b      	ldr	r3, [r5, #0]
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	461a      	mov	r2, r3
 800515c:	461f      	mov	r7, r3
 800515e:	4b30      	ldr	r3, [pc, #192]	@ (8005220 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x130>)
 8005160:	429a      	cmp	r2, r3
 8005162:	d139      	bne.n	80051d8 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xe8>
    return data_ - ReadScalar<soffset_t>(data_);
 8005164:	f858 3009 	ldr.w	r3, [r8, r9]
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 8005168:	6868      	ldr	r0, [r5, #4]
 800516a:	ebab 0303 	sub.w	r3, fp, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800516e:	881a      	ldrh	r2, [r3, #0]
 8005170:	2a04      	cmp	r2, #4
 8005172:	d94b      	bls.n	800520c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x11c>
 8005174:	889a      	ldrh	r2, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005176:	2a00      	cmp	r2, #0
 8005178:	d048      	beq.n	800520c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x11c>
 800517a:	f85b 1002 	ldr.w	r1, [fp, r2]
    auto p = data_ + field_offset;
 800517e:	445a      	add	r2, fp
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005180:	1853      	adds	r3, r2, r1
    FLATBUFFERS_ASSERT(i < size());
 8005182:	5852      	ldr	r2, [r2, r1]
 8005184:	4296      	cmp	r6, r2
 8005186:	d23a      	bcs.n	80051fe <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x10e>
    return data_ - ReadScalar<soffset_t>(data_);
 8005188:	6821      	ldr	r1, [r4, #0]
 800518a:	1a61      	subs	r1, r4, r1
    p += i * sizeof(uoffset_t);
 800518c:	1c72      	adds	r2, r6, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800518e:	f8b1 c000 	ldrh.w	ip, [r1]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005192:	f853 e022 	ldr.w	lr, [r3, r2, lsl #2]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005196:	f1bc 0f0c 	cmp.w	ip, #12
    p += i * sizeof(uoffset_t);
 800519a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800519e:	4472      	add	r2, lr
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80051a0:	d918      	bls.n	80051d4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xe4>
 80051a2:	898b      	ldrh	r3, [r1, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80051a4:	b113      	cbz	r3, 80051ac <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xbc>
 80051a6:	58e1      	ldr	r1, [r4, r3]
    auto p = data_ + field_offset;
 80051a8:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80051aa:	440b      	add	r3, r1
 80051ac:	f8cd a004 	str.w	sl, [sp, #4]
 80051b0:	68a9      	ldr	r1, [r5, #8]
 80051b2:	9100      	str	r1, [sp, #0]
 80051b4:	2100      	movs	r1, #0
 80051b6:	f7ff fd99 	bl	8004cec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 80051ba:	b9c8      	cbnz	r0, 80051f0 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x100>
  if (eval_tensors != nullptr) {
 80051bc:	9b03      	ldr	r3, [sp, #12]
 80051be:	b12b      	cbz	r3, 80051cc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xdc>
    tensor->data.data = eval_tensors[tensor_index].data.data;
 80051c0:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80051c4:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80051c8:	f8ca 3004 	str.w	r3, [sl, #4]
}
 80051cc:	4650      	mov	r0, sl
 80051ce:	b005      	add	sp, #20
 80051d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d4:	2300      	movs	r3, #0
 80051d6:	e7e9      	b.n	80051ac <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xbc>
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 80051d8:	2300      	movs	r3, #0
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	9600      	str	r6, [sp, #0]
 80051de:	465a      	mov	r2, fp
 80051e0:	4621      	mov	r1, r4
 80051e2:	4653      	mov	r3, sl
 80051e4:	4628      	mov	r0, r5
 80051e6:	47b8      	blx	r7
 80051e8:	e7e7      	b.n	80051ba <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xca>
      AllocatePersistentTfLiteTensorInternal(model, eval_tensors, tensor_index);
 80051ea:	47d0      	blx	sl
 80051ec:	4682      	mov	sl, r0
 80051ee:	e7b2      	b.n	8005156 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x66>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80051f0:	490c      	ldr	r1, [pc, #48]	@ (8005224 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x134>)
 80051f2:	68a8      	ldr	r0, [r5, #8]
 80051f4:	f7fe fa94 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 80051f8:	f04f 0a00 	mov.w	sl, #0
 80051fc:	e7e6      	b.n	80051cc <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0xdc>
    FLATBUFFERS_ASSERT(i < size());
 80051fe:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x138>)
 8005200:	4a0a      	ldr	r2, [pc, #40]	@ (800522c <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x13c>)
 8005202:	480b      	ldr	r0, [pc, #44]	@ (8005230 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x140>)
 8005204:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8005208:	f00b fe60 	bl	8010ecc <__assert_func>
  uoffset_t size() const { return EndianScalar(length_); }
 800520c:	2300      	movs	r3, #0
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	deff      	udf	#255	@ 0xff
    TF_LITE_REPORT_ERROR(error_reporter_,
 8005212:	4908      	ldr	r1, [pc, #32]	@ (8005234 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x144>)
 8005214:	6880      	ldr	r0, [r0, #8]
 8005216:	f7fe fa83 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TFLITE_DCHECK(subgraph != nullptr);
 800521a:	f00b fe4f 	bl	8010ebc <abort>
 800521e:	bf00      	nop
 8005220:	08004f49 	.word	0x08004f49
 8005224:	080159d8 	.word	0x080159d8
 8005228:	080155fc 	.word	0x080155fc
 800522c:	08015774 	.word	0x08015774
 8005230:	080156e8 	.word	0x080156e8
 8005234:	080154b0 	.word	0x080154b0
 8005238:	080046a9 	.word	0x080046a9

0800523c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:
                                       ErrorReporter* error_reporter) {
 800523c:	b570      	push	{r4, r5, r6, lr}
 800523e:	460e      	mov	r6, r1
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8005240:	2110      	movs	r1, #16
                                       ErrorReporter* error_reporter) {
 8005242:	4614      	mov	r4, r2
 8005244:	4605      	mov	r5, r0
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8005246:	f7ff f95d 	bl	8004504 <_ZN6tflite14AlignPointerUpEPhj>
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 800524a:	19aa      	adds	r2, r5, r6
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 800524c:	4601      	mov	r1, r0
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 800524e:	1a12      	subs	r2, r2, r0
 8005250:	4620      	mov	r0, r4
 8005252:	f001 fad5 	bl	8006800 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
  TFLITE_DCHECK(memory_allocator != nullptr);
 8005256:	b178      	cbz	r0, 8005278 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x3c>
  TFLITE_DCHECK(error_reporter != nullptr);
 8005258:	b174      	cbz	r4, 8005278 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x3c>
  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
 800525a:	6803      	ldr	r3, [r0, #0]
 800525c:	2204      	movs	r2, #4
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	2118      	movs	r1, #24
 8005262:	4605      	mov	r5, r0
 8005264:	4798      	blx	r3
      model_is_allocating_(false) {}
 8005266:	4a05      	ldr	r2, [pc, #20]	@ (800527c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x40>)
 8005268:	6002      	str	r2, [r0, #0]
 800526a:	2200      	movs	r2, #0
      error_reporter_(error_reporter),
 800526c:	e9c0 5401 	strd	r5, r4, [r0, #4]
      model_is_allocating_(false) {}
 8005270:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8005274:	7302      	strb	r2, [r0, #12]
}
 8005276:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(memory_allocator != nullptr);
 8005278:	f00b fe20 	bl	8010ebc <abort>
 800527c:	08015c9c 	.word	0x08015c9c

08005280 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>:
    TfLiteEvalTensor** eval_tensors) {
 8005280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005284:	f8dd 8018 	ldr.w	r8, [sp, #24]
  TFLITE_DCHECK(model != nullptr);
 8005288:	2900      	cmp	r1, #0
 800528a:	d02e      	beq.n	80052ea <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x6a>
  if (model_is_allocating_) {
 800528c:	461e      	mov	r6, r3
 800528e:	7b03      	ldrb	r3, [r0, #12]
 8005290:	4604      	mov	r4, r0
 8005292:	bb1b      	cbnz	r3, 80052dc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x5c>

TfLiteStatus MicroAllocator::InitScratchBufferData() {
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 8005294:	6103      	str	r3, [r0, #16]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8005296:	6840      	ldr	r0, [r0, #4]
  model_is_allocating_ = true;
 8005298:	2301      	movs	r3, #1
 800529a:	7323      	strb	r3, [r4, #12]
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800529c:	6803      	ldr	r3, [r0, #0]
 800529e:	4617      	mov	r7, r2
 80052a0:	460d      	mov	r5, r1
 80052a2:	689b      	ldr	r3, [r3, #8]
 80052a4:	2204      	movs	r2, #4
 80052a6:	2140      	movs	r1, #64	@ 0x40
 80052a8:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(InitScratchBufferData());
 80052aa:	b9e0      	cbnz	r0, 80052e6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x66>
  TF_LITE_ENSURE_STATUS(AllocateTfLiteEvalTensors(model, eval_tensors));
 80052ac:	6823      	ldr	r3, [r4, #0]
 80052ae:	4642      	mov	r2, r8
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	4629      	mov	r1, r5
 80052b4:	4620      	mov	r0, r4
 80052b6:	4798      	blx	r3
 80052b8:	b9a8      	cbnz	r0, 80052e6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x66>
  TF_LITE_ENSURE_STATUS(
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	4632      	mov	r2, r6
 80052be:	699b      	ldr	r3, [r3, #24]
 80052c0:	4629      	mov	r1, r5
 80052c2:	4620      	mov	r0, r4
 80052c4:	4798      	blx	r3
 80052c6:	b970      	cbnz	r0, 80052e6 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x66>
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 80052c8:	6822      	ldr	r2, [r4, #0]
 80052ca:	6833      	ldr	r3, [r6, #0]
 80052cc:	69d6      	ldr	r6, [r2, #28]
 80052ce:	4629      	mov	r1, r5
 80052d0:	463a      	mov	r2, r7
 80052d2:	4620      	mov	r0, r4
 80052d4:	46b4      	mov	ip, r6
}
 80052d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 80052da:	4760      	bx	ip
    TF_LITE_REPORT_ERROR(error_reporter_,
 80052dc:	4904      	ldr	r1, [pc, #16]	@ (80052f0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x70>)
 80052de:	6880      	ldr	r0, [r0, #8]
 80052e0:	f7fe fa1e 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 80052e4:	2001      	movs	r0, #1
}
 80052e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TFLITE_DCHECK(model != nullptr);
 80052ea:	f00b fde7 	bl	8010ebc <abort>
 80052ee:	bf00      	nop
 80052f0:	08015a24 	.word	0x08015a24

080052f4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle** scratch_buffer_handles) {
 80052f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f8:	461e      	mov	r6, r3
  if (!model_is_allocating_) {
 80052fa:	7b03      	ldrb	r3, [r0, #12]
    ScratchBufferHandle** scratch_buffer_handles) {
 80052fc:	b082      	sub	sp, #8
 80052fe:	4604      	mov	r4, r0
  if (!model_is_allocating_) {
 8005300:	2b00      	cmp	r3, #0
 8005302:	d03b      	beq.n	800537c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x88>
    return data_ - ReadScalar<soffset_t>(data_);
 8005304:	680b      	ldr	r3, [r1, #0]
 8005306:	1acb      	subs	r3, r1, r3
 8005308:	4617      	mov	r7, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800530a:	881a      	ldrh	r2, [r3, #0]
 800530c:	2a08      	cmp	r2, #8
 800530e:	460d      	mov	r5, r1
 8005310:	d945      	bls.n	800539e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xaa>
 8005312:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005314:	2b00      	cmp	r3, #0
 8005316:	d042      	beq.n	800539e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xaa>
 8005318:	58ca      	ldr	r2, [r1, r3]
    auto p = data_ + field_offset;
 800531a:	440b      	add	r3, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800531c:	eb03 0902 	add.w	r9, r3, r2
  if (subgraphs->size() != 1) {
 8005320:	589b      	ldr	r3, [r3, r2]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d13e      	bne.n	80053a4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xb0>
  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8005326:	6803      	ldr	r3, [r0, #0]
 8005328:	4922      	ldr	r1, [pc, #136]	@ (80053b4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xc0>)
 800532a:	f8d3 a034 	ldr.w	sl, [r3, #52]	@ 0x34
 800532e:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8005332:	6902      	ldr	r2, [r0, #16]
 8005334:	458a      	cmp	sl, r1
 8005336:	d12b      	bne.n	8005390 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x9c>
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 8005338:	2e00      	cmp	r6, #0
 800533a:	d039      	beq.n	80053b0 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xbc>
  if (scratch_buffer_request_count_ == 0) {
 800533c:	b332      	cbz	r2, 800538c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x98>
 800533e:	6840      	ldr	r0, [r0, #4]
      memory_allocator_->AllocateFromTail(
 8005340:	6803      	ldr	r3, [r0, #0]
 8005342:	0091      	lsls	r1, r2, #2
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2204      	movs	r2, #4
 8005348:	4798      	blx	r3
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors,
 800534a:	6823      	ldr	r3, [r4, #0]
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 800534c:	6030      	str	r0, [r6, #0]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800534e:	f108 0604 	add.w	r6, r8, #4
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors,
 8005352:	9000      	str	r0, [sp, #0]
 8005354:	444e      	add	r6, r9
 8005356:	f8d3 8030 	ldr.w	r8, [r3, #48]	@ 0x30
 800535a:	4629      	mov	r1, r5
 800535c:	463b      	mov	r3, r7
 800535e:	4632      	mov	r2, r6
 8005360:	4620      	mov	r0, r4
 8005362:	47c0      	blx	r8
 8005364:	b938      	cbnz	r0, 8005376 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x82>
  TF_LITE_ENSURE_STATUS(AllocateVariables(subgraph, eval_tensors));
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	463a      	mov	r2, r7
 800536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536c:	4631      	mov	r1, r6
 800536e:	4620      	mov	r0, r4
 8005370:	4798      	blx	r3
 8005372:	b900      	cbnz	r0, 8005376 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x82>
  model_is_allocating_ = false;
 8005374:	7320      	strb	r0, [r4, #12]
}
 8005376:	b002      	add	sp, #8
 8005378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
 800537c:	490e      	ldr	r1, [pc, #56]	@ (80053b8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xc4>)
 800537e:	6880      	ldr	r0, [r0, #8]
 8005380:	f7fe f9ce 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8005384:	2001      	movs	r0, #1
}
 8005386:	b002      	add	sp, #8
 8005388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors,
 800538c:	6830      	ldr	r0, [r6, #0]
 800538e:	e7de      	b.n	800534e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x5a>
  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8005390:	4631      	mov	r1, r6
 8005392:	47d0      	blx	sl
 8005394:	2800      	cmp	r0, #0
 8005396:	d1ee      	bne.n	8005376 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x82>
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors,
 8005398:	6830      	ldr	r0, [r6, #0]
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	e7d7      	b.n	800534e <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x5a>
  uoffset_t size() const { return EndianScalar(length_); }
 800539e:	2300      	movs	r3, #0
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	deff      	udf	#255	@ 0xff
    TF_LITE_REPORT_ERROR(error_reporter_,
 80053a4:	4905      	ldr	r1, [pc, #20]	@ (80053bc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xc8>)
 80053a6:	6880      	ldr	r0, [r0, #8]
 80053a8:	f7fe f9ba 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TFLITE_DCHECK(subgraph != nullptr);
 80053ac:	f00b fd86 	bl	8010ebc <abort>
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 80053b0:	f00b fd84 	bl	8010ebc <abort>
 80053b4:	080046d9 	.word	0x080046d9
 80053b8:	08015a7c 	.word	0x08015a7c
 80053bc:	080154b0 	.word	0x080154b0

080053c0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>:
                                                         int* buffer_idx) {
 80053c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c2:	4607      	mov	r7, r0
  return kTfLiteOk;
}

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 80053c4:	6840      	ldr	r0, [r0, #4]
                                                         int* buffer_idx) {
 80053c6:	4615      	mov	r5, r2
 80053c8:	460e      	mov	r6, r1
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 80053ca:	f001 fa45 	bl	8006858 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 80053ce:	2104      	movs	r1, #4
 80053d0:	f7ff f898 	bl	8004504 <_ZN6tflite14AlignPointerUpEPhj>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80053d4:	693a      	ldr	r2, [r7, #16]
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 80053d6:	4603      	mov	r3, r0
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80053d8:	b172      	cbz	r2, 80053f8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x38>
 80053da:	eb00 0cc2 	add.w	ip, r0, r2, lsl #3
  size_t current_node_request_count = 0;
 80053de:	f04f 0e00 	mov.w	lr, #0
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80053e2:	685c      	ldr	r4, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80053e4:	3308      	adds	r3, #8
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 80053e6:	3401      	adds	r4, #1
      ++current_node_request_count;
 80053e8:	bf08      	it	eq
 80053ea:	f10e 0e01 	addeq.w	lr, lr, #1
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 80053ee:	4563      	cmp	r3, ip
 80053f0:	d1f7      	bne.n	80053e2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x22>
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 80053f2:	f1be 0f07 	cmp.w	lr, #7
 80053f6:	d809      	bhi.n	800540c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x4c>
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 80053f8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
  current_request->bytes = bytes;
 80053fc:	601e      	str	r6, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 80053fe:	6059      	str	r1, [r3, #4]
  *buffer_idx = scratch_buffer_request_count_;
 8005400:	602a      	str	r2, [r5, #0]
  ++scratch_buffer_request_count_;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	3301      	adds	r3, #1
  return kTfLiteOk;
 8005406:	2000      	movs	r0, #0
  ++scratch_buffer_request_count_;
 8005408:	613b      	str	r3, [r7, #16]
}
 800540a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(
 800540c:	4903      	ldr	r1, [pc, #12]	@ (800541c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x5c>)
 800540e:	68b8      	ldr	r0, [r7, #8]
 8005410:	2208      	movs	r2, #8
 8005412:	f7fe f985 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8005416:	2001      	movs	r0, #1
}
 8005418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800541a:	bf00      	nop
 800541c:	08015ac8 	.word	0x08015ac8

08005420 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:
  ResetTempAllocations();
 8005420:	6803      	ldr	r3, [r0, #0]
 8005422:	4a13      	ldr	r2, [pc, #76]	@ (8005470 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	4293      	cmp	r3, r2
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 8005428:	b570      	push	{r4, r5, r6, lr}
 800542a:	4604      	mov	r4, r0
  memory_allocator_->ResetTempAllocations();
 800542c:	bf02      	ittt	eq
 800542e:	6840      	ldreq	r0, [r0, #4]
 8005430:	6803      	ldreq	r3, [r0, #0]
 8005432:	695b      	ldreq	r3, [r3, #20]
TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 8005434:	460d      	mov	r5, r1
  ResetTempAllocations();
 8005436:	4798      	blx	r3
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 8005438:	6860      	ldr	r0, [r4, #4]
 800543a:	f001 fa0d 	bl	8006858 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800543e:	2104      	movs	r1, #4
 8005440:	f7ff f860 	bl	8004504 <_ZN6tflite14AlignPointerUpEPhj>
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8005444:	6922      	ldr	r2, [r4, #16]
 8005446:	b18a      	cbz	r2, 800546c <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x4c>
 8005448:	00d1      	lsls	r1, r2, #3
 800544a:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 800544e:	6843      	ldr	r3, [r0, #4]
 8005450:	3301      	adds	r3, #1
      requests[i].node_idx = node_id;
 8005452:	bf08      	it	eq
 8005454:	6045      	streq	r5, [r0, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8005456:	3008      	adds	r0, #8
 8005458:	4290      	cmp	r0, r2
 800545a:	d1f8      	bne.n	800544e <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x2e>
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 800545c:	3140      	adds	r1, #64	@ 0x40
 800545e:	6860      	ldr	r0, [r4, #4]
 8005460:	6803      	ldr	r3, [r0, #0]
}
 8005462:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	2204      	movs	r2, #4
 800546a:	4718      	bx	r3
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 800546c:	2140      	movs	r1, #64	@ 0x40
 800546e:	e7f6      	b.n	800545e <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x3e>
 8005470:	080046a1 	.word	0x080046a1

08005474 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE>:
    ScratchBufferHandle* scratch_buffer_handles) {
 8005474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005478:	4690      	mov	r8, r2
    return data_ - ReadScalar<soffset_t>(data_);
 800547a:	6812      	ldr	r2, [r2, #0]
 800547c:	b09b      	sub	sp, #108	@ 0x6c
 800547e:	eba8 0202 	sub.w	r2, r8, r2
 8005482:	9103      	str	r1, [sp, #12]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005484:	8811      	ldrh	r1, [r2, #0]
 8005486:	9006      	str	r0, [sp, #24]
 8005488:	2904      	cmp	r1, #4
 800548a:	461d      	mov	r5, r3
 800548c:	f240 80d0 	bls.w	8005630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1bc>
 8005490:	8892      	ldrh	r2, [r2, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005492:	2a00      	cmp	r2, #0
 8005494:	f000 80cc 	beq.w	8005630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1bc>
  uoffset_t size() const { return EndianScalar(length_); }
 8005498:	f858 1002 	ldr.w	r1, [r8, r2]
    auto p = data_ + field_offset;
 800549c:	4442      	add	r2, r8
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 800549e:	5851      	ldr	r1, [r2, r1]
 80054a0:	6902      	ldr	r2, [r0, #16]
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 80054a2:	6840      	ldr	r0, [r0, #4]
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 80054a4:	188a      	adds	r2, r1, r2
 80054a6:	920d      	str	r2, [sp, #52]	@ 0x34
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 80054a8:	eb02 0642 	add.w	r6, r2, r2, lsl #1
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 80054ac:	6802      	ldr	r2, [r0, #0]
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 80054ae:	00f6      	lsls	r6, r6, #3
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 80054b0:	6914      	ldr	r4, [r2, #16]
 80054b2:	4631      	mov	r1, r6
 80054b4:	2204      	movs	r2, #4
 80054b6:	47a0      	blx	r4
  if (allocation_info == nullptr) {
 80054b8:	9b03      	ldr	r3, [sp, #12]
 80054ba:	4604      	mov	r4, r0
 80054bc:	2800      	cmp	r0, #0
 80054be:	f000 80ff 	beq.w	80056c0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x24c>
    return data_ - ReadScalar<soffset_t>(data_);
 80054c2:	f8d8 2000 	ldr.w	r2, [r8]
 80054c6:	eba8 0c02 	sub.w	ip, r8, r2
 80054ca:	f8bc 6000 	ldrh.w	r6, [ip]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80054ce:	2e04      	cmp	r6, #4
 80054d0:	f240 80ae 	bls.w	8005630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1bc>
 80054d4:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80054d8:	2900      	cmp	r1, #0
 80054da:	f000 80a9 	beq.w	8005630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1bc>
    return data_ - ReadScalar<soffset_t>(data_);
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	eba3 0e02 	sub.w	lr, r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
 80054e4:	f858 2001 	ldr.w	r2, [r8, r1]
    auto p = data_ + field_offset;
 80054e8:	4441      	add	r1, r8
  uoffset_t size() const { return EndianScalar(length_); }
 80054ea:	588f      	ldr	r7, [r1, r2]
                                scratch_buffer_request_count_, error_reporter_);
 80054ec:	9906      	ldr	r1, [sp, #24]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80054ee:	f8be 2000 	ldrh.w	r2, [lr]
 80054f2:	6908      	ldr	r0, [r1, #16]
 80054f4:	6889      	ldr	r1, [r1, #8]
 80054f6:	9007      	str	r0, [sp, #28]
 80054f8:	2a10      	cmp	r2, #16
 80054fa:	910c      	str	r1, [sp, #48]	@ 0x30
 80054fc:	d968      	bls.n	80055d0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x15c>
 80054fe:	f8be 2010 	ldrh.w	r2, [lr, #16]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005502:	2a00      	cmp	r2, #0
 8005504:	d064      	beq.n	80055d0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x15c>
 8005506:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 8005508:	441a      	add	r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800550a:	eb02 0901 	add.w	r9, r2, r1
  uoffset_t size() const { return EndianScalar(length_); }
 800550e:	5851      	ldr	r1, [r2, r1]
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8005510:	2900      	cmp	r1, #0
 8005512:	f000 8102 	beq.w	800571a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x2a6>
  const int32_t* offline_planner_offsets = nullptr;
 8005516:	f04f 0b00 	mov.w	fp, #0
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800551a:	e9cd 6c08 	strd	r6, ip, [sp, #32]
 800551e:	9703      	str	r7, [sp, #12]
 8005520:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005524:	f109 0904 	add.w	r9, r9, #4
 8005528:	46da      	mov	sl, fp
 800552a:	9405      	str	r4, [sp, #20]
 800552c:	460e      	mov	r6, r1
 800552e:	f8cd b010 	str.w	fp, [sp, #16]
 8005532:	461f      	mov	r7, r3
 8005534:	46f0      	mov	r8, lr
 8005536:	950b      	str	r5, [sp, #44]	@ 0x2c
 8005538:	e03a      	b.n	80055b0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x13c>
 800553a:	88a8      	ldrh	r0, [r5, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800553c:	2800      	cmp	r0, #0
 800553e:	d045      	beq.n	80055cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x158>
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8005540:	5822      	ldr	r2, [r4, r0]
    auto p = data_ + field_offset;
 8005542:	4420      	add	r0, r4
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8005544:	3204      	adds	r2, #4
 8005546:	4410      	add	r0, r2
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8005548:	49a5      	ldr	r1, [pc, #660]	@ (80057e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x36c>)
 800554a:	2217      	movs	r2, #23
 800554c:	f00c fc22 	bl	8011d94 <strncmp>
 8005550:	bb58      	cbnz	r0, 80055aa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x136>
 8005552:	f8b8 200c 	ldrh.w	r2, [r8, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005556:	b112      	cbz	r2, 800555e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xea>
 8005558:	58b9      	ldr	r1, [r7, r2]
    auto p = data_ + field_offset;
 800555a:	443a      	add	r2, r7
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800555c:	440a      	add	r2, r1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800555e:	f1bb 0f06 	cmp.w	fp, #6
 8005562:	f240 80a4 	bls.w	80056ae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x23a>
 8005566:	88eb      	ldrh	r3, [r5, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005568:	b103      	cbz	r3, 800556c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xf8>
 800556a:	58e3      	ldr	r3, [r4, r3]
    FLATBUFFERS_ASSERT(i < size());
 800556c:	6811      	ldr	r1, [r2, #0]
 800556e:	428b      	cmp	r3, r1
 8005570:	f080 828b 	bcs.w	8005a8a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x616>
    p += i * sizeof(uoffset_t);
 8005574:	3301      	adds	r3, #1
 8005576:	eb02 0183 	add.w	r1, r2, r3, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800557a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 800557e:	588b      	ldr	r3, [r1, r2]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005580:	4411      	add	r1, r2
    return data_ - ReadScalar<soffset_t>(data_);
 8005582:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005584:	881a      	ldrh	r2, [r3, #0]
 8005586:	2a04      	cmp	r2, #4
 8005588:	f240 828f 	bls.w	8005aaa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x636>
 800558c:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800558e:	2b00      	cmp	r3, #0
 8005590:	f000 828b 	beq.w	8005aaa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x636>
 8005594:	58ca      	ldr	r2, [r1, r3]
    auto p = data_ + field_offset;
 8005596:	440b      	add	r3, r1
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005598:	4413      	add	r3, r2
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 800559a:	f103 0210 	add.w	r2, r3, #16
 800559e:	9204      	str	r2, [sp, #16]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 80055a0:	68da      	ldr	r2, [r3, #12]
        if (tensor_count_ != nbr_tensors) {
 80055a2:	9b03      	ldr	r3, [sp, #12]
 80055a4:	4293      	cmp	r3, r2
 80055a6:	f040 809b 	bne.w	80056e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x26c>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 80055aa:	45b2      	cmp	sl, r6
 80055ac:	f000 8090 	beq.w	80056d0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
    p += i * sizeof(uoffset_t);
 80055b0:	464c      	mov	r4, r9
T ReadScalar(const void *p) {
 80055b2:	f10a 0a01 	add.w	sl, sl, #1
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80055b6:	6823      	ldr	r3, [r4, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 80055b8:	58e5      	ldr	r5, [r4, r3]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80055ba:	441c      	add	r4, r3
    return data_ - ReadScalar<soffset_t>(data_);
 80055bc:	1b65      	subs	r5, r4, r5
 80055be:	f109 0904 	add.w	r9, r9, #4
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80055c2:	f8b5 b000 	ldrh.w	fp, [r5]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80055c6:	f1bb 0f04 	cmp.w	fp, #4
 80055ca:	d8b6      	bhi.n	800553a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xc6>
 80055cc:	2004      	movs	r0, #4
 80055ce:	e7bb      	b.n	8005548 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xd4>
  const int32_t* offline_planner_offsets = nullptr;
 80055d0:	f04f 0b00 	mov.w	fp, #0
  TFLITE_DCHECK(eval_tensors != nullptr);
 80055d4:	2d00      	cmp	r5, #0
 80055d6:	f000 8266 	beq.w	8005aa6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x632>
  for (size_t i = 0; i < tensor_count_; ++i) {
 80055da:	b33f      	cbz	r7, 800562c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1b8>
 80055dc:	462e      	mov	r6, r5
    current->first_created = -1;
 80055de:	4625      	mov	r5, r4
 80055e0:	465b      	mov	r3, fp
    current->output_ptr = &(eval_tensors[i].data.data);
 80055e2:	606e      	str	r6, [r5, #4]
    TF_LITE_ENSURE_STATUS(
 80055e4:	4629      	mov	r1, r5
 80055e6:	4630      	mov	r0, r6
    current->first_created = -1;
 80055e8:	46a3      	mov	fp, r4
  for (size_t i = 0; i < tensor_count_; ++i) {
 80055ea:	f04f 0901 	mov.w	r9, #1
    current->first_created = -1;
 80055ee:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80055f2:	461c      	mov	r4, r3
    TF_LITE_ENSURE_STATUS(
 80055f4:	f7ff f814 	bl	8004620 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 80055f8:	bb78      	cbnz	r0, 800565a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e6>
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 80055fa:	6833      	ldr	r3, [r6, #0]
    current->first_created = -1;
 80055fc:	e9c5 aa02 	strd	sl, sl, [r5, #8]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 8005600:	b383      	cbz	r3, 8005664 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1f0>
 8005602:	7528      	strb	r0, [r5, #20]
    if (offline_offsets) {
 8005604:	b1bc      	cbz	r4, 8005636 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1c2>
      current->offline_offset = offline_offsets[i];
 8005606:	1f23      	subs	r3, r4, #4
  for (size_t i = 0; i < tensor_count_; ++i) {
 8005608:	454f      	cmp	r7, r9
      current->offline_offset = offline_offsets[i];
 800560a:	f853 3029 	ldr.w	r3, [r3, r9, lsl #2]
 800560e:	612b      	str	r3, [r5, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 8005610:	f106 060c 	add.w	r6, r6, #12
 8005614:	f105 0518 	add.w	r5, r5, #24
 8005618:	f109 0301 	add.w	r3, r9, #1
 800561c:	d815      	bhi.n	800564a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1d6>
    return data_ - ReadScalar<soffset_t>(data_);
 800561e:	f8d8 3000 	ldr.w	r3, [r8]
 8005622:	eba8 0c03 	sub.w	ip, r8, r3
 8005626:	465c      	mov	r4, fp
 8005628:	f8bc 6000 	ldrh.w	r6, [ip]
 800562c:	2e06      	cmp	r6, #6
 800562e:	d842      	bhi.n	80056b6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x242>
  uoffset_t size() const { return EndianScalar(length_); }
 8005630:	2300      	movs	r3, #0
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	deff      	udf	#255	@ 0xff
 8005636:	454f      	cmp	r7, r9
 8005638:	f8c5 a010 	str.w	sl, [r5, #16]
 800563c:	f106 060c 	add.w	r6, r6, #12
 8005640:	f105 0518 	add.w	r5, r5, #24
 8005644:	f109 0301 	add.w	r3, r9, #1
 8005648:	d9e9      	bls.n	800561e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1aa>
    current->output_ptr = &(eval_tensors[i].data.data);
 800564a:	606e      	str	r6, [r5, #4]
    TF_LITE_ENSURE_STATUS(
 800564c:	4629      	mov	r1, r5
 800564e:	4630      	mov	r0, r6
  const int32_t* offline_planner_offsets = nullptr;
 8005650:	4699      	mov	r9, r3
    TF_LITE_ENSURE_STATUS(
 8005652:	f7fe ffe5 	bl	8004620 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8005656:	2800      	cmp	r0, #0
 8005658:	d0cf      	beq.n	80055fa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x186>
 800565a:	4605      	mov	r5, r0
}
 800565c:	4628      	mov	r0, r5
 800565e:	b01b      	add	sp, #108	@ 0x6c
 8005660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return data_ - ReadScalar<soffset_t>(data_);
 8005664:	f8d8 3000 	ldr.w	r3, [r8]
 8005668:	eba8 0303 	sub.w	r3, r8, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800566c:	881a      	ldrh	r2, [r3, #0]
 800566e:	2a04      	cmp	r2, #4
 8005670:	d9de      	bls.n	8005630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1bc>
 8005672:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0db      	beq.n	8005630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1bc>
 8005678:	f858 1003 	ldr.w	r1, [r8, r3]
    auto p = data_ + field_offset;
 800567c:	4443      	add	r3, r8
    FLATBUFFERS_ASSERT(i < size());
 800567e:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8005682:	5858      	ldr	r0, [r3, r1]
 8005684:	4290      	cmp	r0, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005686:	440b      	add	r3, r1
    FLATBUFFERS_ASSERT(i < size());
 8005688:	f240 8206 	bls.w	8005a98 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x624>
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 800568c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    p += i * sizeof(uoffset_t);
 8005690:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005694:	1899      	adds	r1, r3, r2
    return data_ - ReadScalar<soffset_t>(data_);
 8005696:	589b      	ldr	r3, [r3, r2]
 8005698:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800569a:	881a      	ldrh	r2, [r3, #0]
 800569c:	2a0e      	cmp	r2, #14
 800569e:	d908      	bls.n	80056b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x23e>
 80056a0:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80056a2:	b133      	cbz	r3, 80056b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x23e>
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 80056a4:	5cc8      	ldrb	r0, [r1, r3]
 80056a6:	fab0 f080 	clz	r0, r0
 80056aa:	0940      	lsrs	r0, r0, #5
 80056ac:	e7a9      	b.n	8005602 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x18e>
 80056ae:	2300      	movs	r3, #0
 80056b0:	e75c      	b.n	800556c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xf8>
 80056b2:	2001      	movs	r0, #1
 80056b4:	e7a5      	b.n	8005602 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x18e>
 80056b6:	f8bc 1006 	ldrh.w	r1, [ip, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80056ba:	b9b1      	cbnz	r1, 80056ea <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x276>
  uoffset_t size() const { return EndianScalar(length_); }
 80056bc:	680b      	ldr	r3, [r1, #0]
 80056be:	deff      	udf	#255	@ 0xff
    TF_LITE_REPORT_ERROR(
 80056c0:	9b06      	ldr	r3, [sp, #24]
 80056c2:	4948      	ldr	r1, [pc, #288]	@ (80057e4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x370>)
 80056c4:	6898      	ldr	r0, [r3, #8]
 80056c6:	4632      	mov	r2, r6
 80056c8:	f7fe f82a 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 80056cc:	2501      	movs	r5, #1
 80056ce:	e7c5      	b.n	800565c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e8>
 80056d0:	e9dd 6c08 	ldrd	r6, ip, [sp, #32]
 80056d4:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 80056d8:	e9dd 850a 	ldrd	r8, r5, [sp, #40]	@ 0x28
 80056dc:	9c05      	ldr	r4, [sp, #20]
 80056de:	e779      	b.n	80055d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x160>
          TF_LITE_REPORT_ERROR(reporter_,
 80056e0:	4941      	ldr	r1, [pc, #260]	@ (80057e8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x374>)
 80056e2:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80056e4:	f7fe f81c 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TF_LITE_ENSURE_STATUS(
 80056e8:	e7f0      	b.n	80056cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x258>
    auto p = data_ + field_offset;
 80056ea:	4441      	add	r1, r8
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 80056ec:	2200      	movs	r2, #0
 80056ee:	680b      	ldr	r3, [r1, #0]
    current->first_created = 0;
 80056f0:	4610      	mov	r0, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80056f2:	4419      	add	r1, r3
 80056f4:	e007      	b.n	8005706 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x292>
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80056f6:	3201      	adds	r2, #1
    AllocationInfo* current = &info_[tensor_index];
 80056f8:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    current->first_created = 0;
 80056fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005700:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8005704:	6098      	str	r0, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8005706:	680b      	ldr	r3, [r1, #0]
 8005708:	4293      	cmp	r3, r2
 800570a:	d8f4      	bhi.n	80056f6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x282>
 800570c:	2e08      	cmp	r6, #8
 800570e:	d98f      	bls.n	8005630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1bc>
 8005710:	f8bc 0008 	ldrh.w	r0, [ip, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005714:	b918      	cbnz	r0, 800571e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x2aa>
  uoffset_t size() const { return EndianScalar(length_); }
 8005716:	6803      	ldr	r3, [r0, #0]
 8005718:	deff      	udf	#255	@ 0xff
  const int32_t* offline_planner_offsets = nullptr;
 800571a:	468b      	mov	fp, r1
 800571c:	e75a      	b.n	80055d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x160>
    auto p = data_ + field_offset;
 800571e:	4440      	add	r0, r8
 8005720:	2200      	movs	r2, #0
 8005722:	6803      	ldr	r3, [r0, #0]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005724:	4418      	add	r0, r3
 8005726:	e014      	b.n	8005752 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x2de>
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8005728:	3201      	adds	r2, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 800572a:	2e0a      	cmp	r6, #10
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 800572c:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005730:	f67f af7e 	bls.w	8005630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1bc>
 8005734:	f8bc 100a 	ldrh.w	r1, [ip, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005738:	2900      	cmp	r1, #0
 800573a:	f43f af79 	beq.w	8005630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1bc>
  uoffset_t size() const { return EndianScalar(length_); }
 800573e:	f858 5001 	ldr.w	r5, [r8, r1]
    auto p = data_ + field_offset;
 8005742:	4441      	add	r1, r8
    current->last_used = subgraph->operators()->size() - 1;
 8005744:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005748:	5949      	ldr	r1, [r1, r5]
 800574a:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800574e:	3901      	subs	r1, #1
 8005750:	60d9      	str	r1, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8005752:	6803      	ldr	r3, [r0, #0]
 8005754:	4293      	cmp	r3, r2
 8005756:	d8e7      	bhi.n	8005728 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x2b4>
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005758:	2e0a      	cmp	r6, #10
 800575a:	f67f af69 	bls.w	8005630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1bc>
 800575e:	f8bc 300a 	ldrh.w	r3, [ip, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005762:	2b00      	cmp	r3, #0
 8005764:	f43f af64 	beq.w	8005630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1bc>
 8005768:	f858 2003 	ldr.w	r2, [r8, r3]
    auto p = data_ + field_offset;
 800576c:	4443      	add	r3, r8
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800576e:	eb03 0802 	add.w	r8, r3, r2
  uoffset_t size() const { return EndianScalar(length_); }
 8005772:	589b      	ldr	r3, [r3, r2]
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8005774:	1e5d      	subs	r5, r3, #1
 8005776:	d466      	bmi.n	8005846 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x3d2>
 8005778:	eb08 0883 	add.w	r8, r8, r3, lsl #2
  return_type Get(uoffset_t i) const {
 800577c:	46bb      	mov	fp, r7
    p += i * sizeof(uoffset_t);
 800577e:	4647      	mov	r7, r8
T ReadScalar(const void *p) {
 8005780:	f1a8 0804 	sub.w	r8, r8, #4
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005784:	683b      	ldr	r3, [r7, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8005786:	58fa      	ldr	r2, [r7, r3]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005788:	441f      	add	r7, r3
    return data_ - ReadScalar<soffset_t>(data_);
 800578a:	eba7 0e02 	sub.w	lr, r7, r2
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800578e:	f8be 9000 	ldrh.w	r9, [lr]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005792:	f1b9 0f06 	cmp.w	r9, #6
 8005796:	f67f af4b 	bls.w	8005630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1bc>
 800579a:	f8be 6006 	ldrh.w	r6, [lr, #6]
    auto p = data_ + field_offset;
 800579e:	9703      	str	r7, [sp, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 80057a0:	2000      	movs	r0, #0
 80057a2:	eb07 0c06 	add.w	ip, r7, r6
 80057a6:	46c2      	mov	sl, r8
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80057a8:	b1be      	cbz	r6, 80057da <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x366>
 80057aa:	f8dc 2000 	ldr.w	r2, [ip]
  uoffset_t size() const { return EndianScalar(length_); }
 80057ae:	f85c 3002 	ldr.w	r3, [ip, r2]
 80057b2:	4298      	cmp	r0, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80057b4:	4462      	add	r2, ip
 80057b6:	d235      	bcs.n	8005824 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x3b0>
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80057b8:	3001      	adds	r0, #1
      AllocationInfo* current = &info_[tensor_index];
 80057ba:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 80057be:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80057c2:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
      if (current->first_created == 0) {
 80057c6:	688f      	ldr	r7, [r1, #8]
 80057c8:	b187      	cbz	r7, 80057ec <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x378>
      if (((current->last_used == -1) || (current->last_used < i))) {
 80057ca:	68cb      	ldr	r3, [r1, #12]
 80057cc:	1c5f      	adds	r7, r3, #1
 80057ce:	d001      	beq.n	80057d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x360>
 80057d0:	42ab      	cmp	r3, r5
 80057d2:	dae9      	bge.n	80057a8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x334>
        current->last_used = i;
 80057d4:	60cd      	str	r5, [r1, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80057d6:	2e00      	cmp	r6, #0
 80057d8:	d1e7      	bne.n	80057aa <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x336>
  uoffset_t size() const { return EndianScalar(length_); }
 80057da:	6833      	ldr	r3, [r6, #0]
 80057dc:	deff      	udf	#255	@ 0xff
 80057de:	bf00      	nop
 80057e0:	08015cf0 	.word	0x08015cf0
 80057e4:	08015b00 	.word	0x08015b00
 80057e8:	08015b44 	.word	0x08015b44
        for (size_t op_input = 0; op_input < op->inputs()->size(); ++op_input) {
 80057ec:	9f03      	ldr	r7, [sp, #12]
 80057ee:	f8cd a010 	str.w	sl, [sp, #16]
 80057f2:	eb02 0883 	add.w	r8, r2, r3, lsl #2
 80057f6:	9105      	str	r1, [sp, #20]
          AllocationInfo* op_current = &info_[op_tensor_index];
 80057f8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80057fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005800:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
          if (op_current->needs_allocating && op_current->first_created == -1) {
 8005804:	f893 a014 	ldrb.w	sl, [r3, #20]
 8005808:	f1ba 0f00 	cmp.w	sl, #0
 800580c:	d003      	beq.n	8005816 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x3a2>
 800580e:	6899      	ldr	r1, [r3, #8]
 8005810:	3101      	adds	r1, #1
            op_current->first_created = i;
 8005812:	bf08      	it	eq
 8005814:	609d      	streq	r5, [r3, #8]
        for (size_t op_input = 0; op_input < op->inputs()->size(); ++op_input) {
 8005816:	4590      	cmp	r8, r2
 8005818:	d1ee      	bne.n	80057f8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x384>
 800581a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800581e:	9905      	ldr	r1, [sp, #20]
 8005820:	9703      	str	r7, [sp, #12]
 8005822:	e7d2      	b.n	80057ca <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x356>
 8005824:	f1b9 0f08 	cmp.w	r9, #8
 8005828:	9f03      	ldr	r7, [sp, #12]
 800582a:	46d0      	mov	r8, sl
 800582c:	f67f af00 	bls.w	8005630 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1bc>
 8005830:	f8be 0008 	ldrh.w	r0, [lr, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005834:	2800      	cmp	r0, #0
 8005836:	f040 809f 	bne.w	8005978 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x504>
  uoffset_t size() const { return EndianScalar(length_); }
 800583a:	4603      	mov	r3, r0
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	deff      	udf	#255	@ 0xff
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8005840:	3d01      	subs	r5, #1
 8005842:	d29c      	bcs.n	800577e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x30a>
 8005844:	465f      	mov	r7, fp
  for (size_t i = 0; i < tensor_count_; ++i) {
 8005846:	b1b7      	cbz	r7, 8005876 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x402>
 8005848:	2200      	movs	r2, #0
 800584a:	4621      	mov	r1, r4
      current->needs_allocating = false;
 800584c:	4616      	mov	r6, r2
 800584e:	e006      	b.n	800585e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x3ea>
        ((current->first_created == -1) || (current->last_used == -1));
 8005850:	1c45      	adds	r5, r0, #1
 8005852:	d07d      	beq.n	8005950 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4dc>
  for (size_t i = 0; i < tensor_count_; ++i) {
 8005854:	3201      	adds	r2, #1
 8005856:	4297      	cmp	r7, r2
 8005858:	f101 0118 	add.w	r1, r1, #24
 800585c:	d00b      	beq.n	8005876 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x402>
        (current->first_created == -1) && (current->last_used != -1);
 800585e:	e9d1 3002 	ldrd	r3, r0, [r1, #8]
 8005862:	1c5d      	adds	r5, r3, #1
 8005864:	d1f4      	bne.n	8005850 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x3dc>
 8005866:	1c45      	adds	r5, r0, #1
 8005868:	d072      	beq.n	8005950 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4dc>
  for (size_t i = 0; i < tensor_count_; ++i) {
 800586a:	3201      	adds	r2, #1
 800586c:	4297      	cmp	r7, r2
      current->needs_allocating = false;
 800586e:	750e      	strb	r6, [r1, #20]
  for (size_t i = 0; i < tensor_count_; ++i) {
 8005870:	f101 0118 	add.w	r1, r1, #24
 8005874:	d1f3      	bne.n	800585e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x3ea>
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 8005876:	9b06      	ldr	r3, [sp, #24]
 8005878:	6858      	ldr	r0, [r3, #4]
 800587a:	f000 ffed 	bl	8006858 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 800587e:	2104      	movs	r1, #4
 8005880:	f7fe fe40 	bl	8004504 <_ZN6tflite14AlignPointerUpEPhj>
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8005884:	9b07      	ldr	r3, [sp, #28]
 8005886:	443b      	add	r3, r7
 8005888:	429f      	cmp	r7, r3
 800588a:	d225      	bcs.n	80058d8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x464>
 800588c:	9924      	ldr	r1, [sp, #144]	@ 0x90
 800588e:	9d07      	ldr	r5, [sp, #28]
 8005890:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8005894:	00fa      	lsls	r2, r7, #3
 8005896:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 800589a:	eb01 0585 	add.w	r5, r1, r5, lsl #2
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 800589e:	6059      	str	r1, [r3, #4]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 80058a0:	3104      	adds	r1, #4
 80058a2:	42a9      	cmp	r1, r5
 80058a4:	f103 0318 	add.w	r3, r3, #24
 80058a8:	d1f9      	bne.n	800589e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x42a>
 80058aa:	f102 0308 	add.w	r3, r2, #8
 80058ae:	9a07      	ldr	r2, [sp, #28]
 80058b0:	4601      	mov	r1, r0
 80058b2:	4423      	add	r3, r4
 80058b4:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
    current->offline_offset = kOnlinePlannedBuffer;
 80058b8:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
    current->needs_allocating = true;
 80058bc:	2501      	movs	r5, #1
    current->bytes = current_request->bytes;
 80058be:	680a      	ldr	r2, [r1, #0]
 80058c0:	f843 2c08 	str.w	r2, [r3, #-8]
    current->first_created = current_request->node_idx;
 80058c4:	684a      	ldr	r2, [r1, #4]
    current->offline_offset = kOnlinePlannedBuffer;
 80058c6:	609e      	str	r6, [r3, #8]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 80058c8:	3108      	adds	r1, #8
 80058ca:	4281      	cmp	r1, r0
    current->first_created = current_request->node_idx;
 80058cc:	e9c3 2200 	strd	r2, r2, [r3]
    current->needs_allocating = true;
 80058d0:	731d      	strb	r5, [r3, #12]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 80058d2:	f103 0318 	add.w	r3, r3, #24
 80058d6:	d1f2      	bne.n	80058be <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x44a>
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 80058d8:	9e06      	ldr	r6, [sp, #24]
 80058da:	2110      	movs	r1, #16
 80058dc:	6870      	ldr	r0, [r6, #4]
 80058de:	f000 ffbd 	bl	800685c <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 80058e2:	4605      	mov	r5, r0
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 80058e4:	6870      	ldr	r0, [r6, #4]
 80058e6:	6803      	ldr	r3, [r0, #0]
 80058e8:	2210      	movs	r2, #16
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	4629      	mov	r1, r5
 80058ee:	4798      	blx	r3
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 80058f0:	2800      	cmp	r0, #0
 80058f2:	f000 80a9 	beq.w	8005a48 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x5d4>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 80058f6:	462a      	mov	r2, r5
 80058f8:	4601      	mov	r1, r0
 80058fa:	a80f      	add	r0, sp, #60	@ 0x3c
 80058fc:	f008 f804 	bl	800d908 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 8005900:	9b06      	ldr	r3, [sp, #24]
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8005902:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 8005904:	f8d3 8008 	ldr.w	r8, [r3, #8]
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8005908:	2d00      	cmp	r5, #0
 800590a:	f000 80aa 	beq.w	8005a62 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x5ee>
 800590e:	4626      	mov	r6, r4
 8005910:	2700      	movs	r7, #0
 8005912:	e004      	b.n	800591e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4aa>
 8005914:	3701      	adds	r7, #1
 8005916:	42bd      	cmp	r5, r7
 8005918:	f106 0618 	add.w	r6, r6, #24
 800591c:	d043      	beq.n	80059a6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x532>
    if (current->needs_allocating) {
 800591e:	7d33      	ldrb	r3, [r6, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d0f7      	beq.n	8005914 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4a0>
          AlignSizeUp(current->bytes, kBufferAlignment);
 8005924:	2110      	movs	r1, #16
 8005926:	6830      	ldr	r0, [r6, #0]
 8005928:	f7fe fdfa 	bl	8004520 <_ZN6tflite11AlignSizeUpEjj>
      if (current->offline_offset == kOnlinePlannedBuffer) {
 800592c:	6931      	ldr	r1, [r6, #16]
        TF_LITE_ENSURE_STATUS(
 800592e:	68b3      	ldr	r3, [r6, #8]
          AlignSizeUp(current->bytes, kBufferAlignment);
 8005930:	4602      	mov	r2, r0
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8005932:	1c48      	adds	r0, r1, #1
 8005934:	d116      	bne.n	8005964 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4f0>
        TF_LITE_ENSURE_STATUS(
 8005936:	68f1      	ldr	r1, [r6, #12]
 8005938:	9100      	str	r1, [sp, #0]
 800593a:	a80f      	add	r0, sp, #60	@ 0x3c
 800593c:	4641      	mov	r1, r8
 800593e:	f007 ffbf 	bl	800d8c0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>
 8005942:	2800      	cmp	r0, #0
 8005944:	d0e6      	beq.n	8005914 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4a0>
 8005946:	4605      	mov	r5, r0
}
 8005948:	a80f      	add	r0, sp, #60	@ 0x3c
 800594a:	f007 ffad 	bl	800d8a8 <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800594e:	e685      	b.n	800565c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1e8>
    if (has_partial_lifetime && current->needs_allocating) {
 8005950:	7d0d      	ldrb	r5, [r1, #20]
 8005952:	2d00      	cmp	r5, #0
 8005954:	f43f af7e 	beq.w	8005854 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x3e0>
      TF_LITE_REPORT_ERROR(
 8005958:	9000      	str	r0, [sp, #0]
 800595a:	4955      	ldr	r1, [pc, #340]	@ (8005ab0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x63c>)
 800595c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800595e:	f7fd fedf 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
  TF_LITE_ENSURE_STATUS(
 8005962:	e6b3      	b.n	80056cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x258>
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 8005964:	9101      	str	r1, [sp, #4]
 8005966:	68f1      	ldr	r1, [r6, #12]
 8005968:	9100      	str	r1, [sp, #0]
 800596a:	a80f      	add	r0, sp, #60	@ 0x3c
 800596c:	4641      	mov	r1, r8
 800596e:	f007 ffed 	bl	800d94c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 8005972:	2800      	cmp	r0, #0
 8005974:	d0ce      	beq.n	8005914 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4a0>
 8005976:	e7e6      	b.n	8005946 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4d2>
 8005978:	583a      	ldr	r2, [r7, r0]
    auto p = data_ + field_offset;
 800597a:	4438      	add	r0, r7
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800597c:	4410      	add	r0, r2
    auto p = data_ + field_offset;
 800597e:	2200      	movs	r2, #0
 8005980:	e001      	b.n	8005986 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x512>
      if ((current->first_created == -1) || (current->first_created > i)) {
 8005982:	42a9      	cmp	r1, r5
 8005984:	dc0d      	bgt.n	80059a2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x52e>
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8005986:	6803      	ldr	r3, [r0, #0]
 8005988:	4293      	cmp	r3, r2
 800598a:	f67f af59 	bls.w	8005840 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x3cc>
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800598e:	3201      	adds	r2, #1
      AllocationInfo* current = &info_[tensor_index];
 8005990:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8005994:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005998:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
      if ((current->first_created == -1) || (current->first_created > i)) {
 800599c:	6899      	ldr	r1, [r3, #8]
 800599e:	1c4e      	adds	r6, r1, #1
 80059a0:	d1ef      	bne.n	8005982 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x50e>
        current->first_created = i;
 80059a2:	609d      	str	r5, [r3, #8]
T ReadScalar(const void *p) {
 80059a4:	e7ef      	b.n	8005986 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x512>
  memory_allocator_->ResetTempAllocations();
 80059a6:	9d06      	ldr	r5, [sp, #24]
 80059a8:	6868      	ldr	r0, [r5, #4]
 80059aa:	6803      	ldr	r3, [r0, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	4798      	blx	r3
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 80059b0:	6868      	ldr	r0, [r5, #4]
 80059b2:	2110      	movs	r1, #16
 80059b4:	f000 ff52 	bl	800685c <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 80059b8:	4605      	mov	r5, r0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 80059ba:	a80f      	add	r0, sp, #60	@ 0x3c
 80059bc:	f008 f914 	bl	800dbe8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 80059c0:	42a8      	cmp	r0, r5
 80059c2:	d834      	bhi.n	8005a2e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x5ba>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 80059c4:	9b06      	ldr	r3, [sp, #24]
 80059c6:	e9d3 0901 	ldrd	r0, r9, [r3, #4]
 80059ca:	f000 ff45 	bl	8006858 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
  int planner_index = 0;
 80059ce:	f04f 0a00 	mov.w	sl, #0
      TF_LITE_ENSURE_STATUS(
 80059d2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 80059d4:	4607      	mov	r7, r0
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80059d6:	4656      	mov	r6, sl
      int offset = -1;
 80059d8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
    if (current->needs_allocating) {
 80059dc:	7d23      	ldrb	r3, [r4, #20]
 80059de:	b17b      	cbz	r3, 8005a00 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x58c>
      TF_LITE_ENSURE_STATUS(
 80059e0:	ab0e      	add	r3, sp, #56	@ 0x38
 80059e2:	4652      	mov	r2, sl
 80059e4:	4649      	mov	r1, r9
 80059e6:	a80f      	add	r0, sp, #60	@ 0x3c
      int offset = -1;
 80059e8:	f8cd 8038 	str.w	r8, [sp, #56]	@ 0x38
      TF_LITE_ENSURE_STATUS(
 80059ec:	f008 f920 	bl	800dc30 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d1a8      	bne.n	8005946 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4d2>
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 80059f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80059f6:	6862      	ldr	r2, [r4, #4]
 80059f8:	443b      	add	r3, r7
      ++planner_index;
 80059fa:	f10a 0a01 	add.w	sl, sl, #1
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 80059fe:	6013      	str	r3, [r2, #0]
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8005a00:	3601      	adds	r6, #1
 8005a02:	42b5      	cmp	r5, r6
 8005a04:	f104 0418 	add.w	r4, r4, #24
 8005a08:	d1e8      	bne.n	80059dc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x568>
  head_usage = planner.GetMaximumMemorySize();
 8005a0a:	a80f      	add	r0, sp, #60	@ 0x3c
 8005a0c:	f008 f8ec 	bl	800dbe8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
  if (max_head_buffer_usage_ < head_usage) {
 8005a10:	9b06      	ldr	r3, [sp, #24]
 8005a12:	6959      	ldr	r1, [r3, #20]
 8005a14:	4281      	cmp	r1, r0
    max_head_buffer_usage_ = head_usage;
 8005a16:	bf38      	it	cc
 8005a18:	6158      	strcc	r0, [r3, #20]
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8005a1a:	9b06      	ldr	r3, [sp, #24]
 8005a1c:	bf38      	it	cc
 8005a1e:	4601      	movcc	r1, r0
 8005a20:	6858      	ldr	r0, [r3, #4]
 8005a22:	6803      	ldr	r3, [r0, #0]
 8005a24:	2210      	movs	r2, #16
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	4798      	blx	r3
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	e78c      	b.n	8005948 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4d4>
    TF_LITE_REPORT_ERROR(
 8005a2e:	9b06      	ldr	r3, [sp, #24]
 8005a30:	a80f      	add	r0, sp, #60	@ 0x3c
 8005a32:	689c      	ldr	r4, [r3, #8]
 8005a34:	f008 f8d8 	bl	800dbe8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8005a38:	462b      	mov	r3, r5
 8005a3a:	4602      	mov	r2, r0
 8005a3c:	491d      	ldr	r1, [pc, #116]	@ (8005ab4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x640>)
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f7fd fe6e 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8005a44:	2501      	movs	r5, #1
 8005a46:	e77f      	b.n	8005948 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x4d4>
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 8005a48:	9b06      	ldr	r3, [sp, #24]
 8005a4a:	4c1b      	ldr	r4, [pc, #108]	@ (8005ab8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x644>)
 8005a4c:	6899      	ldr	r1, [r3, #8]
 8005a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005abc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x648>)
 8005a50:	4b1b      	ldr	r3, [pc, #108]	@ (8005ac0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x64c>)
 8005a52:	f240 4044 	movw	r0, #1092	@ 0x444
 8005a56:	e9cd 0400 	strd	r0, r4, [sp]
 8005a5a:	4608      	mov	r0, r1
 8005a5c:	f7fd fe70 	bl	8003740 <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8005a60:	e634      	b.n	80056cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x258>
  memory_allocator_->ResetTempAllocations();
 8005a62:	6858      	ldr	r0, [r3, #4]
 8005a64:	461c      	mov	r4, r3
 8005a66:	6803      	ldr	r3, [r0, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	4798      	blx	r3
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 8005a6c:	2110      	movs	r1, #16
 8005a6e:	6860      	ldr	r0, [r4, #4]
 8005a70:	f000 fef4 	bl	800685c <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 8005a74:	4605      	mov	r5, r0
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 8005a76:	a80f      	add	r0, sp, #60	@ 0x3c
 8005a78:	f008 f8b6 	bl	800dbe8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8005a7c:	4285      	cmp	r5, r0
 8005a7e:	d3d6      	bcc.n	8005a2e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x5ba>
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8005a80:	9b06      	ldr	r3, [sp, #24]
 8005a82:	6858      	ldr	r0, [r3, #4]
 8005a84:	f000 fee8 	bl	8006858 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8005a88:	e7bf      	b.n	8005a0a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x596>
    FLATBUFFERS_ASSERT(i < size());
 8005a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x650>)
 8005a8c:	4a0e      	ldr	r2, [pc, #56]	@ (8005ac8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x654>)
 8005a8e:	480f      	ldr	r0, [pc, #60]	@ (8005acc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x658>)
 8005a90:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8005a94:	f00b fa1a 	bl	8010ecc <__assert_func>
 8005a98:	4b0a      	ldr	r3, [pc, #40]	@ (8005ac4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x650>)
 8005a9a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ad0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x65c>)
 8005a9c:	480b      	ldr	r0, [pc, #44]	@ (8005acc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x658>)
 8005a9e:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8005aa2:	f00b fa13 	bl	8010ecc <__assert_func>
  TFLITE_DCHECK(eval_tensors != nullptr);
 8005aa6:	f00b fa09 	bl	8010ebc <abort>
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8005aaa:	2300      	movs	r3, #0
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	deff      	udf	#255	@ 0xff
 8005ab0:	08015b90 	.word	0x08015b90
 8005ab4:	08015c44 	.word	0x08015c44
 8005ab8:	08015c28 	.word	0x08015c28
 8005abc:	080152b4 	.word	0x080152b4
 8005ac0:	08015bf4 	.word	0x08015bf4
 8005ac4:	080155fc 	.word	0x080155fc
 8005ac8:	08015608 	.word	0x08015608
 8005acc:	080156e8 	.word	0x080156e8
 8005ad0:	08015774 	.word	0x08015774

08005ad4 <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop

08005ad8 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 8005ad8:	b500      	push	{lr}
 8005ada:	b0c1      	sub	sp, #260	@ 0x104
 8005adc:	4613      	mov	r3, r2
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 8005ade:	4668      	mov	r0, sp
 8005ae0:	460a      	mov	r2, r1
 8005ae2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005ae6:	f000 fb87 	bl	80061f8 <MicroVsnprintf>
  DebugLog(log_buffer);
 8005aea:	4668      	mov	r0, sp
 8005aec:	f000 fec4 	bl	8006878 <DebugLog>
  DebugLog("\r\n");
 8005af0:	4803      	ldr	r0, [pc, #12]	@ (8005b00 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x28>)
 8005af2:	f000 fec1 	bl	8006878 <DebugLog>
#endif
  return 0;
}
 8005af6:	2000      	movs	r0, #0
 8005af8:	b041      	add	sp, #260	@ 0x104
 8005afa:	f85d fb04 	ldr.w	pc, [sp], #4
 8005afe:	bf00      	nop
 8005b00:	08013f70 	.word	0x08013f70

08005b04 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8005b04:	b510      	push	{r4, lr}
 8005b06:	2104      	movs	r1, #4
 8005b08:	4604      	mov	r4, r0
 8005b0a:	f00a ff01 	bl	8010910 <_ZdlPvj>
 8005b0e:	4620      	mov	r0, r4
 8005b10:	bd10      	pop	{r4, pc}
 8005b12:	bf00      	nop

08005b14 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextj>:
    : allocator_(allocator), error_reporter_(error_reporter), model_(model) {}

void* ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                              size_t bytes) {
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
      ->allocator_->AllocatePersistentBuffer(bytes);
 8005b14:	68c3      	ldr	r3, [r0, #12]
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	6803      	ldr	r3, [r0, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	4718      	bx	r3
 8005b1e:	bf00      	nop

08005b20 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:
  return helper->allocator_->RequestScratchBufferInArena(bytes, buffer_idx);
}

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
  ScratchBufferHandle* handle = helper->scratch_buffer_handles_ + buffer_idx;
 8005b20:	68c3      	ldr	r3, [r0, #12]
  return handle->data;
 8005b22:	691b      	ldr	r3, [r3, #16]
}
 8005b24:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop

08005b2c <_ZN6tflite8internal13ContextHelper9GetTensorEPK13TfLiteContexti>:
  va_end(args);
#endif
}

TfLiteTensor* ContextHelper::GetTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 8005b2c:	b410      	push	{r4}
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 8005b2e:	68c4      	ldr	r4, [r0, #12]
  return helper->allocator_->AllocateTempTfLiteTensor(
 8005b30:	6820      	ldr	r0, [r4, #0]
                                       int tensor_idx) {
 8005b32:	460b      	mov	r3, r1
  return helper->allocator_->AllocateTempTfLiteTensor(
 8005b34:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8005b38:	6804      	ldr	r4, [r0, #0]
 8005b3a:	6864      	ldr	r4, [r4, #4]
 8005b3c:	46a4      	mov	ip, r4
      helper->model_, helper->eval_tensors_, tensor_idx);
}
 8005b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return helper->allocator_->AllocateTempTfLiteTensor(
 8005b42:	4760      	bx	ip

08005b44 <_ZN6tflite8internal13ContextHelper13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* ContextHelper::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(context->impl_);
  return &helper->eval_tensors_[tensor_idx];
 8005b44:	68c3      	ldr	r3, [r0, #12]
 8005b46:	68d8      	ldr	r0, [r3, #12]
 8005b48:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
 8005b4c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop

08005b54 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  return helper->allocator_->RequestScratchBufferInArena(bytes, buffer_idx);
 8005b54:	68c3      	ldr	r3, [r0, #12]
 8005b56:	6818      	ldr	r0, [r3, #0]
 8005b58:	f7ff bc32 	b.w	80053c0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>

08005b5c <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:
                                  const char* format, ...) {
 8005b5c:	b40e      	push	{r1, r2, r3}
 8005b5e:	b500      	push	{lr}
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 8005b60:	68c3      	ldr	r3, [r0, #12]
                                  const char* format, ...) {
 8005b62:	b082      	sub	sp, #8
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 8005b64:	6858      	ldr	r0, [r3, #4]
                                  const char* format, ...) {
 8005b66:	aa03      	add	r2, sp, #12
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 8005b68:	6803      	ldr	r3, [r0, #0]
                                  const char* format, ...) {
 8005b6a:	f852 1b04 	ldr.w	r1, [r2], #4
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 8005b6e:	689b      	ldr	r3, [r3, #8]
  va_start(args, format);
 8005b70:	9201      	str	r2, [sp, #4]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 8005b72:	4798      	blx	r3
}
 8005b74:	b002      	add	sp, #8
 8005b76:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b7a:	b003      	add	sp, #12
 8005b7c:	4770      	bx	lr
 8005b7e:	bf00      	nop

08005b80 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:
  scratch_buffer_handles_ = scratch_buffer_handles;
}

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 8005b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b84:	f8dd 801c 	ldr.w	r8, [sp, #28]
                                   uint8_t* tensor_arena,
                                   size_t tensor_arena_size,
                                   ErrorReporter* error_reporter,
                                   tflite::Profiler* profiler)
    : model_(model),
      op_resolver_(op_resolver),
 8005b88:	6082      	str	r2, [r0, #8]
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      eval_tensors_(nullptr),
      context_helper_(error_reporter_, &allocator_, model),
      input_tensor_(nullptr),
      output_tensor_(nullptr) {
 8005b8a:	2500      	movs	r5, #0
MicroInterpreter::MicroInterpreter(const Model* model,
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	461f      	mov	r7, r3
    : model_(model),
 8005b90:	6041      	str	r1, [r0, #4]
MicroInterpreter::MicroInterpreter(const Model* model,
 8005b92:	460e      	mov	r6, r1
      error_reporter_(error_reporter),
 8005b94:	f8c0 800c 	str.w	r8, [r0, #12]
      output_tensor_(nullptr) {
 8005b98:	2258      	movs	r2, #88	@ 0x58
 8005b9a:	6005      	str	r5, [r0, #0]
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	3010      	adds	r0, #16
 8005ba0:	f00c f924 	bl	8011dec <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 8005ba4:	9906      	ldr	r1, [sp, #24]
 8005ba6:	4642      	mov	r2, r8
 8005ba8:	4638      	mov	r0, r7
 8005baa:	f7ff fb47 	bl	800523c <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
      tensors_allocated_(false),
 8005bae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005bb2:	f8a4 306c 	strh.w	r3, [r4, #108]	@ 0x6c
      output_tensor_(nullptr) {
 8005bb6:	e9c4 551c 	strd	r5, r5, [r4, #112]	@ 0x70
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 8005bba:	4603      	mov	r3, r0
    : allocator_(allocator), error_reporter_(error_reporter), model_(model) {}
 8005bbc:	e9c4 531e 	strd	r5, r3, [r4, #120]	@ 0x78
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 8005bc0:	66a3      	str	r3, [r4, #104]	@ 0x68
  }
}

void MicroInterpreter::Init(tflite::Profiler* profiler) {
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
 8005bc2:	6863      	ldr	r3, [r4, #4]
      context_helper_(error_reporter_, &allocator_, model),
 8005bc4:	68e0      	ldr	r0, [r4, #12]
    return data_ - ReadScalar<soffset_t>(data_);
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	1a9a      	subs	r2, r3, r2
    : allocator_(allocator), error_reporter_(error_reporter), model_(model) {}
 8005bca:	e9c4 0620 	strd	r0, r6, [r4, #128]	@ 0x80
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005bce:	8811      	ldrh	r1, [r2, #0]
 8005bd0:	2908      	cmp	r1, #8
 8005bd2:	e9c4 5522 	strd	r5, r5, [r4, #136]	@ 0x88
      output_tensor_(nullptr) {
 8005bd6:	e9c4 5524 	strd	r5, r5, [r4, #144]	@ 0x90
 8005bda:	d925      	bls.n	8005c28 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0xa8>
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8005bdc:	8912      	ldrh	r2, [r2, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005bde:	b31a      	cbz	r2, 8005c28 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0xa8>
 8005be0:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 8005be2:	4413      	add	r3, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005be4:	185a      	adds	r2, r3, r1
  if (subgraphs->size() != 1) {
 8005be6:	5859      	ldr	r1, [r3, r1]
 8005be8:	2901      	cmp	r1, #1
 8005bea:	d008      	beq.n	8005bfe <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0x7e>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8005bec:	4910      	ldr	r1, [pc, #64]	@ (8005c30 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0xb0>)
 8005bee:	2501      	movs	r5, #1
 8005bf0:	f7fd fd96 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 8005bf4:	f884 506d 	strb.w	r5, [r4, #109]	@ 0x6d
}
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005bfe:	6853      	ldr	r3, [r2, #4]

  context_.impl_ = static_cast<void*>(&context_helper_);
  context_.ReportError = context_helper_.ReportOpError;
  context_.GetTensor = context_helper_.GetTensor;
  context_.GetEvalTensor = context_helper_.GetEvalTensor;
  context_.recommended_num_threads = 1;
 8005c00:	6361      	str	r1, [r4, #52]	@ 0x34
 8005c02:	3304      	adds	r3, #4
 8005c04:	441a      	add	r2, r3
  context_.ReportError = context_helper_.ReportOpError;
 8005c06:	4b0b      	ldr	r3, [pc, #44]	@ (8005c34 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0xb4>)
  subgraph_ = (*subgraphs)[0];
 8005c08:	6722      	str	r2, [r4, #112]	@ 0x70
  context_.ReportError = context_helper_.ReportOpError;
 8005c0a:	6263      	str	r3, [r4, #36]	@ 0x24
  context_.GetTensor = context_helper_.GetTensor;
 8005c0c:	4a0a      	ldr	r2, [pc, #40]	@ (8005c38 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0xb8>)
  context_.GetEvalTensor = context_helper_.GetEvalTensor;
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c3c <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE+0xbc>)
    initialization_status_ = kTfLiteError;
 8005c10:	f884 506d 	strb.w	r5, [r4, #109]	@ 0x6d
  context_.impl_ = static_cast<void*>(&context_helper_);
 8005c14:	f104 007c 	add.w	r0, r4, #124	@ 0x7c
  context_.GetEvalTensor = context_helper_.GetEvalTensor;
 8005c18:	e9c4 2318 	strd	r2, r3, [r4, #96]	@ 0x60
  context_.profiler = profiler;
 8005c1c:	9b08      	ldr	r3, [sp, #32]
  context_.impl_ = static_cast<void*>(&context_helper_);
 8005c1e:	61e0      	str	r0, [r4, #28]
  context_.profiler = profiler;
 8005c20:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8005c22:	4620      	mov	r0, r4
 8005c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uoffset_t size() const { return EndianScalar(length_); }
 8005c28:	2300      	movs	r3, #0
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	deff      	udf	#255	@ 0xff
 8005c2e:	bf00      	nop
 8005c30:	080154b0 	.word	0x080154b0
 8005c34:	08005b5d 	.word	0x08005b5d
 8005c38:	08005b2d 	.word	0x08005b2d
 8005c3c:	08005b45 	.word	0x08005b45

08005c40 <_ZN6tflite16MicroInterpreterD1Ev>:
  if (node_and_registrations_ != nullptr) {
 8005c40:	6803      	ldr	r3, [r0, #0]
MicroInterpreter::~MicroInterpreter() {
 8005c42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c46:	4606      	mov	r6, r0
  if (node_and_registrations_ != nullptr) {
 8005c48:	b303      	cbz	r3, 8005c8c <_ZN6tflite16MicroInterpreterD1Ev+0x4c>
 8005c4a:	2400      	movs	r4, #0
 8005c4c:	6f02      	ldr	r2, [r0, #112]	@ 0x70
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8005c4e:	4627      	mov	r7, r4
        registration->free(&context_, node->user_data);
 8005c50:	f100 0510 	add.w	r5, r0, #16
 8005c54:	e00e      	b.n	8005c74 <_ZN6tflite16MicroInterpreterD1Ev+0x34>
      TfLiteNode* node = &(node_and_registrations_[i].node);
 8005c56:	6833      	ldr	r3, [r6, #0]
 8005c58:	4423      	add	r3, r4
      const TfLiteRegistration* registration =
 8005c5a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
      if (registration != nullptr && registration->free != nullptr) {
 8005c5c:	b141      	cbz	r1, 8005c70 <_ZN6tflite16MicroInterpreterD1Ev+0x30>
 8005c5e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8005c62:	f1b8 0f00 	cmp.w	r8, #0
 8005c66:	d003      	beq.n	8005c70 <_ZN6tflite16MicroInterpreterD1Ev+0x30>
        registration->free(&context_, node->user_data);
 8005c68:	6919      	ldr	r1, [r3, #16]
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	47c0      	blx	r8
 8005c6e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8005c70:	3701      	adds	r7, #1
 8005c72:	3428      	adds	r4, #40	@ 0x28
    return data_ - ReadScalar<soffset_t>(data_);
 8005c74:	6813      	ldr	r3, [r2, #0]
 8005c76:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005c78:	8819      	ldrh	r1, [r3, #0]
 8005c7a:	290a      	cmp	r1, #10
 8005c7c:	d909      	bls.n	8005c92 <_ZN6tflite16MicroInterpreterD1Ev+0x52>
 8005c7e:	895b      	ldrh	r3, [r3, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005c80:	b13b      	cbz	r3, 8005c92 <_ZN6tflite16MicroInterpreterD1Ev+0x52>
  uoffset_t size() const { return EndianScalar(length_); }
 8005c82:	58d1      	ldr	r1, [r2, r3]
    auto p = data_ + field_offset;
 8005c84:	4413      	add	r3, r2
 8005c86:	585b      	ldr	r3, [r3, r1]
 8005c88:	429f      	cmp	r7, r3
 8005c8a:	d3e4      	bcc.n	8005c56 <_ZN6tflite16MicroInterpreterD1Ev+0x16>
}
 8005c8c:	4630      	mov	r0, r6
 8005c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  uoffset_t size() const { return EndianScalar(length_); }
 8005c92:	2300      	movs	r3, #0
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	deff      	udf	#255	@ 0xff

08005c98 <_ZN6tflite16MicroInterpreter5inputEj>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 8005c98:	6f02      	ldr	r2, [r0, #112]	@ 0x70
    return data_ - ReadScalar<soffset_t>(data_);
 8005c9a:	6813      	ldr	r3, [r2, #0]
 8005c9c:	1ad3      	subs	r3, r2, r3
    }
  }
  return kTfLiteOk;
}

TfLiteTensor* MicroInterpreter::input(size_t index) {
 8005c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca2:	460d      	mov	r5, r1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005ca4:	8819      	ldrh	r1, [r3, #0]
 8005ca6:	2906      	cmp	r1, #6
 8005ca8:	d948      	bls.n	8005d3c <_ZN6tflite16MicroInterpreter5inputEj+0xa4>
 8005caa:	88db      	ldrh	r3, [r3, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d045      	beq.n	8005d3c <_ZN6tflite16MicroInterpreter5inputEj+0xa4>
    auto p = data_ + field_offset;
 8005cb0:	18d1      	adds	r1, r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005cb2:	58d3      	ldr	r3, [r2, r3]
 8005cb4:	18ca      	adds	r2, r1, r3
  uoffset_t size() const { return EndianScalar(length_); }
 8005cb6:	58cb      	ldr	r3, [r1, r3]
  const size_t length = inputs_size();
  if (index >= length) {
 8005cb8:	429d      	cmp	r5, r3
 8005cba:	4604      	mov	r4, r0
 8005cbc:	d230      	bcs.n	8005d20 <_ZN6tflite16MicroInterpreter5inputEj+0x88>
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  if (index != 0) {
 8005cbe:	b925      	cbnz	r5, 8005cca <_ZN6tflite16MicroInterpreter5inputEj+0x32>
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
                                                     inputs().Get(index));
  }
  if (input_tensor_ == nullptr) {
 8005cc0:	f8d0 0090 	ldr.w	r0, [r0, #144]	@ 0x90
 8005cc4:	b308      	cbz	r0, 8005d0a <_ZN6tflite16MicroInterpreter5inputEj+0x72>
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
        model_, eval_tensors_, inputs().Get(index));
  }
  return input_tensor_;
}
 8005cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(
 8005cca:	491e      	ldr	r1, [pc, #120]	@ (8005d44 <_ZN6tflite16MicroInterpreter5inputEj+0xac>)
 8005ccc:	68c0      	ldr	r0, [r0, #12]
 8005cce:	f7fd fd27 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8005cd2:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8005cd4:	6861      	ldr	r1, [r4, #4]
 8005cd6:	6803      	ldr	r3, [r0, #0]
 8005cd8:	681e      	ldr	r6, [r3, #0]
 8005cda:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	@ 0x70
    return data_ - ReadScalar<soffset_t>(data_);
 8005cde:	681c      	ldr	r4, [r3, #0]
 8005ce0:	1b1c      	subs	r4, r3, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005ce2:	f8b4 c000 	ldrh.w	ip, [r4]
 8005ce6:	f1bc 0f06 	cmp.w	ip, #6
 8005cea:	d927      	bls.n	8005d3c <_ZN6tflite16MicroInterpreter5inputEj+0xa4>
 8005cec:	88e4      	ldrh	r4, [r4, #6]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005cee:	b32c      	cbz	r4, 8005d3c <_ZN6tflite16MicroInterpreter5inputEj+0xa4>
 8005cf0:	591f      	ldr	r7, [r3, r4]
    auto p = data_ + field_offset;
 8005cf2:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005cf4:	19dc      	adds	r4, r3, r7
    FLATBUFFERS_ASSERT(i < size());
 8005cf6:	59db      	ldr	r3, [r3, r7]
 8005cf8:	429d      	cmp	r5, r3
 8005cfa:	d218      	bcs.n	8005d2e <_ZN6tflite16MicroInterpreter5inputEj+0x96>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8005cfc:	3501      	adds	r5, #1
 8005cfe:	46b4      	mov	ip, r6
 8005d00:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
}
 8005d04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8005d08:	4760      	bx	ip
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8005d0a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8005d0c:	6853      	ldr	r3, [r2, #4]
 8005d0e:	6801      	ldr	r1, [r0, #0]
 8005d10:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8005d12:	680d      	ldr	r5, [r1, #0]
 8005d14:	6861      	ldr	r1, [r4, #4]
 8005d16:	47a8      	blx	r5
 8005d18:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
}
 8005d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
 8005d20:	4909      	ldr	r1, [pc, #36]	@ (8005d48 <_ZN6tflite16MicroInterpreter5inputEj+0xb0>)
 8005d22:	68c0      	ldr	r0, [r0, #12]
 8005d24:	462a      	mov	r2, r5
 8005d26:	f7fd fcfb 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	e7cb      	b.n	8005cc6 <_ZN6tflite16MicroInterpreter5inputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
 8005d2e:	4b07      	ldr	r3, [pc, #28]	@ (8005d4c <_ZN6tflite16MicroInterpreter5inputEj+0xb4>)
 8005d30:	4a07      	ldr	r2, [pc, #28]	@ (8005d50 <_ZN6tflite16MicroInterpreter5inputEj+0xb8>)
 8005d32:	4808      	ldr	r0, [pc, #32]	@ (8005d54 <_ZN6tflite16MicroInterpreter5inputEj+0xbc>)
 8005d34:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8005d38:	f00b f8c8 	bl	8010ecc <__assert_func>
  uoffset_t size() const { return EndianScalar(length_); }
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	deff      	udf	#255	@ 0xff
 8005d42:	bf00      	nop
 8005d44:	08015d48 	.word	0x08015d48
 8005d48:	08015d1c 	.word	0x08015d1c
 8005d4c:	080155fc 	.word	0x080155fc
 8005d50:	08015dc0 	.word	0x08015dc0
 8005d54:	080156e8 	.word	0x080156e8

08005d58 <_ZN6tflite16MicroInterpreter6outputEj>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 8005d58:	6f02      	ldr	r2, [r0, #112]	@ 0x70
    return data_ - ReadScalar<soffset_t>(data_);
 8005d5a:	6813      	ldr	r3, [r2, #0]
 8005d5c:	1ad3      	subs	r3, r2, r3

TfLiteTensor* MicroInterpreter::output(size_t index) {
 8005d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d62:	460d      	mov	r5, r1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005d64:	8819      	ldrh	r1, [r3, #0]
 8005d66:	2908      	cmp	r1, #8
 8005d68:	d948      	bls.n	8005dfc <_ZN6tflite16MicroInterpreter6outputEj+0xa4>
 8005d6a:	891b      	ldrh	r3, [r3, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d045      	beq.n	8005dfc <_ZN6tflite16MicroInterpreter6outputEj+0xa4>
    auto p = data_ + field_offset;
 8005d70:	18d1      	adds	r1, r2, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005d72:	58d3      	ldr	r3, [r2, r3]
 8005d74:	18ca      	adds	r2, r1, r3
  uoffset_t size() const { return EndianScalar(length_); }
 8005d76:	58cb      	ldr	r3, [r1, r3]
  const size_t length = outputs_size();
  if (index >= length) {
 8005d78:	429d      	cmp	r5, r3
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	d230      	bcs.n	8005de0 <_ZN6tflite16MicroInterpreter6outputEj+0x88>
    TF_LITE_REPORT_ERROR(error_reporter_,
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
  }
  if (index != 0) {
 8005d7e:	b925      	cbnz	r5, 8005d8a <_ZN6tflite16MicroInterpreter6outputEj+0x32>
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
                                                     outputs().Get(index));
  }
  if (output_tensor_ == nullptr) {
 8005d80:	f8d0 0094 	ldr.w	r0, [r0, #148]	@ 0x94
 8005d84:	b308      	cbz	r0, 8005dca <_ZN6tflite16MicroInterpreter6outputEj+0x72>
    // handling buffers from TfLiteEvalTensor.
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
        model_, eval_tensors_, outputs().Get(index));
  }
  return output_tensor_;
}
 8005d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(
 8005d8a:	491e      	ldr	r1, [pc, #120]	@ (8005e04 <_ZN6tflite16MicroInterpreter6outputEj+0xac>)
 8005d8c:	68c0      	ldr	r0, [r0, #12]
 8005d8e:	f7fd fcc7 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8005d92:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8005d94:	6861      	ldr	r1, [r4, #4]
 8005d96:	6803      	ldr	r3, [r0, #0]
 8005d98:	681e      	ldr	r6, [r3, #0]
 8005d9a:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	@ 0x70
    return data_ - ReadScalar<soffset_t>(data_);
 8005d9e:	681c      	ldr	r4, [r3, #0]
 8005da0:	1b1c      	subs	r4, r3, r4
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005da2:	f8b4 c000 	ldrh.w	ip, [r4]
 8005da6:	f1bc 0f08 	cmp.w	ip, #8
 8005daa:	d927      	bls.n	8005dfc <_ZN6tflite16MicroInterpreter6outputEj+0xa4>
 8005dac:	8924      	ldrh	r4, [r4, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005dae:	b32c      	cbz	r4, 8005dfc <_ZN6tflite16MicroInterpreter6outputEj+0xa4>
 8005db0:	591f      	ldr	r7, [r3, r4]
    auto p = data_ + field_offset;
 8005db2:	4423      	add	r3, r4
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005db4:	19dc      	adds	r4, r3, r7
    FLATBUFFERS_ASSERT(i < size());
 8005db6:	59db      	ldr	r3, [r3, r7]
 8005db8:	429d      	cmp	r5, r3
 8005dba:	d218      	bcs.n	8005dee <_ZN6tflite16MicroInterpreter6outputEj+0x96>
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	46b4      	mov	ip, r6
 8005dc0:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
}
 8005dc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8005dc8:	4760      	bx	ip
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8005dca:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8005dcc:	6853      	ldr	r3, [r2, #4]
 8005dce:	6801      	ldr	r1, [r0, #0]
 8005dd0:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 8005dd2:	680d      	ldr	r5, [r1, #0]
 8005dd4:	6861      	ldr	r1, [r4, #4]
 8005dd6:	47a8      	blx	r5
 8005dd8:	f8c4 0094 	str.w	r0, [r4, #148]	@ 0x94
}
 8005ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
 8005de0:	4909      	ldr	r1, [pc, #36]	@ (8005e08 <_ZN6tflite16MicroInterpreter6outputEj+0xb0>)
 8005de2:	68c0      	ldr	r0, [r0, #12]
 8005de4:	462a      	mov	r2, r5
 8005de6:	f7fd fc9b 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 8005dea:	2000      	movs	r0, #0
 8005dec:	e7cb      	b.n	8005d86 <_ZN6tflite16MicroInterpreter6outputEj+0x2e>
    FLATBUFFERS_ASSERT(i < size());
 8005dee:	4b07      	ldr	r3, [pc, #28]	@ (8005e0c <_ZN6tflite16MicroInterpreter6outputEj+0xb4>)
 8005df0:	4a07      	ldr	r2, [pc, #28]	@ (8005e10 <_ZN6tflite16MicroInterpreter6outputEj+0xb8>)
 8005df2:	4808      	ldr	r0, [pc, #32]	@ (8005e14 <_ZN6tflite16MicroInterpreter6outputEj+0xbc>)
 8005df4:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8005df8:	f00b f868 	bl	8010ecc <__assert_func>
  uoffset_t size() const { return EndianScalar(length_); }
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	deff      	udf	#255	@ 0xff
 8005e02:	bf00      	nop
 8005e04:	08015ea4 	.word	0x08015ea4
 8005e08:	08015e78 	.word	0x08015e78
 8005e0c:	080155fc 	.word	0x080155fc
 8005e10:	08015dc0 	.word	0x08015dc0
 8005e14:	080156e8 	.word	0x080156e8

08005e18 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
  }
  return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
                                                   index);
}

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 8005e18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 8005e1c:	2700      	movs	r7, #0
 8005e1e:	6f02      	ldr	r2, [r0, #112]	@ 0x70
TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 8005e20:	b083      	sub	sp, #12
 8005e22:	4680      	mov	r8, r0
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 8005e24:	463c      	mov	r4, r7
 8005e26:	e01a      	b.n	8005e5e <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x46>
 8005e28:	889b      	ldrh	r3, [r3, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005e2a:	b1f3      	cbz	r3, 8005e6a <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x52>
 8005e2c:	58d0      	ldr	r0, [r2, r3]
    auto p = data_ + field_offset;
 8005e2e:	4413      	add	r3, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005e30:	1819      	adds	r1, r3, r0
 8005e32:	581b      	ldr	r3, [r3, r0]
 8005e34:	429c      	cmp	r4, r3
 8005e36:	d237      	bcs.n	8005ea8 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x90>
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8005e38:	3401      	adds	r4, #1
    p += i * sizeof(uoffset_t);
 8005e3a:	eb01 0684 	add.w	r6, r1, r4, lsl #2
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005e3e:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
    return data_ - ReadScalar<soffset_t>(data_);
 8005e42:	5973      	ldr	r3, [r6, r5]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8005e44:	eb06 0905 	add.w	r9, r6, r5
    return data_ - ReadScalar<soffset_t>(data_);
 8005e48:	eba9 0303 	sub.w	r3, r9, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005e4c:	8819      	ldrh	r1, [r3, #0]
 8005e4e:	290e      	cmp	r1, #14
 8005e50:	d904      	bls.n	8005e5c <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x44>
 8005e52:	89db      	ldrh	r3, [r3, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005e54:	b113      	cbz	r3, 8005e5c <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x44>
    auto* tensor = subgraph_->tensors()->Get(i);
    if (tensor->is_variable()) {
 8005e56:	f819 3003 	ldrb.w	r3, [r9, r3]
 8005e5a:	b943      	cbnz	r3, 8005e6e <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x56>
 8005e5c:	370c      	adds	r7, #12
    return data_ - ReadScalar<soffset_t>(data_);
 8005e5e:	6813      	ldr	r3, [r2, #0]
 8005e60:	1ad3      	subs	r3, r2, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005e62:	8819      	ldrh	r1, [r3, #0]
 8005e64:	2904      	cmp	r1, #4
 8005e66:	d8df      	bhi.n	8005e28 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x10>
  uoffset_t size() const { return EndianScalar(length_); }
 8005e68:	2300      	movs	r3, #0
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	deff      	udf	#255	@ 0xff
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 8005e6e:	f8d8 0074 	ldr.w	r0, [r8, #116]	@ 0x74
 8005e72:	a901      	add	r1, sp, #4
 8005e74:	4438      	add	r0, r7
 8005e76:	f7fe fbd3 	bl	8004620 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8005e7a:	b9b0      	cbnz	r0, 8005eaa <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x92>
    return data_ - ReadScalar<soffset_t>(data_);
 8005e7c:	5973      	ldr	r3, [r6, r5]
 8005e7e:	eba9 0303 	sub.w	r3, r9, r3
 8005e82:	881a      	ldrh	r2, [r3, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005e84:	2a06      	cmp	r2, #6
 8005e86:	d905      	bls.n	8005e94 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x7c>
 8005e88:	88d9      	ldrh	r1, [r3, #6]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005e8a:	b121      	cbz	r1, 8005e96 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x7e>
          TfLiteEvalTensorByteLength(&eval_tensors_[i], &buffer_size));

      int value = 0;
      if (tensor->type() == tflite::TensorType_INT8) {
 8005e8c:	f919 1001 	ldrsb.w	r1, [r9, r1]
 8005e90:	2909      	cmp	r1, #9
 8005e92:	d00d      	beq.n	8005eb0 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x98>
      int value = 0;
 8005e94:	2100      	movs	r1, #0
        value = tensor->quantization()->zero_point()->Get(0);
      }
      memset(eval_tensors_[i].data.raw, value, buffer_size);
 8005e96:	f8d8 3074 	ldr.w	r3, [r8, #116]	@ 0x74
 8005e9a:	9a01      	ldr	r2, [sp, #4]
 8005e9c:	59d8      	ldr	r0, [r3, r7]
 8005e9e:	f00b ffa5 	bl	8011dec <memset>
 8005ea2:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 8005ea6:	e7d9      	b.n	8005e5c <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x44>
    }
  }

  return kTfLiteOk;
 8005ea8:	2000      	movs	r0, #0
}
 8005eaa:	b003      	add	sp, #12
 8005eac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005eb0:	2a0c      	cmp	r2, #12
 8005eb2:	d9d9      	bls.n	8005e68 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x50>
 8005eb4:	899b      	ldrh	r3, [r3, #12]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d0d6      	beq.n	8005e68 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x50>
 8005eba:	f859 2003 	ldr.w	r2, [r9, r3]
    auto p = data_ + field_offset;
 8005ebe:	4499      	add	r9, r3
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005ec0:	eb09 0102 	add.w	r1, r9, r2
    return data_ - ReadScalar<soffset_t>(data_);
 8005ec4:	f859 3002 	ldr.w	r3, [r9, r2]
 8005ec8:	1acb      	subs	r3, r1, r3
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005eca:	881a      	ldrh	r2, [r3, #0]
 8005ecc:	2a0a      	cmp	r2, #10
 8005ece:	d9cb      	bls.n	8005e68 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x50>
 8005ed0:	895a      	ldrh	r2, [r3, #10]
    auto p = data_ + field_offset;
 8005ed2:	188b      	adds	r3, r1, r2
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005ed4:	2a00      	cmp	r2, #0
 8005ed6:	d0c7      	beq.n	8005e68 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x50>
 8005ed8:	588a      	ldr	r2, [r1, r2]
    FLATBUFFERS_ASSERT(i < size());
 8005eda:	5899      	ldr	r1, [r3, r2]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005edc:	4413      	add	r3, r2
    FLATBUFFERS_ASSERT(i < size());
 8005ede:	b109      	cbz	r1, 8005ee4 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xcc>
        value = tensor->quantization()->zero_point()->Get(0);
 8005ee0:	6859      	ldr	r1, [r3, #4]
 8005ee2:	e7d8      	b.n	8005e96 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x7e>
 8005ee4:	4b03      	ldr	r3, [pc, #12]	@ (8005ef4 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xdc>)
 8005ee6:	4a04      	ldr	r2, [pc, #16]	@ (8005ef8 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xe0>)
 8005ee8:	4804      	ldr	r0, [pc, #16]	@ (8005efc <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xe4>)
 8005eea:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8005eee:	f00a ffed 	bl	8010ecc <__assert_func>
 8005ef2:	bf00      	nop
 8005ef4:	080155fc 	.word	0x080155fc
 8005ef8:	080158d4 	.word	0x080158d4
 8005efc:	080156e8 	.word	0x080156e8

08005f00 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
TfLiteStatus MicroInterpreter::AllocateTensors() {
 8005f00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005f04:	b083      	sub	sp, #12
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 8005f06:	f100 0374 	add.w	r3, r0, #116	@ 0x74
TfLiteStatus MicroInterpreter::AllocateTensors() {
 8005f0a:	4604      	mov	r4, r0
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 8005f0c:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8005f10:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8005f12:	9300      	str	r3, [sp, #0]
 8005f14:	4623      	mov	r3, r4
 8005f16:	f7ff f9b3 	bl	8005280 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>
 8005f1a:	2800      	cmp	r0, #0
 8005f1c:	f040 80a7 	bne.w	800606e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x16e>
  eval_tensors_ = eval_tensors;
 8005f20:	e9d4 311c 	ldrd	r3, r1, [r4, #112]	@ 0x70
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	f8c4 1088 	str.w	r1, [r4, #136]	@ 0x88
    return data_ - ReadScalar<soffset_t>(data_);
 8005f2a:	eba3 0c02 	sub.w	ip, r3, r2
 8005f2e:	f8bc 2000 	ldrh.w	r2, [ip]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005f32:	2a04      	cmp	r2, #4
 8005f34:	f240 80a5 	bls.w	8006082 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x182>
 8005f38:	f8bc 1004 	ldrh.w	r1, [ip, #4]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	f000 80a0 	beq.w	8006082 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x182>
  uoffset_t size() const { return EndianScalar(length_); }
 8005f42:	585d      	ldr	r5, [r3, r1]
    auto p = data_ + field_offset;
 8005f44:	4419      	add	r1, r3
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8005f46:	4606      	mov	r6, r0
  context_.tensors_size = subgraph_->tensors()->size();
 8005f48:	5949      	ldr	r1, [r1, r5]
 8005f4a:	6121      	str	r1, [r4, #16]
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 8005f4c:	494e      	ldr	r1, [pc, #312]	@ (8006088 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x188>)
 8005f4e:	64a1      	str	r1, [r4, #72]	@ 0x48
  context_.RequestScratchBufferInArena = nullptr;
 8005f50:	e9c4 0014 	strd	r0, r0, [r4, #80]	@ 0x50
          registration->init(&context_, init_data, init_data_size);
 8005f54:	f104 0710 	add.w	r7, r4, #16
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8005f58:	e009      	b.n	8005f6e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x6e>
          registration->init(&context_, init_data, init_data_size);
 8005f5a:	4638      	mov	r0, r7
 8005f5c:	47c0      	blx	r8
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8005f5e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
      node->user_data =
 8005f60:	6128      	str	r0, [r5, #16]
 8005f62:	681a      	ldr	r2, [r3, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8005f64:	eba3 0c02 	sub.w	ip, r3, r2
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8005f68:	3601      	adds	r6, #1
 8005f6a:	f8bc 2000 	ldrh.w	r2, [ip]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005f6e:	2a0a      	cmp	r2, #10
 8005f70:	f240 8087 	bls.w	8006082 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x182>
 8005f74:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005f78:	2a00      	cmp	r2, #0
 8005f7a:	f000 8082 	beq.w	8006082 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x182>
  uoffset_t size() const { return EndianScalar(length_); }
 8005f7e:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 8005f80:	441a      	add	r2, r3
 8005f82:	5852      	ldr	r2, [r2, r1]
 8005f84:	42b2      	cmp	r2, r6
 8005f86:	d915      	bls.n	8005fb4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xb4>
    auto* node = &(node_and_registrations_[i].node);
 8005f88:	6825      	ldr	r5, [r4, #0]
 8005f8a:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8005f8e:	eb05 05c2 	add.w	r5, r5, r2, lsl #3
    auto* registration = node_and_registrations_[i].registration;
 8005f92:	6a68      	ldr	r0, [r5, #36]	@ 0x24
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 8005f94:	f8d5 e018 	ldr.w	lr, [r5, #24]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8005f98:	6942      	ldr	r2, [r0, #20]
    if (registration->init) {
 8005f9a:	f8d0 8000 	ldr.w	r8, [r0]
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 8005f9e:	6969      	ldr	r1, [r5, #20]
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8005fa0:	2a20      	cmp	r2, #32
      init_data_size = node->custom_initial_data_size;
 8005fa2:	bf06      	itte	eq
 8005fa4:	69ea      	ldreq	r2, [r5, #28]
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 8005fa6:	4671      	moveq	r1, lr
      init_data_size = 0;
 8005fa8:	2200      	movne	r2, #0
    if (registration->init) {
 8005faa:	f1b8 0f00 	cmp.w	r8, #0
 8005fae:	d1d4      	bne.n	8005f5a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x5a>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8005fb0:	3601      	adds	r6, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005fb2:	e7df      	b.n	8005f74 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x74>
  context_.RequestScratchBufferInArena =
 8005fb4:	4a35      	ldr	r2, [pc, #212]	@ (800608c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x18c>)
        TF_LITE_REPORT_ERROR(
 8005fb6:	4d36      	ldr	r5, [pc, #216]	@ (8006090 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x190>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 8005fb8:	4f36      	ldr	r7, [pc, #216]	@ (8006094 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x194>)
  return EnumNamesBuiltinOperator()[index];
 8005fba:	4e37      	ldr	r6, [pc, #220]	@ (8006098 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x198>)
  context_.RequestScratchBufferInArena =
 8005fbc:	6522      	str	r2, [r4, #80]	@ 0x50
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8005fbe:	f04f 0800 	mov.w	r8, #0
 8005fc2:	e018      	b.n	8005ff6 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf6>
  return (v < low) || (high < v);
 8005fc4:	b2d2      	uxtb	r2, r2
 8005fc6:	2a80      	cmp	r2, #128	@ 0x80
 8005fc8:	bf94      	ite	ls
 8005fca:	f856 2022 	ldrls.w	r2, [r6, r2, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 8005fce:	463a      	movhi	r2, r7
        TF_LITE_REPORT_ERROR(
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	4629      	mov	r1, r5
 8005fd4:	4643      	mov	r3, r8
 8005fd6:	f7fd fba3 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    allocator_.FinishPrepareNodeAllocations(/*node_id=*/i);
 8005fda:	4641      	mov	r1, r8
 8005fdc:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8005fde:	f7ff fa1f 	bl	8005420 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8005fe2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8005fe4:	681a      	ldr	r2, [r3, #0]
    return data_ - ReadScalar<soffset_t>(data_);
 8005fe6:	eba3 0c02 	sub.w	ip, r3, r2
 8005fea:	f108 0801 	add.w	r8, r8, #1
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8005fee:	f8bc 2000 	ldrh.w	r2, [ip]
 8005ff2:	2a0a      	cmp	r2, #10
 8005ff4:	d945      	bls.n	8006082 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x182>
 8005ff6:	f8bc 200a 	ldrh.w	r2, [ip, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005ffa:	2a00      	cmp	r2, #0
 8005ffc:	d041      	beq.n	8006082 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x182>
  uoffset_t size() const { return EndianScalar(length_); }
 8005ffe:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 8006000:	441a      	add	r2, r3
 8006002:	5853      	ldr	r3, [r2, r1]
 8006004:	4543      	cmp	r3, r8
 8006006:	d918      	bls.n	800603a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x13a>
    auto* node = &(node_and_registrations_[i].node);
 8006008:	6821      	ldr	r1, [r4, #0]
 800600a:	eb08 0388 	add.w	r3, r8, r8, lsl #2
 800600e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    auto* registration = node_and_registrations_[i].registration;
 8006012:	f8d1 9024 	ldr.w	r9, [r1, #36]	@ 0x24
    if (registration->prepare) {
 8006016:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d0dd      	beq.n	8005fda <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xda>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 800601e:	f104 0010 	add.w	r0, r4, #16
 8006022:	4798      	blx	r3
      if (prepare_status != kTfLiteOk) {
 8006024:	4603      	mov	r3, r0
 8006026:	2800      	cmp	r0, #0
 8006028:	d0d7      	beq.n	8005fda <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xda>
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800602a:	f8d9 2014 	ldr.w	r2, [r9, #20]
        TF_LITE_REPORT_ERROR(
 800602e:	68e0      	ldr	r0, [r4, #12]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8006030:	2a20      	cmp	r2, #32
 8006032:	d1c7      	bne.n	8005fc4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xc4>
    return registration->custom_name;
 8006034:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8006038:	e7ca      	b.n	8005fd0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd0>
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 800603a:	4818      	ldr	r0, [pc, #96]	@ (800609c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x19c>)
  TF_LITE_ENSURE_OK(&context_,
 800603c:	6f62      	ldr	r2, [r4, #116]	@ 0x74
 800603e:	6861      	ldr	r1, [r4, #4]
  context_.AllocatePersistentBuffer = nullptr;
 8006040:	2300      	movs	r3, #0
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 8006042:	e9c4 3014 	strd	r3, r0, [r4, #80]	@ 0x50
  context_.AllocatePersistentBuffer = nullptr;
 8006046:	64a3      	str	r3, [r4, #72]	@ 0x48
  TF_LITE_ENSURE_OK(&context_,
 8006048:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800604a:	f104 0378 	add.w	r3, r4, #120	@ 0x78
 800604e:	f7ff f951 	bl	80052f4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>
 8006052:	b948      	cbnz	r0, 8006068 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x168>
  scratch_buffer_handles_ = scratch_buffer_handles;
 8006054:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8006056:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 800605a:	4620      	mov	r0, r4
 800605c:	f7ff fedc 	bl	8005e18 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 8006060:	b910      	cbnz	r0, 8006068 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x168>
  tensors_allocated_ = true;
 8006062:	2301      	movs	r3, #1
 8006064:	f884 306c 	strb.w	r3, [r4, #108]	@ 0x6c
}
 8006068:	b003      	add	sp, #12
 800606a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
 800606e:	490c      	ldr	r1, [pc, #48]	@ (80060a0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1a0>)
 8006070:	68e0      	ldr	r0, [r4, #12]
 8006072:	f7fd fb55 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    initialization_status_ = kTfLiteError;
 8006076:	2001      	movs	r0, #1
 8006078:	f884 006d 	strb.w	r0, [r4, #109]	@ 0x6d
}
 800607c:	b003      	add	sp, #12
 800607e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  uoffset_t size() const { return EndianScalar(length_); }
 8006082:	2300      	movs	r3, #0
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	deff      	udf	#255	@ 0xff
 8006088:	08005b15 	.word	0x08005b15
 800608c:	08005b55 	.word	0x08005b55
 8006090:	08015f44 	.word	0x08015f44
 8006094:	08013d6c 	.word	0x08013d6c
 8006098:	08015078 	.word	0x08015078
 800609c:	08005b21 	.word	0x08005b21
 80060a0:	08015f20 	.word	0x08015f20
 80060a4:	00000000 	.word	0x00000000

080060a8 <_ZN6tflite16MicroInterpreter6InvokeEv>:
TfLiteStatus MicroInterpreter::Invoke() {
 80060a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ac:	ed2d 8b02 	vpush	{d8}
  if (initialization_status_ != kTfLiteOk) {
 80060b0:	f890 306d 	ldrb.w	r3, [r0, #109]	@ 0x6d
TfLiteStatus MicroInterpreter::Invoke() {
 80060b4:	b085      	sub	sp, #20
 80060b6:	4605      	mov	r5, r0
  if (initialization_status_ != kTfLiteOk) {
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d179      	bne.n	80061b0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x108>
  if (!tensors_allocated_) {
 80060bc:	f890 306c 	ldrb.w	r3, [r0, #108]	@ 0x6c
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d06f      	beq.n	80061a4 <_ZN6tflite16MicroInterpreter6InvokeEv+0xfc>
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 80060c4:	ed9f 8b46 	vldr	d8, [pc, #280]	@ 80061e0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x138>
 80060c8:	f04f 0800 	mov.w	r8, #0
 80060cc:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
  return EnumNamesBuiltinOperator()[index];
 80060ce:	4f46      	ldr	r7, [pc, #280]	@ (80061e8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x140>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 80060d0:	46c1      	mov	r9, r8
    return data_ - ReadScalar<soffset_t>(data_);
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	1a9a      	subs	r2, r3, r2
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80060d6:	8811      	ldrh	r1, [r2, #0]
 80060d8:	290a      	cmp	r1, #10
 80060da:	d97e      	bls.n	80061da <_ZN6tflite16MicroInterpreter6InvokeEv+0x132>
 80060dc:	8952      	ldrh	r2, [r2, #10]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80060de:	2a00      	cmp	r2, #0
 80060e0:	d07b      	beq.n	80061da <_ZN6tflite16MicroInterpreter6InvokeEv+0x132>
  uoffset_t size() const { return EndianScalar(length_); }
 80060e2:	5899      	ldr	r1, [r3, r2]
    auto p = data_ + field_offset;
 80060e4:	441a      	add	r2, r3
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 80060e6:	5852      	ldr	r2, [r2, r1]
 80060e8:	4591      	cmp	r9, r2
 80060ea:	d26c      	bcs.n	80061c6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x11e>
    auto* node = &(node_and_registrations_[i].node);
 80060ec:	682c      	ldr	r4, [r5, #0]
 80060ee:	4444      	add	r4, r8
    auto* registration = node_and_registrations_[i].registration;
 80060f0:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
    if (registration->invoke) {
 80060f4:	f8db 200c 	ldr.w	r2, [fp, #12]
 80060f8:	b362      	cbz	r2, 8006154 <_ZN6tflite16MicroInterpreter6InvokeEv+0xac>
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80060fa:	f8db 3014 	ldr.w	r3, [fp, #20]
      tflite::Profiler* profiler =
 80060fe:	6c6e      	ldr	r6, [r5, #68]	@ 0x44
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8006100:	2b20      	cmp	r3, #32
 8006102:	d02e      	beq.n	8006162 <_ZN6tflite16MicroInterpreter6InvokeEv+0xba>
  return (v < low) || (high < v);
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b80      	cmp	r3, #128	@ 0x80
  return EnumNamesBuiltinOperator()[index];
 8006108:	bf94      	ite	ls
 800610a:	f857 1023 	ldrls.w	r1, [r7, r3, lsl #2]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 800610e:	4937      	ldrhi	r1, [pc, #220]	@ (80061ec <_ZN6tflite16MicroInterpreter6InvokeEv+0x144>)
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
    if (profiler) {
 8006110:	b32e      	cbz	r6, 800615e <_ZN6tflite16MicroInterpreter6InvokeEv+0xb6>
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 8006112:	6833      	ldr	r3, [r6, #0]

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
 8006114:	f8cd 9000 	str.w	r9, [sp]
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 8006118:	ed8d 8b02 	vstr	d8, [sp, #8]
                      static_cast<uint32_t>(node_index)) {}
 800611c:	2200      	movs	r2, #0
 800611e:	9201      	str	r2, [sp, #4]
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	2202      	movs	r2, #2
 8006124:	4630      	mov	r0, r6
 8006126:	4798      	blx	r3
      invoke_status = registration->invoke(&context_, node);
 8006128:	f8db 200c 	ldr.w	r2, [fp, #12]
 800612c:	4682      	mov	sl, r0
 800612e:	4621      	mov	r1, r4
 8006130:	f105 0010 	add.w	r0, r5, #16
 8006134:	4790      	blx	r2
 8006136:	4604      	mov	r4, r0
      allocator_.ResetTempAllocations();
 8006138:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 800613a:	6803      	ldr	r3, [r0, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	4798      	blx	r3
      if (invoke_status == kTfLiteError) {
 8006140:	2c01      	cmp	r4, #1
 8006142:	d011      	beq.n	8006168 <_ZN6tflite16MicroInterpreter6InvokeEv+0xc0>
      } else if (invoke_status != kTfLiteOk) {
 8006144:	bb14      	cbnz	r4, 800618c <_ZN6tflite16MicroInterpreter6InvokeEv+0xe4>
    if (profiler_) {
 8006146:	b126      	cbz	r6, 8006152 <_ZN6tflite16MicroInterpreter6InvokeEv+0xaa>
      profiler_->EndEvent(event_handle_);
 8006148:	6833      	ldr	r3, [r6, #0]
 800614a:	4651      	mov	r1, sl
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	4630      	mov	r0, r6
 8006150:	4798      	blx	r3
 8006152:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8006154:	f109 0901 	add.w	r9, r9, #1
 8006158:	f108 0828 	add.w	r8, r8, #40	@ 0x28
 800615c:	e7b9      	b.n	80060d2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x2a>
      : profiler_(profiler), event_handle_(0) {
 800615e:	46b2      	mov	sl, r6
 8006160:	e7e5      	b.n	800612e <_ZN6tflite16MicroInterpreter6InvokeEv+0x86>
    return registration->custom_name;
 8006162:	f8db 1018 	ldr.w	r1, [fp, #24]
 8006166:	e7d3      	b.n	8006110 <_ZN6tflite16MicroInterpreter6InvokeEv+0x68>
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8006168:	f8db 3014 	ldr.w	r3, [fp, #20]
        TF_LITE_REPORT_ERROR(
 800616c:	68e8      	ldr	r0, [r5, #12]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 800616e:	2b20      	cmp	r3, #32
 8006170:	d030      	beq.n	80061d4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x12c>
 8006172:	b2db      	uxtb	r3, r3
 8006174:	2b80      	cmp	r3, #128	@ 0x80
  return EnumNamesBuiltinOperator()[index];
 8006176:	bf96      	itet	ls
 8006178:	4a1b      	ldrls	r2, [pc, #108]	@ (80061e8 <_ZN6tflite16MicroInterpreter6InvokeEv+0x140>)
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_CUMSUM)) return "";
 800617a:	4a1c      	ldrhi	r2, [pc, #112]	@ (80061ec <_ZN6tflite16MicroInterpreter6InvokeEv+0x144>)
  return EnumNamesBuiltinOperator()[index];
 800617c:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
        TF_LITE_REPORT_ERROR(
 8006180:	2101      	movs	r1, #1
 8006182:	9100      	str	r1, [sp, #0]
 8006184:	464b      	mov	r3, r9
 8006186:	491a      	ldr	r1, [pc, #104]	@ (80061f0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x148>)
 8006188:	f7fd faca 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    if (profiler_) {
 800618c:	b126      	cbz	r6, 8006198 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf0>
      profiler_->EndEvent(event_handle_);
 800618e:	6833      	ldr	r3, [r6, #0]
 8006190:	4651      	mov	r1, sl
 8006192:	691b      	ldr	r3, [r3, #16]
 8006194:	4630      	mov	r0, r6
 8006196:	4798      	blx	r3
}
 8006198:	4620      	mov	r0, r4
 800619a:	b005      	add	sp, #20
 800619c:	ecbd 8b02 	vpop	{d8}
 80061a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 80061a4:	f7ff feac 	bl	8005f00 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 80061a8:	4604      	mov	r4, r0
 80061aa:	2800      	cmp	r0, #0
 80061ac:	d08a      	beq.n	80060c4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x1c>
 80061ae:	e7f3      	b.n	8006198 <_ZN6tflite16MicroInterpreter6InvokeEv+0xf0>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80061b0:	4910      	ldr	r1, [pc, #64]	@ (80061f4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x14c>)
 80061b2:	68c0      	ldr	r0, [r0, #12]
 80061b4:	f7fd fab4 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 80061b8:	2401      	movs	r4, #1
}
 80061ba:	4620      	mov	r0, r4
 80061bc:	b005      	add	sp, #20
 80061be:	ecbd 8b02 	vpop	{d8}
 80061c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return kTfLiteOk;
 80061c6:	2400      	movs	r4, #0
}
 80061c8:	4620      	mov	r0, r4
 80061ca:	b005      	add	sp, #20
 80061cc:	ecbd 8b02 	vpop	{d8}
 80061d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return registration->custom_name;
 80061d4:	f8db 2018 	ldr.w	r2, [fp, #24]
 80061d8:	e7d2      	b.n	8006180 <_ZN6tflite16MicroInterpreter6InvokeEv+0xd8>
  uoffset_t size() const { return EndianScalar(length_); }
 80061da:	2300      	movs	r3, #0
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	deff      	udf	#255	@ 0xff
	...
 80061e8:	08015078 	.word	0x08015078
 80061ec:	08013d6c 	.word	0x08013d6c
 80061f0:	08015fac 	.word	0x08015fac
 80061f4:	08015f7c 	.word	0x08015f7c

080061f8 <MicroVsnprintf>:
}

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 80061f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061fc:	ed2d 8b02 	vpush	{d8}
 8006200:	4683      	mov	fp, r0
 8006202:	4618      	mov	r0, r3
  int output_index = 0;
  const char* current = format;
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
  while (*current != '\0' && output_index < usable_length) {
 8006204:	7813      	ldrb	r3, [r2, #0]
                              va_list args) {
 8006206:	b093      	sub	sp, #76	@ 0x4c
  while (*current != '\0' && output_index < usable_length) {
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8267 	beq.w	80066dc <MicroVsnprintf+0x4e4>
 800620e:	f101 39ff 	add.w	r9, r1, #4294967295	@ 0xffffffff
 8006212:	f1b9 0f00 	cmp.w	r9, #0
 8006216:	f340 8261 	ble.w	80066dc <MicroVsnprintf+0x4e4>
 800621a:	3902      	subs	r1, #2
    int32_t digit = i % base;
 800621c:	f8df a4c4 	ldr.w	sl, [pc, #1220]	@ 80066e4 <MicroVsnprintf+0x4ec>
 8006220:	9102      	str	r1, [sp, #8]
 8006222:	4617      	mov	r7, r2
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
          current++;
          break;
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 8006224:	eeb2 8a0c 	vmov.f32	s16, #44	@ 0x41600000  14.0
  int output_index = 0;
 8006228:	2400      	movs	r4, #0
          output[output_index++] = '0';
 800622a:	465d      	mov	r5, fp
 800622c:	4602      	mov	r2, r0
    if (*current == '%') {
 800622e:	2b25      	cmp	r3, #37	@ 0x25
      current++;
 8006230:	f107 0101 	add.w	r1, r7, #1
    if (*current == '%') {
 8006234:	d012      	beq.n	800625c <MicroVsnprintf+0x64>
            output[output_index++] = string[string_idx++];
          }
          current++;
      }
    } else {
      output[output_index++] = *current++;
 8006236:	702b      	strb	r3, [r5, #0]
 8006238:	3401      	adds	r4, #1
  while (*current != '\0' && output_index < usable_length) {
 800623a:	787b      	ldrb	r3, [r7, #1]
 800623c:	eb0b 0504 	add.w	r5, fp, r4
      output[output_index++] = *current++;
 8006240:	460f      	mov	r7, r1
  while (*current != '\0' && output_index < usable_length) {
 8006242:	b10b      	cbz	r3, 8006248 <MicroVsnprintf+0x50>
 8006244:	454c      	cmp	r4, r9
 8006246:	dbf2      	blt.n	800622e <MicroVsnprintf+0x36>
    }
  }
  output[output_index++] = '\0';
 8006248:	46ab      	mov	fp, r5
 800624a:	1c60      	adds	r0, r4, #1
 800624c:	2300      	movs	r3, #0
 800624e:	f88b 3000 	strb.w	r3, [fp]
  return output_index;
}
 8006252:	b013      	add	sp, #76	@ 0x4c
 8006254:	ecbd 8b02 	vpop	{d8}
 8006258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (*current) {
 800625c:	787b      	ldrb	r3, [r7, #1]
 800625e:	2b25      	cmp	r3, #37	@ 0x25
 8006260:	f000 81d1 	beq.w	8006606 <MicroVsnprintf+0x40e>
 8006264:	f1a3 0064 	sub.w	r0, r3, #100	@ 0x64
 8006268:	b2c6      	uxtb	r6, r0
 800626a:	2e14      	cmp	r6, #20
 800626c:	d818      	bhi.n	80062a0 <MicroVsnprintf+0xa8>
 800626e:	2814      	cmp	r0, #20
 8006270:	d816      	bhi.n	80062a0 <MicroVsnprintf+0xa8>
 8006272:	e8df f010 	tbh	[pc, r0, lsl #1]
 8006276:	0197      	.short	0x0197
 8006278:	00990015 	.word	0x00990015
 800627c:	00150015 	.word	0x00150015
 8006280:	00150015 	.word	0x00150015
 8006284:	00150015 	.word	0x00150015
 8006288:	00150015 	.word	0x00150015
 800628c:	00150015 	.word	0x00150015
 8006290:	00150015 	.word	0x00150015
 8006294:	0015007c 	.word	0x0015007c
 8006298:	0015004e 	.word	0x0015004e
 800629c:	00170015 	.word	0x00170015
 80062a0:	460f      	mov	r7, r1
 80062a2:	e7ce      	b.n	8006242 <MicroVsnprintf+0x4a>
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 80062a4:	eba9 0304 	sub.w	r3, r9, r4
 80062a8:	2b09      	cmp	r3, #9
 80062aa:	f340 820f 	ble.w	80066cc <MicroVsnprintf+0x4d4>
          output[output_index++] = '0';
 80062ae:	f647 0330 	movw	r3, #30768	@ 0x7830
          output[output_index++] = 'x';
 80062b2:	3402      	adds	r4, #2
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 80062b4:	4610      	mov	r0, r2
          output[output_index++] = '0';
 80062b6:	802b      	strh	r3, [r5, #0]
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 80062b8:	eb0b 0604 	add.w	r6, fp, r4
 80062bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80062c0:	4633      	mov	r3, r6
 80062c2:	e001      	b.n	80062c8 <MicroVsnprintf+0xd0>
    *buffer++ = character;
 80062c4:	460b      	mov	r3, r1
    i /= base;
 80062c6:	4662      	mov	r2, ip
    int32_t digit = i % base;
 80062c8:	f002 010f 	and.w	r1, r2, #15
      character = '0' + digit;
 80062cc:	460d      	mov	r5, r1
    if (digit < 10) {
 80062ce:	2909      	cmp	r1, #9
    *buffer++ = character;
 80062d0:	4619      	mov	r1, r3
      character = '0' + digit;
 80062d2:	bf94      	ite	ls
 80062d4:	3530      	addls	r5, #48	@ 0x30
      character = 'a' + (digit - 10);
 80062d6:	3557      	addhi	r5, #87	@ 0x57
  } while (i > 0);
 80062d8:	2a0f      	cmp	r2, #15
    *buffer++ = character;
 80062da:	f801 5b01 	strb.w	r5, [r1], #1
    i /= base;
 80062de:	ea4f 1c12 	mov.w	ip, r2, lsr #4
  } while (i > 0);
 80062e2:	d8ef      	bhi.n	80062c4 <MicroVsnprintf+0xcc>
  *buffer = 0;
 80062e4:	f04f 0200 	mov.w	r2, #0
  while (p1 < p2) {
 80062e8:	429e      	cmp	r6, r3
  *buffer = 0;
 80062ea:	705a      	strb	r2, [r3, #1]
  while (p1 < p2) {
 80062ec:	d209      	bcs.n	8006302 <MicroVsnprintf+0x10a>
  char* p1 = start;
 80062ee:	4632      	mov	r2, r6
    char tmp = *p1;
 80062f0:	7815      	ldrb	r5, [r2, #0]
    *p1++ = *p2;
 80062f2:	f893 c000 	ldrb.w	ip, [r3]
 80062f6:	f802 cb01 	strb.w	ip, [r2], #1
    *p2-- = tmp;
 80062fa:	f803 5901 	strb.w	r5, [r3], #-1
  while (p1 < p2) {
 80062fe:	429a      	cmp	r2, r3
 8006300:	d3f6      	bcc.n	80062f0 <MicroVsnprintf+0xf8>
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 8006302:	1b89      	subs	r1, r1, r6
          output_index +=
 8006304:	440c      	add	r4, r1
  while (*current != '\0' && output_index < usable_length) {
 8006306:	78bb      	ldrb	r3, [r7, #2]
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 8006308:	4602      	mov	r2, r0
          current++;
 800630a:	3702      	adds	r7, #2
 800630c:	eb0b 0504 	add.w	r5, fp, r4
          break;
 8006310:	e797      	b.n	8006242 <MicroVsnprintf+0x4a>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8006312:	eba9 0304 	sub.w	r3, r9, r4
 8006316:	2b0a      	cmp	r3, #10
 8006318:	f340 81d8 	ble.w	80066cc <MicroVsnprintf+0x4d4>
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 800631c:	4694      	mov	ip, r2
            output[output_index++] = '\0';
 800631e:	462e      	mov	r6, r5
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 8006320:	f85c 0b04 	ldr.w	r0, [ip], #4
    int32_t digit = i % base;
 8006324:	fbaa 2300 	umull	r2, r3, sl, r0
 8006328:	08db      	lsrs	r3, r3, #3
 800632a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800632e:	eba0 0242 	sub.w	r2, r0, r2, lsl #1
      character = '0' + digit;
 8006332:	3230      	adds	r2, #48	@ 0x30
 8006334:	4631      	mov	r1, r6
    *buffer++ = character;
 8006336:	f806 2b01 	strb.w	r2, [r6], #1
    i /= base;
 800633a:	4602      	mov	r2, r0
  } while (i > 0);
 800633c:	2a09      	cmp	r2, #9
    i /= base;
 800633e:	4618      	mov	r0, r3
  } while (i > 0);
 8006340:	d8f0      	bhi.n	8006324 <MicroVsnprintf+0x12c>
  *buffer = 0;
 8006342:	f04f 0300 	mov.w	r3, #0
  while (p1 < p2) {
 8006346:	42a9      	cmp	r1, r5
  *buffer = 0;
 8006348:	7033      	strb	r3, [r6, #0]
  while (p1 < p2) {
 800634a:	d908      	bls.n	800635e <MicroVsnprintf+0x166>
            output[output_index++] = '\0';
 800634c:	462b      	mov	r3, r5
    char tmp = *p1;
 800634e:	781a      	ldrb	r2, [r3, #0]
    *p1++ = *p2;
 8006350:	7808      	ldrb	r0, [r1, #0]
 8006352:	f803 0b01 	strb.w	r0, [r3], #1
    *p2-- = tmp;
 8006356:	f801 2901 	strb.w	r2, [r1], #-1
  while (p1 < p2) {
 800635a:	428b      	cmp	r3, r1
 800635c:	d3f7      	bcc.n	800634e <MicroVsnprintf+0x156>
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 800635e:	1b76      	subs	r6, r6, r5
          output_index +=
 8006360:	4434      	add	r4, r6
  while (*current != '\0' && output_index < usable_length) {
 8006362:	78bb      	ldrb	r3, [r7, #2]
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 8006364:	4662      	mov	r2, ip
          current++;
 8006366:	3702      	adds	r7, #2
 8006368:	eb0b 0504 	add.w	r5, fp, r4
          break;
 800636c:	e769      	b.n	8006242 <MicroVsnprintf+0x4a>
          char* string = va_arg(args, char*);
 800636e:	4616      	mov	r6, r2
          while (string_idx + output_index < usable_length &&
 8006370:	45a1      	cmp	r9, r4
          char* string = va_arg(args, char*);
 8006372:	f856 3b04 	ldr.w	r3, [r6], #4
          while (string_idx + output_index < usable_length &&
 8006376:	dd13      	ble.n	80063a0 <MicroVsnprintf+0x1a8>
 8006378:	9a02      	ldr	r2, [sp, #8]
 800637a:	1e61      	subs	r1, r4, #1
 800637c:	1b10      	subs	r0, r2, r4
 800637e:	eb03 0050 	add.w	r0, r3, r0, lsr #1
 8006382:	4459      	add	r1, fp
 8006384:	3b01      	subs	r3, #1
 8006386:	e005      	b.n	8006394 <MicroVsnprintf+0x19c>
 8006388:	4298      	cmp	r0, r3
            output[output_index++] = string[string_idx++];
 800638a:	f801 2f01 	strb.w	r2, [r1, #1]!
 800638e:	f104 0401 	add.w	r4, r4, #1
          while (string_idx + output_index < usable_length &&
 8006392:	d003      	beq.n	800639c <MicroVsnprintf+0x1a4>
                 string[string_idx] != '\0') {
 8006394:	f813 2f01 	ldrb.w	r2, [r3, #1]!
          while (string_idx + output_index < usable_length &&
 8006398:	2a00      	cmp	r2, #0
 800639a:	d1f5      	bne.n	8006388 <MicroVsnprintf+0x190>
 800639c:	eb0b 0504 	add.w	r5, fp, r4
  while (*current != '\0' && output_index < usable_length) {
 80063a0:	78bb      	ldrb	r3, [r7, #2]
          char* string = va_arg(args, char*);
 80063a2:	4632      	mov	r2, r6
          current++;
 80063a4:	3702      	adds	r7, #2
 80063a6:	e74c      	b.n	8006242 <MicroVsnprintf+0x4a>
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 80063a8:	eba9 0304 	sub.w	r3, r9, r4
 80063ac:	ee07 3a90 	vmov	s15, r3
 80063b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063b4:	eef4 7ac8 	vcmpe.f32	s15, s16
 80063b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063bc:	f100 8186 	bmi.w	80066cc <MicroVsnprintf+0x4d4>
              FormatFloat(&output[output_index], va_arg(args, double));
 80063c0:	1dd3      	adds	r3, r2, #7
 80063c2:	f023 0207 	bic.w	r2, r3, #7
 80063c6:	e8f2 0102 	ldrd	r0, r1, [r2], #8
 80063ca:	9201      	str	r2, [sp, #4]
 80063cc:	f7fa fbf6 	bl	8000bbc <__aeabi_d2f>
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 80063d0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
  if (u & sign_mask) {
 80063d4:	2800      	cmp	r0, #0
 80063d6:	9a01      	ldr	r2, [sp, #4]
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 80063d8:	9303      	str	r3, [sp, #12]
 80063da:	f1a3 0e7f 	sub.w	lr, r3, #127	@ 0x7f
  const uint32_t fraction = (u & fraction_mask);
 80063de:	f3c0 0116 	ubfx	r1, r0, #0, #23
    *current = '-';
 80063e2:	462e      	mov	r6, r5
  if (u & sign_mask) {
 80063e4:	f2c0 811e 	blt.w	8006624 <MicroVsnprintf+0x42c>
  *current = 0;
 80063e8:	f04f 0c00 	mov.w	ip, #0
  if (exponent == 128) {
 80063ec:	f1be 0f80 	cmp.w	lr, #128	@ 0x80
 80063f0:	f04f 0000 	mov.w	r0, #0
 80063f4:	f04f 032e 	mov.w	r3, #46	@ 0x2e
  *current = 0;
 80063f8:	f886 c000 	strb.w	ip, [r6]
  if (exponent == 128) {
 80063fc:	f000 811f 	beq.w	800663e <MicroVsnprintf+0x446>
  *current = '1';
 8006400:	46b0      	mov	r8, r6
 8006402:	f642 6331 	movw	r3, #11825	@ 0x2e31
 8006406:	f828 3b02 	strh.w	r3, [r8], #2
  *current = 0;
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	70b3      	strb	r3, [r6, #2]
  char* current_end = buffer + (kFastToBufferSize - 1);
 8006410:	f105 032f 	add.w	r3, r5, #47	@ 0x2f
  if (current_end - current <= kMaxFractionalDigits) {
 8006414:	eba3 0c08 	sub.w	ip, r3, r8
 8006418:	f1bc 0f07 	cmp.w	ip, #7
  char* current_end = buffer + (kFastToBufferSize - 1);
 800641c:	9301      	str	r3, [sp, #4]
  if (current_end - current <= kMaxFractionalDigits) {
 800641e:	f340 80f9 	ble.w	8006614 <MicroVsnprintf+0x41c>
    scaled_fraction += (fraction >> scale_shifts[i]);
 8006422:	0d8b      	lsrs	r3, r1, #22
 8006424:	eb03 5351 	add.w	r3, r3, r1, lsr #21
 8006428:	440b      	add	r3, r1
 800642a:	eb03 5311 	add.w	r3, r3, r1, lsr #20
 800642e:	eb03 43d1 	add.w	r3, r3, r1, lsr #19
 8006432:	eb03 4391 	add.w	r3, r3, r1, lsr #18
 8006436:	eb03 4351 	add.w	r3, r3, r1, lsr #17
 800643a:	eb03 3391 	add.w	r3, r3, r1, lsr #14
 800643e:	eb03 3351 	add.w	r3, r3, r1, lsr #13
 8006442:	eb03 23d1 	add.w	r3, r3, r1, lsr #11
 8006446:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 800644a:	eb03 1311 	add.w	r3, r3, r1, lsr #4
 800644e:	eb03 03d1 	add.w	r3, r3, r1, lsr #3
    *(current + i) = '0';
 8006452:	e9cd 4204 	strd	r4, r2, [sp, #16]
 8006456:	f04f 3130 	mov.w	r1, #808464432	@ 0x30303030
 800645a:	f8c6 1003 	str.w	r1, [r6, #3]
 800645e:	f243 0130 	movw	r1, #12336	@ 0x3030
 8006462:	f8a6 1007 	strh.w	r1, [r6, #7]
 8006466:	a906      	add	r1, sp, #24
    int32_t digit = i % base;
 8006468:	4a9e      	ldr	r2, [pc, #632]	@ (80066e4 <MicroVsnprintf+0x4ec>)
 800646a:	4608      	mov	r0, r1
 800646c:	fba2 2103 	umull	r2, r1, r2, r3
 8006470:	08c9      	lsrs	r1, r1, #3
 8006472:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 8006476:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
 800647a:	461c      	mov	r4, r3
    i /= base;
 800647c:	460b      	mov	r3, r1
    *buffer++ = character;
 800647e:	4601      	mov	r1, r0
      character = '0' + digit;
 8006480:	3230      	adds	r2, #48	@ 0x30
  } while (i > 0);
 8006482:	2c09      	cmp	r4, #9
    *buffer++ = character;
 8006484:	f801 2b01 	strb.w	r2, [r1], #1
  } while (i > 0);
 8006488:	d8ee      	bhi.n	8006468 <MicroVsnprintf+0x270>
  *buffer = 0;
 800648a:	2300      	movs	r3, #0
 800648c:	7043      	strb	r3, [r0, #1]
  while (p1 < p2) {
 800648e:	ab06      	add	r3, sp, #24
 8006490:	4298      	cmp	r0, r3
  *buffer = 0;
 8006492:	e9dd 4204 	ldrd	r4, r2, [sp, #16]
  while (p1 < p2) {
 8006496:	d908      	bls.n	80064aa <MicroVsnprintf+0x2b2>
    char tmp = *p1;
 8006498:	7819      	ldrb	r1, [r3, #0]
    *p1++ = *p2;
 800649a:	7804      	ldrb	r4, [r0, #0]
 800649c:	f803 4b01 	strb.w	r4, [r3], #1
    *p2-- = tmp;
 80064a0:	f800 1901 	strb.w	r1, [r0], #-1
  while (p1 < p2) {
 80064a4:	4283      	cmp	r3, r0
 80064a6:	d3f7      	bcc.n	8006498 <MicroVsnprintf+0x2a0>
 80064a8:	9c04      	ldr	r4, [sp, #16]
  while ((*to_append != 0) && (current < current_end)) {
 80064aa:	f89d 1018 	ldrb.w	r1, [sp, #24]
  char* current_end = main + (main_max_length - 1);
 80064ae:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80064b2:	44c4      	add	ip, r8
  while ((*to_append != 0) && (current < current_end)) {
 80064b4:	2900      	cmp	r1, #0
 80064b6:	f000 810d 	beq.w	80066d4 <MicroVsnprintf+0x4dc>
 80064ba:	45e0      	cmp	r8, ip
 80064bc:	f080 810a 	bcs.w	80066d4 <MicroVsnprintf+0x4dc>
  current += 1;
 80064c0:	4643      	mov	r3, r8
  while ((*to_append != 0) && (current < current_end)) {
 80064c2:	a806      	add	r0, sp, #24
 80064c4:	e001      	b.n	80064ca <MicroVsnprintf+0x2d2>
 80064c6:	459c      	cmp	ip, r3
 80064c8:	d005      	beq.n	80064d6 <MicroVsnprintf+0x2de>
    *current = *to_append;
 80064ca:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*to_append != 0) && (current < current_end)) {
 80064ce:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 80064d2:	2900      	cmp	r1, #0
 80064d4:	d1f7      	bne.n	80064c6 <MicroVsnprintf+0x2ce>
  int fraction_digits = current - previous;
 80064d6:	eba3 0008 	sub.w	r0, r3, r8
  *current = '0';
 80064da:	f04f 0c30 	mov.w	ip, #48	@ 0x30
  if (leading_zeros != 0) {
 80064de:	f1d0 0107 	rsbs	r1, r0, #7
  *current = '0';
 80064e2:	f883 c000 	strb.w	ip, [r3]
  if (leading_zeros != 0) {
 80064e6:	d002      	beq.n	80064ee <MicroVsnprintf+0x2f6>
 80064e8:	e0e2      	b.n	80066b0 <MicroVsnprintf+0x4b8>
  while (*(current - 1) == '0' && (current - 1) > previous) {
 80064ea:	4598      	cmp	r8, r3
 80064ec:	d204      	bcs.n	80064f8 <MicroVsnprintf+0x300>
 80064ee:	4618      	mov	r0, r3
 80064f0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80064f4:	2930      	cmp	r1, #48	@ 0x30
 80064f6:	d0f8      	beq.n	80064ea <MicroVsnprintf+0x2f2>
  char* current_end = main + (main_max_length - 1);
 80064f8:	9901      	ldr	r1, [sp, #4]
 80064fa:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
  *current = 0;
 80064fe:	2300      	movs	r3, #0
  while ((*to_append != 0) && (current < current_end)) {
 8006500:	4560      	cmp	r0, ip
  *current = 0;
 8006502:	7003      	strb	r3, [r0, #0]
 8006504:	4603      	mov	r3, r0
  while ((*to_append != 0) && (current < current_end)) {
 8006506:	d210      	bcs.n	800652a <MicroVsnprintf+0x332>
 8006508:	4877      	ldr	r0, [pc, #476]	@ (80066e8 <MicroVsnprintf+0x4f0>)
 800650a:	212a      	movs	r1, #42	@ 0x2a
 800650c:	e002      	b.n	8006514 <MicroVsnprintf+0x31c>
 800650e:	459c      	cmp	ip, r3
 8006510:	f000 80bc 	beq.w	800668c <MicroVsnprintf+0x494>
    *current = *to_append;
 8006514:	7019      	strb	r1, [r3, #0]
  while ((*to_append != 0) && (current < current_end)) {
 8006516:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 800651a:	461e      	mov	r6, r3
    ++current;
 800651c:	3301      	adds	r3, #1
  while ((*to_append != 0) && (current < current_end)) {
 800651e:	2900      	cmp	r1, #0
 8006520:	d1f5      	bne.n	800650e <MicroVsnprintf+0x316>
  current = StrCatInt32(current, (current_end - current), exponent);
 8006522:	9901      	ldr	r1, [sp, #4]
 8006524:	eba1 0c03 	sub.w	ip, r1, r3
  char* current_end = main + (main_max_length - 1);
 8006528:	44b4      	add	ip, r6
  *current = 0;
 800652a:	2100      	movs	r1, #0
  if (i < 0) {
 800652c:	458e      	cmp	lr, r1
  *current = 0;
 800652e:	7019      	strb	r1, [r3, #0]
  if (i < 0) {
 8006530:	f2c0 80b5 	blt.w	800669e <MicroVsnprintf+0x4a6>
 8006534:	ae06      	add	r6, sp, #24
    int32_t digit = i % base;
 8006536:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80066e4 <MicroVsnprintf+0x4ec>
    *buffer++ = '-';
 800653a:	9401      	str	r4, [sp, #4]
 800653c:	4631      	mov	r1, r6
 800653e:	9203      	str	r2, [sp, #12]
    *buffer++ = character;
 8006540:	4608      	mov	r0, r1
    int32_t digit = i % base;
 8006542:	fba8 210e 	umull	r2, r1, r8, lr
 8006546:	08c9      	lsrs	r1, r1, #3
 8006548:	eb01 0281 	add.w	r2, r1, r1, lsl #2
 800654c:	ebae 0242 	sub.w	r2, lr, r2, lsl #1
 8006550:	4674      	mov	r4, lr
    i /= base;
 8006552:	468e      	mov	lr, r1
    *buffer++ = character;
 8006554:	4601      	mov	r1, r0
      character = '0' + digit;
 8006556:	3230      	adds	r2, #48	@ 0x30
  } while (i > 0);
 8006558:	2c09      	cmp	r4, #9
    *buffer++ = character;
 800655a:	f801 2b01 	strb.w	r2, [r1], #1
  } while (i > 0);
 800655e:	d8ef      	bhi.n	8006540 <MicroVsnprintf+0x348>
  *buffer = 0;
 8006560:	2100      	movs	r1, #0
  while (p1 < p2) {
 8006562:	42b0      	cmp	r0, r6
  *buffer = 0;
 8006564:	9c01      	ldr	r4, [sp, #4]
 8006566:	9a03      	ldr	r2, [sp, #12]
 8006568:	7041      	strb	r1, [r0, #1]
  while (p1 < p2) {
 800656a:	d908      	bls.n	800657e <MicroVsnprintf+0x386>
    char tmp = *p1;
 800656c:	7831      	ldrb	r1, [r6, #0]
    *p1++ = *p2;
 800656e:	f890 e000 	ldrb.w	lr, [r0]
 8006572:	f806 eb01 	strb.w	lr, [r6], #1
    *p2-- = tmp;
 8006576:	f800 1901 	strb.w	r1, [r0], #-1
  while (p1 < p2) {
 800657a:	4286      	cmp	r6, r0
 800657c:	d3f6      	bcc.n	800656c <MicroVsnprintf+0x374>
  while ((*to_append != 0) && (current < current_end)) {
 800657e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8006582:	b159      	cbz	r1, 800659c <MicroVsnprintf+0x3a4>
 8006584:	4563      	cmp	r3, ip
 8006586:	d209      	bcs.n	800659c <MicroVsnprintf+0x3a4>
 8006588:	a806      	add	r0, sp, #24
 800658a:	e001      	b.n	8006590 <MicroVsnprintf+0x398>
 800658c:	4563      	cmp	r3, ip
 800658e:	d005      	beq.n	800659c <MicroVsnprintf+0x3a4>
    *current = *to_append;
 8006590:	f803 1b01 	strb.w	r1, [r3], #1
  while ((*to_append != 0) && (current < current_end)) {
 8006594:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8006598:	2900      	cmp	r1, #0
 800659a:	d1f7      	bne.n	800658c <MicroVsnprintf+0x394>
  *current = 0;
 800659c:	2100      	movs	r1, #0
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800659e:	1b58      	subs	r0, r3, r5
  *current = 0;
 80065a0:	7019      	strb	r1, [r3, #0]
  return current;
 80065a2:	e039      	b.n	8006618 <MicroVsnprintf+0x420>
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 80065a4:	eba9 0304 	sub.w	r3, r9, r4
 80065a8:	2b0a      	cmp	r3, #10
 80065aa:	f340 808f 	ble.w	80066cc <MicroVsnprintf+0x4d4>
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 80065ae:	4696      	mov	lr, r2
 80065b0:	f85e 1b04 	ldr.w	r1, [lr], #4
  if (i < 0) {
 80065b4:	2900      	cmp	r1, #0
 80065b6:	db55      	blt.n	8006664 <MicroVsnprintf+0x46c>
            output[output_index++] = '\0';
 80065b8:	4628      	mov	r0, r5
 80065ba:	4606      	mov	r6, r0
    int32_t digit = i % base;
 80065bc:	fbaa 3201 	umull	r3, r2, sl, r1
 80065c0:	08d2      	lsrs	r2, r2, #3
 80065c2:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80065c6:	eba1 0343 	sub.w	r3, r1, r3, lsl #1
 80065ca:	468c      	mov	ip, r1
      character = '0' + digit;
 80065cc:	3330      	adds	r3, #48	@ 0x30
  } while (i > 0);
 80065ce:	f1bc 0f09 	cmp.w	ip, #9
    i /= base;
 80065d2:	4611      	mov	r1, r2
 80065d4:	4632      	mov	r2, r6
    *buffer++ = character;
 80065d6:	f806 3b01 	strb.w	r3, [r6], #1
  } while (i > 0);
 80065da:	d8ef      	bhi.n	80065bc <MicroVsnprintf+0x3c4>
  *buffer = 0;
 80065dc:	f04f 0300 	mov.w	r3, #0
  while (p1 < p2) {
 80065e0:	4282      	cmp	r2, r0
  *buffer = 0;
 80065e2:	7033      	strb	r3, [r6, #0]
  while (p1 < p2) {
 80065e4:	d907      	bls.n	80065f6 <MicroVsnprintf+0x3fe>
    char tmp = *p1;
 80065e6:	7803      	ldrb	r3, [r0, #0]
    *p1++ = *p2;
 80065e8:	7811      	ldrb	r1, [r2, #0]
 80065ea:	f800 1b01 	strb.w	r1, [r0], #1
    *p2-- = tmp;
 80065ee:	f802 3901 	strb.w	r3, [r2], #-1
  while (p1 < p2) {
 80065f2:	4290      	cmp	r0, r2
 80065f4:	d3f7      	bcc.n	80065e6 <MicroVsnprintf+0x3ee>
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 80065f6:	1b76      	subs	r6, r6, r5
          output_index +=
 80065f8:	4434      	add	r4, r6
  while (*current != '\0' && output_index < usable_length) {
 80065fa:	78bb      	ldrb	r3, [r7, #2]
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 80065fc:	4672      	mov	r2, lr
          current++;
 80065fe:	3702      	adds	r7, #2
 8006600:	eb0b 0504 	add.w	r5, fp, r4
          break;
 8006604:	e61d      	b.n	8006242 <MicroVsnprintf+0x4a>
          output[output_index++] = *current++;
 8006606:	702b      	strb	r3, [r5, #0]
 8006608:	3401      	adds	r4, #1
  while (*current != '\0' && output_index < usable_length) {
 800660a:	78bb      	ldrb	r3, [r7, #2]
 800660c:	eb0b 0504 	add.w	r5, fp, r4
          output[output_index++] = *current++;
 8006610:	3702      	adds	r7, #2
          break;
 8006612:	e616      	b.n	8006242 <MicroVsnprintf+0x4a>
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 8006614:	eba8 0005 	sub.w	r0, r8, r5
          output_index +=
 8006618:	4404      	add	r4, r0
  while (*current != '\0' && output_index < usable_length) {
 800661a:	78bb      	ldrb	r3, [r7, #2]
 800661c:	eb0b 0504 	add.w	r5, fp, r4
          current++;
 8006620:	3702      	adds	r7, #2
          break;
 8006622:	e60e      	b.n	8006242 <MicroVsnprintf+0x4a>
    *current = '-';
 8006624:	232d      	movs	r3, #45	@ 0x2d
 8006626:	f806 3b01 	strb.w	r3, [r6], #1
  *current = 0;
 800662a:	f04f 0c00 	mov.w	ip, #0
  if (exponent == 128) {
 800662e:	f1be 0f80 	cmp.w	lr, #128	@ 0x80
 8006632:	f04f 0001 	mov.w	r0, #1
  *current = 0;
 8006636:	f886 c000 	strb.w	ip, [r6]
  if (exponent == 128) {
 800663a:	f47f aee1 	bne.w	8006400 <MicroVsnprintf+0x208>
  char* current_end = main + (main_max_length - 1);
 800663e:	4433      	add	r3, r6
    if (fraction == 0) {
 8006640:	b9b1      	cbnz	r1, 8006670 <MicroVsnprintf+0x478>
  while ((*to_append != 0) && (current < current_end)) {
 8006642:	429e      	cmp	r6, r3
 8006644:	d20b      	bcs.n	800665e <MicroVsnprintf+0x466>
 8006646:	4829      	ldr	r0, [pc, #164]	@ (80066ec <MicroVsnprintf+0x4f4>)
 8006648:	2149      	movs	r1, #73	@ 0x49
 800664a:	e001      	b.n	8006650 <MicroVsnprintf+0x458>
 800664c:	429e      	cmp	r6, r3
 800664e:	d005      	beq.n	800665c <MicroVsnprintf+0x464>
    *current = *to_append;
 8006650:	f806 1b01 	strb.w	r1, [r6], #1
  while ((*to_append != 0) && (current < current_end)) {
 8006654:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8006658:	2900      	cmp	r1, #0
 800665a:	d1f7      	bne.n	800664c <MicroVsnprintf+0x454>
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800665c:	1b70      	subs	r0, r6, r5
  *current = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	7033      	strb	r3, [r6, #0]
      return current;
 8006662:	e7d9      	b.n	8006618 <MicroVsnprintf+0x420>
    *buffer++ = '-';
 8006664:	4628      	mov	r0, r5
 8006666:	232d      	movs	r3, #45	@ 0x2d
 8006668:	f800 3b01 	strb.w	r3, [r0], #1
    u = -u;
 800666c:	4249      	negs	r1, r1
 800666e:	e7a4      	b.n	80065ba <MicroVsnprintf+0x3c2>
  while ((*to_append != 0) && (current < current_end)) {
 8006670:	429e      	cmp	r6, r3
 8006672:	d2f4      	bcs.n	800665e <MicroVsnprintf+0x466>
 8006674:	481e      	ldr	r0, [pc, #120]	@ (80066f0 <MicroVsnprintf+0x4f8>)
 8006676:	214e      	movs	r1, #78	@ 0x4e
 8006678:	e001      	b.n	800667e <MicroVsnprintf+0x486>
 800667a:	429e      	cmp	r6, r3
 800667c:	d0ee      	beq.n	800665c <MicroVsnprintf+0x464>
    *current = *to_append;
 800667e:	f806 1b01 	strb.w	r1, [r6], #1
  while ((*to_append != 0) && (current < current_end)) {
 8006682:	f810 1f01 	ldrb.w	r1, [r0, #1]!
 8006686:	2900      	cmp	r1, #0
 8006688:	d1f7      	bne.n	800667a <MicroVsnprintf+0x482>
 800668a:	e7e7      	b.n	800665c <MicroVsnprintf+0x464>
  current = StrCatInt32(current, (current_end - current), exponent);
 800668c:	9901      	ldr	r1, [sp, #4]
 800668e:	eba1 0c0c 	sub.w	ip, r1, ip
  *current = 0;
 8006692:	2100      	movs	r1, #0
  if (i < 0) {
 8006694:	458e      	cmp	lr, r1
  char* current_end = main + (main_max_length - 1);
 8006696:	44b4      	add	ip, r6
  *current = 0;
 8006698:	7019      	strb	r1, [r3, #0]
  if (i < 0) {
 800669a:	f6bf af4b 	bge.w	8006534 <MicroVsnprintf+0x33c>
    u = -u;
 800669e:	9903      	ldr	r1, [sp, #12]
 80066a0:	f1c1 0e7f 	rsb	lr, r1, #127	@ 0x7f
    *buffer++ = '-';
 80066a4:	212d      	movs	r1, #45	@ 0x2d
 80066a6:	f88d 1018 	strb.w	r1, [sp, #24]
 80066aa:	f10d 0619 	add.w	r6, sp, #25
 80066ae:	e742      	b.n	8006536 <MicroVsnprintf+0x33e>
    for (int i = 0; i < fraction_digits; i++) {
 80066b0:	2800      	cmp	r0, #0
 80066b2:	dd15      	ble.n	80066e0 <MicroVsnprintf+0x4e8>
 80066b4:	4419      	add	r1, r3
 80066b6:	1a18      	subs	r0, r3, r0
      *(current + leading_zeros) = *current;
 80066b8:	f813 6d01 	ldrb.w	r6, [r3, #-1]!
 80066bc:	f801 6d01 	strb.w	r6, [r1, #-1]!
    for (int i = 0; i < fraction_digits; i++) {
 80066c0:	4283      	cmp	r3, r0
      *current = '0';
 80066c2:	f883 c000 	strb.w	ip, [r3]
    for (int i = 0; i < fraction_digits; i++) {
 80066c6:	d1f7      	bne.n	80066b8 <MicroVsnprintf+0x4c0>
    current += kMaxFractionalDigits;
 80066c8:	1dc3      	adds	r3, r0, #7
 80066ca:	e710      	b.n	80064ee <MicroVsnprintf+0x2f6>
            output[output_index++] = '\0';
 80066cc:	2300      	movs	r3, #0
 80066ce:	1c60      	adds	r0, r4, #1
 80066d0:	702b      	strb	r3, [r5, #0]
            return output_index;
 80066d2:	e5be      	b.n	8006252 <MicroVsnprintf+0x5a>
  *current = '0';
 80066d4:	2330      	movs	r3, #48	@ 0x30
 80066d6:	70b3      	strb	r3, [r6, #2]
 80066d8:	4640      	mov	r0, r8
 80066da:	e7f5      	b.n	80066c8 <MicroVsnprintf+0x4d0>
  while (*current != '\0' && output_index < usable_length) {
 80066dc:	2001      	movs	r0, #1
 80066de:	e5b5      	b.n	800624c <MicroVsnprintf+0x54>
    for (int i = 0; i < fraction_digits; i++) {
 80066e0:	4618      	mov	r0, r3
 80066e2:	e7f1      	b.n	80066c8 <MicroVsnprintf+0x4d0>
 80066e4:	cccccccd 	.word	0xcccccccd
 80066e8:	08015fe8 	.word	0x08015fe8
 80066ec:	08015fe0 	.word	0x08015fe0
 80066f0:	08015fe4 	.word	0x08015fe4

080066f4 <_ZN6tflite12ElementCountERK14TfLiteIntArray>:
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/kernels/op_macros.h"

namespace tflite {

int ElementCount(const TfLiteIntArray& dims) {
 80066f4:	b410      	push	{r4}
  int result = 1;
  for (int i = 0; i < dims.size; ++i) {
 80066f6:	6804      	ldr	r4, [r0, #0]
 80066f8:	2c00      	cmp	r4, #0
 80066fa:	dd0c      	ble.n	8006716 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0x22>
 80066fc:	4602      	mov	r2, r0
 80066fe:	2300      	movs	r3, #0
  int result = 1;
 8006700:	2001      	movs	r0, #1
    result *= dims.data[i];
 8006702:	f852 1f04 	ldr.w	r1, [r2, #4]!
  for (int i = 0; i < dims.size; ++i) {
 8006706:	3301      	adds	r3, #1
 8006708:	42a3      	cmp	r3, r4
    result *= dims.data[i];
 800670a:	fb01 f000 	mul.w	r0, r1, r0
  for (int i = 0; i < dims.size; ++i) {
 800670e:	d1f8      	bne.n	8006702 <_ZN6tflite12ElementCountERK14TfLiteIntArray+0xe>
  }
  return result;
}
 8006710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006714:	4770      	bx	lr
  int result = 1;
 8006716:	2001      	movs	r0, #1
}
 8006718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop

08006720 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
}

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop

08006724 <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:
  }
  temp_ = aligned_result + size;
  return aligned_result;
}

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 8006724:	6903      	ldr	r3, [r0, #16]
 8006726:	6183      	str	r3, [r0, #24]
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop

0800672c <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 800672c:	b510      	push	{r4, lr}
 800672e:	211c      	movs	r1, #28
 8006730:	4604      	mov	r4, r0
 8006732:	f00a f8ed 	bl	8010910 <_ZdlPvj>
 8006736:	4620      	mov	r0, r4
 8006738:	bd10      	pop	{r4, pc}
 800673a:	bf00      	nop

0800673c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:
                                                      size_t alignment) {
 800673c:	b530      	push	{r4, r5, lr}
 800673e:	4604      	mov	r4, r0
  if (head_ != temp_) {
 8006740:	6900      	ldr	r0, [r0, #16]
 8006742:	69a3      	ldr	r3, [r4, #24]
 8006744:	4298      	cmp	r0, r3
                                                      size_t alignment) {
 8006746:	b083      	sub	sp, #12
  if (head_ != temp_) {
 8006748:	d006      	beq.n	8006758 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x1c>
    TF_LITE_REPORT_ERROR(
 800674a:	490f      	ldr	r1, [pc, #60]	@ (8006788 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x4c>)
 800674c:	6860      	ldr	r0, [r4, #4]
 800674e:	f7fc ffe7 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8006752:	2001      	movs	r0, #1
}
 8006754:	b003      	add	sp, #12
 8006756:	bd30      	pop	{r4, r5, pc}
  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8006758:	460d      	mov	r5, r1
 800675a:	68a0      	ldr	r0, [r4, #8]
 800675c:	4611      	mov	r1, r2
 800675e:	f7fd fed1 	bl	8004504 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 8006762:	6963      	ldr	r3, [r4, #20]
 8006764:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
 8006766:	42ab      	cmp	r3, r5
 8006768:	d305      	bcc.n	8006776 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x3a>
  head_ = aligned_result + size;
 800676a:	4428      	add	r0, r5
 800676c:	6120      	str	r0, [r4, #16]
  temp_ = head_;
 800676e:	61a0      	str	r0, [r4, #24]
  return kTfLiteOk;
 8006770:	2000      	movs	r0, #0
}
 8006772:	b003      	add	sp, #12
 8006774:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(
 8006776:	1aea      	subs	r2, r5, r3
 8006778:	6860      	ldr	r0, [r4, #4]
 800677a:	4904      	ldr	r1, [pc, #16]	@ (800678c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x50>)
 800677c:	9200      	str	r2, [sp, #0]
 800677e:	462a      	mov	r2, r5
 8006780:	f7fc ffce 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 8006784:	e7e5      	b.n	8006752 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x16>
 8006786:	bf00      	nop
 8006788:	08015fec 	.word	0x08015fec
 800678c:	08016044 	.word	0x08016044

08006790 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:
uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 8006790:	b530      	push	{r4, r5, lr}
 8006792:	4605      	mov	r5, r0
 8006794:	460c      	mov	r4, r1
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 8006796:	6980      	ldr	r0, [r0, #24]
uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 8006798:	b083      	sub	sp, #12
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 800679a:	4611      	mov	r1, r2
 800679c:	f7fd feb2 	bl	8004504 <_ZN6tflite14AlignPointerUpEPhj>
  const size_t available_memory = tail_ - aligned_result;
 80067a0:	696b      	ldr	r3, [r5, #20]
 80067a2:	1a1b      	subs	r3, r3, r0
  if (available_memory < size) {
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	d303      	bcc.n	80067b0 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x20>
  temp_ = aligned_result + size;
 80067a8:	4404      	add	r4, r0
 80067aa:	61ac      	str	r4, [r5, #24]
}
 80067ac:	b003      	add	sp, #12
 80067ae:	bd30      	pop	{r4, r5, pc}
    TF_LITE_REPORT_ERROR(error_reporter_,
 80067b0:	1ae2      	subs	r2, r4, r3
 80067b2:	6868      	ldr	r0, [r5, #4]
 80067b4:	4903      	ldr	r1, [pc, #12]	@ (80067c4 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x34>)
 80067b6:	9200      	str	r2, [sp, #0]
 80067b8:	4622      	mov	r2, r4
 80067ba:	f7fc ffb1 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 80067be:	2000      	movs	r0, #0
 80067c0:	e7f4      	b.n	80067ac <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x1c>
 80067c2:	bf00      	nop
 80067c4:	08016088 	.word	0x08016088

080067c8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:
                                                 size_t alignment) {
 80067c8:	b530      	push	{r4, r5, lr}
 80067ca:	4604      	mov	r4, r0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 80067cc:	6940      	ldr	r0, [r0, #20]
                                                 size_t alignment) {
 80067ce:	460d      	mov	r5, r1
 80067d0:	b083      	sub	sp, #12
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 80067d2:	4611      	mov	r1, r2
 80067d4:	1b40      	subs	r0, r0, r5
 80067d6:	f7fd fe9d 	bl	8004514 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	4283      	cmp	r3, r0
  tail_ = aligned_result;
 80067de:	bf98      	it	ls
 80067e0:	6160      	strls	r0, [r4, #20]
  if (aligned_result < head_) {
 80067e2:	d801      	bhi.n	80067e8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x20>
}
 80067e4:	b003      	add	sp, #12
 80067e6:	bd30      	pop	{r4, r5, pc}
    const size_t missing_memory = head_ - aligned_result;
 80067e8:	1a1b      	subs	r3, r3, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
 80067ea:	4904      	ldr	r1, [pc, #16]	@ (80067fc <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x34>)
 80067ec:	6860      	ldr	r0, [r4, #4]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	462a      	mov	r2, r5
 80067f2:	1aeb      	subs	r3, r5, r3
 80067f4:	f7fc ff94 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return nullptr;
 80067f8:	2000      	movs	r0, #0
 80067fa:	e7f3      	b.n	80067e4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x1c>
 80067fc:	080160d4 	.word	0x080160d4

08006800 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 8006800:	b570      	push	{r4, r5, r6, lr}
 8006802:	b082      	sub	sp, #8
  TFLITE_DCHECK(error_reporter != nullptr);
 8006804:	b1a0      	cbz	r0, 8006830 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x30>
  TFLITE_DCHECK(buffer_head != nullptr);
 8006806:	460c      	mov	r4, r1
 8006808:	b191      	cbz	r1, 8006830 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x30>
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 800680a:	188d      	adds	r5, r1, r2
 800680c:	4606      	mov	r6, r0
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 800680e:	2104      	movs	r1, #4
 8006810:	f1a5 001c 	sub.w	r0, r5, #28
 8006814:	f7fd fe7e 	bl	8004514 <_ZN6tflite16AlignPointerDownEPhj>
  if (aligned_result < head_) {
 8006818:	4284      	cmp	r4, r0
 800681a:	d80b      	bhi.n	8006834 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x34>
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 800681c:	4a0c      	ldr	r2, [pc, #48]	@ (8006850 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
 800681e:	6002      	str	r2, [r0, #0]
 8006820:	e9c0 6401 	strd	r6, r4, [r0, #4]
 8006824:	e9c0 5403 	strd	r5, r4, [r0, #12]
 8006828:	e9c0 0405 	strd	r0, r4, [r0, #20]
}
 800682c:	b002      	add	sp, #8
 800682e:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(error_reporter != nullptr);
 8006830:	f00a fb44 	bl	8010ebc <abort>
    const size_t missing_memory = head_ - aligned_result;
 8006834:	1a23      	subs	r3, r4, r0
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006836:	9300      	str	r3, [sp, #0]
 8006838:	4906      	ldr	r1, [pc, #24]	@ (8006854 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x54>)
 800683a:	f1c3 031c 	rsb	r3, r3, #28
 800683e:	221c      	movs	r2, #28
 8006840:	4630      	mov	r0, r6
 8006842:	f7fc ff6d 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
 8006846:	2300      	movs	r3, #0
 8006848:	4a01      	ldr	r2, [pc, #4]	@ (8006850 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x50>)
 800684a:	601a      	str	r2, [r3, #0]
 800684c:	deff      	udf	#255	@ 0xff
 800684e:	bf00      	nop
 8006850:	08016128 	.word	0x08016128
 8006854:	080160d4 	.word	0x080160d4

08006858 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 8006858:	6880      	ldr	r0, [r0, #8]
 800685a:	4770      	bx	lr

0800685c <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 800685c:	b538      	push	{r3, r4, r5, lr}
 800685e:	4604      	mov	r4, r0
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8006860:	6980      	ldr	r0, [r0, #24]
size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 8006862:	460d      	mov	r5, r1
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 8006864:	f7fd fe4e 	bl	8004504 <_ZN6tflite14AlignPointerUpEPhj>
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8006868:	4629      	mov	r1, r5
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 800686a:	4603      	mov	r3, r0
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 800686c:	6960      	ldr	r0, [r4, #20]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 800686e:	461c      	mov	r4, r3
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 8006870:	f7fd fe50 	bl	8004514 <_ZN6tflite16AlignPointerDownEPhj>
  return aligned_tail - aligned_temp;
}
 8006874:	1b00      	subs	r0, r0, r4
 8006876:	bd38      	pop	{r3, r4, r5, pc}

08006878 <DebugLog>:
#include <stdio.h>

extern "C" void DebugLog(const char* s) {
 8006878:	4601      	mov	r1, r0
	printf("\%s", s);
 800687a:	4801      	ldr	r0, [pc, #4]	@ (8006880 <DebugLog+0x8>)
 800687c:	f00b ba78 	b.w	8011d70 <iprintf>
 8006880:	08016140 	.word	0x08016140

08006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4604      	mov	r4, r0
  if (tensor == nullptr || tensor->dims == nullptr) {
 8006888:	b179      	cbz	r1, 80068aa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x26>
 800688a:	684d      	ldr	r5, [r1, #4]
 800688c:	b16d      	cbz	r5, 80068aa <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x26>
    return RuntimeShape();
  }
  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
 800688e:	f855 3b04 	ldr.w	r3, [r5], #4
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8006892:	6003      	str	r3, [r0, #0]
    if (dimensions_count > kMaxSmallSize) {
 8006894:	2b05      	cmp	r3, #5
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8006896:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
 800689a:	dc0a      	bgt.n	80068b2 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x2e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800689c:	1d20      	adds	r0, r4, #4
  }

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
    Resize(dimensions_count);
    int32_t* dst_dims = DimsData();
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800689e:	4632      	mov	r2, r6
 80068a0:	4629      	mov	r1, r5
 80068a2:	f00b fb52 	bl	8011f4a <memcpy>
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
  return RuntimeShape(dims_size, dims_data);
}
 80068a6:	4620      	mov	r0, r4
 80068a8:	bd70      	pop	{r4, r5, r6, pc}
  RuntimeShape() : size_(0) {}
 80068aa:	2300      	movs	r3, #0
 80068ac:	6023      	str	r3, [r4, #0]
 80068ae:	4620      	mov	r0, r4
 80068b0:	bd70      	pop	{r4, r5, r6, pc}
      dims_pointer_ = new int32_t[dimensions_count];
 80068b2:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 80068b6:	4293      	cmp	r3, r2
 80068b8:	bfb4      	ite	lt
 80068ba:	4630      	movlt	r0, r6
 80068bc:	f04f 30ff 	movge.w	r0, #4294967295	@ 0xffffffff
 80068c0:	f00a f84a 	bl	8010958 <_Znaj>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 80068c4:	6823      	ldr	r3, [r4, #0]
      dims_pointer_ = new int32_t[dimensions_count];
 80068c6:	6060      	str	r0, [r4, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 80068c8:	2b05      	cmp	r3, #5
 80068ca:	dce8      	bgt.n	800689e <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x1a>
 80068cc:	e7e6      	b.n	800689c <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 80068ce:	bf00      	nop

080068d0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:
  return a;
}

template <>
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
  std::int64_t a64 = a;
 80068d0:	17c3      	asrs	r3, r0, #31
  std::int64_t b64 = b;
  std::int64_t sum = a64 + b64;
  std::int64_t sign = sum >= 0 ? 1 : -1;
 80068d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068d6:	bf08      	it	eq
 80068d8:	f1b0 4f00 	cmpeq.w	r0, #2147483648	@ 0x80000000

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 80068dc:	b570      	push	{r4, r5, r6, lr}
  std::int64_t sign = sum >= 0 ? 1 : -1;
 80068de:	f000 80c6 	beq.w	8006a6e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x19e>
  return static_cast<std::int32_t>((sum + sign) / 2);
 80068e2:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 80068e6:	f143 0200 	adc.w	r2, r3, #0
 80068ea:	0843      	lsrs	r3, r0, #1
 80068ec:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 80068f0:	1050      	asrs	r0, r2, #1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80068f2:	ea53 0262 	orrs.w	r2, r3, r2, asr #1
 80068f6:	f000 811b 	beq.w	8006b30 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x260>
  std::int64_t ab_64 = a_64 * b_64;
 80068fa:	4aa4      	ldr	r2, [pc, #656]	@ (8006b8c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2bc>)
 80068fc:	4259      	negs	r1, r3
 80068fe:	fb02 1100 	mla	r1, r2, r0, r1
 8006902:	fba3 2402 	umull	r2, r4, r3, r2
 8006906:	4421      	add	r1, r4
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006908:	4ca1      	ldr	r4, [pc, #644]	@ (8006b90 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2c0>)
 800690a:	1912      	adds	r2, r2, r4
 800690c:	f161 0100 	sbc.w	r1, r1, #0
 8006910:	2900      	cmp	r1, #0
 8006912:	da04      	bge.n	800691e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x4e>
 8006914:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8006918:	1912      	adds	r2, r2, r4
 800691a:	f141 0100 	adc.w	r1, r1, #0
 800691e:	ea4f 7cd2 	mov.w	ip, r2, lsr #31
 8006922:	ea4c 0c41 	orr.w	ip, ip, r1, lsl #1
  return a + b;
 8006926:	f10c 3c5a 	add.w	ip, ip, #1515870810	@ 0x5a5a5a5a
  std::int64_t b_64(b);
 800692a:	ea4f 72ec 	mov.w	r2, ip, asr #31
  std::int64_t ab_64 = a_64 * b_64;
 800692e:	fbac 1503 	umull	r1, r5, ip, r3
 8006932:	fb0c f400 	mul.w	r4, ip, r0
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006936:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
  std::int64_t ab_64 = a_64 * b_64;
 800693a:	fb03 4402 	mla	r4, r3, r2, r4
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800693e:	eb44 0405 	adc.w	r4, r4, r5
 8006942:	0fc9      	lsrs	r1, r1, #31
 8006944:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
  return a - b;
 8006948:	f1c1 5100 	rsb	r1, r1, #536870912	@ 0x20000000
  std::int64_t ab_64 = a_64 * b_64;
 800694c:	fb81 140c 	smull	r1, r4, r1, ip
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006950:	2c00      	cmp	r4, #0
  return a + b;
 8006952:	4662      	mov	r2, ip
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006954:	f280 8092 	bge.w	8006a7c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x1ac>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006958:	4d8d      	ldr	r5, [pc, #564]	@ (8006b90 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2c0>)
 800695a:	1949      	adds	r1, r1, r5
 800695c:	f164 0400 	sbc.w	r4, r4, #0
 8006960:	2c00      	cmp	r4, #0
 8006962:	da04      	bge.n	800696e <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x9e>
 8006964:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8006968:	1949      	adds	r1, r1, r5
 800696a:	f144 0400 	adc.w	r4, r4, #0
 800696e:	0fc9      	lsrs	r1, r1, #31
 8006970:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
  return a ? BitNot(zero) : zero;
 8006974:	f1b1 4f60 	cmp.w	r1, #3758096384	@ 0xe0000000
 8006978:	f340 80f5 	ble.w	8006b66 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x296>
  return a + b;
 800697c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  std::int64_t b_64(b);
 8006980:	ea4f 7ce2 	mov.w	ip, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
 8006984:	fb02 fe00 	mul.w	lr, r2, r0
 8006988:	fb03 ee0c 	mla	lr, r3, ip, lr
 800698c:	fba2 5403 	umull	r5, r4, r2, r3
 8006990:	4474      	add	r4, lr
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006992:	2c00      	cmp	r4, #0
 8006994:	497e      	ldr	r1, [pc, #504]	@ (8006b90 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2c0>)
 8006996:	bfa6      	itte	ge
 8006998:	f04f 0e00 	movge.w	lr, #0
 800699c:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
 80069a0:	f04f 3eff 	movlt.w	lr, #4294967295	@ 0xffffffff
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80069a4:	1949      	adds	r1, r1, r5
 80069a6:	eb4e 0e04 	adc.w	lr, lr, r4
 80069aa:	f1be 0f00 	cmp.w	lr, #0
 80069ae:	da04      	bge.n	80069ba <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xea>
 80069b0:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 80069b4:	1909      	adds	r1, r1, r4
 80069b6:	f14e 0e00 	adc.w	lr, lr, #0
 80069ba:	0fc9      	lsrs	r1, r1, #31
 80069bc:	ea41 014e 	orr.w	r1, r1, lr, lsl #1
  return a - b;
 80069c0:	f1c1 5100 	rsb	r1, r1, #536870912	@ 0x20000000
  std::int64_t ab_64 = a_64 * b_64;
 80069c4:	fb01 fc0c 	mul.w	ip, r1, ip
  std::int64_t b_64(b);
 80069c8:	17cc      	asrs	r4, r1, #31
  std::int64_t ab_64 = a_64 * b_64;
 80069ca:	fb02 cc04 	mla	ip, r2, r4, ip
 80069ce:	fba1 1402 	umull	r1, r4, r1, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80069d2:	eb1c 0c04 	adds.w	ip, ip, r4
 80069d6:	d459      	bmi.n	8006a8c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x1bc>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80069d8:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
 80069dc:	f14c 0c00 	adc.w	ip, ip, #0
 80069e0:	0fc9      	lsrs	r1, r1, #31
 80069e2:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
  return a ? BitNot(zero) : zero;
 80069e6:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
 80069ea:	f280 80b6 	bge.w	8006b5a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x28a>
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 80069ee:	0089      	lsls	r1, r1, #2
  return a + b;
 80069f0:	440a      	add	r2, r1
  std::int64_t b_64(b);
 80069f2:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
 80069f4:	fb03 f401 	mul.w	r4, r3, r1
 80069f8:	fb02 4400 	mla	r4, r2, r0, r4
 80069fc:	fba3 3002 	umull	r3, r0, r3, r2
 8006a00:	4420      	add	r0, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006a02:	2800      	cmp	r0, #0
 8006a04:	4c62      	ldr	r4, [pc, #392]	@ (8006b90 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2c0>)
 8006a06:	bfb2      	itee	lt
 8006a08:	f04f 35ff 	movlt.w	r5, #4294967295	@ 0xffffffff
 8006a0c:	f04f 4480 	movge.w	r4, #1073741824	@ 0x40000000
 8006a10:	2500      	movge	r5, #0
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006a12:	191b      	adds	r3, r3, r4
 8006a14:	eb40 0005 	adc.w	r0, r0, r5
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	da04      	bge.n	8006a26 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x156>
 8006a1c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8006a20:	191b      	adds	r3, r3, r4
 8006a22:	f140 0000 	adc.w	r0, r0, #0
 8006a26:	0fdb      	lsrs	r3, r3, #31
 8006a28:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  return a - b;
 8006a2c:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
  std::int64_t b_64(b);
 8006a30:	17d8      	asrs	r0, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
 8006a32:	fb03 f101 	mul.w	r1, r3, r1
 8006a36:	fb02 1100 	mla	r1, r2, r0, r1
 8006a3a:	fba3 3002 	umull	r3, r0, r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006a3e:	1809      	adds	r1, r1, r0
 8006a40:	d464      	bmi.n	8006b0c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x23c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006a42:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 8006a46:	f141 0100 	adc.w	r1, r1, #0
 8006a4a:	0fdb      	lsrs	r3, r3, #31
 8006a4c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  return a ? BitNot(zero) : zero;
 8006a50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a54:	da79      	bge.n	8006b4a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x27a>
  return a + b;
 8006a56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  return a ? BitNot(zero) : zero;
 8006a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a5e:	da7f      	bge.n	8006b60 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x290>
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8006a60:	18d8      	adds	r0, r3, r3
  return a ? BitNot(zero) : zero;
 8006a62:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
             ? min
 8006a66:	bfd8      	it	le
 8006a68:	f04f 4000 	movle.w	r0, #2147483648	@ 0x80000000
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
}
 8006a6c:	bd70      	pop	{r4, r5, r6, pc}
  return static_cast<std::int32_t>((sum + sign) / 2);
 8006a6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  std::int64_t ab_64 = a_64 * b_64;
 8006a72:	4948      	ldr	r1, [pc, #288]	@ (8006b94 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2c4>)
 8006a74:	4c48      	ldr	r4, [pc, #288]	@ (8006b98 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2c8>)
  return static_cast<std::int32_t>((sum + sign) / 2);
 8006a76:	4618      	mov	r0, r3
 8006a78:	f04f 325a 	mov.w	r2, #1515870810	@ 0x5a5a5a5a
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006a7c:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
 8006a80:	f144 0400 	adc.w	r4, r4, #0
 8006a84:	0fc9      	lsrs	r1, r1, #31
 8006a86:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
tIntegerType MaskIfNonZero(tIntegerType a) {
 8006a8a:	e777      	b.n	800697c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xac>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006a8c:	4c40      	ldr	r4, [pc, #256]	@ (8006b90 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2c0>)
 8006a8e:	1909      	adds	r1, r1, r4
 8006a90:	f16c 0c00 	sbc.w	ip, ip, #0
 8006a94:	f1bc 0f00 	cmp.w	ip, #0
 8006a98:	da04      	bge.n	8006aa4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x1d4>
 8006a9a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8006a9e:	1909      	adds	r1, r1, r4
 8006aa0:	f14c 0c00 	adc.w	ip, ip, #0
 8006aa4:	0fc9      	lsrs	r1, r1, #31
 8006aa6:	ea41 014c 	orr.w	r1, r1, ip, lsl #1
  return a ? BitNot(zero) : zero;
 8006aaa:	f1b1 4f60 	cmp.w	r1, #3758096384	@ 0xe0000000
 8006aae:	dc9e      	bgt.n	80069ee <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x11e>
             ? min
 8006ab0:	bf08      	it	eq
 8006ab2:	f04f 4100 	moveq.w	r1, #2147483648	@ 0x80000000
 8006ab6:	d09b      	beq.n	80069f0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x120>
  return a + b;
 8006ab8:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
  std::int64_t b_64(b);
 8006abc:	17d1      	asrs	r1, r2, #31
  std::int64_t ab_64 = a_64 * b_64;
 8006abe:	fb03 f401 	mul.w	r4, r3, r1
 8006ac2:	fb02 4400 	mla	r4, r2, r0, r4
 8006ac6:	fba3 3002 	umull	r3, r0, r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006aca:	1820      	adds	r0, r4, r0
 8006acc:	d45a      	bmi.n	8006b84 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2b4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006ace:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 8006ad2:	f140 0000 	adc.w	r0, r0, #0
 8006ad6:	4c2e      	ldr	r4, [pc, #184]	@ (8006b90 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2c0>)
 8006ad8:	0fdb      	lsrs	r3, r3, #31
 8006ada:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  return a - b;
 8006ade:	f1c3 5000 	rsb	r0, r3, #536870912	@ 0x20000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006ae2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8006ae6:	4623      	mov	r3, r4
 8006ae8:	fbc0 3102 	smlal	r3, r1, r0, r2
 8006aec:	2900      	cmp	r1, #0
 8006aee:	da04      	bge.n	8006afa <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x22a>
 8006af0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8006af4:	181b      	adds	r3, r3, r0
 8006af6:	f141 0100 	adc.w	r1, r1, #0
 8006afa:	0fdb      	lsrs	r3, r3, #31
 8006afc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  return a ? BitNot(zero) : zero;
 8006b00:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8006b04:	d1a7      	bne.n	8006a56 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x186>
  return a + b;
 8006b06:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
tIntegerType MaskIfNonZero(tIntegerType a) {
 8006b0a:	e7a9      	b.n	8006a60 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x190>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006b0c:	4820      	ldr	r0, [pc, #128]	@ (8006b90 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2c0>)
 8006b0e:	181b      	adds	r3, r3, r0
 8006b10:	f161 0100 	sbc.w	r1, r1, #0
 8006b14:	2900      	cmp	r1, #0
 8006b16:	da04      	bge.n	8006b22 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x252>
 8006b18:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8006b1c:	181b      	adds	r3, r3, r0
 8006b1e:	f141 0100 	adc.w	r1, r1, #0
 8006b22:	0fdb      	lsrs	r3, r3, #31
 8006b24:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  return a ? BitNot(zero) : zero;
 8006b28:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8006b2c:	dc93      	bgt.n	8006a56 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x186>
 8006b2e:	e7ea      	b.n	8006b06 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x236>
  std::int64_t ab_64 = a_64 * b_64;
 8006b30:	4c19      	ldr	r4, [pc, #100]	@ (8006b98 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2c8>)
 8006b32:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006b36:	f111 4180 	adds.w	r1, r1, #1073741824	@ 0x40000000
 8006b3a:	f144 0400 	adc.w	r4, r4, #0
 8006b3e:	0fc9      	lsrs	r1, r1, #31
 8006b40:	f04f 325a 	mov.w	r2, #1515870810	@ 0x5a5a5a5a
 8006b44:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
tIntegerType MaskIfNonZero(tIntegerType a) {
 8006b48:	e718      	b.n	800697c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xac>
  return a + b;
 8006b4a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8006b4e:	18d0      	adds	r0, r2, r3
  return a ? BitNot(zero) : zero;
 8006b50:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 8006b54:	da04      	bge.n	8006b60 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x290>
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8006b56:	1800      	adds	r0, r0, r0
}
 8006b58:	bd70      	pop	{r4, r5, r6, pc}
  return a ? BitNot(zero) : zero;
 8006b5a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b5e:	e747      	b.n	80069f0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x120>
 8006b60:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
}
 8006b64:	bd70      	pop	{r4, r5, r6, pc}
  return a + b;
 8006b66:	f10c 4200 	add.w	r2, ip, #2147483648	@ 0x80000000
  std::int64_t b_64(b);
 8006b6a:	ea4f 7ce2 	mov.w	ip, r2, asr #31
  std::int64_t ab_64 = a_64 * b_64;
 8006b6e:	fb03 f60c 	mul.w	r6, r3, ip
 8006b72:	fb02 6600 	mla	r6, r2, r0, r6
 8006b76:	fba3 5402 	umull	r5, r4, r3, r2
 8006b7a:	4905      	ldr	r1, [pc, #20]	@ (8006b90 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2c0>)
 8006b7c:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 8006b80:	4434      	add	r4, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006b82:	e70f      	b.n	80069a4 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xd4>
 8006b84:	4c02      	ldr	r4, [pc, #8]	@ (8006b90 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x2c0>)
 8006b86:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8006b8a:	e742      	b.n	8006a12 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x142>
 8006b8c:	c3c3c3c4 	.word	0xc3c3c3c4
 8006b90:	c0000001 	.word	0xc0000001
 8006b94:	9a5a5a5a 	.word	0x9a5a5a5a
 8006b98:	0b4b4b4b 	.word	0x0b4b4b4b

08006b9c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
  return a + b;
 8006b9c:	f100 5380 	add.w	r3, r0, #268435456	@ 0x10000000
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006ba0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	fbc3 1203 	smlal	r1, r2, r3, r3
 8006baa:	2a00      	cmp	r2, #0
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8006bac:	b570      	push	{r4, r5, r6, lr}
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006bae:	da04      	bge.n	8006bba <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x1e>
 8006bb0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8006bb4:	1809      	adds	r1, r1, r0
 8006bb6:	f142 0200 	adc.w	r2, r2, #0
 8006bba:	17d0      	asrs	r0, r2, #31
 8006bbc:	0fc9      	lsrs	r1, r1, #31
 8006bbe:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
  std::int64_t a_64(a);
 8006bc2:	17dc      	asrs	r4, r3, #31
  std::int64_t ab_64 = a_64 * b_64;
 8006bc4:	fb03 f200 	mul.w	r2, r3, r0
 8006bc8:	fb01 2204 	mla	r2, r1, r4, r2
 8006bcc:	fb01 f600 	mul.w	r6, r1, r0
 8006bd0:	fba3 0c01 	umull	r0, ip, r3, r1
 8006bd4:	4494      	add	ip, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006bd6:	f1bc 0f00 	cmp.w	ip, #0
  std::int64_t ab_64 = a_64 * b_64;
 8006bda:	fba1 2401 	umull	r2, r4, r1, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006bde:	4d3a      	ldr	r5, [pc, #232]	@ (8006cc8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x12c>)
 8006be0:	bfa6      	itte	ge
 8006be2:	f04f 0e00 	movge.w	lr, #0
 8006be6:	f04f 4580 	movge.w	r5, #1073741824	@ 0x40000000
 8006bea:	f04f 3eff 	movlt.w	lr, #4294967295	@ 0xffffffff
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006bee:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8006bf2:	eb44 0446 	adc.w	r4, r4, r6, lsl #1
 8006bf6:	2c00      	cmp	r4, #0
 8006bf8:	da04      	bge.n	8006c04 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x68>
 8006bfa:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8006bfe:	1992      	adds	r2, r2, r6
 8006c00:	f144 0400 	adc.w	r4, r4, #0
 8006c04:	0fd2      	lsrs	r2, r2, #31
 8006c06:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
  return a + b;
 8006c0a:	2a00      	cmp	r2, #0
 8006c0c:	bfac      	ite	ge
 8006c0e:	2401      	movge	r4, #1
 8006c10:	2402      	movlt	r4, #2
  return a & b;
 8006c12:	f002 0603 	and.w	r6, r2, #3
  return a >> offset;
 8006c16:	1092      	asrs	r2, r2, #2
  return a + b;
 8006c18:	42a6      	cmp	r6, r4
 8006c1a:	bfc8      	it	gt
 8006c1c:	3201      	addgt	r2, #1
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006c1e:	1940      	adds	r0, r0, r5
 8006c20:	eb4c 0c0e 	adc.w	ip, ip, lr
 8006c24:	f1bc 0f00 	cmp.w	ip, #0
 8006c28:	da04      	bge.n	8006c34 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x98>
 8006c2a:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8006c2e:	1900      	adds	r0, r0, r4
 8006c30:	f14c 0c00 	adc.w	ip, ip, #0
 8006c34:	0fc0      	lsrs	r0, r0, #31
  std::int64_t ab_64 = a_64 * b_64;
 8006c36:	4c25      	ldr	r4, [pc, #148]	@ (8006ccc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x130>)
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006c38:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
  return a + b;
 8006c3c:	4402      	add	r2, r0
  std::int64_t ab_64 = a_64 * b_64;
 8006c3e:	fb82 2404 	smull	r2, r4, r2, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006c42:	2c00      	cmp	r4, #0
 8006c44:	db30      	blt.n	8006ca8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x10c>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006c46:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8006c4a:	f144 0400 	adc.w	r4, r4, #0
 8006c4e:	0fd2      	lsrs	r2, r2, #31
 8006c50:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
  return a + b;
 8006c54:	440a      	add	r2, r1
  return a ? BitNot(zero) : zero;
 8006c56:	2a00      	cmp	r2, #0
  return a >> offset;
 8006c58:	ea4f 0162 	mov.w	r1, r2, asr #1
  return a & b;
 8006c5c:	bfa4      	itt	ge
 8006c5e:	f002 0201 	andge.w	r2, r2, #1
  return a + b;
 8006c62:	1889      	addge	r1, r1, r2
  std::int64_t ab_64 = a_64 * b_64;
 8006c64:	4a1a      	ldr	r2, [pc, #104]	@ (8006cd0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x134>)
  return a + b;
 8006c66:	440b      	add	r3, r1
  std::int64_t ab_64 = a_64 * b_64;
 8006c68:	fb83 3202 	smull	r3, r2, r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8006c6c:	2a00      	cmp	r2, #0
 8006c6e:	4916      	ldr	r1, [pc, #88]	@ (8006cc8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x12c>)
 8006c70:	bfa6      	itte	ge
 8006c72:	f04f 4180 	movge.w	r1, #1073741824	@ 0x40000000
 8006c76:	2000      	movge	r0, #0
 8006c78:	f04f 30ff 	movlt.w	r0, #4294967295	@ 0xffffffff
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006c7c:	185b      	adds	r3, r3, r1
 8006c7e:	eb42 0200 	adc.w	r2, r2, r0
 8006c82:	2a00      	cmp	r2, #0
 8006c84:	db05      	blt.n	8006c92 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xf6>
}
 8006c86:	4812      	ldr	r0, [pc, #72]	@ (8006cd0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x134>)
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006c88:	0fdb      	lsrs	r3, r3, #31
 8006c8a:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
}
 8006c8e:	4418      	add	r0, r3
 8006c90:	bd70      	pop	{r4, r5, r6, pc}
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006c92:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006c96:	185b      	adds	r3, r3, r1
 8006c98:	f142 0200 	adc.w	r2, r2, #0
}
 8006c9c:	480c      	ldr	r0, [pc, #48]	@ (8006cd0 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x134>)
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006c9e:	0fdb      	lsrs	r3, r3, #31
 8006ca0:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
}
 8006ca4:	4418      	add	r0, r3
 8006ca6:	bd70      	pop	{r4, r5, r6, pc}
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8006ca8:	4807      	ldr	r0, [pc, #28]	@ (8006cc8 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x12c>)
 8006caa:	1812      	adds	r2, r2, r0
 8006cac:	f164 0400 	sbc.w	r4, r4, #0
 8006cb0:	2c00      	cmp	r4, #0
 8006cb2:	da04      	bge.n	8006cbe <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0x122>
 8006cb4:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8006cb8:	1812      	adds	r2, r2, r0
 8006cba:	f144 0400 	adc.w	r4, r4, #0
 8006cbe:	0fd2      	lsrs	r2, r2, #31
 8006cc0:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8006cc4:	e7c6      	b.n	8006c54 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xb8>
 8006cc6:	bf00      	nop
 8006cc8:	c0000001 	.word	0xc0000001
 8006ccc:	2aaaaaab 	.word	0x2aaaaaab
 8006cd0:	70f5a894 	.word	0x70f5a894

08006cd4 <_ZN6tflite3ops5micro6reduce10InitReduceEP13TfLiteContextPKcj>:
  float output_scale;
  int num_output_elements;
};

void* InitReduce(TfLiteContext* context, const char* buffer, size_t length) {
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 8006cd4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8006cd6:	2124      	movs	r1, #36	@ 0x24
 8006cd8:	4718      	bx	r3
 8006cda:	bf00      	nop

08006cdc <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode>:
                         "is supported.");
  }
  return kTfLiteOk;
}

TfLiteStatus EvalMax(TfLiteContext* context, TfLiteNode* node) {
 8006cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce0:	ed2d 8b02 	vpush	{d8}
 8006ce4:	b08d      	sub	sp, #52	@ 0x34
// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
  TFLITE_DCHECK(context != nullptr);
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f000 810c 	beq.w	8006f04 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x228>
  TFLITE_DCHECK(node != nullptr);
 8006cec:	460d      	mov	r5, r1
 8006cee:	2900      	cmp	r1, #0
 8006cf0:	f000 8108 	beq.w	8006f04 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x228>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8006cf4:	680a      	ldr	r2, [r1, #0]
 8006cf6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8006cf8:	6851      	ldr	r1, [r2, #4]
 8006cfa:	4604      	mov	r4, r0
 8006cfc:	4798      	blx	r3
 8006cfe:	682a      	ldr	r2, [r5, #0]
 8006d00:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006d02:	6891      	ldr	r1, [r2, #8]
 8006d04:	4606      	mov	r6, r0
 8006d06:	4620      	mov	r0, r4
 8006d08:	4798      	blx	r3
// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
  TFLITE_DCHECK(context != nullptr);
  TFLITE_DCHECK(node != nullptr);
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8006d0a:	686b      	ldr	r3, [r5, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8006d0c:	4680      	mov	r8, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8006d0e:	6859      	ldr	r1, [r3, #4]
 8006d10:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006d12:	4620      	mov	r0, r4
 8006d14:	4798      	blx	r3
 8006d16:	4683      	mov	fp, r0
  const TfLiteEvalTensor* input = tflite::micro::GetEvalInput(context, node, 0);
  const TfLiteEvalTensor* axis = tflite::micro::GetEvalInput(context, node, 1);
  TfLiteEvalTensor* output = tflite::micro::GetEvalOutput(context, node, 0);
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8006d18:	7a30      	ldrb	r0, [r6, #8]
 8006d1a:	f89b 3008 	ldrb.w	r3, [fp, #8]
 8006d1e:	4283      	cmp	r3, r0
 8006d20:	d019      	beq.n	8006d56 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x7a>
 8006d22:	6966      	ldr	r6, [r4, #20]
 8006d24:	f7fc fcf0 	bl	8003708 <TfLiteTypeGetName>
 8006d28:	4605      	mov	r5, r0
 8006d2a:	f89b 0008 	ldrb.w	r0, [fp, #8]
 8006d2e:	f7fc fceb 	bl	8003708 <TfLiteTypeGetName>
 8006d32:	49b7      	ldr	r1, [pc, #732]	@ (8007010 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x334>)
 8006d34:	4bb7      	ldr	r3, [pc, #732]	@ (8007014 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x338>)
 8006d36:	4ab8      	ldr	r2, [pc, #736]	@ (8007018 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x33c>)
 8006d38:	e9cd 3100 	strd	r3, r1, [sp]
 8006d3c:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8006d40:	49b6      	ldr	r1, [pc, #728]	@ (800701c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x340>)
 8006d42:	f240 1309 	movw	r3, #265	@ 0x109
 8006d46:	4620      	mov	r0, r4
 8006d48:	47b0      	blx	r6
 8006d4a:	2001      	movs	r0, #1
      TF_LITE_KERNEL_LOG(context,
                         "Only float32 and int8 types are supported.\n");
      return kTfLiteError;
  }
  return kTfLiteOk;
}
 8006d4c:	b00d      	add	sp, #52	@ 0x34
 8006d4e:	ecbd 8b02 	vpop	{d8}
 8006d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int num_axis = static_cast<int>(ElementCount(*axis->dims));
 8006d56:	f8d8 0004 	ldr.w	r0, [r8, #4]
  OpData* op_data = static_cast<OpData*>(node->user_data);
 8006d5a:	f8d5 a010 	ldr.w	sl, [r5, #16]
  int num_axis = static_cast<int>(ElementCount(*axis->dims));
 8006d5e:	f7ff fcc9 	bl	80066f4 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
      context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8006d62:	f8da 1008 	ldr.w	r1, [sl, #8]
 8006d66:	6c63      	ldr	r3, [r4, #68]	@ 0x44
  int num_axis = static_cast<int>(ElementCount(*axis->dims));
 8006d68:	4681      	mov	r9, r0
      context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	4798      	blx	r3
      context->GetScratchBuffer(context, op_data->resolved_axis_idx));
 8006d6e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8006d70:	f8da 100c 	ldr.w	r1, [sl, #12]
      context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8006d74:	4607      	mov	r7, r0
      context->GetScratchBuffer(context, op_data->resolved_axis_idx));
 8006d76:	4620      	mov	r0, r4
 8006d78:	4798      	blx	r3
  switch (input->type) {
 8006d7a:	7a33      	ldrb	r3, [r6, #8]
 8006d7c:	2b01      	cmp	r3, #1
      context->GetScratchBuffer(context, op_data->resolved_axis_idx));
 8006d7e:	4605      	mov	r5, r0
  switch (input->type) {
 8006d80:	d025      	beq.n	8006dce <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0xf2>
 8006d82:	2b09      	cmp	r3, #9
 8006d84:	d11e      	bne.n	8006dc4 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0xe8>
      TF_LITE_ENSURE_EQ(context, static_cast<double>(op_data->input_scale),
 8006d86:	ed9a 8a05 	vldr	s16, [sl, #20]
 8006d8a:	edda 7a07 	vldr	s15, [sl, #28]
 8006d8e:	eeb4 8a67 	vcmp.f32	s16, s15
 8006d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d96:	f040 8095 	bne.w	8006ec4 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1e8>
      TF_LITE_ENSURE_EQ(context, op_data->input_zp, op_data->output_zp);
 8006d9a:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006d9e:	f8da 2018 	ldr.w	r2, [sl, #24]
 8006da2:	4293      	cmp	r3, r2
 8006da4:	f000 80b0 	beq.w	8006f08 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x22c>
 8006da8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8006dac:	489c      	ldr	r0, [pc, #624]	@ (8007020 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x344>)
 8006dae:	499d      	ldr	r1, [pc, #628]	@ (8007024 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x348>)
 8006db0:	6965      	ldr	r5, [r4, #20]
 8006db2:	4a99      	ldr	r2, [pc, #612]	@ (8007018 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x33c>)
 8006db4:	e9cd 1000 	strd	r1, r0, [sp]
 8006db8:	f44f 7393 	mov.w	r3, #294	@ 0x126
 8006dbc:	499a      	ldr	r1, [pc, #616]	@ (8007028 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x34c>)
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	47a8      	blx	r5
 8006dc2:	e7c2      	b.n	8006d4a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_KERNEL_LOG(context,
 8006dc4:	6963      	ldr	r3, [r4, #20]
 8006dc6:	4999      	ldr	r1, [pc, #612]	@ (800702c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x350>)
 8006dc8:	4620      	mov	r0, r4
 8006dca:	4798      	blx	r3
      return kTfLiteError;
 8006dcc:	e7bd      	b.n	8006d4a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_ENSURE(
 8006dce:	6873      	ldr	r3, [r6, #4]

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
  TFLITE_DCHECK(tensor != nullptr);
  return reinterpret_cast<const T*>(tensor->data.raw);
 8006dd0:	6832      	ldr	r2, [r6, #0]
 8006dd2:	f8d8 c000 	ldr.w	ip, [r8]
 8006dd6:	681e      	ldr	r6, [r3, #0]
 8006dd8:	9309      	str	r3, [sp, #36]	@ 0x24
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8006dda:	e9db 8000 	ldrd	r8, r0, [fp]
                          const int* axis, const int64_t num_axis_dimensions,
                          bool keep_dims, int* temp_index, int* resolved_axis,
                          T init_value,
                          T reducer(const T current, const T in)) {
  // Return early when input shape has zero dim.
  for (int i = 0; i < input_num_dims; ++i) {
 8006dde:	2e00      	cmp	r6, #0
 8006de0:	f8d0 e000 	ldr.w	lr, [r0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8006de4:	9208      	str	r2, [sp, #32]
 8006de6:	dd0f      	ble.n	8006e08 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x12c>
 8006de8:	461a      	mov	r2, r3
 8006dea:	2300      	movs	r3, #0
 8006dec:	e002      	b.n	8006df4 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x118>
 8006dee:	3301      	adds	r3, #1
 8006df0:	429e      	cmp	r6, r3
 8006df2:	d009      	beq.n	8006e08 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x12c>
    if (input_dims[i] == 0) return true;
 8006df4:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8006df8:	2900      	cmp	r1, #0
 8006dfa:	d1f8      	bne.n	8006dee <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x112>
  return kTfLiteOk;
 8006dfc:	2000      	movs	r0, #0
}
 8006dfe:	b00d      	add	sp, #52	@ 0x34
 8006e00:	ecbd 8b02 	vpop	{d8}
 8006e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (int idx = 0; idx < num_dims; ++idx) {
 8006e08:	f1be 0f00 	cmp.w	lr, #0
  size_t num_elements = 1;
 8006e0c:	f04f 0301 	mov.w	r3, #1
  for (int idx = 0; idx < num_dims; ++idx) {
 8006e10:	dd11      	ble.n	8006e36 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x15a>
    size_t current = static_cast<size_t>(dims[idx]);
 8006e12:	f850 1f04 	ldr.w	r1, [r0, #4]!
  for (int idx = 0; idx < num_dims; ++idx) {
 8006e16:	2200      	movs	r2, #0
 8006e18:	46a3      	mov	fp, r4
 8006e1a:	e006      	b.n	8006e2a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x14e>
    size_t current = static_cast<size_t>(dims[idx]);
 8006e1c:	f850 1f04 	ldr.w	r1, [r0, #4]!
    if (num_elements > std::numeric_limits<size_t>::max() / current) {
 8006e20:	fba3 a401 	umull	sl, r4, r3, r1
 8006e24:	2c00      	cmp	r4, #0
 8006e26:	f040 822b 	bne.w	8007280 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x5a4>
  for (int idx = 0; idx < num_dims; ++idx) {
 8006e2a:	3201      	adds	r2, #1
 8006e2c:	4596      	cmp	lr, r2
    num_elements *= current;
 8006e2e:	fb01 f303 	mul.w	r3, r1, r3
  for (int idx = 0; idx < num_dims; ++idx) {
 8006e32:	d1f3      	bne.n	8006e1c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x140>
  for (size_t idx = 0; idx < num_elements; ++idx) {
 8006e34:	b143      	cbz	r3, 8006e48 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x16c>
    data[idx] = init_value;
 8006e36:	f46f 0000 	mvn.w	r0, #8388608	@ 0x800000
 8006e3a:	4641      	mov	r1, r8
  for (size_t idx = 0; idx < num_elements; ++idx) {
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	3201      	adds	r2, #1
 8006e40:	429a      	cmp	r2, r3
    data[idx] = init_value;
 8006e42:	f841 0b04 	str.w	r0, [r1], #4
  for (size_t idx = 0; idx < num_elements; ++idx) {
 8006e46:	d3fa      	bcc.n	8006e3e <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x162>
  if (num_dims == 0) {
 8006e48:	b37e      	cbz	r6, 8006eaa <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1ce>
      TF_LITE_ENSURE(
 8006e4a:	ea4f 7ae9 	mov.w	sl, r9, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8006e4e:	f1b9 0f01 	cmp.w	r9, #1
 8006e52:	f17a 0300 	sbcs.w	r3, sl, #0
 8006e56:	f2c0 81fa 	blt.w	800724e <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x572>
                               output_data)) {
    return false;
  }

  // Resolve axis.
  int num_resolved_axis = 0;
 8006e5a:	2400      	movs	r4, #0
 8006e5c:	f1ac 0b04 	sub.w	fp, ip, #4
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8006e60:	46a6      	mov	lr, r4
 8006e62:	46a4      	mov	ip, r4
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 8006e64:	f85b 0f04 	ldr.w	r0, [fp, #4]!
 8006e68:	2800      	cmp	r0, #0
 8006e6a:	db49      	blt.n	8006f00 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x224>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 8006e6c:	4286      	cmp	r6, r0
 8006e6e:	dd49      	ble.n	8006f04 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x228>
    for (int j = 0; j < *out_num_axis; ++j) {
 8006e70:	2c00      	cmp	r4, #0
 8006e72:	d041      	beq.n	8006ef8 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x21c>
 8006e74:	1f2a      	subs	r2, r5, #4
 8006e76:	2300      	movs	r3, #0
 8006e78:	e002      	b.n	8006e80 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1a4>
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	42a3      	cmp	r3, r4
 8006e7e:	d03b      	beq.n	8006ef8 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x21c>
      if (out_axis[j] == current) {
 8006e80:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8006e84:	4281      	cmp	r1, r0
 8006e86:	d1f8      	bne.n	8006e7a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x19e>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8006e88:	f11c 0c01 	adds.w	ip, ip, #1
 8006e8c:	f14e 0e00 	adc.w	lr, lr, #0
 8006e90:	45f2      	cmp	sl, lr
 8006e92:	bf08      	it	eq
 8006e94:	45e1      	cmpeq	r9, ip
 8006e96:	d1e5      	bne.n	8006e64 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x188>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8006e98:	2e00      	cmp	r6, #0
 8006e9a:	dd04      	ble.n	8006ea6 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1ca>
    input_iter[idx] = 0;
 8006e9c:	00b2      	lsls	r2, r6, #2
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4638      	mov	r0, r7
 8006ea2:	f00a ffa3 	bl	8011dec <memset>
// offset.
// TODO(kanlig): uses Dims to represent dimensions.
inline size_t ReducedOutputOffset(const int num_dims, const int* dims,
                                  const int* index, const int num_axis,
                                  const int* axis) {
  if (num_dims == 0) {
 8006ea6:	2e00      	cmp	r6, #0
 8006ea8:	d148      	bne.n	8006f3c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x260>
        reducer(output_data[output_offset], input_data[input_offset]);
 8006eaa:	9b08      	ldr	r3, [sp, #32]
 8006eac:	ed98 7a00 	vldr	s14, [r8]
 8006eb0:	edd3 7a00 	vldr	s15, [r3]
 8006eb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ebc:	d59e      	bpl.n	8006dfc <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x120>
    output_data[output_offset] =
 8006ebe:	edc8 7a00 	vstr	s15, [r8]
  if (num_dims == 0) {
 8006ec2:	e79b      	b.n	8006dfc <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x120>
      TF_LITE_ENSURE_EQ(context, static_cast<double>(op_data->input_scale),
 8006ec4:	ee17 0a90 	vmov	r0, s15
 8006ec8:	f7f9 fb48 	bl	800055c <__aeabi_f2d>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	460b      	mov	r3, r1
 8006ed0:	ee18 0a10 	vmov	r0, s16
 8006ed4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ed8:	f7f9 fb40 	bl	800055c <__aeabi_f2d>
 8006edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ee0:	4a53      	ldr	r2, [pc, #332]	@ (8007030 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x354>)
 8006ee2:	9201      	str	r2, [sp, #4]
 8006ee4:	4b53      	ldr	r3, [pc, #332]	@ (8007034 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x358>)
 8006ee6:	6965      	ldr	r5, [r4, #20]
 8006ee8:	4a4b      	ldr	r2, [pc, #300]	@ (8007018 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x33c>)
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	494e      	ldr	r1, [pc, #312]	@ (8007028 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x34c>)
 8006eee:	f44f 7392 	mov.w	r3, #292	@ 0x124
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	47a8      	blx	r5
 8006ef6:	e728      	b.n	8006d4a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x6e>
      out_axis[*out_num_axis] = current;
 8006ef8:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
      *out_num_axis += 1;
 8006efc:	3401      	adds	r4, #1
 8006efe:	e7c3      	b.n	8006e88 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1ac>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 8006f00:	1980      	adds	r0, r0, r6
 8006f02:	d5b5      	bpl.n	8006e70 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x194>
  TFLITE_DCHECK(context != nullptr);
 8006f04:	f009 ffda 	bl	8010ebc <abort>
      TF_LITE_ENSURE(
 8006f08:	6873      	ldr	r3, [r6, #4]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8006f0a:	6832      	ldr	r2, [r6, #0]
 8006f0c:	f8d8 a000 	ldr.w	sl, [r8]
 8006f10:	681e      	ldr	r6, [r3, #0]
 8006f12:	9309      	str	r3, [sp, #36]	@ 0x24
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8006f14:	e9db 8000 	ldrd	r8, r0, [fp]
  for (int i = 0; i < input_num_dims; ++i) {
 8006f18:	2e00      	cmp	r6, #0
 8006f1a:	f8d0 c000 	ldr.w	ip, [r0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8006f1e:	9208      	str	r2, [sp, #32]
 8006f20:	f340 8197 	ble.w	8007252 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x576>
 8006f24:	461a      	mov	r2, r3
 8006f26:	2300      	movs	r3, #0
 8006f28:	e003      	b.n	8006f32 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x256>
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	429e      	cmp	r6, r3
 8006f2e:	f000 80a3 	beq.w	8007078 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x39c>
    if (input_dims[i] == 0) return true;
 8006f32:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8006f36:	2900      	cmp	r1, #0
 8006f38:	d1f7      	bne.n	8006f2a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x24e>
 8006f3a:	e75f      	b.n	8006dfc <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x120>
 8006f3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f3e:	1c73      	adds	r3, r6, #1
 8006f40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8006f44:	f106 3bff 	add.w	fp, r6, #4294967295	@ 0xffffffff
 8006f48:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f4a:	eb02 0c86 	add.w	ip, r2, r6, lsl #2
 8006f4e:	4613      	mov	r3, r2
 8006f50:	eb07 028b 	add.w	r2, r7, fp, lsl #2
 8006f54:	920b      	str	r2, [sp, #44]	@ 0x2c
    return 0;
  }
  TFLITE_DCHECK(dims != nullptr);
  TFLITE_DCHECK(index != nullptr);
  size_t offset = 0;
 8006f56:	2000      	movs	r0, #0
          break;
        }
      }
    }
    if (!is_axis) {
      offset = offset * static_cast<size_t>(dims[idx]) +
 8006f58:	f103 0e04 	add.w	lr, r3, #4
 8006f5c:	46c2      	mov	sl, r8
  TFLITE_DCHECK(index != nullptr);
 8006f5e:	2f00      	cmp	r7, #0
 8006f60:	d0d0      	beq.n	8006f04 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x228>
  for (int idx = 0; idx < num_dims; ++idx) {
 8006f62:	2e00      	cmp	r6, #0
 8006f64:	dd79      	ble.n	800705a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x37e>
 8006f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f68:	1f3a      	subs	r2, r7, #4
  size_t offset = 0;
 8006f6a:	2100      	movs	r1, #0
 8006f6c:	46a8      	mov	r8, r5
 8006f6e:	46a1      	mov	r9, r4
      offset = offset * static_cast<size_t>(dims[idx]) +
 8006f70:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8006f74:	f852 4f04 	ldr.w	r4, [r2, #4]!
  for (int idx = 0; idx < num_dims; ++idx) {
 8006f78:	459c      	cmp	ip, r3
      offset = offset * static_cast<size_t>(dims[idx]) +
 8006f7a:	fb05 4101 	mla	r1, r5, r1, r4
  for (int idx = 0; idx < num_dims; ++idx) {
 8006f7e:	d1f7      	bne.n	8006f70 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x294>
  size_t offset = 0;
 8006f80:	4645      	mov	r5, r8
 8006f82:	f04f 0800 	mov.w	r8, #0
 8006f86:	464c      	mov	r4, r9
  for (int idx = 0; idx < num_dims; ++idx) {
 8006f88:	4642      	mov	r2, r8
 8006f8a:	9106      	str	r1, [sp, #24]
    if (axis != nullptr) {
 8006f8c:	bbc5      	cbnz	r5, 8007000 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x324>
      offset = offset * static_cast<size_t>(dims[idx]) +
 8006f8e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 8006f92:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
  for (int idx = 0; idx < num_dims; ++idx) {
 8006f96:	3201      	adds	r2, #1
 8006f98:	4296      	cmp	r6, r2
      offset = offset * static_cast<size_t>(dims[idx]) +
 8006f9a:	fb01 3808 	mla	r8, r1, r8, r3
  for (int idx = 0; idx < num_dims; ++idx) {
 8006f9e:	d1f5      	bne.n	8006f8c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x2b0>
 8006fa0:	9906      	ldr	r1, [sp, #24]
        reducer(output_data[output_offset], input_data[input_offset]);
 8006fa2:	9b08      	ldr	r3, [sp, #32]
 8006fa4:	eb0a 0888 	add.w	r8, sl, r8, lsl #2
 8006fa8:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006fac:	edd1 7a00 	vldr	s15, [r1]
 8006fb0:	ed98 7a00 	vldr	s14, [r8]
      TF_LITE_ENSURE(
 8006fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fbc:	d401      	bmi.n	8006fc2 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x2e6>
 8006fbe:	eef0 7a47 	vmov.f32	s15, s14
    output_data[output_offset] =
 8006fc2:	edc8 7a00 	vstr	s15, [r8]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8006fc6:	f1bb 0f00 	cmp.w	fp, #0
 8006fca:	f6ff af17 	blt.w	8006dfc <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x120>
 8006fce:	e9dd 820a 	ldrd	r8, r2, [sp, #40]	@ 0x28
 8006fd2:	4659      	mov	r1, fp
 8006fd4:	9606      	str	r6, [sp, #24]
 8006fd6:	e004      	b.n	8006fe2 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x306>
 8006fd8:	3901      	subs	r1, #1
 8006fda:	1c4e      	adds	r6, r1, #1
      current[idx] = 0;
 8006fdc:	6050      	str	r0, [r2, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8006fde:	f43f af0d 	beq.w	8006dfc <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x120>
    int current_val = current[idx] + carry;
 8006fe2:	4691      	mov	r9, r2
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8006fe4:	f858 6d04 	ldr.w	r6, [r8, #-4]!
    int current_val = current[idx] + carry;
 8006fe8:	f8d9 3000 	ldr.w	r3, [r9]
 8006fec:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8006fee:	42b3      	cmp	r3, r6
 8006ff0:	f1a2 0204 	sub.w	r2, r2, #4
 8006ff4:	dc86      	bgt.n	8006f04 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x228>
    if (dims[idx] == current_val) {
 8006ff6:	d0ef      	beq.n	8006fd8 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x2fc>
      current[idx] = current_val;
 8006ff8:	9e06      	ldr	r6, [sp, #24]
 8006ffa:	f8c9 3000 	str.w	r3, [r9]
  if (num_dims == 0) {
 8006ffe:	e7ae      	b.n	8006f5e <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x282>
 8007000:	9906      	ldr	r1, [sp, #24]
 8007002:	9707      	str	r7, [sp, #28]
 8007004:	4691      	mov	r9, r2
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 8007006:	b324      	cbz	r4, 8007052 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x376>
 8007008:	1f2f      	subs	r7, r5, #4
 800700a:	2300      	movs	r3, #0
 800700c:	e017      	b.n	800703e <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x362>
 800700e:	bf00      	nop
 8007010:	08016194 	.word	0x08016194
 8007014:	080161a4 	.word	0x080161a4
 8007018:	08016144 	.word	0x08016144
 800701c:	08016178 	.word	0x08016178
 8007020:	08016208 	.word	0x08016208
 8007024:	0801621c 	.word	0x0801621c
 8007028:	08015314 	.word	0x08015314
 800702c:	080163e8 	.word	0x080163e8
 8007030:	080161b0 	.word	0x080161b0
 8007034:	080161dc 	.word	0x080161dc
 8007038:	3301      	adds	r3, #1
 800703a:	42a3      	cmp	r3, r4
 800703c:	d009      	beq.n	8007052 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x376>
        if (idx == axis[axis_idx]) {
 800703e:	f857 2f04 	ldr.w	r2, [r7, #4]!
 8007042:	454a      	cmp	r2, r9
 8007044:	d1f8      	bne.n	8007038 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x35c>
  for (int idx = 0; idx < num_dims; ++idx) {
 8007046:	f109 0901 	add.w	r9, r9, #1
 800704a:	454e      	cmp	r6, r9
 800704c:	d1db      	bne.n	8007006 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x32a>
 800704e:	9f07      	ldr	r7, [sp, #28]
 8007050:	e7a7      	b.n	8006fa2 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x2c6>
 8007052:	9f07      	ldr	r7, [sp, #28]
 8007054:	9106      	str	r1, [sp, #24]
 8007056:	464a      	mov	r2, r9
 8007058:	e799      	b.n	8006f8e <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x2b2>
        reducer(output_data[output_offset], input_data[input_offset]);
 800705a:	9b08      	ldr	r3, [sp, #32]
 800705c:	ed9a 7a00 	vldr	s14, [sl]
 8007060:	edd3 7a00 	vldr	s15, [r3]
 8007064:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800706c:	dc01      	bgt.n	8007072 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x396>
 800706e:	46d0      	mov	r8, sl
 8007070:	e7a5      	b.n	8006fbe <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x2e2>
    output_data[output_offset] =
 8007072:	edca 7a00 	vstr	s15, [sl]
  TFLITE_DCHECK(current != nullptr);
 8007076:	e7a6      	b.n	8006fc6 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x2ea>
  for (int idx = 0; idx < num_dims; ++idx) {
 8007078:	f1bc 0f00 	cmp.w	ip, #0
 800707c:	f340 80f1 	ble.w	8007262 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x586>
    size_t current = static_cast<size_t>(dims[idx]);
 8007080:	f850 1f04 	ldr.w	r1, [r0, #4]!
  size_t num_elements = 1;
 8007084:	2201      	movs	r2, #1
  for (int idx = 0; idx < num_dims; ++idx) {
 8007086:	2300      	movs	r3, #0
 8007088:	46a3      	mov	fp, r4
 800708a:	e006      	b.n	800709a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x3be>
    size_t current = static_cast<size_t>(dims[idx]);
 800708c:	f850 1f04 	ldr.w	r1, [r0, #4]!
    if (num_elements > std::numeric_limits<size_t>::max() / current) {
 8007090:	fba2 e401 	umull	lr, r4, r2, r1
 8007094:	2c00      	cmp	r4, #0
 8007096:	f040 80e8 	bne.w	800726a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x58e>
  for (int idx = 0; idx < num_dims; ++idx) {
 800709a:	3301      	adds	r3, #1
 800709c:	459c      	cmp	ip, r3
    num_elements *= current;
 800709e:	fb01 f202 	mul.w	r2, r1, r2
  for (int idx = 0; idx < num_dims; ++idx) {
 80070a2:	d1f3      	bne.n	800708c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x3b0>
  for (size_t idx = 0; idx < num_elements; ++idx) {
 80070a4:	b132      	cbz	r2, 80070b4 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x3d8>
    data[idx] = init_value;
 80070a6:	2a00      	cmp	r2, #0
 80070a8:	bf08      	it	eq
 80070aa:	2201      	moveq	r2, #1
 80070ac:	2180      	movs	r1, #128	@ 0x80
 80070ae:	4640      	mov	r0, r8
 80070b0:	f00a fe9c 	bl	8011dec <memset>
  if (num_dims == 0) {
 80070b4:	2e00      	cmp	r6, #0
 80070b6:	f000 80c7 	beq.w	8007248 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x56c>
      TF_LITE_ENSURE(
 80070ba:	ea4f 7be9 	mov.w	fp, r9, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80070be:	f1b9 0f01 	cmp.w	r9, #1
 80070c2:	f17b 0300 	sbcs.w	r3, fp, #0
 80070c6:	f2c0 80ca 	blt.w	800725e <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x582>
  int num_resolved_axis = 0;
 80070ca:	2400      	movs	r4, #0
 80070cc:	f1aa 0a04 	sub.w	sl, sl, #4
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80070d0:	46a4      	mov	ip, r4
 80070d2:	46a6      	mov	lr, r4
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 80070d4:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 80070d8:	2800      	cmp	r0, #0
 80070da:	f2c0 80a6 	blt.w	800722a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x54e>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 80070de:	4286      	cmp	r6, r0
 80070e0:	f77f af10 	ble.w	8006f04 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x228>
    for (int j = 0; j < *out_num_axis; ++j) {
 80070e4:	2c00      	cmp	r4, #0
 80070e6:	f000 809c 	beq.w	8007222 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x546>
 80070ea:	1f2a      	subs	r2, r5, #4
 80070ec:	2300      	movs	r3, #0
 80070ee:	e003      	b.n	80070f8 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x41c>
 80070f0:	3301      	adds	r3, #1
 80070f2:	429c      	cmp	r4, r3
 80070f4:	f000 8095 	beq.w	8007222 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x546>
      if (out_axis[j] == current) {
 80070f8:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80070fc:	4288      	cmp	r0, r1
 80070fe:	d1f7      	bne.n	80070f0 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x414>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8007100:	f11c 0c01 	adds.w	ip, ip, #1
 8007104:	f14e 0e00 	adc.w	lr, lr, #0
 8007108:	45f3      	cmp	fp, lr
 800710a:	bf08      	it	eq
 800710c:	45e1      	cmpeq	r9, ip
 800710e:	d1e1      	bne.n	80070d4 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x3f8>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8007110:	2e00      	cmp	r6, #0
    input_iter[idx] = 0;
 8007112:	ea4f 0986 	mov.w	r9, r6, lsl #2
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8007116:	dd04      	ble.n	8007122 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x446>
    input_iter[idx] = 0;
 8007118:	464a      	mov	r2, r9
 800711a:	2100      	movs	r1, #0
 800711c:	4638      	mov	r0, r7
 800711e:	f00a fe65 	bl	8011dec <memset>
 8007122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007124:	1c73      	adds	r3, r6, #1
 8007126:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 800712a:	f106 3bff 	add.w	fp, r6, #4294967295	@ 0xffffffff
 800712e:	930a      	str	r3, [sp, #40]	@ 0x28
  if (num_dims == 0) {
 8007130:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8007134:	eb02 0009 	add.w	r0, r2, r9
 8007138:	930b      	str	r3, [sp, #44]	@ 0x2c
 800713a:	2e00      	cmp	r6, #0
 800713c:	d066      	beq.n	800720c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x530>
  TFLITE_DCHECK(index != nullptr);
 800713e:	2f00      	cmp	r7, #0
 8007140:	f43f aee0 	beq.w	8006f04 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x228>
  size_t offset = 0;
 8007144:	f04f 0c00 	mov.w	ip, #0
      offset = offset * static_cast<size_t>(dims[idx]) +
 8007148:	f102 0e04 	add.w	lr, r2, #4
  for (int idx = 0; idx < num_dims; ++idx) {
 800714c:	2e00      	cmp	r6, #0
 800714e:	dd70      	ble.n	8007232 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x556>
 8007150:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007152:	1f3a      	subs	r2, r7, #4
  size_t offset = 0;
 8007154:	2100      	movs	r1, #0
 8007156:	46a2      	mov	sl, r4
 8007158:	4681      	mov	r9, r0
      offset = offset * static_cast<size_t>(dims[idx]) +
 800715a:	f853 4f04 	ldr.w	r4, [r3, #4]!
 800715e:	f852 0f04 	ldr.w	r0, [r2, #4]!
  for (int idx = 0; idx < num_dims; ++idx) {
 8007162:	4599      	cmp	r9, r3
      offset = offset * static_cast<size_t>(dims[idx]) +
 8007164:	fb04 0101 	mla	r1, r4, r1, r0
  for (int idx = 0; idx < num_dims; ++idx) {
 8007168:	d1f7      	bne.n	800715a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x47e>
  size_t offset = 0;
 800716a:	4648      	mov	r0, r9
 800716c:	f04f 0900 	mov.w	r9, #0
 8007170:	4654      	mov	r4, sl
  for (int idx = 0; idx < num_dims; ++idx) {
 8007172:	464a      	mov	r2, r9
 8007174:	9106      	str	r1, [sp, #24]
    if (axis != nullptr) {
 8007176:	bb8d      	cbnz	r5, 80071dc <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x500>
      offset = offset * static_cast<size_t>(dims[idx]) +
 8007178:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 800717c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
  for (int idx = 0; idx < num_dims; ++idx) {
 8007180:	3201      	adds	r2, #1
 8007182:	4296      	cmp	r6, r2
      offset = offset * static_cast<size_t>(dims[idx]) +
 8007184:	fb01 3909 	mla	r9, r1, r9, r3
  for (int idx = 0; idx < num_dims; ++idx) {
 8007188:	d1f5      	bne.n	8007176 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x49a>
 800718a:	9906      	ldr	r1, [sp, #24]
    output_data[output_offset] =
 800718c:	9b08      	ldr	r3, [sp, #32]
 800718e:	f918 2009 	ldrsb.w	r2, [r8, r9]
 8007192:	565b      	ldrsb	r3, [r3, r1]
 8007194:	4293      	cmp	r3, r2
 8007196:	bfb8      	it	lt
 8007198:	4613      	movlt	r3, r2
 800719a:	f808 3009 	strb.w	r3, [r8, r9]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 800719e:	f1bb 0f00 	cmp.w	fp, #0
 80071a2:	f6ff ae2b 	blt.w	8006dfc <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x120>
 80071a6:	e9dd 920a 	ldrd	r9, r2, [sp, #40]	@ 0x28
 80071aa:	4659      	mov	r1, fp
 80071ac:	9606      	str	r6, [sp, #24]
 80071ae:	e005      	b.n	80071bc <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x4e0>
 80071b0:	3901      	subs	r1, #1
 80071b2:	1c4b      	adds	r3, r1, #1
      current[idx] = 0;
 80071b4:	f8c2 c004 	str.w	ip, [r2, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 80071b8:	f43f ae20 	beq.w	8006dfc <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x120>
    int current_val = current[idx] + carry;
 80071bc:	4692      	mov	sl, r2
    TFLITE_DCHECK_GE(dims[idx], current_val);
 80071be:	f859 6d04 	ldr.w	r6, [r9, #-4]!
    int current_val = current[idx] + carry;
 80071c2:	f8da 3000 	ldr.w	r3, [sl]
 80071c6:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 80071c8:	42b3      	cmp	r3, r6
 80071ca:	f1a2 0204 	sub.w	r2, r2, #4
 80071ce:	f73f ae99 	bgt.w	8006f04 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x228>
    if (dims[idx] == current_val) {
 80071d2:	d0ed      	beq.n	80071b0 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x4d4>
      current[idx] = current_val;
 80071d4:	9e06      	ldr	r6, [sp, #24]
 80071d6:	f8ca 3000 	str.w	r3, [sl]
  if (num_dims == 0) {
 80071da:	e7b7      	b.n	800714c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x470>
 80071dc:	9906      	ldr	r1, [sp, #24]
 80071de:	9707      	str	r7, [sp, #28]
 80071e0:	4692      	mov	sl, r2
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 80071e2:	b17c      	cbz	r4, 8007204 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x528>
 80071e4:	1f2f      	subs	r7, r5, #4
 80071e6:	2300      	movs	r3, #0
 80071e8:	e002      	b.n	80071f0 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x514>
 80071ea:	3301      	adds	r3, #1
 80071ec:	429c      	cmp	r4, r3
 80071ee:	d009      	beq.n	8007204 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x528>
        if (idx == axis[axis_idx]) {
 80071f0:	f857 2f04 	ldr.w	r2, [r7, #4]!
 80071f4:	4592      	cmp	sl, r2
 80071f6:	d1f8      	bne.n	80071ea <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x50e>
  for (int idx = 0; idx < num_dims; ++idx) {
 80071f8:	f10a 0a01 	add.w	sl, sl, #1
 80071fc:	4556      	cmp	r6, sl
 80071fe:	d1f0      	bne.n	80071e2 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x506>
 8007200:	9f07      	ldr	r7, [sp, #28]
 8007202:	e7c3      	b.n	800718c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x4b0>
 8007204:	9f07      	ldr	r7, [sp, #28]
 8007206:	9106      	str	r1, [sp, #24]
 8007208:	4652      	mov	r2, sl
 800720a:	e7b5      	b.n	8007178 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x49c>
 800720c:	9b08      	ldr	r3, [sp, #32]
 800720e:	f998 2000 	ldrsb.w	r2, [r8]
 8007212:	f993 3000 	ldrsb.w	r3, [r3]
 8007216:	4293      	cmp	r3, r2
 8007218:	bfb8      	it	lt
 800721a:	4613      	movlt	r3, r2
 800721c:	f888 3000 	strb.w	r3, [r8]
  if (num_dims == 0) {
 8007220:	e5ec      	b.n	8006dfc <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x120>
      out_axis[*out_num_axis] = current;
 8007222:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
      *out_num_axis += 1;
 8007226:	3401      	adds	r4, #1
 8007228:	e76a      	b.n	8007100 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x424>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 800722a:	1980      	adds	r0, r0, r6
 800722c:	f57f af5a 	bpl.w	80070e4 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x408>
 8007230:	e668      	b.n	8006f04 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x228>
    output_data[output_offset] =
 8007232:	9a08      	ldr	r2, [sp, #32]
 8007234:	f998 3000 	ldrsb.w	r3, [r8]
 8007238:	f992 2000 	ldrsb.w	r2, [r2]
 800723c:	4293      	cmp	r3, r2
 800723e:	bfb8      	it	lt
 8007240:	4613      	movlt	r3, r2
 8007242:	f888 3000 	strb.w	r3, [r8]
  TFLITE_DCHECK(current != nullptr);
 8007246:	e7aa      	b.n	800719e <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x4c2>
  int num_resolved_axis = 0;
 8007248:	4634      	mov	r4, r6
 800724a:	46b1      	mov	r9, r6
 800724c:	e769      	b.n	8007122 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x446>
 800724e:	2400      	movs	r4, #0
 8007250:	e622      	b.n	8006e98 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x1bc>
  for (int idx = 0; idx < num_dims; ++idx) {
 8007252:	f1bc 0f00 	cmp.w	ip, #0
 8007256:	f73f af13 	bgt.w	8007080 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x3a4>
  size_t num_elements = 1;
 800725a:	2201      	movs	r2, #1
 800725c:	e723      	b.n	80070a6 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x3ca>
  int num_resolved_axis = 0;
 800725e:	2400      	movs	r4, #0
 8007260:	e756      	b.n	8007110 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x434>
    data[idx] = init_value;
 8007262:	2380      	movs	r3, #128	@ 0x80
 8007264:	f888 3000 	strb.w	r3, [r8]
  if (num_dims == 0) {
 8007268:	e727      	b.n	80070ba <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x3de>
 800726a:	4b0b      	ldr	r3, [pc, #44]	@ (8007298 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x5bc>)
 800726c:	f8db 5014 	ldr.w	r5, [fp, #20]
 8007270:	4a0a      	ldr	r2, [pc, #40]	@ (800729c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x5c0>)
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	490a      	ldr	r1, [pc, #40]	@ (80072a0 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x5c4>)
 8007276:	f240 1327 	movw	r3, #295	@ 0x127
 800727a:	4658      	mov	r0, fp
 800727c:	47a8      	blx	r5
 800727e:	e564      	b.n	8006d4a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x6e>
      TF_LITE_ENSURE(
 8007280:	4b08      	ldr	r3, [pc, #32]	@ (80072a4 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x5c8>)
 8007282:	f8db 5014 	ldr.w	r5, [fp, #20]
 8007286:	4a05      	ldr	r2, [pc, #20]	@ (800729c <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x5c0>)
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	4905      	ldr	r1, [pc, #20]	@ (80072a0 <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x5c4>)
 800728c:	f44f 738b 	mov.w	r3, #278	@ 0x116
 8007290:	4658      	mov	r0, fp
 8007292:	47a8      	blx	r5
 8007294:	e559      	b.n	8006d4a <_ZN6tflite3ops5micro6reduce7EvalMaxEP13TfLiteContextP10TfLiteNode+0x6e>
 8007296:	bf00      	nop
 8007298:	08016230 	.word	0x08016230
 800729c:	08016144 	.word	0x08016144
 80072a0:	080152b4 	.word	0x080152b4
 80072a4:	08016414 	.word	0x08016414

080072a8 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf>:
inline void Mean(const tflite::MeanParams& op_params,
                 const RuntimeShape& unextended_input_shape,
                 const uint8_t* input_data, int32_t input_zero_point,
                 float input_scale, const RuntimeShape& unextended_output_shape,
                 uint8_t* output_data, int32_t output_zero_point,
                 float output_scale) {
 80072a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ac:	ed2d 8b04 	vpush	{d8-d9}
 80072b0:	ee09 3a10 	vmov	s18, r3
  ruy::profiler::ScopeLabel label("Mean4D/Uint8");

  // Current implementation only supports dimension equals 4 and simultaneous
  // reduction over width and height.
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 80072b4:	680b      	ldr	r3, [r1, #0]
                 float output_scale) {
 80072b6:	b0a5      	sub	sp, #148	@ 0x94
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 80072b8:	2b04      	cmp	r3, #4
                 float output_scale) {
 80072ba:	9f32      	ldr	r7, [sp, #200]	@ 0xc8
 80072bc:	9d34      	ldr	r5, [sp, #208]	@ 0xd0
 80072be:	9211      	str	r2, [sp, #68]	@ 0x44
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 80072c0:	f040 8187 	bne.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
  inline int32_t DimensionsCount() const { return size_; }
 80072c4:	683e      	ldr	r6, [r7, #0]
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
 80072c6:	2e04      	cmp	r6, #4
 80072c8:	f300 8183 	bgt.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
    size_ = dimensions_count;
 80072cc:	460c      	mov	r4, r1
 80072ce:	4680      	mov	r8, r0
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 80072d0:	68e2      	ldr	r2, [r4, #12]
 80072d2:	6848      	ldr	r0, [r1, #4]
    size_ = dimensions_count;
 80072d4:	9318      	str	r3, [sp, #96]	@ 0x60
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 80072d6:	6889      	ldr	r1, [r1, #8]
    size_ = dimensions_count;
 80072d8:	931e      	str	r3, [sp, #120]	@ 0x78
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 80072da:	6923      	ldr	r3, [r4, #16]
 80072dc:	ac19      	add	r4, sp, #100	@ 0x64
 80072de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    for (int i = 0; i < size_increase; ++i) {
 80072e0:	f1d6 0004 	rsbs	r0, r6, #4
 80072e4:	eeb0 8a40 	vmov.f32	s16, s0
 80072e8:	eef0 8a60 	vmov.f32	s17, s1
 80072ec:	d00d      	beq.n	800730a <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x62>
      dims_[i] = val;
 80072ee:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
 80072f0:	4298      	cmp	r0, r3
      dims_[i] = val;
 80072f2:	931f      	str	r3, [sp, #124]	@ 0x7c
    for (int i = 0; i < size_increase; ++i) {
 80072f4:	d009      	beq.n	800730a <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x62>
 80072f6:	2802      	cmp	r0, #2
      dims_[i] = val;
 80072f8:	9320      	str	r3, [sp, #128]	@ 0x80
    for (int i = 0; i < size_increase; ++i) {
 80072fa:	d006      	beq.n	800730a <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x62>
 80072fc:	2803      	cmp	r0, #3
      dims_[i] = val;
 80072fe:	9321      	str	r3, [sp, #132]	@ 0x84
    for (int i = 0; i < size_increase; ++i) {
 8007300:	d003      	beq.n	800730a <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x62>
 8007302:	2804      	cmp	r0, #4
      dims_[i] = val;
 8007304:	9322      	str	r3, [sp, #136]	@ 0x88
    for (int i = 0; i < size_increase; ++i) {
 8007306:	f040 8164 	bne.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 800730a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800730c:	00b2      	lsls	r2, r6, #2
 800730e:	1d39      	adds	r1, r7, #4
 8007310:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007314:	f00a fe19 	bl	8011f4a <memcpy>
    TFLITE_DCHECK_LT(i, size_);
 8007318:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800731a:	9204      	str	r2, [sp, #16]
 800731c:	2a00      	cmp	r2, #0
 800731e:	f340 8158 	ble.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007322:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8007324:	9305      	str	r3, [sp, #20]
 8007326:	2a05      	cmp	r2, #5
 8007328:	f340 8141 	ble.w	80075ae <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x306>
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007330:	461a      	mov	r2, r3
 8007332:	e9d3 3701 	ldrd	r3, r7, [r3, #4]
 8007336:	68d2      	ldr	r2, [r2, #12]
 8007338:	9203      	str	r2, [sp, #12]
 800733a:	e9dd 641a 	ldrd	r6, r4, [sp, #104]	@ 0x68
  const int output_depth = output_shape.Dims(3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const float num_elements_in_axis = input_width * input_height;

  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 800733e:	f998 2000 	ldrsb.w	r2, [r8]
  const float num_elements_in_axis = input_width * input_height;
 8007342:	fb06 f904 	mul.w	r9, r6, r4
 8007346:	ee07 9a90 	vmov	s15, r9
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 800734a:	2a02      	cmp	r2, #2
  const float num_elements_in_axis = input_width * input_height;
 800734c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 8007350:	f040 813f 	bne.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8007354:	f9b8 2002 	ldrsh.w	r2, [r8, #2]
 8007358:	2a01      	cmp	r2, #1
 800735a:	f000 8135 	beq.w	80075c8 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x320>
 800735e:	2a02      	cmp	r2, #2
 8007360:	f040 8137 	bne.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
 8007364:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8007368:	2a01      	cmp	r2, #1
 800736a:	f040 8132 	bne.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
               (op_params.axis[0] == 2 && op_params.axis[1] == 1));
  TFLITE_CHECK_EQ(output_height, 1);
 800736e:	2b01      	cmp	r3, #1
 8007370:	f040 812f 	bne.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
  TFLITE_CHECK_EQ(output_width, 1);
 8007374:	2f01      	cmp	r7, #1
 8007376:	f040 812c 	bne.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
  constexpr int32_t kMinValue = std::numeric_limits<uint8_t>::min();
  constexpr int32_t kMaxValue = std::numeric_limits<uint8_t>::max();

  int32_t bias =
      output_zero_point -
      static_cast<int32_t>(input_zero_point * input_scale / output_scale);
 800737a:	eef8 7ac9 	vcvt.f32.s32	s15, s18
  double real_scale =
      static_cast<double>(input_scale / (num_elements_in_axis * output_scale));
 800737e:	ee66 6aa8 	vmul.f32	s13, s13, s17
      static_cast<int32_t>(input_zero_point * input_scale / output_scale);
 8007382:	ee67 7a88 	vmul.f32	s15, s15, s16
 8007386:	ee87 7aa8 	vdiv.f32	s14, s15, s17
  double real_scale =
 800738a:	eec8 7a26 	vdiv.f32	s15, s16, s13
      static_cast<int32_t>(input_zero_point * input_scale / output_scale);
 800738e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  double real_scale =
 8007392:	ee17 0a90 	vmov	r0, s15
  int32_t bias =
 8007396:	ee17 3a10 	vmov	r3, s14
 800739a:	1aeb      	subs	r3, r5, r3
 800739c:	9306      	str	r3, [sp, #24]
  double real_scale =
 800739e:	f7f9 f8dd 	bl	800055c <__aeabi_f2d>
 80073a2:	ec41 0b10 	vmov	d0, r0, r1

  int32_t multiplier;
  int shift;
  QuantizeMultiplier(real_scale, &multiplier, &shift);
 80073a6:	a917      	add	r1, sp, #92	@ 0x5c
 80073a8:	a816      	add	r0, sp, #88	@ 0x58
 80073aa:	f7fc fc7b 	bl	8003ca4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 80073ae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f340 80a7 	ble.w	8007504 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x25c>
      for (int in_h = 0; in_h < input_height; ++in_h) {
        for (int in_w = 0; in_w < input_width; ++in_w) {
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
        }
      }
      acc = MultiplyByQuantizedMultiplier(acc, multiplier, shift);
 80073b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 80073b8:	f8dd c070 	ldr.w	ip, [sp, #112]	@ 0x70
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 80073bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 80073be:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 80073c0:	9202      	str	r2, [sp, #8]
                                             int32_t quantized_multiplier,
                                             int shift) {
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
  int right_shift = shift > 0 ? 0 : -shift;
 80073c2:	4253      	negs	r3, r2
 80073c4:	2a00      	cmp	r2, #0
 80073c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80073c8:	bfc8      	it	gt
 80073ca:	2300      	movgt	r3, #0
 80073cc:	930d      	str	r3, [sp, #52]	@ 0x34
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 80073ce:	fa07 f303 	lsl.w	r3, r7, r3
 80073d2:	3b01      	subs	r3, #1
 80073d4:	e9cd 730b 	strd	r7, r3, [sp, #44]	@ 0x2c
 80073d8:	fb0c f009 	mul.w	r0, ip, r9
 80073dc:	fb01 f305 	mul.w	r3, r1, r5
 80073e0:	9000      	str	r0, [sp, #0]
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 80073e2:	9107      	str	r1, [sp, #28]
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 80073e4:	9822      	ldr	r0, [sp, #136]	@ 0x88
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 80073e6:	9508      	str	r5, [sp, #32]
  int left_shift = shift > 0 ? shift : 0;
 80073e8:	ea22 71e2 	bic.w	r1, r2, r2, asr #31
  return a >> offset;
 80073ec:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80073ee:	910a      	str	r1, [sp, #40]	@ 0x28
 80073f0:	fb00 fe03 	mul.w	lr, r0, r3
 80073f4:	1052      	asrs	r2, r2, #1
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 80073f6:	2300      	movs	r3, #0
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 80073f8:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80073fc:	f8dd b058 	ldr.w	fp, [sp, #88]	@ 0x58
 8007400:	9933      	ldr	r1, [sp, #204]	@ 0xcc
 8007402:	9d00      	ldr	r5, [sp, #0]
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007404:	9009      	str	r0, [sp, #36]	@ 0x24
 8007406:	920e      	str	r2, [sp, #56]	@ 0x38
 8007408:	fb04 f90c 	mul.w	r9, r4, ip
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 800740c:	4698      	mov	r8, r3
 800740e:	4677      	mov	r7, lr
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 8007410:	9a03      	ldr	r2, [sp, #12]
 8007412:	2a00      	cmp	r2, #0
 8007414:	dd6f      	ble.n	80074f6 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x24e>
 8007416:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8007418:	4418      	add	r0, r3
 800741a:	e9cd 5312 	strd	r5, r3, [sp, #72]	@ 0x48
 800741e:	e9cd 7114 	strd	r7, r1, [sp, #80]	@ 0x50
 8007422:	1e4a      	subs	r2, r1, #1
 8007424:	f04f 0e00 	mov.w	lr, #0
 8007428:	4659      	mov	r1, fp
 800742a:	4605      	mov	r5, r0
      for (int in_h = 0; in_h < input_height; ++in_h) {
 800742c:	2e00      	cmp	r6, #0
 800742e:	f340 8090 	ble.w	8007552 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2aa>
 8007432:	e9cd 1200 	strd	r1, r2, [sp]
      int32_t acc = 0;
 8007436:	2000      	movs	r0, #0
 8007438:	eb05 0b0e 	add.w	fp, r5, lr
      for (int in_h = 0; in_h < input_height; ++in_h) {
 800743c:	4607      	mov	r7, r0
        for (int in_w = 0; in_w < input_width; ++in_w) {
 800743e:	2c00      	cmp	r4, #0
 8007440:	dd10      	ble.n	8007464 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1bc>
 8007442:	45c2      	cmp	sl, r8
 8007444:	f340 80c5 	ble.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
 8007448:	45e6      	cmp	lr, ip
 800744a:	f280 80c2 	bge.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
 800744e:	42be      	cmp	r6, r7
 8007450:	f340 80bf 	ble.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
 8007454:	465a      	mov	r2, fp
 8007456:	2300      	movs	r3, #0
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
 8007458:	7811      	ldrb	r1, [r2, #0]
        for (int in_w = 0; in_w < input_width; ++in_w) {
 800745a:	3301      	adds	r3, #1
 800745c:	42a3      	cmp	r3, r4
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
 800745e:	4408      	add	r0, r1
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8007460:	4462      	add	r2, ip
 8007462:	d1f9      	bne.n	8007458 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1b0>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8007464:	3701      	adds	r7, #1
 8007466:	42b7      	cmp	r7, r6
 8007468:	44cb      	add	fp, r9
 800746a:	d1e8      	bne.n	800743e <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x196>
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800746c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800746e:	fa00 f303 	lsl.w	r3, r0, r3
  int right_shift = shift > 0 ? 0 : -shift;
 8007472:	9802      	ldr	r0, [sp, #8]
 8007474:	2800      	cmp	r0, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8007476:	e9dd 1200 	ldrd	r1, r2, [sp]
  int right_shift = shift > 0 ? 0 : -shift;
 800747a:	dd50      	ble.n	800751e <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x276>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800747c:	4299      	cmp	r1, r3
 800747e:	d076      	beq.n	800756e <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2c6>
  std::int64_t ab_64 = a_64 * b_64;
 8007480:	fb83 3001 	smull	r3, r0, r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8007484:	2800      	cmp	r0, #0
 8007486:	db79      	blt.n	800757c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2d4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8007488:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 800748c:	f140 0000 	adc.w	r0, r0, #0
 8007490:	0fdb      	lsrs	r3, r3, #31
 8007492:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
 8007496:	f04f 0b00 	mov.w	fp, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800749a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800749c:	fa00 f00b 	lsl.w	r0, r0, fp
 80074a0:	3801      	subs	r0, #1
  return a >> offset;
 80074a2:	1047      	asrs	r7, r0, #1
  return a + b;
 80074a4:	eb07 77d3 	add.w	r7, r7, r3, lsr #31
  return a & b;
 80074a8:	4018      	ands	r0, r3
  return a >> offset;
 80074aa:	fa43 f30b 	asr.w	r3, r3, fp
  return a + b;
 80074ae:	4287      	cmp	r7, r0
 80074b0:	bfb8      	it	lt
 80074b2:	3301      	addlt	r3, #1
      acc += bias;
 80074b4:	9806      	ldr	r0, [sp, #24]
 80074b6:	4403      	add	r3, r0
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 80074b8:	9804      	ldr	r0, [sp, #16]
 80074ba:	2804      	cmp	r0, #4
 80074bc:	f383 0308 	usat	r3, #8, r3
 80074c0:	f040 8087 	bne.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 80074c4:	9805      	ldr	r0, [sp, #20]
 80074c6:	4540      	cmp	r0, r8
 80074c8:	f340 8083 	ble.w	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 80074cc:	9807      	ldr	r0, [sp, #28]
 80074ce:	2800      	cmp	r0, #0
 80074d0:	dd7f      	ble.n	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 80074d2:	9808      	ldr	r0, [sp, #32]
 80074d4:	2800      	cmp	r0, #0
 80074d6:	dd7c      	ble.n	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 80074d8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074da:	4586      	cmp	lr, r0
 80074dc:	da79      	bge.n	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
      acc = std::min(std::max(acc, kMinValue), kMaxValue);
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 80074de:	f802 3f01 	strb.w	r3, [r2, #1]!
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 80074e2:	9b03      	ldr	r3, [sp, #12]
 80074e4:	f10e 0e01 	add.w	lr, lr, #1
 80074e8:	459e      	cmp	lr, r3
 80074ea:	d19f      	bne.n	800742c <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x184>
 80074ec:	468b      	mov	fp, r1
 80074ee:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	@ 0x48
 80074f2:	e9dd 7114 	ldrd	r7, r1, [sp, #80]	@ 0x50
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 80074f6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80074f8:	f108 0801 	add.w	r8, r8, #1
 80074fc:	4590      	cmp	r8, r2
 80074fe:	4439      	add	r1, r7
 8007500:	442b      	add	r3, r5
 8007502:	d185      	bne.n	8007410 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x168>
    if (size_ > kMaxSmallSize) {
 8007504:	9b04      	ldr	r3, [sp, #16]
 8007506:	2b05      	cmp	r3, #5
 8007508:	dd04      	ble.n	8007514 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x26c>
      delete[] dims_pointer_;
 800750a:	9b05      	ldr	r3, [sp, #20]
 800750c:	b113      	cbz	r3, 8007514 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x26c>
 800750e:	4618      	mov	r0, r3
 8007510:	f009 fa00 	bl	8010914 <_ZdaPv>
          static_cast<uint8_t>(acc);
    }
  }
}
 8007514:	b025      	add	sp, #148	@ 0x94
 8007516:	ecbd 8b04 	vpop	{d8-d9}
 800751a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800751e:	4299      	cmp	r1, r3
 8007520:	d039      	beq.n	8007596 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2ee>
  std::int64_t ab_64 = a_64 * b_64;
 8007522:	fb83 3001 	smull	r3, r0, r3, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8007526:	2800      	cmp	r0, #0
 8007528:	da19      	bge.n	800755e <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2b6>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800752a:	4f2e      	ldr	r7, [pc, #184]	@ (80075e4 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x33c>)
 800752c:	19db      	adds	r3, r3, r7
 800752e:	f160 0000 	sbc.w	r0, r0, #0
 8007532:	2800      	cmp	r0, #0
 8007534:	da05      	bge.n	8007542 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x29a>
 8007536:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800753a:	19df      	adds	r7, r3, r7
 800753c:	463b      	mov	r3, r7
 800753e:	f140 0000 	adc.w	r0, r0, #0
 8007542:	0fdb      	lsrs	r3, r3, #31
 8007544:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  assert(exponent <= 31);
 8007548:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800754a:	281f      	cmp	r0, #31
 800754c:	dc43      	bgt.n	80075d6 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32e>
 800754e:	4683      	mov	fp, r0
 8007550:	e7a3      	b.n	800749a <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1f2>
 8007552:	9b02      	ldr	r3, [sp, #8]
 8007554:	2b00      	cmp	r3, #0
  std::int64_t ab_64 = a_64 * b_64;
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	dc9c      	bgt.n	8007496 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1ee>
 800755c:	4618      	mov	r0, r3
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800755e:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 8007562:	f140 0000 	adc.w	r0, r0, #0
 8007566:	0fdb      	lsrs	r3, r3, #31
 8007568:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800756c:	e7ec      	b.n	8007548 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2a0>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800756e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8007572:	d016      	beq.n	80075a2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x2fa>
  std::int64_t ab_64 = a_64 * b_64;
 8007574:	fb81 3001 	smull	r3, r0, r1, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8007578:	2800      	cmp	r0, #0
 800757a:	da85      	bge.n	8007488 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1e0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800757c:	4f19      	ldr	r7, [pc, #100]	@ (80075e4 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x33c>)
 800757e:	19db      	adds	r3, r3, r7
 8007580:	f160 0000 	sbc.w	r0, r0, #0
 8007584:	2800      	cmp	r0, #0
 8007586:	da83      	bge.n	8007490 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1e8>
 8007588:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 800758c:	19df      	adds	r7, r3, r7
 800758e:	463b      	mov	r3, r7
 8007590:	f140 0000 	adc.w	r0, r0, #0
 8007594:	e77c      	b.n	8007490 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x1e8>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8007596:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800759a:	d1c2      	bne.n	8007522 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x27a>
 800759c:	4603      	mov	r3, r0
  assert(exponent <= 31);
 800759e:	331f      	adds	r3, #31
 80075a0:	db19      	blt.n	80075d6 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32e>
 80075a2:	e9dd b70d 	ldrd	fp, r7, [sp, #52]	@ 0x34
  return a & b;
 80075a6:	980c      	ldr	r0, [sp, #48]	@ 0x30
  assert(exponent <= 31);
 80075a8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80075ac:	e77d      	b.n	80074aa <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x202>
    TFLITE_DCHECK_LT(i, size_);
 80075ae:	2a01      	cmp	r2, #1
 80075b0:	d00f      	beq.n	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
 80075b2:	2a02      	cmp	r2, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80075b4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
    TFLITE_DCHECK_LT(i, size_);
 80075b6:	d00c      	beq.n	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
 80075b8:	2a03      	cmp	r2, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80075ba:	9f21      	ldr	r7, [sp, #132]	@ 0x84
    TFLITE_DCHECK_LT(i, size_);
 80075bc:	d009      	beq.n	80075d2 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x32a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80075be:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80075c0:	9203      	str	r2, [sp, #12]
 80075c2:	9a05      	ldr	r2, [sp, #20]
 80075c4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80075c6:	e6b8      	b.n	800733a <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x92>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 80075c8:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 80075cc:	2a02      	cmp	r2, #2
 80075ce:	f43f aece 	beq.w	800736e <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0xc6>
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 80075d2:	f009 fc73 	bl	8010ebc <abort>
 80075d6:	4b04      	ldr	r3, [pc, #16]	@ (80075e8 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x340>)
 80075d8:	4a04      	ldr	r2, [pc, #16]	@ (80075ec <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x344>)
 80075da:	4805      	ldr	r0, [pc, #20]	@ (80075f0 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf+0x348>)
 80075dc:	f240 1167 	movw	r1, #359	@ 0x167
 80075e0:	f009 fc74 	bl	8010ecc <__assert_func>
 80075e4:	c0000001 	.word	0xc0000001
 80075e8:	080165c4 	.word	0x080165c4
 80075ec:	080165d4 	.word	0x080165d4
 80075f0:	08016630 	.word	0x08016630

080075f4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {
 80075f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075f6:	460d      	mov	r5, r1
 80075f8:	b085      	sub	sp, #20
  const TfLiteTensor* input = GetInput(context, node, 0);
 80075fa:	2200      	movs	r2, #0
TfLiteStatus PrepareSimple(TfLiteContext* context, TfLiteNode* node) {
 80075fc:	4604      	mov	r4, r0
  const TfLiteTensor* input = GetInput(context, node, 0);
 80075fe:	f7fc fc4f 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE_EQ(context, node->inputs->size, 2);
 8007602:	682b      	ldr	r3, [r5, #0]
 8007604:	681f      	ldr	r7, [r3, #0]
 8007606:	2f02      	cmp	r7, #2
 8007608:	d00f      	beq.n	800762a <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x36>
 800760a:	4a35      	ldr	r2, [pc, #212]	@ (80076e0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xec>)
 800760c:	4b35      	ldr	r3, [pc, #212]	@ (80076e4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xf0>)
 800760e:	2102      	movs	r1, #2
 8007610:	9103      	str	r1, [sp, #12]
 8007612:	6965      	ldr	r5, [r4, #20]
 8007614:	4934      	ldr	r1, [pc, #208]	@ (80076e8 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xf4>)
 8007616:	9300      	str	r3, [sp, #0]
 8007618:	e9cd 2701 	strd	r2, r7, [sp, #4]
 800761c:	233e      	movs	r3, #62	@ 0x3e
 800761e:	4a33      	ldr	r2, [pc, #204]	@ (80076ec <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xf8>)
 8007620:	4620      	mov	r0, r4
 8007622:	47a8      	blx	r5
 8007624:	2001      	movs	r0, #1
}
 8007626:	b005      	add	sp, #20
 8007628:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800762a:	686b      	ldr	r3, [r5, #4]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	2a01      	cmp	r2, #1
 8007630:	d00d      	beq.n	800764e <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x5a>
 8007632:	492f      	ldr	r1, [pc, #188]	@ (80076f0 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xfc>)
 8007634:	4b2f      	ldr	r3, [pc, #188]	@ (80076f4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x100>)
 8007636:	2001      	movs	r0, #1
 8007638:	9003      	str	r0, [sp, #12]
 800763a:	6965      	ldr	r5, [r4, #20]
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8007642:	233f      	movs	r3, #63	@ 0x3f
 8007644:	4a29      	ldr	r2, [pc, #164]	@ (80076ec <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xf8>)
 8007646:	4928      	ldr	r1, [pc, #160]	@ (80076e8 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xf4>)
 8007648:	4620      	mov	r0, r4
 800764a:	47a8      	blx	r5
 800764c:	e7ea      	b.n	8007624 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x30>
  const TfLiteTensor* axis = GetInput(context, node, 1);
 800764e:	4606      	mov	r6, r0
 8007650:	4629      	mov	r1, r5
 8007652:	4620      	mov	r0, r4
 8007654:	f7fc fc24 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, axis != nullptr);
 8007658:	b1d0      	cbz	r0, 8007690 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x9c>
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
 800765a:	7800      	ldrb	r0, [r0, #0]
 800765c:	2802      	cmp	r0, #2
 800765e:	d104      	bne.n	800766a <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x76>
  if (input->type == kTfLiteInt8) {
 8007660:	7833      	ldrb	r3, [r6, #0]
 8007662:	2b09      	cmp	r3, #9
 8007664:	d01d      	beq.n	80076a2 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xae>
  return kTfLiteOk;
 8007666:	2000      	movs	r0, #0
 8007668:	e7dd      	b.n	8007626 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x32>
  TF_LITE_ENSURE_TYPES_EQ(context, axis->type, kTfLiteInt32);
 800766a:	6966      	ldr	r6, [r4, #20]
 800766c:	f7fc f84c 	bl	8003708 <TfLiteTypeGetName>
 8007670:	4605      	mov	r5, r0
 8007672:	4638      	mov	r0, r7
 8007674:	f7fc f848 	bl	8003708 <TfLiteTypeGetName>
 8007678:	491f      	ldr	r1, [pc, #124]	@ (80076f8 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x104>)
 800767a:	4b20      	ldr	r3, [pc, #128]	@ (80076fc <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x108>)
 800767c:	4a1b      	ldr	r2, [pc, #108]	@ (80076ec <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xf8>)
 800767e:	e9cd 3100 	strd	r3, r1, [sp]
 8007682:	e9cd 5002 	strd	r5, r0, [sp, #8]
 8007686:	491e      	ldr	r1, [pc, #120]	@ (8007700 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x10c>)
 8007688:	2344      	movs	r3, #68	@ 0x44
 800768a:	4620      	mov	r0, r4
 800768c:	47b0      	blx	r6
 800768e:	e7c9      	b.n	8007624 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE(context, axis != nullptr);
 8007690:	4b1c      	ldr	r3, [pc, #112]	@ (8007704 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x110>)
 8007692:	6965      	ldr	r5, [r4, #20]
 8007694:	4a15      	ldr	r2, [pc, #84]	@ (80076ec <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0xf8>)
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	491b      	ldr	r1, [pc, #108]	@ (8007708 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x114>)
 800769a:	2343      	movs	r3, #67	@ 0x43
 800769c:	4620      	mov	r0, r4
 800769e:	47a8      	blx	r5
 80076a0:	e7c0      	b.n	8007624 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x30>
    const TfLiteTensor* output = GetOutput(context, node, 0);
 80076a2:	2200      	movs	r2, #0
 80076a4:	4629      	mov	r1, r5
 80076a6:	4620      	mov	r0, r4
    OpData* data = static_cast<OpData*>(node->user_data);
 80076a8:	692f      	ldr	r7, [r5, #16]
    const TfLiteTensor* output = GetOutput(context, node, 0);
 80076aa:	f7fc fc15 	bl	8003ed8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80076ae:	4603      	mov	r3, r0
    const double real_multiplier = static_cast<double>(input->params.scale) /
 80076b0:	68f0      	ldr	r0, [r6, #12]
    const TfLiteTensor* output = GetOutput(context, node, 0);
 80076b2:	461e      	mov	r6, r3
    const double real_multiplier = static_cast<double>(input->params.scale) /
 80076b4:	f7f8 ff52 	bl	800055c <__aeabi_f2d>
 80076b8:	4604      	mov	r4, r0
                                   static_cast<double>(output->params.scale);
 80076ba:	68f0      	ldr	r0, [r6, #12]
    const double real_multiplier = static_cast<double>(input->params.scale) /
 80076bc:	460d      	mov	r5, r1
                                   static_cast<double>(output->params.scale);
 80076be:	f7f8 ff4d 	bl	800055c <__aeabi_f2d>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
    const double real_multiplier = static_cast<double>(input->params.scale) /
 80076c6:	4620      	mov	r0, r4
 80076c8:	4629      	mov	r1, r5
 80076ca:	f7f9 f8c9 	bl	8000860 <__aeabi_ddiv>
    QuantizeMultiplier(real_multiplier, &data->multiplier, &data->shift);
 80076ce:	1d3c      	adds	r4, r7, #4
    const double real_multiplier = static_cast<double>(input->params.scale) /
 80076d0:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, &data->multiplier, &data->shift);
 80076d4:	4621      	mov	r1, r4
 80076d6:	4638      	mov	r0, r7
 80076d8:	f7fc fae4 	bl	8003ca4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
 80076dc:	e7c3      	b.n	8007666 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode+0x72>
 80076de:	bf00      	nop
 80076e0:	080152ec 	.word	0x080152ec
 80076e4:	08016668 	.word	0x08016668
 80076e8:	08015314 	.word	0x08015314
 80076ec:	08016144 	.word	0x08016144
 80076f0:	08017230 	.word	0x08017230
 80076f4:	0801667c 	.word	0x0801667c
 80076f8:	080166a0 	.word	0x080166a0
 80076fc:	080166b0 	.word	0x080166b0
 8007700:	08016178 	.word	0x08016178
 8007704:	08016690 	.word	0x08016690
 8007708:	080152b4 	.word	0x080152b4

0800770c <_ZN6tflite3ops5micro6reduce10PrepareMaxEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus PrepareMax(TfLiteContext* context, TfLiteNode* node) {
 800770c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007710:	4604      	mov	r4, r0
 8007712:	4688      	mov	r8, r1
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
 8007714:	f7ff ff6e 	bl	80075f4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>
 8007718:	4605      	mov	r5, r0
 800771a:	b110      	cbz	r0, 8007722 <_ZN6tflite3ops5micro6reduce10PrepareMaxEP13TfLiteContextP10TfLiteNode+0x16>
}
 800771c:	4628      	mov	r0, r5
 800771e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  const TfLiteTensor* input = GetInput(context, node, 0);
 8007722:	4602      	mov	r2, r0
 8007724:	4641      	mov	r1, r8
 8007726:	4620      	mov	r0, r4
  OpData* op_data = static_cast<OpData*>(node->user_data);
 8007728:	f8d8 6010 	ldr.w	r6, [r8, #16]
  const TfLiteTensor* input = GetInput(context, node, 0);
 800772c:	f7fc fbb8 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteTensor* output = GetOutput(context, node, 0);
 8007730:	4641      	mov	r1, r8
  const TfLiteTensor* input = GetInput(context, node, 0);
 8007732:	4607      	mov	r7, r0
  const TfLiteTensor* output = GetOutput(context, node, 0);
 8007734:	462a      	mov	r2, r5
 8007736:	4620      	mov	r0, r4
 8007738:	f7fc fbce 	bl	8003ed8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  const TfLiteTensor* axis = GetInput(context, node, 1);
 800773c:	4641      	mov	r1, r8
  const TfLiteTensor* output = GetOutput(context, node, 0);
 800773e:	4681      	mov	r9, r0
  const TfLiteTensor* axis = GetInput(context, node, 1);
 8007740:	2201      	movs	r2, #1
 8007742:	4620      	mov	r0, r4
 8007744:	f7fc fbac 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8007748:	4680      	mov	r8, r0
  }
  return count;
}

inline int64_t NumElements(const TfLiteTensor* t) {
  return NumElements(t->dims);
 800774a:	f8d9 0008 	ldr.w	r0, [r9, #8]
  op_data->output_scale = output->params.scale;
 800774e:	f8d9 200c 	ldr.w	r2, [r9, #12]
  for (int i = 0; i < dims->size; ++i) {
 8007752:	f8d0 c000 	ldr.w	ip, [r0]
  op_data->input_scale = input->params.scale;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	6173      	str	r3, [r6, #20]
 800775a:	f1bc 0f00 	cmp.w	ip, #0
  op_data->output_scale = output->params.scale;
 800775e:	61f2      	str	r2, [r6, #28]
  int64_t count = 1;
 8007760:	f04f 0101 	mov.w	r1, #1
  for (int i = 0; i < dims->size; ++i) {
 8007764:	dd07      	ble.n	8007776 <_ZN6tflite3ops5micro6reduce10PrepareMaxEP13TfLiteContextP10TfLiteNode+0x6a>
 8007766:	462a      	mov	r2, r5
    count *= dims->data[i];
 8007768:	f850 3f04 	ldr.w	r3, [r0, #4]!
  for (int i = 0; i < dims->size; ++i) {
 800776c:	3201      	adds	r2, #1
 800776e:	4562      	cmp	r2, ip
    count *= dims->data[i];
 8007770:	fba1 1303 	umull	r1, r3, r1, r3
  for (int i = 0; i < dims->size; ++i) {
 8007774:	d1f8      	bne.n	8007768 <_ZN6tflite3ops5micro6reduce10PrepareMaxEP13TfLiteContextP10TfLiteNode+0x5c>
  context->RequestScratchBufferInArena(context, sizeof(int) * input->dims->size,
 8007776:	68bb      	ldr	r3, [r7, #8]
  op_data->num_output_elements = NumElements(output);
 8007778:	6231      	str	r1, [r6, #32]
  context->RequestScratchBufferInArena(context, sizeof(int) * input->dims->size,
 800777a:	6819      	ldr	r1, [r3, #0]
 800777c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800777e:	f106 0208 	add.w	r2, r6, #8
 8007782:	0089      	lsls	r1, r1, #2
 8007784:	4620      	mov	r0, r4
 8007786:	4798      	blx	r3
      context, sizeof(int) * static_cast<int>(ElementCount(*axis->dims)),
 8007788:	f8d8 0008 	ldr.w	r0, [r8, #8]
  context->RequestScratchBufferInArena(
 800778c:	6c27      	ldr	r7, [r4, #64]	@ 0x40
      context, sizeof(int) * static_cast<int>(ElementCount(*axis->dims)),
 800778e:	f7fe ffb1 	bl	80066f4 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
  context->RequestScratchBufferInArena(
 8007792:	f106 020c 	add.w	r2, r6, #12
 8007796:	0081      	lsls	r1, r0, #2
 8007798:	4620      	mov	r0, r4
 800779a:	47b8      	blx	r7
}
 800779c:	4628      	mov	r0, r5
 800779e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077a2:	bf00      	nop

080077a4 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus PrepareMeanOrSum(TfLiteContext* context, TfLiteNode* node) {
 80077a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  const TfLiteTensor* input = GetInput(context, node, 0);
 80077a8:	2200      	movs	r2, #0
TfLiteStatus PrepareMeanOrSum(TfLiteContext* context, TfLiteNode* node) {
 80077aa:	460d      	mov	r5, r1
 80077ac:	4604      	mov	r4, r0
  const TfLiteTensor* input = GetInput(context, node, 0);
 80077ae:	f7fc fb77 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80077b2:	4606      	mov	r6, r0
  const TfLiteTensor* output = GetOutput(context, node, 0);
 80077b4:	2200      	movs	r2, #0
 80077b6:	4629      	mov	r1, r5
 80077b8:	4620      	mov	r0, r4
  OpData* op_data = reinterpret_cast<OpData*>(node->user_data);
 80077ba:	f8d5 a010 	ldr.w	sl, [r5, #16]
  const TfLiteTensor* output = GetOutput(context, node, 0);
 80077be:	f7fc fb8b 	bl	8003ed8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  if (input->type == kTfLiteInt8) {
 80077c2:	f896 e000 	ldrb.w	lr, [r6]
 80077c6:	f1be 0f09 	cmp.w	lr, #9
  const TfLiteTensor* output = GetOutput(context, node, 0);
 80077ca:	4607      	mov	r7, r0
  if (input->type == kTfLiteInt8) {
 80077cc:	d034      	beq.n	8007838 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x94>
  return NumElements(t->dims);
 80077ce:	6880      	ldr	r0, [r0, #8]
  for (int i = 0; i < dims->size; ++i) {
 80077d0:	f8d0 c000 	ldr.w	ip, [r0]
 80077d4:	f1bc 0f00 	cmp.w	ip, #0
  int64_t count = 1;
 80077d8:	bfd8      	it	le
 80077da:	2101      	movle	r1, #1
  for (int i = 0; i < dims->size; ++i) {
 80077dc:	dd0b      	ble.n	80077f6 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x52>
  int64_t count = 1;
 80077de:	2101      	movs	r1, #1
  for (int i = 0; i < dims->size; ++i) {
 80077e0:	2200      	movs	r2, #0
    count *= dims->data[i];
 80077e2:	f850 3f04 	ldr.w	r3, [r0, #4]!
  for (int i = 0; i < dims->size; ++i) {
 80077e6:	3201      	adds	r2, #1
 80077e8:	4562      	cmp	r2, ip
    count *= dims->data[i];
 80077ea:	fba1 1303 	umull	r1, r3, r1, r3
  for (int i = 0; i < dims->size; ++i) {
 80077ee:	dbf8      	blt.n	80077e2 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x3e>
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8) {
 80077f0:	f1be 0f09 	cmp.w	lr, #9
 80077f4:	d008      	beq.n	8007808 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x64>
 80077f6:	f1be 0f03 	cmp.w	lr, #3
 80077fa:	d005      	beq.n	8007808 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x64>
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
 80077fc:	4629      	mov	r1, r5
 80077fe:	4620      	mov	r0, r4
}
 8007800:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
 8007804:	f7ff bef6 	b.w	80075f4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>
    context->RequestScratchBufferInArena(context, output_size * sizeof(int32_t),
 8007808:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800780a:	f10a 0208 	add.w	r2, sl, #8
 800780e:	0089      	lsls	r1, r1, #2
 8007810:	4620      	mov	r0, r4
 8007812:	4798      	blx	r3
    op_data->input_scale = input->params.scale;
 8007814:	68f3      	ldr	r3, [r6, #12]
    op_data->input_zp = input->params.zero_point;
 8007816:	6932      	ldr	r2, [r6, #16]
 8007818:	f8ca 2010 	str.w	r2, [sl, #16]
    op_data->input_scale = input->params.scale;
 800781c:	f8ca 3014 	str.w	r3, [sl, #20]
    op_data->output_zp = output->params.zero_point;
 8007820:	693a      	ldr	r2, [r7, #16]
    op_data->output_scale = output->params.scale;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8ca 301c 	str.w	r3, [sl, #28]
    op_data->output_zp = output->params.zero_point;
 8007828:	f8ca 2018 	str.w	r2, [sl, #24]
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
 800782c:	4629      	mov	r1, r5
 800782e:	4620      	mov	r0, r4
}
 8007830:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TF_LITE_ENSURE_OK(context, PrepareSimple(context, node));
 8007834:	f7ff bede 	b.w	80075f4 <_ZN6tflite3ops5micro6reduce13PrepareSimpleEP13TfLiteContextP10TfLiteNode>
    const double real_multiplier = static_cast<double>(input->params.scale) /
 8007838:	68f0      	ldr	r0, [r6, #12]
 800783a:	f7f8 fe8f 	bl	800055c <__aeabi_f2d>
 800783e:	4680      	mov	r8, r0
                                   static_cast<double>(output->params.scale);
 8007840:	68f8      	ldr	r0, [r7, #12]
    const double real_multiplier = static_cast<double>(input->params.scale) /
 8007842:	4689      	mov	r9, r1
                                   static_cast<double>(output->params.scale);
 8007844:	f7f8 fe8a 	bl	800055c <__aeabi_f2d>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
    const double real_multiplier = static_cast<double>(input->params.scale) /
 800784c:	4640      	mov	r0, r8
 800784e:	4649      	mov	r1, r9
 8007850:	f7f9 f806 	bl	8000860 <__aeabi_ddiv>
    QuantizeMultiplier(real_multiplier, &op_data->multiplier, &op_data->shift);
 8007854:	f10a 0804 	add.w	r8, sl, #4
    const double real_multiplier = static_cast<double>(input->params.scale) /
 8007858:	ec41 0b10 	vmov	d0, r0, r1
    QuantizeMultiplier(real_multiplier, &op_data->multiplier, &op_data->shift);
 800785c:	4650      	mov	r0, sl
 800785e:	4641      	mov	r1, r8
 8007860:	f7fc fa20 	bl	8003ca4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  return NumElements(t->dims);
 8007864:	68b8      	ldr	r0, [r7, #8]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8) {
 8007866:	f896 e000 	ldrb.w	lr, [r6]
  for (int i = 0; i < dims->size; ++i) {
 800786a:	f8d0 c000 	ldr.w	ip, [r0]
 800786e:	f1bc 0f00 	cmp.w	ip, #0
 8007872:	dcb4      	bgt.n	80077de <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x3a>
  int64_t count = 1;
 8007874:	2101      	movs	r1, #1
 8007876:	e7bb      	b.n	80077f0 <_ZN6tflite3ops5micro6reduce16PrepareMeanOrSumEP13TfLiteContextP10TfLiteNode+0x4c>

08007878 <_ZN6tflite3ops5micro13Register_MEANEv>:

}  // namespace reduce

TfLiteRegistration Register_MEAN() {
 8007878:	b510      	push	{r4, lr}
          /*prepare=*/reduce::PrepareMeanOrSum,
          /*invoke=*/reduce::EvalMean,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800787a:	4c06      	ldr	r4, [pc, #24]	@ (8007894 <_ZN6tflite3ops5micro13Register_MEANEv+0x1c>)
TfLiteRegistration Register_MEAN() {
 800787c:	4686      	mov	lr, r0
          /*version=*/0};
 800787e:	4684      	mov	ip, r0
 8007880:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007882:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8007886:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800788a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 800788e:	4670      	mov	r0, lr
 8007890:	bd10      	pop	{r4, pc}
 8007892:	bf00      	nop
 8007894:	08013c80 	.word	0x08013c80

08007898 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>:
inline void Mean(const tflite::MeanParams& op_params,
 8007898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800789c:	460c      	mov	r4, r1
 800789e:	b099      	sub	sp, #100	@ 0x64
 80078a0:	461f      	mov	r7, r3
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 80078a2:	6823      	ldr	r3, [r4, #0]
inline void Mean(const tflite::MeanParams& op_params,
 80078a4:	9922      	ldr	r1, [sp, #136]	@ 0x88
 80078a6:	9108      	str	r1, [sp, #32]
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 80078a8:	2b04      	cmp	r3, #4
 80078aa:	f040 80ec 	bne.w	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
  inline int32_t DimensionsCount() const { return size_; }
 80078ae:	f8d7 c000 	ldr.w	ip, [r7]
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
 80078b2:	f1bc 0f04 	cmp.w	ip, #4
 80078b6:	f300 80e6 	bgt.w	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 80078ba:	68a1      	ldr	r1, [r4, #8]
    size_ = dimensions_count;
 80078bc:	930c      	str	r3, [sp, #48]	@ 0x30
  inline int32_t DimensionsCount() const { return size_; }
 80078be:	4605      	mov	r5, r0
 80078c0:	4616      	mov	r6, r2
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 80078c2:	6860      	ldr	r0, [r4, #4]
 80078c4:	68e2      	ldr	r2, [r4, #12]
    size_ = dimensions_count;
 80078c6:	9312      	str	r3, [sp, #72]	@ 0x48
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 80078c8:	6923      	ldr	r3, [r4, #16]
 80078ca:	ac0d      	add	r4, sp, #52	@ 0x34
 80078cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    for (int i = 0; i < size_increase; ++i) {
 80078ce:	f1dc 0004 	rsbs	r0, ip, #4
 80078d2:	d00d      	beq.n	80078f0 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x58>
      dims_[i] = val;
 80078d4:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
 80078d6:	4298      	cmp	r0, r3
      dims_[i] = val;
 80078d8:	9313      	str	r3, [sp, #76]	@ 0x4c
    for (int i = 0; i < size_increase; ++i) {
 80078da:	d009      	beq.n	80078f0 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x58>
 80078dc:	2802      	cmp	r0, #2
      dims_[i] = val;
 80078de:	9314      	str	r3, [sp, #80]	@ 0x50
    for (int i = 0; i < size_increase; ++i) {
 80078e0:	d006      	beq.n	80078f0 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x58>
 80078e2:	2803      	cmp	r0, #3
      dims_[i] = val;
 80078e4:	9315      	str	r3, [sp, #84]	@ 0x54
    for (int i = 0; i < size_increase; ++i) {
 80078e6:	d003      	beq.n	80078f0 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x58>
 80078e8:	2804      	cmp	r0, #4
      dims_[i] = val;
 80078ea:	9316      	str	r3, [sp, #88]	@ 0x58
    for (int i = 0; i < size_increase; ++i) {
 80078ec:	f040 80cb 	bne.w	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 80078f0:	ab13      	add	r3, sp, #76	@ 0x4c
 80078f2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80078f6:	ea4f 028c 	mov.w	r2, ip, lsl #2
 80078fa:	1d39      	adds	r1, r7, #4
 80078fc:	f00a fb25 	bl	8011f4a <memcpy>
    TFLITE_DCHECK_LT(i, size_);
 8007900:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007902:	9302      	str	r3, [sp, #8]
 8007904:	2b00      	cmp	r3, #0
 8007906:	f340 80be 	ble.w	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800790a:	2b05      	cmp	r3, #5
 800790c:	f8dd b04c 	ldr.w	fp, [sp, #76]	@ 0x4c
 8007910:	f340 80a7 	ble.w	8007a62 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ca>
 8007914:	e9db 3102 	ldrd	r3, r1, [fp, #8]
 8007918:	e9db e200 	ldrd	lr, r2, [fp]
 800791c:	9101      	str	r1, [sp, #4]
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 800791e:	f995 0000 	ldrsb.w	r0, [r5]
 8007922:	2802      	cmp	r0, #2
 8007924:	e9dd 410e 	ldrd	r4, r1, [sp, #56]	@ 0x38
 8007928:	f040 80ad 	bne.w	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 800792c:	f9b5 0002 	ldrsh.w	r0, [r5, #2]
 8007930:	2801      	cmp	r0, #1
 8007932:	f000 80a3 	beq.w	8007a7c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1e4>
 8007936:	2802      	cmp	r0, #2
 8007938:	f040 80a5 	bne.w	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
 800793c:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8007940:	2801      	cmp	r0, #1
 8007942:	f040 80a0 	bne.w	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
  TFLITE_CHECK_EQ(output_height, 1);
 8007946:	2a01      	cmp	r2, #1
 8007948:	f040 809d 	bne.w	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
  TFLITE_CHECK_EQ(output_width, 1);
 800794c:	2b01      	cmp	r3, #1
 800794e:	f040 809a 	bne.w	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8007952:	f1be 0f00 	cmp.w	lr, #0
 8007956:	dd75      	ble.n	8007a44 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ac>
          value / (input_width * input_height);
 8007958:	fb01 f304 	mul.w	r3, r1, r4
 800795c:	ee06 3a10 	vmov	s12, r3
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8007960:	9a15      	ldr	r2, [sp, #84]	@ 0x54
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8007962:	9b14      	ldr	r3, [sp, #80]	@ 0x50
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007964:	9816      	ldr	r0, [sp, #88]	@ 0x58
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8007966:	9303      	str	r3, [sp, #12]
 8007968:	fb02 f303 	mul.w	r3, r2, r3
 800796c:	fb00 f303 	mul.w	r3, r0, r3
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007970:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8007974:	9307      	str	r3, [sp, #28]
 8007976:	ee16 3a10 	vmov	r3, s12
 800797a:	fb08 f303 	mul.w	r3, r8, r3
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	9306      	str	r3, [sp, #24]
 8007982:	fb08 f701 	mul.w	r7, r8, r1
 8007986:	2300      	movs	r3, #0
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8007988:	f8dd 9034 	ldr.w	r9, [sp, #52]	@ 0x34
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800798c:	9005      	str	r0, [sp, #20]
 800798e:	46b4      	mov	ip, r6
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8007990:	9204      	str	r2, [sp, #16]
 8007992:	00bf      	lsls	r7, r7, #2
 8007994:	ea4f 0088 	mov.w	r0, r8, lsl #2
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8007998:	461e      	mov	r6, r3
 800799a:	4675      	mov	r5, lr
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 800799c:	9a01      	ldr	r2, [sp, #4]
 800799e:	2a00      	cmp	r2, #0
 80079a0:	dd49      	ble.n	8007a36 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x19e>
 80079a2:	9a08      	ldr	r2, [sp, #32]
 80079a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079a6:	e9cd c509 	strd	ip, r5, [sp, #36]	@ 0x24
 80079aa:	eb02 0a83 	add.w	sl, r2, r3, lsl #2
 80079ae:	f04f 0e00 	mov.w	lr, #0
 80079b2:	4662      	mov	r2, ip
 80079b4:	465d      	mov	r5, fp
      for (int in_h = 0; in_h < input_height; ++in_h) {
 80079b6:	2c00      	cmp	r4, #0
      float value = 0;
 80079b8:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8007a8c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1f4>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 80079bc:	dd1b      	ble.n	80079f6 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x15e>
 80079be:	4693      	mov	fp, r2
 80079c0:	f04f 0c00 	mov.w	ip, #0
 80079c4:	9200      	str	r2, [sp, #0]
        for (int in_w = 0; in_w < input_width; ++in_w) {
 80079c6:	2900      	cmp	r1, #0
 80079c8:	dd0f      	ble.n	80079ea <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x152>
 80079ca:	454e      	cmp	r6, r9
 80079cc:	da5b      	bge.n	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
 80079ce:	45c6      	cmp	lr, r8
 80079d0:	da59      	bge.n	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
 80079d2:	4564      	cmp	r4, ip
 80079d4:	dd57      	ble.n	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
 80079d6:	465a      	mov	r2, fp
 80079d8:	2300      	movs	r3, #0
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
 80079da:	ed92 7a00 	vldr	s14, [r2]
        for (int in_w = 0; in_w < input_width; ++in_w) {
 80079de:	3301      	adds	r3, #1
 80079e0:	428b      	cmp	r3, r1
          value += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)];
 80079e2:	ee77 7a87 	vadd.f32	s15, s15, s14
        for (int in_w = 0; in_w < input_width; ++in_w) {
 80079e6:	4402      	add	r2, r0
 80079e8:	d1f7      	bne.n	80079da <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x142>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 80079ea:	f10c 0c01 	add.w	ip, ip, #1
 80079ee:	45a4      	cmp	ip, r4
 80079f0:	44bb      	add	fp, r7
 80079f2:	d1e8      	bne.n	80079c6 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x12e>
 80079f4:	9a00      	ldr	r2, [sp, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 80079f6:	9b02      	ldr	r3, [sp, #8]
 80079f8:	2b04      	cmp	r3, #4
          value / (input_width * input_height);
 80079fa:	eef8 6ac6 	vcvt.f32.s32	s13, s12
 80079fe:	d142      	bne.n	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8007a00:	42ae      	cmp	r6, r5
 8007a02:	da40      	bge.n	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8007a04:	9b03      	ldr	r3, [sp, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	dd3d      	ble.n	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8007a0a:	9b04      	ldr	r3, [sp, #16]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	dd3a      	ble.n	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007a10:	9b05      	ldr	r3, [sp, #20]
 8007a12:	459e      	cmp	lr, r3
 8007a14:	da37      	bge.n	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
 8007a16:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 8007a1a:	9b01      	ldr	r3, [sp, #4]
 8007a1c:	f10e 0e01 	add.w	lr, lr, #1
 8007a20:	459e      	cmp	lr, r3
 8007a22:	f102 0204 	add.w	r2, r2, #4
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 8007a26:	ecaa 7a01 	vstmia	sl!, {s14}
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 8007a2a:	d1c4      	bne.n	80079b6 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x11e>
 8007a2c:	46ab      	mov	fp, r5
 8007a2e:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
 8007a32:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a34:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8007a36:	9a07      	ldr	r2, [sp, #28]
 8007a38:	3601      	adds	r6, #1
 8007a3a:	4413      	add	r3, r2
 8007a3c:	9a06      	ldr	r2, [sp, #24]
 8007a3e:	42ae      	cmp	r6, r5
 8007a40:	4494      	add	ip, r2
 8007a42:	d1ab      	bne.n	800799c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x104>
    if (size_ > kMaxSmallSize) {
 8007a44:	9b02      	ldr	r3, [sp, #8]
 8007a46:	2b05      	cmp	r3, #5
 8007a48:	dd08      	ble.n	8007a5c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c4>
      delete[] dims_pointer_;
 8007a4a:	f1bb 0f00 	cmp.w	fp, #0
 8007a4e:	d005      	beq.n	8007a5c <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1c4>
 8007a50:	4658      	mov	r0, fp
}
 8007a52:	b019      	add	sp, #100	@ 0x64
 8007a54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a58:	f008 bf5c 	b.w	8010914 <_ZdaPv>
 8007a5c:	b019      	add	sp, #100	@ 0x64
 8007a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    TFLITE_DCHECK_LT(i, size_);
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	4619      	mov	r1, r3
 8007a66:	d00e      	beq.n	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
 8007a68:	2b02      	cmp	r3, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007a6a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
    TFLITE_DCHECK_LT(i, size_);
 8007a6c:	d00b      	beq.n	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
 8007a6e:	2903      	cmp	r1, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007a70:	9b15      	ldr	r3, [sp, #84]	@ 0x54
    TFLITE_DCHECK_LT(i, size_);
 8007a72:	d008      	beq.n	8007a86 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x1ee>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007a74:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8007a76:	9101      	str	r1, [sp, #4]
 8007a78:	46de      	mov	lr, fp
 8007a7a:	e750      	b.n	800791e <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0x86>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8007a7c:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8007a80:	2802      	cmp	r0, #2
 8007a82:	f43f af60 	beq.w	8007946 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_+0xae>
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007a86:	f009 fa19 	bl	8010ebc <abort>
 8007a8a:	bf00      	nop
 8007a8c:	00000000 	.word	0x00000000

08007a90 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l>:

namespace tflite {
namespace reference_integer_ops {

template <typename integer_type>
inline void Mean(const tflite::MeanParams& op_params, int32_t multiplier,
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	b0a7      	sub	sp, #156	@ 0x9c
 8007a96:	4688      	mov	r8, r1
 8007a98:	9203      	str	r2, [sp, #12]
                 const integer_type* input_data, int32_t input_zero_point,
                 const RuntimeShape& unextended_output_shape,
                 integer_type* output_data, int32_t output_zero_point) {
  // Current implementation only supports dimension equals 4 and simultaneous
  // reduction over width and height.
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007a9a:	681a      	ldr	r2, [r3, #0]
inline void Mean(const tflite::MeanParams& op_params, int32_t multiplier,
 8007a9c:	9931      	ldr	r1, [sp, #196]	@ 0xc4
 8007a9e:	9c30      	ldr	r4, [sp, #192]	@ 0xc0
 8007aa0:	9101      	str	r1, [sp, #4]
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007aa2:	2a04      	cmp	r2, #4
inline void Mean(const tflite::MeanParams& op_params, int32_t multiplier,
 8007aa4:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8007aa6:	9414      	str	r4, [sp, #80]	@ 0x50
 8007aa8:	e9dd c632 	ldrd	ip, r6, [sp, #200]	@ 0xc8
 8007aac:	910c      	str	r1, [sp, #48]	@ 0x30
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007aae:	f040 8184 	bne.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
  inline int32_t DimensionsCount() const { return size_; }
 8007ab2:	f8dc 7000 	ldr.w	r7, [ip]
  TFLITE_CHECK_LE(unextended_output_shape.DimensionsCount(), 4);
 8007ab6:	2f04      	cmp	r7, #4
 8007ab8:	f300 817f 	bgt.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 8007abc:	6899      	ldr	r1, [r3, #8]
    size_ = dimensions_count;
 8007abe:	921a      	str	r2, [sp, #104]	@ 0x68
  inline int32_t DimensionsCount() const { return size_; }
 8007ac0:	4605      	mov	r5, r0
    size_ = dimensions_count;
 8007ac2:	9220      	str	r2, [sp, #128]	@ 0x80
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 8007ac4:	6858      	ldr	r0, [r3, #4]
 8007ac6:	68da      	ldr	r2, [r3, #12]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f10d 0e6c 	add.w	lr, sp, #108	@ 0x6c
 8007ace:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    for (int i = 0; i < size_increase; ++i) {
 8007ad2:	f1d7 0004 	rsbs	r0, r7, #4
 8007ad6:	d00d      	beq.n	8007af4 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x64>
      dims_[i] = val;
 8007ad8:	2301      	movs	r3, #1
    for (int i = 0; i < size_increase; ++i) {
 8007ada:	4298      	cmp	r0, r3
      dims_[i] = val;
 8007adc:	9321      	str	r3, [sp, #132]	@ 0x84
    for (int i = 0; i < size_increase; ++i) {
 8007ade:	d009      	beq.n	8007af4 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x64>
 8007ae0:	2802      	cmp	r0, #2
      dims_[i] = val;
 8007ae2:	9322      	str	r3, [sp, #136]	@ 0x88
    for (int i = 0; i < size_increase; ++i) {
 8007ae4:	d006      	beq.n	8007af4 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x64>
 8007ae6:	2803      	cmp	r0, #3
      dims_[i] = val;
 8007ae8:	9323      	str	r3, [sp, #140]	@ 0x8c
    for (int i = 0; i < size_increase; ++i) {
 8007aea:	d003      	beq.n	8007af4 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x64>
 8007aec:	2804      	cmp	r0, #4
      dims_[i] = val;
 8007aee:	9324      	str	r3, [sp, #144]	@ 0x90
    for (int i = 0; i < size_increase; ++i) {
 8007af0:	f040 8163 	bne.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 8007af4:	ab21      	add	r3, sp, #132	@ 0x84
 8007af6:	00ba      	lsls	r2, r7, #2
 8007af8:	f10c 0104 	add.w	r1, ip, #4
 8007afc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007b00:	f00a fa23 	bl	8011f4a <memcpy>
    TFLITE_DCHECK_LT(i, size_);
 8007b04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007b06:	9205      	str	r2, [sp, #20]
 8007b08:	2a00      	cmp	r2, #0
 8007b0a:	f340 8156 	ble.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007b0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b10:	9306      	str	r3, [sp, #24]
 8007b12:	2a05      	cmp	r2, #5
 8007b14:	f340 813f 	ble.w	8007d96 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x306>
 8007b18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007b1c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007b20:	9304      	str	r3, [sp, #16]
 8007b22:	e9dd 7c1c 	ldrd	r7, ip, [sp, #112]	@ 0x70
  const int output_depth = output_shape.Dims(3);
  const int input_height = input_shape.Dims(1);
  const int input_width = input_shape.Dims(2);
  const int num_elements_in_axis = input_width * input_height;

  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 8007b26:	f995 3000 	ldrsb.w	r3, [r5]
  const int num_elements_in_axis = input_width * input_height;
 8007b2a:	fb07 f40c 	mul.w	r4, r7, ip
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 8007b2e:	2b02      	cmp	r3, #2
  const int num_elements_in_axis = input_width * input_height;
 8007b30:	9407      	str	r4, [sp, #28]
  TFLITE_CHECK_EQ(op_params.axis_count, 2);
 8007b32:	f040 8142 	bne.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8007b36:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	f000 8138 	beq.w	8007db0 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x320>
 8007b40:	2b02      	cmp	r3, #2
 8007b42:	f040 813a 	bne.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
 8007b46:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	f040 8135 	bne.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
               (op_params.axis[0] == 2 && op_params.axis[1] == 1));
  TFLITE_CHECK_EQ(output_height, 1);
 8007b50:	2901      	cmp	r1, #1
 8007b52:	f040 8132 	bne.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
  TFLITE_CHECK_EQ(output_width, 1);
 8007b56:	2a01      	cmp	r2, #1
 8007b58:	f040 812f 	bne.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>

  static constexpr int32_t kMinInt = std::numeric_limits<integer_type>::min();
  static constexpr int32_t kMaxInt = std::numeric_limits<integer_type>::max();

  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8007b5c:	2800      	cmp	r0, #0
 8007b5e:	f340 80bd 	ble.w	8007cdc <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x24c>
 8007b62:	9903      	ldr	r1, [sp, #12]
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8007b64:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 8007b66:	9408      	str	r4, [sp, #32]
 8007b68:	424b      	negs	r3, r1
 8007b6a:	2900      	cmp	r1, #0
 8007b6c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b6e:	bfc8      	it	gt
 8007b70:	2300      	movgt	r3, #0
 8007b72:	9312      	str	r3, [sp, #72]	@ 0x48
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8007b74:	fa02 f303 	lsl.w	r3, r2, r3
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
                 input_zero_point;
        }
      }
      acc = MultiplyByQuantizedMultiplier(acc, multiplier, shift);
      acc = acc > 0 ? (acc + num_elements_in_axis / 2) / num_elements_in_axis
                    : (acc - num_elements_in_axis / 2) / num_elements_in_axis;
 8007b7e:	9a07      	ldr	r2, [sp, #28]
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007b80:	9c24      	ldr	r4, [sp, #144]	@ 0x90
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8007b82:	9d22      	ldr	r5, [sp, #136]	@ 0x88
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007b84:	9409      	str	r4, [sp, #36]	@ 0x24
 8007b86:	eb02 73d2 	add.w	r3, r2, r2, lsr #31
 8007b8a:	9c08      	ldr	r4, [sp, #32]
 8007b8c:	f8dd e078 	ldr.w	lr, [sp, #120]	@ 0x78
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8007b90:	950b      	str	r5, [sp, #44]	@ 0x2c
 8007b92:	105b      	asrs	r3, r3, #1
 8007b94:	425b      	negs	r3, r3
 8007b96:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b98:	fb04 f305 	mul.w	r3, r4, r5
 8007b9c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8007b9e:	f8dd a06c 	ldr.w	sl, [sp, #108]	@ 0x6c
 8007ba2:	9015      	str	r0, [sp, #84]	@ 0x54
 8007ba4:	fb04 f203 	mul.w	r2, r4, r3
  return a >> offset;
 8007ba8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8007baa:	1065      	asrs	r5, r4, #1
 8007bac:	9c07      	ldr	r4, [sp, #28]
 8007bae:	9511      	str	r5, [sp, #68]	@ 0x44
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007bb0:	2300      	movs	r3, #0
  int left_shift = shift > 0 ? shift : 0;
 8007bb2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8007bb6:	fb0e f504 	mul.w	r5, lr, r4
 8007bba:	9c01      	ldr	r4, [sp, #4]
 8007bbc:	910e      	str	r1, [sp, #56]	@ 0x38
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	fb0c fb0e 	mul.w	fp, ip, lr
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8007bc4:	4699      	mov	r9, r3
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	4641      	mov	r1, r8
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 8007bca:	9b04      	ldr	r3, [sp, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	dd7d      	ble.n	8007ccc <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x23c>
 8007bd0:	1e73      	subs	r3, r6, #1
 8007bd2:	9301      	str	r3, [sp, #4]
 8007bd4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007bd6:	e9cd 6516 	strd	r6, r5, [sp, #88]	@ 0x58
 8007bda:	4413      	add	r3, r2
 8007bdc:	e9cd 2018 	strd	r2, r0, [sp, #96]	@ 0x60
 8007be0:	930d      	str	r3, [sp, #52]	@ 0x34
 8007be2:	9b01      	ldr	r3, [sp, #4]
 8007be4:	f04f 0800 	mov.w	r8, #0
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8007be8:	2f00      	cmp	r7, #0
 8007bea:	f340 809f 	ble.w	8007d2c <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x29c>
 8007bee:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007bf0:	e9cd 3101 	strd	r3, r1, [sp, #4]
      int32_t acc = 0;
 8007bf4:	2000      	movs	r0, #0
 8007bf6:	eb02 0608 	add.w	r6, r2, r8
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8007bfa:	4605      	mov	r5, r0
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8007bfc:	f1bc 0f00 	cmp.w	ip, #0
 8007c00:	dd12      	ble.n	8007c28 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x198>
 8007c02:	45ca      	cmp	sl, r9
 8007c04:	f340 80d9 	ble.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
 8007c08:	45f0      	cmp	r8, lr
 8007c0a:	f280 80d6 	bge.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
 8007c0e:	42af      	cmp	r7, r5
 8007c10:	f340 80d3 	ble.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
 8007c14:	4631      	mov	r1, r6
 8007c16:	2200      	movs	r2, #0
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)] -
 8007c18:	f991 3000 	ldrsb.w	r3, [r1]
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8007c1c:	3201      	adds	r2, #1
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)] -
 8007c1e:	1b1b      	subs	r3, r3, r4
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8007c20:	4562      	cmp	r2, ip
 8007c22:	4471      	add	r1, lr
          acc += input_data[Offset(input_shape, out_b, in_h, in_w, out_d)] -
 8007c24:	4418      	add	r0, r3
        for (int in_w = 0; in_w < input_width; ++in_w) {
 8007c26:	d1f7      	bne.n	8007c18 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x188>
      for (int in_h = 0; in_h < input_height; ++in_h) {
 8007c28:	3501      	adds	r5, #1
 8007c2a:	42bd      	cmp	r5, r7
 8007c2c:	445e      	add	r6, fp
 8007c2e:	d1e5      	bne.n	8007bfc <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x16c>
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8007c30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c32:	fa00 f202 	lsl.w	r2, r0, r2
  int right_shift = shift > 0 ? 0 : -shift;
 8007c36:	9803      	ldr	r0, [sp, #12]
 8007c38:	2800      	cmp	r0, #0
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8007c3a:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
  int right_shift = shift > 0 ? 0 : -shift;
 8007c3e:	dd5b      	ble.n	8007cf8 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x268>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8007c40:	4291      	cmp	r1, r2
 8007c42:	f000 8081 	beq.w	8007d48 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2b8>
  std::int64_t ab_64 = a_64 * b_64;
 8007c46:	fb82 2001 	smull	r2, r0, r2, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8007c4a:	2800      	cmp	r0, #0
 8007c4c:	f2c0 8095 	blt.w	8007d7a <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2ea>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8007c50:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8007c54:	f140 0000 	adc.w	r0, r0, #0
 8007c58:	0fd2      	lsrs	r2, r2, #31
 8007c5a:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8007c5e:	2600      	movs	r6, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8007c60:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8007c62:	40b0      	lsls	r0, r6
 8007c64:	3801      	subs	r0, #1
  return a >> offset;
 8007c66:	1045      	asrs	r5, r0, #1
  return a + b;
 8007c68:	eb05 75d2 	add.w	r5, r5, r2, lsr #31
  return a & b;
 8007c6c:	4010      	ands	r0, r2
  return a >> offset;
 8007c6e:	4132      	asrs	r2, r6
  return a + b;
 8007c70:	4285      	cmp	r5, r0
 8007c72:	bfb8      	it	lt
 8007c74:	3201      	addlt	r2, #1
      acc = acc > 0 ? (acc + num_elements_in_axis / 2) / num_elements_in_axis
 8007c76:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007c78:	2a00      	cmp	r2, #0
 8007c7a:	bfcc      	ite	gt
 8007c7c:	1a12      	subgt	r2, r2, r0
                    : (acc - num_elements_in_axis / 2) / num_elements_in_axis;
 8007c7e:	1812      	addle	r2, r2, r0
      acc = acc > 0 ? (acc + num_elements_in_axis / 2) / num_elements_in_axis
 8007c80:	9807      	ldr	r0, [sp, #28]
 8007c82:	fb92 f2f0 	sdiv	r2, r2, r0
      acc += output_zero_point;
 8007c86:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8007c88:	4402      	add	r2, r0
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8007c8a:	9805      	ldr	r0, [sp, #20]
 8007c8c:	2804      	cmp	r0, #4
 8007c8e:	f302 0207 	ssat	r2, #8, r2
 8007c92:	f040 8092 	bne.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8007c96:	9806      	ldr	r0, [sp, #24]
 8007c98:	4548      	cmp	r0, r9
 8007c9a:	f340 808e 	ble.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8007c9e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007ca0:	2800      	cmp	r0, #0
 8007ca2:	f340 808a 	ble.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8007ca6:	9808      	ldr	r0, [sp, #32]
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	f340 8086 	ble.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8007cae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007cb0:	4580      	cmp	r8, r0
 8007cb2:	f280 8082 	bge.w	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
      acc = std::min(std::max(acc, kMinInt), kMaxInt);
      output_data[Offset(output_shape, out_b, 0, 0, out_d)] =
 8007cb6:	f803 2f01 	strb.w	r2, [r3, #1]!
    for (int out_d = 0; out_d < output_depth; ++out_d) {
 8007cba:	9a04      	ldr	r2, [sp, #16]
 8007cbc:	f108 0801 	add.w	r8, r8, #1
 8007cc0:	4590      	cmp	r8, r2
 8007cc2:	d191      	bne.n	8007be8 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x158>
 8007cc4:	e9dd 6516 	ldrd	r6, r5, [sp, #88]	@ 0x58
 8007cc8:	e9dd 2018 	ldrd	r2, r0, [sp, #96]	@ 0x60
  for (int out_b = 0; out_b < output_batch; ++out_b) {
 8007ccc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007cce:	f109 0901 	add.w	r9, r9, #1
 8007cd2:	4599      	cmp	r9, r3
 8007cd4:	4406      	add	r6, r0
 8007cd6:	442a      	add	r2, r5
 8007cd8:	f47f af77 	bne.w	8007bca <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x13a>
    if (size_ > kMaxSmallSize) {
 8007cdc:	9b05      	ldr	r3, [sp, #20]
 8007cde:	2b05      	cmp	r3, #5
 8007ce0:	dd07      	ble.n	8007cf2 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x262>
      delete[] dims_pointer_;
 8007ce2:	9b06      	ldr	r3, [sp, #24]
 8007ce4:	b12b      	cbz	r3, 8007cf2 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x262>
 8007ce6:	4618      	mov	r0, r3
          static_cast<integer_type>(acc);
    }
  }
}
 8007ce8:	b027      	add	sp, #156	@ 0x9c
 8007cea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cee:	f008 be11 	b.w	8010914 <_ZdaPv>
 8007cf2:	b027      	add	sp, #156	@ 0x9c
 8007cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8007cf8:	4291      	cmp	r1, r2
 8007cfa:	d032      	beq.n	8007d62 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2d2>
  std::int64_t ab_64 = a_64 * b_64;
 8007cfc:	fb82 2001 	smull	r2, r0, r2, r1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8007d00:	2800      	cmp	r0, #0
 8007d02:	da19      	bge.n	8007d38 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2a8>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8007d04:	4d31      	ldr	r5, [pc, #196]	@ (8007dcc <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x33c>)
 8007d06:	1952      	adds	r2, r2, r5
 8007d08:	f160 0000 	sbc.w	r0, r0, #0
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	da05      	bge.n	8007d1c <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x28c>
 8007d10:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8007d14:	1955      	adds	r5, r2, r5
 8007d16:	462a      	mov	r2, r5
 8007d18:	f140 0000 	adc.w	r0, r0, #0
 8007d1c:	0fd2      	lsrs	r2, r2, #31
 8007d1e:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
  assert(exponent <= 31);
 8007d22:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8007d24:	281f      	cmp	r0, #31
 8007d26:	dc4a      	bgt.n	8007dbe <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32e>
 8007d28:	4606      	mov	r6, r0
 8007d2a:	e799      	b.n	8007c60 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x1d0>
 8007d2c:	9a03      	ldr	r2, [sp, #12]
 8007d2e:	2a00      	cmp	r2, #0
  std::int64_t ab_64 = a_64 * b_64;
 8007d30:	f04f 0200 	mov.w	r2, #0
 8007d34:	dc93      	bgt.n	8007c5e <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x1ce>
 8007d36:	4610      	mov	r0, r2
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8007d38:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8007d3c:	f140 0000 	adc.w	r0, r0, #0
 8007d40:	0fd2      	lsrs	r2, r2, #31
 8007d42:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8007d46:	e7ec      	b.n	8007d22 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x292>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8007d48:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8007d4c:	d00f      	beq.n	8007d6e <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x2de>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8007d4e:	2600      	movs	r6, #0
 8007d50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007d54:	4630      	mov	r0, r6
 8007d56:	fbc1 2001 	smlal	r2, r0, r1, r1
 8007d5a:	0fd2      	lsrs	r2, r2, #31
 8007d5c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8007d60:	e77e      	b.n	8007c60 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x1d0>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8007d62:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8007d66:	d1c9      	bne.n	8007cfc <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x26c>
 8007d68:	4602      	mov	r2, r0
  assert(exponent <= 31);
 8007d6a:	321f      	adds	r2, #31
 8007d6c:	db27      	blt.n	8007dbe <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32e>
 8007d6e:	e9dd 5611 	ldrd	r5, r6, [sp, #68]	@ 0x44
  return a & b;
 8007d72:	9810      	ldr	r0, [sp, #64]	@ 0x40
  assert(exponent <= 31);
 8007d74:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8007d78:	e779      	b.n	8007c6e <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x1de>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8007d7a:	4d14      	ldr	r5, [pc, #80]	@ (8007dcc <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x33c>)
 8007d7c:	1952      	adds	r2, r2, r5
 8007d7e:	f160 0000 	sbc.w	r0, r0, #0
 8007d82:	2800      	cmp	r0, #0
 8007d84:	f6bf af68 	bge.w	8007c58 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x1c8>
 8007d88:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 8007d8c:	1955      	adds	r5, r2, r5
 8007d8e:	462a      	mov	r2, r5
 8007d90:	f140 0000 	adc.w	r0, r0, #0
 8007d94:	e760      	b.n	8007c58 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x1c8>
    TFLITE_DCHECK_LT(i, size_);
 8007d96:	2a01      	cmp	r2, #1
 8007d98:	4613      	mov	r3, r2
 8007d9a:	d00e      	beq.n	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
 8007d9c:	2a02      	cmp	r2, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007d9e:	9922      	ldr	r1, [sp, #136]	@ 0x88
    TFLITE_DCHECK_LT(i, size_);
 8007da0:	d00b      	beq.n	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
 8007da2:	2b03      	cmp	r3, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007da4:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
    TFLITE_DCHECK_LT(i, size_);
 8007da6:	d008      	beq.n	8007dba <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x32a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8007da8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007daa:	9806      	ldr	r0, [sp, #24]
 8007dac:	9304      	str	r3, [sp, #16]
 8007dae:	e6b8      	b.n	8007b22 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x92>
  TFLITE_CHECK((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8007db0:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	f43f aecb 	beq.w	8007b50 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0xc0>
  TFLITE_CHECK_EQ(unextended_input_shape.DimensionsCount(), 4);
 8007dba:	f009 f87f 	bl	8010ebc <abort>
  assert(exponent <= 31);
 8007dbe:	4b04      	ldr	r3, [pc, #16]	@ (8007dd0 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x340>)
 8007dc0:	4a04      	ldr	r2, [pc, #16]	@ (8007dd4 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x344>)
 8007dc2:	4805      	ldr	r0, [pc, #20]	@ (8007dd8 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l+0x348>)
 8007dc4:	f240 1167 	movw	r1, #359	@ 0x167
 8007dc8:	f009 f880 	bl	8010ecc <__assert_func>
 8007dcc:	c0000001 	.word	0xc0000001
 8007dd0:	080165c4 	.word	0x080165c4
 8007dd4:	080165d4 	.word	0x080165d4
 8007dd8:	08016630 	.word	0x08016630

08007ddc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus EvalMean(TfLiteContext* context, TfLiteNode* node) {
 8007ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007de0:	ed2d 8b06 	vpush	{d8-d10}
 8007de4:	b0a3      	sub	sp, #140	@ 0x8c
  TFLITE_DCHECK(context != nullptr);
 8007de6:	2800      	cmp	r0, #0
 8007de8:	f000 8507 	beq.w	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
  TFLITE_DCHECK(node != nullptr);
 8007dec:	460d      	mov	r5, r1
 8007dee:	2900      	cmp	r1, #0
 8007df0:	f000 8503 	beq.w	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8007df4:	680a      	ldr	r2, [r1, #0]
 8007df6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007df8:	6851      	ldr	r1, [r2, #4]
 8007dfa:	4683      	mov	fp, r0
 8007dfc:	4798      	blx	r3
 8007dfe:	682a      	ldr	r2, [r5, #0]
 8007e00:	f8db 3054 	ldr.w	r3, [fp, #84]	@ 0x54
 8007e04:	6891      	ldr	r1, [r2, #8]
 8007e06:	9006      	str	r0, [sp, #24]
 8007e08:	4658      	mov	r0, fp
 8007e0a:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8007e0c:	686b      	ldr	r3, [r5, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8007e0e:	4606      	mov	r6, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8007e10:	6859      	ldr	r1, [r3, #4]
 8007e12:	f8db 3054 	ldr.w	r3, [fp, #84]	@ 0x54
 8007e16:	4658      	mov	r0, fp
 8007e18:	4798      	blx	r3
 8007e1a:	4604      	mov	r4, r0
  int num_axis = static_cast<int>(ElementCount(*axis->dims));
 8007e1c:	6870      	ldr	r0, [r6, #4]
  OpData* op_data = reinterpret_cast<OpData*>(node->user_data);
 8007e1e:	e9d5 a904 	ldrd	sl, r9, [r5, #16]
  int num_axis = static_cast<int>(ElementCount(*axis->dims));
 8007e22:	f7fe fc67 	bl	80066f4 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
  for (; i < axis_count; ++i) {
 8007e26:	f1b0 0800 	subs.w	r8, r0, #0
  return reinterpret_cast<const T*>(tensor->data.raw);
 8007e2a:	6833      	ldr	r3, [r6, #0]
 8007e2c:	dd4d      	ble.n	8007eca <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xee>
    op_params->axis[i] = static_cast<int16_t>(axis_data[i]);
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	f8ad 204e 	strh.w	r2, [sp, #78]	@ 0x4e
  for (; i < axis_count; ++i) {
 8007e34:	f1b8 0f01 	cmp.w	r8, #1
 8007e38:	f000 84ed 	beq.w	8008816 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa3a>
    op_params->axis[i] = static_cast<int16_t>(axis_data[i]);
 8007e3c:	685a      	ldr	r2, [r3, #4]
 8007e3e:	f8ad 2050 	strh.w	r2, [sp, #80]	@ 0x50
  for (; i < axis_count; ++i) {
 8007e42:	f1b8 0f02 	cmp.w	r8, #2
 8007e46:	f000 8305 	beq.w	8008454 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x678>
    op_params->axis[i] = static_cast<int16_t>(axis_data[i]);
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	f8ad 2052 	strh.w	r2, [sp, #82]	@ 0x52
  for (; i < axis_count; ++i) {
 8007e50:	f1b8 0f03 	cmp.w	r8, #3
 8007e54:	f000 8321 	beq.w	800849a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6be>
    op_params->axis[i] = static_cast<int16_t>(axis_data[i]);
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	f8ad 2054 	strh.w	r2, [sp, #84]	@ 0x54
  for (; i < 4; ++i) {
 8007e5e:	f1b8 0f04 	cmp.w	r8, #4
 8007e62:	f000 81ee 	beq.w	8008242 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x466>
    op_params->axis[i] = 1;
 8007e66:	aa22      	add	r2, sp, #136	@ 0x88
 8007e68:	eb02 0248 	add.w	r2, r2, r8, lsl #1
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	f822 1c3a 	strh.w	r1, [r2, #-58]
 8007e72:	aa22      	add	r2, sp, #136	@ 0x88
 8007e74:	eb02 0248 	add.w	r2, r2, r8, lsl #1
  for (; i < 4; ++i) {
 8007e78:	f1b8 0f02 	cmp.w	r8, #2
    op_params->axis[i] = 1;
 8007e7c:	f822 1c38 	strh.w	r1, [r2, #-56]
  for (; i < 4; ++i) {
 8007e80:	f000 82ed 	beq.w	800845e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x682>
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8007e84:	9a06      	ldr	r2, [sp, #24]
 8007e86:	6857      	ldr	r7, [r2, #4]
 8007e88:	683d      	ldr	r5, [r7, #0]
    op_params->axis[i] = 1;
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f8ad 2054 	strh.w	r2, [sp, #84]	@ 0x54
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8007e90:	2d04      	cmp	r5, #4
  op_params->axis_count = axis_count;
 8007e92:	fa4f f288 	sxtb.w	r2, r8
 8007e96:	f88d 204c 	strb.w	r2, [sp, #76]	@ 0x4c
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8007e9a:	f000 84b8 	beq.w	800880e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa32>
  switch (input->type) {
 8007e9e:	9a06      	ldr	r2, [sp, #24]
 8007ea0:	7a12      	ldrb	r2, [r2, #8]
 8007ea2:	2a03      	cmp	r2, #3
 8007ea4:	f000 81dc 	beq.w	8008260 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x484>
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	2a09      	cmp	r2, #9
 8007eac:	f000 80be 	beq.w	800802c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x250>
 8007eb0:	2a01      	cmp	r2, #1
 8007eb2:	d011      	beq.n	8007ed8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfc>
      TF_LITE_ENSURE_MSG(context, false,
 8007eb4:	f8db 3014 	ldr.w	r3, [fp, #20]
 8007eb8:	49b4      	ldr	r1, [pc, #720]	@ (800818c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x3b0>)
 8007eba:	4658      	mov	r0, fp
 8007ebc:	4798      	blx	r3
        TF_LITE_ENSURE(
 8007ebe:	2001      	movs	r0, #1
}
 8007ec0:	b023      	add	sp, #140	@ 0x8c
 8007ec2:	ecbd 8b06 	vpop	{d8-d10}
 8007ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    op_params->axis[i] = 1;
 8007eca:	2201      	movs	r2, #1
 8007ecc:	f8ad 204e 	strh.w	r2, [sp, #78]	@ 0x4e
 8007ed0:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8007ed4:	9214      	str	r2, [sp, #80]	@ 0x50
  for (; i < 4; ++i) {
 8007ed6:	e7d5      	b.n	8007e84 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa8>
      if (params->keep_dims && special_case_4d_axes_1_and_2) {
 8007ed8:	f899 2000 	ldrb.w	r2, [r9]
 8007edc:	b112      	cbz	r2, 8007ee4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x108>
 8007ede:	2900      	cmp	r1, #0
 8007ee0:	f040 84f0 	bne.w	80088c4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae8>
 8007ee4:	9a06      	ldr	r2, [sp, #24]
 8007ee6:	6812      	ldr	r2, [r2, #0]
 8007ee8:	9206      	str	r2, [sp, #24]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8007eea:	2c00      	cmp	r4, #0
 8007eec:	f000 8503 	beq.w	80088f6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb1a>
 8007ef0:	f8d4 a000 	ldr.w	sl, [r4]
        TF_LITE_ENSURE(
 8007ef4:	6860      	ldr	r0, [r4, #4]
 8007ef6:	f8d0 c000 	ldr.w	ip, [r0]
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8007efa:	f1bc 0f00 	cmp.w	ip, #0
  size_t num_outputs = 1;
 8007efe:	f04f 0601 	mov.w	r6, #1
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8007f02:	dd10      	ble.n	8007f26 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x14a>
    size_t current = static_cast<size_t>(output_dims[idx]);
 8007f04:	f850 1f04 	ldr.w	r1, [r0, #4]!
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8007f08:	2200      	movs	r2, #0
 8007f0a:	e006      	b.n	8007f1a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x13e>
    size_t current = static_cast<size_t>(output_dims[idx]);
 8007f0c:	f850 1f04 	ldr.w	r1, [r0, #4]!
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 8007f10:	fba6 e401 	umull	lr, r4, r6, r1
 8007f14:	2c00      	cmp	r4, #0
 8007f16:	f040 8483 	bne.w	8008820 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa44>
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8007f1a:	3201      	adds	r2, #1
 8007f1c:	4594      	cmp	ip, r2
    num_outputs *= current;
 8007f1e:	fb01 f606 	mul.w	r6, r1, r6
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8007f22:	d1f3      	bne.n	8007f0c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x130>
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8007f24:	b15e      	cbz	r6, 8007f3e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x162>
    output_data[idx] = T();
 8007f26:	2e00      	cmp	r6, #0
 8007f28:	ea4f 0286 	mov.w	r2, r6, lsl #2
 8007f2c:	f04f 0100 	mov.w	r1, #0
 8007f30:	bf08      	it	eq
 8007f32:	2204      	moveq	r2, #4
 8007f34:	4650      	mov	r0, sl
 8007f36:	9307      	str	r3, [sp, #28]
 8007f38:	f009 ff58 	bl	8011dec <memset>
 8007f3c:	9b07      	ldr	r3, [sp, #28]
  if (num_dims == 0) {
 8007f3e:	2d00      	cmp	r5, #0
 8007f40:	f000 85fc 	beq.w	8008b3c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd60>
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 8007f44:	ea4f 71e8 	mov.w	r1, r8, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8007f48:	f1b8 0f01 	cmp.w	r8, #1
 8007f4c:	f171 0200 	sbcs.w	r2, r1, #0
 8007f50:	f2c0 86c1 	blt.w	8008cd6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xefa>
  int num_resolved_axis = 0;
 8007f54:	2400      	movs	r4, #0
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8007f56:	f8cd a01c 	str.w	sl, [sp, #28]
 8007f5a:	f1a3 0c04 	sub.w	ip, r3, #4
 8007f5e:	46a6      	mov	lr, r4
 8007f60:	46a1      	mov	r9, r4
 8007f62:	468a      	mov	sl, r1
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 8007f64:	f85c 0f04 	ldr.w	r0, [ip, #4]!
 8007f68:	2800      	cmp	r0, #0
 8007f6a:	f2c0 8443 	blt.w	80087f4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa18>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 8007f6e:	42a8      	cmp	r0, r5
 8007f70:	f280 8443 	bge.w	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
    for (int j = 0; j < *out_num_axis; ++j) {
 8007f74:	2c00      	cmp	r4, #0
 8007f76:	f000 8427 	beq.w	80087c8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9ec>
 8007f7a:	aa16      	add	r2, sp, #88	@ 0x58
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	e003      	b.n	8007f88 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1ac>
 8007f80:	3301      	adds	r3, #1
 8007f82:	42a3      	cmp	r3, r4
 8007f84:	f000 8420 	beq.w	80087c8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9ec>
      if (out_axis[j] == current) {
 8007f88:	f852 1b04 	ldr.w	r1, [r2], #4
 8007f8c:	4281      	cmp	r1, r0
 8007f8e:	d1f7      	bne.n	8007f80 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1a4>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8007f90:	f11e 0e01 	adds.w	lr, lr, #1
 8007f94:	f149 0900 	adc.w	r9, r9, #0
 8007f98:	45c6      	cmp	lr, r8
 8007f9a:	eb79 030a 	sbcs.w	r3, r9, sl
 8007f9e:	dbe1      	blt.n	8007f64 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x188>
 8007fa0:	f8dd a01c 	ldr.w	sl, [sp, #28]
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8007fa4:	2d00      	cmp	r5, #0
 8007fa6:	dd04      	ble.n	8007fb2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1d6>
    input_iter[idx] = 0;
 8007fa8:	00aa      	lsls	r2, r5, #2
 8007faa:	2100      	movs	r1, #0
 8007fac:	a81c      	add	r0, sp, #112	@ 0x70
 8007fae:	f009 ff1d 	bl	8011dec <memset>
 8007fb2:	f107 0904 	add.w	r9, r7, #4
  if (num_dims == 0) {
 8007fb6:	2d00      	cmp	r5, #0
 8007fb8:	f040 84c4 	bne.w	8008944 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb68>
    return current + actual_in;
 8007fbc:	9b06      	ldr	r3, [sp, #24]
 8007fbe:	edda 7a00 	vldr	s15, [sl]
 8007fc2:	ed93 7a00 	vldr	s14, [r3]
 8007fc6:	ee77 7a87 	vadd.f32	s15, s15, s14
    output_data[output_offset] =
 8007fca:	edca 7a00 	vstr	s15, [sl]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8007fce:	2c00      	cmp	r4, #0
 8007fd0:	f000 8704 	beq.w	8008ddc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1000>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8007fd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007fd6:	a816      	add	r0, sp, #88	@ 0x58
 8007fd8:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8007fdc:	2200      	movs	r2, #0
  size_t num_elements_in_axis = 1;
 8007fde:	2301      	movs	r3, #1
 8007fe0:	e008      	b.n	8007ff4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x218>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 8007fe2:	f850 1f04 	ldr.w	r1, [r0, #4]!
 8007fe6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 8007fea:	fba3 7501 	umull	r7, r5, r3, r1
 8007fee:	2d00      	cmp	r5, #0
 8007ff0:	f040 8416 	bne.w	8008820 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa44>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8007ff4:	3201      	adds	r2, #1
 8007ff6:	42a2      	cmp	r2, r4
    num_elements_in_axis *= current;
 8007ff8:	fb01 f303 	mul.w	r3, r1, r3
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8007ffc:	d1f1      	bne.n	8007fe2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x206>
  if (num_elements_in_axis > 0) {
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f000 845d 	beq.w	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008004:	2e00      	cmp	r6, #0
 8008006:	f000 845a 	beq.w	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
 800800a:	ee07 3a90 	vmov	s15, r3
 800800e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008012:	4652      	mov	r2, sl
 8008014:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 8008018:	edd2 6a00 	vldr	s13, [r2]
 800801c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
      output_data[idx] =
 8008020:	eca2 7a01 	vstmia	r2!, {s14}
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008024:	42b2      	cmp	r2, r6
 8008026:	d1f7      	bne.n	8008018 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x23c>
 8008028:	f000 bc49 	b.w	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
      if (params->keep_dims && special_case_4d_axes_1_and_2) {
 800802c:	f899 3000 	ldrb.w	r3, [r9]
 8008030:	b113      	cbz	r3, 8008038 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x25c>
 8008032:	2900      	cmp	r1, #0
 8008034:	f040 8415 	bne.w	8008862 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa86>
      } else if (op_data->input_zp == op_data->output_zp &&
 8008038:	f8da 0010 	ldr.w	r0, [sl, #16]
 800803c:	f8da 2018 	ldr.w	r2, [sl, #24]
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8008040:	f8db 3044 	ldr.w	r3, [fp, #68]	@ 0x44
 8008044:	f8da 1008 	ldr.w	r1, [sl, #8]
      } else if (op_data->input_zp == op_data->output_zp &&
 8008048:	4290      	cmp	r0, r2
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 800804a:	4658      	mov	r0, fp
      } else if (op_data->input_zp == op_data->output_zp &&
 800804c:	f000 82ec 	beq.w	8008628 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x84c>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8008050:	4798      	blx	r3
        TF_LITE_ENSURE(
 8008052:	9b06      	ldr	r3, [sp, #24]
 8008054:	ed9a 8a05 	vldr	s16, [sl, #20]
 8008058:	685a      	ldr	r2, [r3, #4]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	9306      	str	r3, [sp, #24]
 800805e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8008062:	6815      	ldr	r5, [r2, #0]
 8008064:	920a      	str	r2, [sp, #40]	@ 0x28
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8008066:	4681      	mov	r9, r0
        TF_LITE_ENSURE(
 8008068:	9310      	str	r3, [sp, #64]	@ 0x40
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800806a:	2c00      	cmp	r4, #0
 800806c:	f000 85e7 	beq.w	8008c3e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe62>
 8008070:	6823      	ldr	r3, [r4, #0]
 8008072:	930d      	str	r3, [sp, #52]	@ 0x34
 8008074:	6861      	ldr	r1, [r4, #4]
 8008076:	f8da 3018 	ldr.w	r3, [sl, #24]
 800807a:	680f      	ldr	r7, [r1, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800807c:	6834      	ldr	r4, [r6, #0]
 800807e:	edda 8a07 	vldr	s17, [sl, #28]
 8008082:	9311      	str	r3, [sp, #68]	@ 0x44
  } else {
    ruy::profiler::ScopeLabel label(compute_sum ? "Sum/Int8" : "Mean/Int8");
  }
  // Reset output data.
  size_t num_outputs = 1;
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8008084:	2f00      	cmp	r7, #0
    size_t current = static_cast<size_t>(output_dims[idx]);
 8008086:	f04f 0601 	mov.w	r6, #1
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800808a:	dd10      	ble.n	80080ae <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x2d2>
    size_t current = static_cast<size_t>(output_dims[idx]);
 800808c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8008090:	2300      	movs	r3, #0
 8008092:	e006      	b.n	80080a2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x2c6>
 8008094:	f851 2f04 	ldr.w	r2, [r1, #4]!
    // Overflow prevention.
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 8008098:	fba6 c002 	umull	ip, r0, r6, r2
 800809c:	2800      	cmp	r0, #0
 800809e:	f040 83ca 	bne.w	8008836 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa5a>
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80080a2:	3301      	adds	r3, #1
 80080a4:	429f      	cmp	r7, r3
      return false;
    }
    num_outputs *= current;
 80080a6:	fb02 f606 	mul.w	r6, r2, r6
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80080aa:	d1f3      	bne.n	8008094 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x2b8>
  }
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 80080ac:	b316      	cbz	r6, 80080f4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x318>
 80080ae:	2e00      	cmp	r6, #0
 80080b0:	ea4f 0786 	mov.w	r7, r6, lsl #2
 80080b4:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80080b6:	bf08      	it	eq
 80080b8:	2704      	moveq	r7, #4
 80080ba:	eb09 0307 	add.w	r3, r9, r7
 80080be:	bf14      	ite	ne
 80080c0:	4632      	movne	r2, r6
 80080c2:	2201      	moveq	r2, #1
 80080c4:	4299      	cmp	r1, r3
 80080c6:	f080 8375 	bcs.w	80087b4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9d8>
 80080ca:	188b      	adds	r3, r1, r2
 80080cc:	4599      	cmp	r9, r3
 80080ce:	bf34      	ite	cc
 80080d0:	2300      	movcc	r3, #0
 80080d2:	2301      	movcs	r3, #1
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f040 836d 	bne.w	80087b4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9d8>
 80080da:	3901      	subs	r1, #1
 80080dc:	f1a9 0004 	sub.w	r0, r9, #4
 80080e0:	460a      	mov	r2, r1
 80080e2:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
    output_data[idx] = T();
 80080e4:	f801 3f01 	strb.w	r3, [r1, #1]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 80080e8:	3202      	adds	r2, #2
 80080ea:	1bd2      	subs	r2, r2, r7
 80080ec:	4296      	cmp	r6, r2
    temp_sum[idx] = U();
 80080ee:	f840 3f04 	str.w	r3, [r0, #4]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 80080f2:	d8f5      	bhi.n	80080e0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x304>
  if (num_dims == 0) {
 80080f4:	2d00      	cmp	r5, #0
 80080f6:	f000 859f 	beq.w	8008c38 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe5c>
  }

  // Resolve axis.
  int num_resolved_axis = 0;
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 80080fa:	ea4f 7ae8 	mov.w	sl, r8, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80080fe:	f1b8 0f01 	cmp.w	r8, #1
 8008102:	f17a 0300 	sbcs.w	r3, sl, #0
 8008106:	f2c0 8663 	blt.w	8008dd0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xff4>
 800810a:	f1a4 0e04 	sub.w	lr, r4, #4
  int num_resolved_axis = 0;
 800810e:	2400      	movs	r4, #0
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8008110:	4627      	mov	r7, r4
 8008112:	46a4      	mov	ip, r4
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 8008114:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8008118:	2800      	cmp	r0, #0
 800811a:	f2c0 8370 	blt.w	80087fe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa22>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 800811e:	4285      	cmp	r5, r0
 8008120:	f340 836b 	ble.w	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
    for (int j = 0; j < *out_num_axis; ++j) {
 8008124:	2c00      	cmp	r4, #0
 8008126:	f000 835e 	beq.w	80087e6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa0a>
 800812a:	aa16      	add	r2, sp, #88	@ 0x58
 800812c:	2300      	movs	r3, #0
 800812e:	e003      	b.n	8008138 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x35c>
 8008130:	3301      	adds	r3, #1
 8008132:	42a3      	cmp	r3, r4
 8008134:	f000 8357 	beq.w	80087e6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa0a>
      if (out_axis[j] == current) {
 8008138:	f852 1b04 	ldr.w	r1, [r2], #4
 800813c:	4281      	cmp	r1, r0
 800813e:	d1f7      	bne.n	8008130 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x354>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8008140:	3701      	adds	r7, #1
 8008142:	f14c 0c00 	adc.w	ip, ip, #0
 8008146:	4547      	cmp	r7, r8
 8008148:	eb7c 030a 	sbcs.w	r3, ip, sl
 800814c:	dbe2      	blt.n	8008114 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x338>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 800814e:	2d00      	cmp	r5, #0
 8008150:	dd04      	ble.n	800815c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x380>
    input_iter[idx] = 0;
 8008152:	00aa      	lsls	r2, r5, #2
 8008154:	2100      	movs	r1, #0
 8008156:	a81c      	add	r0, sp, #112	@ 0x70
 8008158:	f009 fe48 	bl	8011dec <memset>
 800815c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800815e:	f103 0e04 	add.w	lr, r3, #4
 8008162:	2d00      	cmp	r5, #0
 8008164:	f040 8467 	bne.w	8008a36 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc5a>
    const Out actual_in = static_cast<Out>(in);
 8008168:	9b06      	ldr	r3, [sp, #24]
 800816a:	f993 2000 	ldrsb.w	r2, [r3]
    return current + actual_in;
 800816e:	f8d9 3000 	ldr.w	r3, [r9]
 8008172:	4413      	add	r3, r2
    output_data[output_offset] =
 8008174:	f8c9 3000 	str.w	r3, [r9]
    return false;
  }

  // Calculate mean by dividing output_data by num of aggregated element.
  size_t num_elements_in_axis = 1;
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008178:	2c00      	cmp	r4, #0
 800817a:	f000 85af 	beq.w	8008cdc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf00>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 800817e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008180:	a816      	add	r0, sp, #88	@ 0x58
 8008182:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008186:	2200      	movs	r2, #0
  size_t num_elements_in_axis = 1;
 8008188:	2301      	movs	r3, #1
 800818a:	e012      	b.n	80081b2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x3d6>
 800818c:	08016d94 	.word	0x08016d94
 8008190:	42fe0000 	.word	0x42fe0000
 8008194:	c3000000 	.word	0xc3000000
 8008198:	437f0000 	.word	0x437f0000
 800819c:	00000000 	.word	0x00000000
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 80081a0:	f850 1f04 	ldr.w	r1, [r0, #4]!
 80081a4:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    // Overflow prevention.
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 80081a8:	fba3 7501 	umull	r7, r5, r3, r1
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	f040 8342 	bne.w	8008836 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa5a>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 80081b2:	3201      	adds	r2, #1
 80081b4:	42a2      	cmp	r2, r4
      return false;
    }
    num_elements_in_axis *= current;
 80081b6:	fb01 f303 	mul.w	r3, r1, r3
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 80081ba:	d1f1      	bne.n	80081a0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x3c4>
  }

  if (num_elements_in_axis > 0) {
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 837e 	beq.w	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
    const float scale = input_scale / output_scale;
 80081c2:	ee88 9a28 	vdiv.f32	s18, s16, s17
            static_cast<U>(TfLiteRound(temp_sum[idx] * scale + bias)) +
            output_zero_point;
        output_data[idx] = static_cast<T>(value);
      }
    } else {
      const float bias = -input_zero_point * scale;
 80081c6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80081c8:	4252      	negs	r2, r2
 80081ca:	ee08 2a90 	vmov	s17, r2
 80081ce:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80081d2:	ee68 8a89 	vmul.f32	s17, s17, s18
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 80081d6:	2e00      	cmp	r6, #0
 80081d8:	f000 8371 	beq.w	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
        float float_mean = static_cast<float>(temp_sum[idx]) /
                           static_cast<float>(num_elements_in_axis);
 80081dc:	ee07 3a90 	vmov	s15, r3
 80081e0:	eeb8 8a67 	vcvt.f32.u32	s16, s15
        float result = TfLiteMin(
            TfLiteRound(float_mean * scale + bias) + output_zero_point,
 80081e4:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
 80081e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  { return __builtin_fminf(__x, __y); }
 80081ea:	ed1f aa17 	vldr	s20, [pc, #-92]	@ 8008190 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x3b4>
  { return __builtin_fmaxf(__x, __y); }
 80081ee:	ed5f 9a17 	vldr	s19, [pc, #-92]	@ 8008194 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x3b8>
 80081f2:	f1a9 0904 	sub.w	r9, r9, #4
 80081f6:	eef8 aae7 	vcvt.f32.s32	s21, s15
 80081fa:	1e5d      	subs	r5, r3, #1
 80081fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
        float float_mean = static_cast<float>(temp_sum[idx]) /
 8008200:	edd9 7a01 	vldr	s15, [r9, #4]
 8008204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  { return __builtin_roundf(__x); }
 8008208:	eeb0 0a68 	vmov.f32	s0, s17
 800820c:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8008210:	f109 0904 	add.w	r9, r9, #4
 8008214:	eea9 0a07 	vfma.f32	s0, s18, s14
 8008218:	f008 fbaa 	bl	8010970 <roundf>
  { return __builtin_fminf(__x, __y); }
 800821c:	eef0 0a4a 	vmov.f32	s1, s20
 8008220:	ee30 0a2a 	vadd.f32	s0, s0, s21
 8008224:	f008 fdeb 	bl	8010dfe <fminf>
  { return __builtin_fmaxf(__x, __y); }
 8008228:	eef0 0a69 	vmov.f32	s1, s19
 800822c:	f008 fdca 	bl	8010dc4 <fmaxf>
            static_cast<float>(std::numeric_limits<T>::max()));
        result = TfLiteMax(result,
                           static_cast<float>(std::numeric_limits<T>::min()));
        output_data[idx] = static_cast<T>(result);
 8008230:	eefd 7ac0 	vcvt.s32.f32	s15, s0
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008234:	454e      	cmp	r6, r9
        output_data[idx] = static_cast<T>(result);
 8008236:	ee17 3a90 	vmov	r3, s15
 800823a:	f805 3f01 	strb.w	r3, [r5, #1]!
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 800823e:	d1df      	bne.n	8008200 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x424>
 8008240:	e33d      	b.n	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8008242:	9a06      	ldr	r2, [sp, #24]
  op_params->axis_count = axis_count;
 8008244:	f88d 804c 	strb.w	r8, [sp, #76]	@ 0x4c
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8008248:	6857      	ldr	r7, [r2, #4]
 800824a:	683d      	ldr	r5, [r7, #0]
 800824c:	2d04      	cmp	r5, #4
 800824e:	f47f ae26 	bne.w	8007e9e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc2>
  switch (input->type) {
 8008252:	9a06      	ldr	r2, [sp, #24]
 8008254:	7a12      	ldrb	r2, [r2, #8]
 8008256:	2a03      	cmp	r2, #3
 8008258:	d002      	beq.n	8008260 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x484>
      input->dims->size == 4 && op_params.axis_count == 2 &&
 800825a:	2100      	movs	r1, #0
 800825c:	2504      	movs	r5, #4
 800825e:	e624      	b.n	8007eaa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xce>
      } else if (op_data->input_zp == op_data->output_zp &&
 8008260:	f8da 0010 	ldr.w	r0, [sl, #16]
 8008264:	f8da 2018 	ldr.w	r2, [sl, #24]
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8008268:	f8db 3044 	ldr.w	r3, [fp, #68]	@ 0x44
 800826c:	f8da 1008 	ldr.w	r1, [sl, #8]
      } else if (op_data->input_zp == op_data->output_zp &&
 8008270:	4290      	cmp	r0, r2
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8008272:	4658      	mov	r0, fp
      } else if (op_data->input_zp == op_data->output_zp &&
 8008274:	f000 811d 	beq.w	80084b2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6d6>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8008278:	4798      	blx	r3
        TF_LITE_ENSURE(
 800827a:	9b06      	ldr	r3, [sp, #24]
 800827c:	ed9a 8a05 	vldr	s16, [sl, #20]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	9306      	str	r3, [sp, #24]
 8008286:	f8da 3010 	ldr.w	r3, [sl, #16]
 800828a:	6815      	ldr	r5, [r2, #0]
 800828c:	920a      	str	r2, [sp, #40]	@ 0x28
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 800828e:	4681      	mov	r9, r0
        TF_LITE_ENSURE(
 8008290:	9310      	str	r3, [sp, #64]	@ 0x40
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8008292:	2c00      	cmp	r4, #0
 8008294:	f000 84d6 	beq.w	8008c44 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe68>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	930d      	str	r3, [sp, #52]	@ 0x34
 800829c:	6861      	ldr	r1, [r4, #4]
 800829e:	f8da 3018 	ldr.w	r3, [sl, #24]
 80082a2:	680f      	ldr	r7, [r1, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 80082a4:	6834      	ldr	r4, [r6, #0]
 80082a6:	edda 8a07 	vldr	s17, [sl, #28]
 80082aa:	9311      	str	r3, [sp, #68]	@ 0x44
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80082ac:	2f00      	cmp	r7, #0
    size_t current = static_cast<size_t>(output_dims[idx]);
 80082ae:	f04f 0601 	mov.w	r6, #1
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80082b2:	dd10      	ble.n	80082d6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4fa>
    size_t current = static_cast<size_t>(output_dims[idx]);
 80082b4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80082b8:	2300      	movs	r3, #0
 80082ba:	e006      	b.n	80082ca <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4ee>
 80082bc:	f851 2f04 	ldr.w	r2, [r1, #4]!
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 80082c0:	fba6 c002 	umull	ip, r0, r6, r2
 80082c4:	2800      	cmp	r0, #0
 80082c6:	f040 82c1 	bne.w	800884c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa70>
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80082ca:	3301      	adds	r3, #1
 80082cc:	429f      	cmp	r7, r3
    num_outputs *= current;
 80082ce:	fb02 f606 	mul.w	r6, r2, r6
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80082d2:	d1f3      	bne.n	80082bc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4e0>
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 80082d4:	b316      	cbz	r6, 800831c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x540>
 80082d6:	2e00      	cmp	r6, #0
 80082d8:	ea4f 0786 	mov.w	r7, r6, lsl #2
 80082dc:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80082de:	bf08      	it	eq
 80082e0:	2704      	moveq	r7, #4
 80082e2:	eb09 0307 	add.w	r3, r9, r7
 80082e6:	bf14      	ite	ne
 80082e8:	4632      	movne	r2, r6
 80082ea:	2201      	moveq	r2, #1
 80082ec:	4299      	cmp	r1, r3
 80082ee:	f080 8257 	bcs.w	80087a0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9c4>
 80082f2:	188b      	adds	r3, r1, r2
 80082f4:	4599      	cmp	r9, r3
 80082f6:	bf34      	ite	cc
 80082f8:	2300      	movcc	r3, #0
 80082fa:	2301      	movcs	r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f040 824f 	bne.w	80087a0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9c4>
 8008302:	3901      	subs	r1, #1
 8008304:	f1a9 0004 	sub.w	r0, r9, #4
 8008308:	460a      	mov	r2, r1
 800830a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
    output_data[idx] = T();
 800830c:	f801 3f01 	strb.w	r3, [r1, #1]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008310:	3202      	adds	r2, #2
 8008312:	1bd2      	subs	r2, r2, r7
 8008314:	4296      	cmp	r6, r2
    temp_sum[idx] = U();
 8008316:	f840 3f04 	str.w	r3, [r0, #4]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800831a:	d8f5      	bhi.n	8008308 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x52c>
  if (num_dims == 0) {
 800831c:	2d00      	cmp	r5, #0
 800831e:	f000 8488 	beq.w	8008c32 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe56>
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 8008322:	ea4f 7ae8 	mov.w	sl, r8, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8008326:	f1b8 0f01 	cmp.w	r8, #1
 800832a:	f17a 0300 	sbcs.w	r3, sl, #0
 800832e:	f2c0 8552 	blt.w	8008dd6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xffa>
 8008332:	f1a4 0e04 	sub.w	lr, r4, #4
  int num_resolved_axis = 0;
 8008336:	2400      	movs	r4, #0
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8008338:	4627      	mov	r7, r4
 800833a:	46a4      	mov	ip, r4
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 800833c:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8008340:	2800      	cmp	r0, #0
 8008342:	f2c0 8260 	blt.w	8008806 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa2a>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 8008346:	4285      	cmp	r5, r0
 8008348:	f340 8257 	ble.w	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
    for (int j = 0; j < *out_num_axis; ++j) {
 800834c:	2c00      	cmp	r4, #0
 800834e:	f000 8243 	beq.w	80087d8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9fc>
 8008352:	aa16      	add	r2, sp, #88	@ 0x58
 8008354:	2300      	movs	r3, #0
 8008356:	e003      	b.n	8008360 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x584>
 8008358:	3301      	adds	r3, #1
 800835a:	42a3      	cmp	r3, r4
 800835c:	f000 823c 	beq.w	80087d8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9fc>
      if (out_axis[j] == current) {
 8008360:	f852 1b04 	ldr.w	r1, [r2], #4
 8008364:	4281      	cmp	r1, r0
 8008366:	d1f7      	bne.n	8008358 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x57c>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8008368:	3701      	adds	r7, #1
 800836a:	f14c 0c00 	adc.w	ip, ip, #0
 800836e:	4547      	cmp	r7, r8
 8008370:	eb7c 030a 	sbcs.w	r3, ip, sl
 8008374:	dbe2      	blt.n	800833c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x560>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 8008376:	2d00      	cmp	r5, #0
 8008378:	dd04      	ble.n	8008384 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x5a8>
    input_iter[idx] = 0;
 800837a:	00aa      	lsls	r2, r5, #2
 800837c:	2100      	movs	r1, #0
 800837e:	a81c      	add	r0, sp, #112	@ 0x70
 8008380:	f009 fd34 	bl	8011dec <memset>
 8008384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008386:	f103 0e04 	add.w	lr, r3, #4
 800838a:	2d00      	cmp	r5, #0
 800838c:	f040 83d9 	bne.w	8008b42 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd66>
    const Out actual_in = static_cast<Out>(in);
 8008390:	9b06      	ldr	r3, [sp, #24]
 8008392:	781a      	ldrb	r2, [r3, #0]
    return current + actual_in;
 8008394:	f8d9 3000 	ldr.w	r3, [r9]
 8008398:	4413      	add	r3, r2
    output_data[output_offset] =
 800839a:	f8c9 3000 	str.w	r3, [r9]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 800839e:	2c00      	cmp	r4, #0
 80083a0:	f000 859a 	beq.w	8008ed8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10fc>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 80083a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80083a6:	a816      	add	r0, sp, #88	@ 0x58
 80083a8:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 80083ac:	2200      	movs	r2, #0
  size_t num_elements_in_axis = 1;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e008      	b.n	80083c4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x5e8>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 80083b2:	f850 1f04 	ldr.w	r1, [r0, #4]!
 80083b6:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 80083ba:	fba3 7501 	umull	r7, r5, r3, r1
 80083be:	2d00      	cmp	r5, #0
 80083c0:	f040 8244 	bne.w	800884c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa70>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 80083c4:	3201      	adds	r2, #1
 80083c6:	4294      	cmp	r4, r2
    num_elements_in_axis *= current;
 80083c8:	fb01 f303 	mul.w	r3, r1, r3
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 80083cc:	d1f1      	bne.n	80083b2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x5d6>
  if (num_elements_in_axis > 0) {
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f000 8275 	beq.w	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
    const float scale = input_scale / output_scale;
 80083d4:	ee88 9a28 	vdiv.f32	s18, s16, s17
      const float bias = -input_zero_point * scale;
 80083d8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80083da:	4252      	negs	r2, r2
 80083dc:	ee08 2a90 	vmov	s17, r2
 80083e0:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80083e4:	ee68 8a89 	vmul.f32	s17, s17, s18
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 80083e8:	2e00      	cmp	r6, #0
 80083ea:	f000 8268 	beq.w	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
            TfLiteRound(float_mean * scale + bias) + output_zero_point,
 80083ee:	eddd 7a11 	vldr	s15, [sp, #68]	@ 0x44
  { return __builtin_fminf(__x, __y); }
 80083f2:	ed1f aa97 	vldr	s20, [pc, #-604]	@ 8008198 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x3bc>
  { return __builtin_fmaxf(__x, __y); }
 80083f6:	ed5f 9a97 	vldr	s19, [pc, #-604]	@ 800819c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x3c0>
 80083fa:	eef8 aae7 	vcvt.f32.s32	s21, s15
                           static_cast<float>(num_elements_in_axis);
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008404:	f1a9 0904 	sub.w	r9, r9, #4
 8008408:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 800840c:	1e5d      	subs	r5, r3, #1
 800840e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
        float float_mean = static_cast<float>(temp_sum[idx]) /
 8008412:	edd9 7a01 	vldr	s15, [r9, #4]
 8008416:	eef8 7a67 	vcvt.f32.u32	s15, s15
  { return __builtin_roundf(__x); }
 800841a:	eeb0 0a68 	vmov.f32	s0, s17
 800841e:	ee87 7a88 	vdiv.f32	s14, s15, s16
 8008422:	f109 0904 	add.w	r9, r9, #4
 8008426:	eea9 0a07 	vfma.f32	s0, s18, s14
 800842a:	f008 faa1 	bl	8010970 <roundf>
  { return __builtin_fminf(__x, __y); }
 800842e:	eef0 0a4a 	vmov.f32	s1, s20
 8008432:	ee30 0a2a 	vadd.f32	s0, s0, s21
 8008436:	f008 fce2 	bl	8010dfe <fminf>
  { return __builtin_fmaxf(__x, __y); }
 800843a:	eef0 0a69 	vmov.f32	s1, s19
 800843e:	f008 fcc1 	bl	8010dc4 <fmaxf>
        output_data[idx] = static_cast<T>(result);
 8008442:	eefc 7ac0 	vcvt.u32.f32	s15, s0
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008446:	454e      	cmp	r6, r9
        output_data[idx] = static_cast<T>(result);
 8008448:	ee17 3a90 	vmov	r3, s15
 800844c:	f805 3f01 	strb.w	r3, [r5, #1]!
      for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008450:	d1df      	bne.n	8008412 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x636>
 8008452:	e234      	b.n	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
    op_params->axis[i] = 1;
 8008454:	2201      	movs	r2, #1
 8008456:	f8ad 2052 	strh.w	r2, [sp, #82]	@ 0x52
 800845a:	f8ad 2054 	strh.w	r2, [sp, #84]	@ 0x54
      input->dims->size == 4 && op_params.axis_count == 2 &&
 800845e:	9a06      	ldr	r2, [sp, #24]
  op_params->axis_count = axis_count;
 8008460:	f88d 804c 	strb.w	r8, [sp, #76]	@ 0x4c
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8008464:	6857      	ldr	r7, [r2, #4]
 8008466:	683d      	ldr	r5, [r7, #0]
 8008468:	2d04      	cmp	r5, #4
 800846a:	f47f ad18 	bne.w	8007e9e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc2>
      ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 800846e:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	@ 0x4e
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8008472:	2a01      	cmp	r2, #1
 8008474:	f000 825e 	beq.w	8008934 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb58>
      ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8008478:	2a02      	cmp	r2, #2
 800847a:	f47f aeea 	bne.w	8008252 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x476>
       (op_params.axis[0] == 2 && op_params.axis[1] == 1));
 800847e:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	@ 0x50
 8008482:	f1a1 0101 	sub.w	r1, r1, #1
 8008486:	fab1 f181 	clz	r1, r1
 800848a:	0949      	lsrs	r1, r1, #5
  switch (input->type) {
 800848c:	9a06      	ldr	r2, [sp, #24]
 800848e:	7a12      	ldrb	r2, [r2, #8]
 8008490:	2a03      	cmp	r2, #3
 8008492:	f000 83f0 	beq.w	8008c76 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe9a>
      input->dims->size == 4 && op_params.axis_count == 2 &&
 8008496:	2504      	movs	r5, #4
 8008498:	e507      	b.n	8007eaa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xce>
 800849a:	9a06      	ldr	r2, [sp, #24]
  op_params->axis_count = axis_count;
 800849c:	f88d 804c 	strb.w	r8, [sp, #76]	@ 0x4c
      input->dims->size == 4 && op_params.axis_count == 2 &&
 80084a0:	6857      	ldr	r7, [r2, #4]
 80084a2:	683d      	ldr	r5, [r7, #0]
    op_params->axis[i] = 1;
 80084a4:	2201      	movs	r2, #1
      input->dims->size == 4 && op_params.axis_count == 2 &&
 80084a6:	2d04      	cmp	r5, #4
    op_params->axis[i] = 1;
 80084a8:	f8ad 2054 	strh.w	r2, [sp, #84]	@ 0x54
      input->dims->size == 4 && op_params.axis_count == 2 &&
 80084ac:	f47f acf7 	bne.w	8007e9e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc2>
 80084b0:	e6cf      	b.n	8008252 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x476>
      } else if (op_data->input_zp == op_data->output_zp &&
 80084b2:	ed9a 7a05 	vldr	s14, [sl, #20]
 80084b6:	edda 7a07 	vldr	s15, [sl, #28]
 80084ba:	eeb4 7a67 	vcmp.f32	s14, s15
 80084be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c2:	f47f aed9 	bne.w	8008278 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x49c>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 80084c6:	4798      	blx	r3
        TF_LITE_ENSURE(
 80084c8:	9b06      	ldr	r3, [sp, #24]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	6815      	ldr	r5, [r2, #0]
 80084d0:	9209      	str	r2, [sp, #36]	@ 0x24
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 80084d2:	4682      	mov	sl, r0
 80084d4:	930a      	str	r3, [sp, #40]	@ 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80084d6:	2c00      	cmp	r4, #0
 80084d8:	f000 8477 	beq.w	8008dca <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfee>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	9308      	str	r3, [sp, #32]
        TF_LITE_ENSURE(
 80084e0:	6861      	ldr	r1, [r4, #4]
  return reinterpret_cast<const T*>(tensor->data.raw);
 80084e2:	6834      	ldr	r4, [r6, #0]
 80084e4:	680f      	ldr	r7, [r1, #0]
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80084e6:	2f00      	cmp	r7, #0
  size_t num_outputs = 1;
 80084e8:	f04f 0601 	mov.w	r6, #1
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80084ec:	dd10      	ble.n	8008510 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x734>
    size_t current = static_cast<size_t>(output_dims[idx]);
 80084ee:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (int idx = 0; idx < output_num_dims; ++idx) {
 80084f2:	2300      	movs	r3, #0
 80084f4:	e006      	b.n	8008504 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x728>
    size_t current = static_cast<size_t>(output_dims[idx]);
 80084f6:	f851 2f04 	ldr.w	r2, [r1, #4]!
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 80084fa:	fba6 c002 	umull	ip, r0, r6, r2
 80084fe:	2800      	cmp	r0, #0
 8008500:	f040 83ae 	bne.w	8008c60 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe84>
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8008504:	3301      	adds	r3, #1
 8008506:	429f      	cmp	r7, r3
    num_outputs *= current;
 8008508:	fb02 f606 	mul.w	r6, r2, r6
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800850c:	d1f3      	bne.n	80084f6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x71a>
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 800850e:	b1ee      	cbz	r6, 800854c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x770>
 8008510:	2e00      	cmp	r6, #0
 8008512:	ea4f 0786 	mov.w	r7, r6, lsl #2
 8008516:	9908      	ldr	r1, [sp, #32]
 8008518:	bf08      	it	eq
 800851a:	2704      	moveq	r7, #4
 800851c:	eb0a 0307 	add.w	r3, sl, r7
 8008520:	bf14      	ite	ne
 8008522:	4632      	movne	r2, r6
 8008524:	2201      	moveq	r2, #1
 8008526:	4299      	cmp	r1, r3
 8008528:	d207      	bcs.n	800853a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x75e>
 800852a:	188b      	adds	r3, r1, r2
 800852c:	459a      	cmp	sl, r3
 800852e:	bf34      	ite	cc
 8008530:	2300      	movcc	r3, #0
 8008532:	2301      	movcs	r3, #1
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 84e9 	beq.w	8008f0c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1130>
    output_data[idx] = T();
 800853a:	2100      	movs	r1, #0
 800853c:	9808      	ldr	r0, [sp, #32]
 800853e:	f009 fc55 	bl	8011dec <memset>
    temp_sum[idx] = U();
 8008542:	463a      	mov	r2, r7
 8008544:	2100      	movs	r1, #0
 8008546:	4650      	mov	r0, sl
 8008548:	f009 fc50 	bl	8011dec <memset>
  if (num_dims == 0) {
 800854c:	2d00      	cmp	r5, #0
 800854e:	f000 8448 	beq.w	8008de2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1006>
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 8008552:	ea4f 79e8 	mov.w	r9, r8, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8008556:	f1b8 0f01 	cmp.w	r8, #1
 800855a:	f179 0300 	sbcs.w	r3, r9, #0
 800855e:	f2c0 84d2 	blt.w	8008f06 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x112a>
 8008562:	f1a4 0e04 	sub.w	lr, r4, #4
  int num_resolved_axis = 0;
 8008566:	2400      	movs	r4, #0
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8008568:	4627      	mov	r7, r4
 800856a:	46a4      	mov	ip, r4
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 800856c:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 8008570:	2800      	cmp	r0, #0
 8008572:	f2c0 81db 	blt.w	800892c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb50>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 8008576:	4285      	cmp	r5, r0
 8008578:	f340 813f 	ble.w	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
    for (int j = 0; j < *out_num_axis; ++j) {
 800857c:	2c00      	cmp	r4, #0
 800857e:	f000 81c3 	beq.w	8008908 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb2c>
 8008582:	aa16      	add	r2, sp, #88	@ 0x58
 8008584:	2300      	movs	r3, #0
 8008586:	e003      	b.n	8008590 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x7b4>
 8008588:	3301      	adds	r3, #1
 800858a:	42a3      	cmp	r3, r4
 800858c:	f000 81bc 	beq.w	8008908 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb2c>
      if (out_axis[j] == current) {
 8008590:	f852 1b04 	ldr.w	r1, [r2], #4
 8008594:	4281      	cmp	r1, r0
 8008596:	d1f7      	bne.n	8008588 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x7ac>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 8008598:	3701      	adds	r7, #1
 800859a:	f14c 0c00 	adc.w	ip, ip, #0
 800859e:	4547      	cmp	r7, r8
 80085a0:	eb7c 0309 	sbcs.w	r3, ip, r9
 80085a4:	dbe2      	blt.n	800856c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x790>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 80085a6:	2d00      	cmp	r5, #0
 80085a8:	dd04      	ble.n	80085b4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x7d8>
    input_iter[idx] = 0;
 80085aa:	00aa      	lsls	r2, r5, #2
 80085ac:	2100      	movs	r1, #0
 80085ae:	a81c      	add	r0, sp, #112	@ 0x70
 80085b0:	f009 fc1c 	bl	8011dec <memset>
 80085b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b6:	f103 0c04 	add.w	ip, r3, #4
 80085ba:	2d00      	cmp	r5, #0
 80085bc:	f040 8418 	bne.w	8008df0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1014>
    const Out actual_in = static_cast<Out>(in);
 80085c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085c2:	781a      	ldrb	r2, [r3, #0]
    return current + actual_in;
 80085c4:	f8da 3000 	ldr.w	r3, [sl]
 80085c8:	4413      	add	r3, r2
    output_data[output_offset] =
 80085ca:	f8ca 3000 	str.w	r3, [sl]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 80085ce:	2c00      	cmp	r4, #0
 80085d0:	f000 8496 	beq.w	8008f00 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1124>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 80085d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80085d6:	a816      	add	r0, sp, #88	@ 0x58
 80085d8:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 80085dc:	2200      	movs	r2, #0
  size_t num_elements_in_axis = 1;
 80085de:	2301      	movs	r3, #1
 80085e0:	e008      	b.n	80085f4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x818>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 80085e2:	f850 1f04 	ldr.w	r1, [r0, #4]!
 80085e6:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 80085ea:	fba3 7501 	umull	r7, r5, r3, r1
 80085ee:	2d00      	cmp	r5, #0
 80085f0:	f040 8336 	bne.w	8008c60 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe84>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 80085f4:	3201      	adds	r2, #1
 80085f6:	4294      	cmp	r4, r2
    num_elements_in_axis *= current;
 80085f8:	fb01 f303 	mul.w	r3, r1, r3
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 80085fc:	d1f1      	bne.n	80085e2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x806>
  if (num_elements_in_axis > 0) {
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 815d 	beq.w	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008604:	2e00      	cmp	r6, #0
 8008606:	f000 815a 	beq.w	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
 800860a:	9908      	ldr	r1, [sp, #32]
 800860c:	f1aa 0204 	sub.w	r2, sl, #4
 8008610:	1e48      	subs	r0, r1, #1
 8008612:	eb02 0686 	add.w	r6, r2, r6, lsl #2
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
 8008616:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800861a:	fbb1 f1f3 	udiv	r1, r1, r3
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 800861e:	4296      	cmp	r6, r2
      output_data[idx] =
 8008620:	f800 1f01 	strb.w	r1, [r0, #1]!
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008624:	d1f7      	bne.n	8008616 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x83a>
 8008626:	e14a      	b.n	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
      } else if (op_data->input_zp == op_data->output_zp &&
 8008628:	ed9a 7a05 	vldr	s14, [sl, #20]
 800862c:	edda 7a07 	vldr	s15, [sl, #28]
 8008630:	eeb4 7a67 	vcmp.f32	s14, s15
 8008634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008638:	f47f ad0a 	bne.w	8008050 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x274>
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 800863c:	4798      	blx	r3
        TF_LITE_ENSURE(
 800863e:	9b06      	ldr	r3, [sp, #24]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6815      	ldr	r5, [r2, #0]
 8008646:	9209      	str	r2, [sp, #36]	@ 0x24
            context->GetScratchBuffer(context, op_data->temp_buffer_idx));
 8008648:	4682      	mov	sl, r0
 800864a:	930a      	str	r3, [sp, #40]	@ 0x28
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800864c:	2c00      	cmp	r4, #0
 800864e:	f000 83cb 	beq.w	8008de8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x100c>
 8008652:	6823      	ldr	r3, [r4, #0]
 8008654:	9308      	str	r3, [sp, #32]
        TF_LITE_ENSURE(
 8008656:	6861      	ldr	r1, [r4, #4]
  return reinterpret_cast<const T*>(tensor->data.raw);
 8008658:	6834      	ldr	r4, [r6, #0]
 800865a:	680f      	ldr	r7, [r1, #0]
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800865c:	2f00      	cmp	r7, #0
  size_t num_outputs = 1;
 800865e:	f04f 0601 	mov.w	r6, #1
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8008662:	dd10      	ble.n	8008686 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8aa>
    size_t current = static_cast<size_t>(output_dims[idx]);
 8008664:	f851 2f04 	ldr.w	r2, [r1, #4]!
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8008668:	2300      	movs	r3, #0
 800866a:	e006      	b.n	800867a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x89e>
    size_t current = static_cast<size_t>(output_dims[idx]);
 800866c:	f851 2f04 	ldr.w	r2, [r1, #4]!
    if (num_outputs > std::numeric_limits<size_t>::max() / current) {
 8008670:	fba6 c002 	umull	ip, r0, r6, r2
 8008674:	2800      	cmp	r0, #0
 8008676:	f040 82e8 	bne.w	8008c4a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe6e>
  for (int idx = 0; idx < output_num_dims; ++idx) {
 800867a:	3301      	adds	r3, #1
 800867c:	429f      	cmp	r7, r3
    num_outputs *= current;
 800867e:	fb02 f606 	mul.w	r6, r2, r6
  for (int idx = 0; idx < output_num_dims; ++idx) {
 8008682:	d1f3      	bne.n	800866c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x890>
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008684:	b1ee      	cbz	r6, 80086c2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8e6>
 8008686:	2e00      	cmp	r6, #0
 8008688:	ea4f 0786 	mov.w	r7, r6, lsl #2
 800868c:	9908      	ldr	r1, [sp, #32]
 800868e:	bf08      	it	eq
 8008690:	2704      	moveq	r7, #4
 8008692:	eb0a 0307 	add.w	r3, sl, r7
 8008696:	bf14      	ite	ne
 8008698:	4632      	movne	r2, r6
 800869a:	2201      	moveq	r2, #1
 800869c:	4299      	cmp	r1, r3
 800869e:	d207      	bcs.n	80086b0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8d4>
 80086a0:	188b      	adds	r3, r1, r2
 80086a2:	459a      	cmp	sl, r3
 80086a4:	bf34      	ite	cc
 80086a6:	2300      	movcc	r3, #0
 80086a8:	2301      	movcs	r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 8419 	beq.w	8008ee2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1106>
    output_data[idx] = T();
 80086b0:	2100      	movs	r1, #0
 80086b2:	9808      	ldr	r0, [sp, #32]
 80086b4:	f009 fb9a 	bl	8011dec <memset>
    temp_sum[idx] = U();
 80086b8:	463a      	mov	r2, r7
 80086ba:	2100      	movs	r1, #0
 80086bc:	4650      	mov	r0, sl
 80086be:	f009 fb95 	bl	8011dec <memset>
  if (num_dims == 0) {
 80086c2:	2d00      	cmp	r5, #0
 80086c4:	f000 8392 	beq.w	8008dec <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1010>
  if (!ResolveAxis(input_num_dims, axis, num_axis_dimensions, resolved_axis,
 80086c8:	ea4f 79e8 	mov.w	r9, r8, asr #31
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80086cc:	f1b8 0f01 	cmp.w	r8, #1
 80086d0:	f179 0300 	sbcs.w	r3, r9, #0
 80086d4:	f2c0 8403 	blt.w	8008ede <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1102>
 80086d8:	f1a4 0e04 	sub.w	lr, r4, #4
  int num_resolved_axis = 0;
 80086dc:	2400      	movs	r4, #0
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 80086de:	4627      	mov	r7, r4
 80086e0:	46a4      	mov	ip, r4
    int current = axis[idx] < 0 ? (axis[idx] + num_dims) : axis[idx];
 80086e2:	f85e 0f04 	ldr.w	r0, [lr, #4]!
 80086e6:	2800      	cmp	r0, #0
 80086e8:	f2c0 811c 	blt.w	8008924 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb48>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 80086ec:	4285      	cmp	r5, r0
 80086ee:	f340 8084 	ble.w	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
    for (int j = 0; j < *out_num_axis; ++j) {
 80086f2:	2c00      	cmp	r4, #0
 80086f4:	f000 810f 	beq.w	8008916 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb3a>
 80086f8:	aa16      	add	r2, sp, #88	@ 0x58
 80086fa:	2300      	movs	r3, #0
 80086fc:	e003      	b.n	8008706 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x92a>
 80086fe:	3301      	adds	r3, #1
 8008700:	42a3      	cmp	r3, r4
 8008702:	f000 8108 	beq.w	8008916 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb3a>
      if (out_axis[j] == current) {
 8008706:	f852 1b04 	ldr.w	r1, [r2], #4
 800870a:	4281      	cmp	r1, r0
 800870c:	d1f7      	bne.n	80086fe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x922>
  for (int64_t idx = 0; idx < num_axis; ++idx) {
 800870e:	3701      	adds	r7, #1
 8008710:	f14c 0c00 	adc.w	ip, ip, #0
 8008714:	4547      	cmp	r7, r8
 8008716:	eb7c 0309 	sbcs.w	r3, ip, r9
 800871a:	dbe2      	blt.n	80086e2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x906>
  for (int idx = 0; idx < input_num_dims; ++idx) {
 800871c:	2d00      	cmp	r5, #0
 800871e:	dd04      	ble.n	800872a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94e>
    input_iter[idx] = 0;
 8008720:	00aa      	lsls	r2, r5, #2
 8008722:	2100      	movs	r1, #0
 8008724:	a81c      	add	r0, sp, #112	@ 0x70
 8008726:	f009 fb61 	bl	8011dec <memset>
 800872a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872c:	f103 0c04 	add.w	ip, r3, #4
 8008730:	2d00      	cmp	r5, #0
 8008732:	f040 82d6 	bne.w	8008ce2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf06>
    const Out actual_in = static_cast<Out>(in);
 8008736:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008738:	f993 2000 	ldrsb.w	r2, [r3]
    return current + actual_in;
 800873c:	f8da 3000 	ldr.w	r3, [sl]
 8008740:	4413      	add	r3, r2
    output_data[output_offset] =
 8008742:	f8ca 3000 	str.w	r3, [sl]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008746:	2c00      	cmp	r4, #0
 8008748:	f000 83ef 	beq.w	8008f2a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x114e>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 800874c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800874e:	a816      	add	r0, sp, #88	@ 0x58
 8008750:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008754:	2200      	movs	r2, #0
  size_t num_elements_in_axis = 1;
 8008756:	2301      	movs	r3, #1
 8008758:	e008      	b.n	800876c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x990>
    size_t current = static_cast<size_t>(input_dims[resolved_axis[idx]]);
 800875a:	f850 1f04 	ldr.w	r1, [r0, #4]!
 800875e:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
    if (current > (std::numeric_limits<size_t>::max() / num_elements_in_axis)) {
 8008762:	fba3 7501 	umull	r7, r5, r3, r1
 8008766:	2d00      	cmp	r5, #0
 8008768:	f040 826f 	bne.w	8008c4a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe6e>
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 800876c:	3201      	adds	r2, #1
 800876e:	42a2      	cmp	r2, r4
    num_elements_in_axis *= current;
 8008770:	fb01 f303 	mul.w	r3, r1, r3
  for (int idx = 0; idx < num_resolved_axis; ++idx) {
 8008774:	d1f1      	bne.n	800875a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x97e>
  if (num_elements_in_axis > 0) {
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 80a1 	beq.w	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 800877c:	2e00      	cmp	r6, #0
 800877e:	f000 809e 	beq.w	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
 8008782:	9908      	ldr	r1, [sp, #32]
 8008784:	f1aa 0204 	sub.w	r2, sl, #4
 8008788:	1e48      	subs	r0, r1, #1
 800878a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
          static_cast<T>(temp_sum[idx] / static_cast<U>(num_elements_in_axis));
 800878e:	f852 1f04 	ldr.w	r1, [r2, #4]!
 8008792:	fb91 f1f3 	sdiv	r1, r1, r3
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008796:	4296      	cmp	r6, r2
      output_data[idx] =
 8008798:	f800 1f01 	strb.w	r1, [r0, #1]!
    for (size_t idx = 0; idx < num_outputs; ++idx) {
 800879c:	d1f7      	bne.n	800878e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9b2>
 800879e:	e08e      	b.n	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
    output_data[idx] = T();
 80087a0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80087a2:	2100      	movs	r1, #0
 80087a4:	f009 fb22 	bl	8011dec <memset>
    temp_sum[idx] = U();
 80087a8:	463a      	mov	r2, r7
 80087aa:	2100      	movs	r1, #0
 80087ac:	4648      	mov	r0, r9
 80087ae:	f009 fb1d 	bl	8011dec <memset>
 80087b2:	e5b3      	b.n	800831c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x540>
    output_data[idx] = T();
 80087b4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80087b6:	2100      	movs	r1, #0
 80087b8:	f009 fb18 	bl	8011dec <memset>
    temp_sum[idx] = U();
 80087bc:	463a      	mov	r2, r7
 80087be:	2100      	movs	r1, #0
 80087c0:	4648      	mov	r0, r9
 80087c2:	f009 fb13 	bl	8011dec <memset>
 80087c6:	e495      	b.n	80080f4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x318>
      out_axis[*out_num_axis] = current;
 80087c8:	ab22      	add	r3, sp, #136	@ 0x88
 80087ca:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      *out_num_axis += 1;
 80087ce:	3401      	adds	r4, #1
      out_axis[*out_num_axis] = current;
 80087d0:	f843 0c30 	str.w	r0, [r3, #-48]
      *out_num_axis += 1;
 80087d4:	f7ff bbdc 	b.w	8007f90 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1b4>
      out_axis[*out_num_axis] = current;
 80087d8:	ab22      	add	r3, sp, #136	@ 0x88
 80087da:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      *out_num_axis += 1;
 80087de:	3401      	adds	r4, #1
      out_axis[*out_num_axis] = current;
 80087e0:	f843 0c30 	str.w	r0, [r3, #-48]
      *out_num_axis += 1;
 80087e4:	e5c0      	b.n	8008368 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x58c>
      out_axis[*out_num_axis] = current;
 80087e6:	ab22      	add	r3, sp, #136	@ 0x88
 80087e8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      *out_num_axis += 1;
 80087ec:	3401      	adds	r4, #1
      out_axis[*out_num_axis] = current;
 80087ee:	f843 0c30 	str.w	r0, [r3, #-48]
      *out_num_axis += 1;
 80087f2:	e4a5      	b.n	8008140 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x364>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 80087f4:	1940      	adds	r0, r0, r5
 80087f6:	f57f abbd 	bpl.w	8007f74 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x198>
  TFLITE_DCHECK(context != nullptr);
 80087fa:	f008 fb5f 	bl	8010ebc <abort>
 80087fe:	1940      	adds	r0, r0, r5
 8008800:	f57f ac90 	bpl.w	8008124 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x348>
 8008804:	e7f9      	b.n	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
 8008806:	1940      	adds	r0, r0, r5
 8008808:	f57f ada0 	bpl.w	800834c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x570>
 800880c:	e7f5      	b.n	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
      input->dims->size == 4 && op_params.axis_count == 2 &&
 800880e:	2a02      	cmp	r2, #2
 8008810:	f47f ad1f 	bne.w	8008252 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x476>
 8008814:	e62b      	b.n	800846e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x692>
    op_params->axis[i] = 1;
 8008816:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800881a:	9214      	str	r2, [sp, #80]	@ 0x50
  for (; i < 4; ++i) {
 800881c:	f7ff bb32 	b.w	8007e84 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa8>
        TF_LITE_ENSURE(
 8008820:	4bb7      	ldr	r3, [pc, #732]	@ (8008b00 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd24>)
 8008822:	f8db 4014 	ldr.w	r4, [fp, #20]
 8008826:	4ab7      	ldr	r2, [pc, #732]	@ (8008b04 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd28>)
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	49b7      	ldr	r1, [pc, #732]	@ (8008b08 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd2c>)
 800882c:	23a9      	movs	r3, #169	@ 0xa9
 800882e:	4658      	mov	r0, fp
 8008830:	47a0      	blx	r4
 8008832:	f7ff bb44 	b.w	8007ebe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe2>
        TF_LITE_ENSURE(
 8008836:	4bb5      	ldr	r3, [pc, #724]	@ (8008b0c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd30>)
 8008838:	f8db 4014 	ldr.w	r4, [fp, #20]
 800883c:	4ab1      	ldr	r2, [pc, #708]	@ (8008b04 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd28>)
 800883e:	9300      	str	r3, [sp, #0]
 8008840:	49b1      	ldr	r1, [pc, #708]	@ (8008b08 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd2c>)
 8008842:	23cc      	movs	r3, #204	@ 0xcc
 8008844:	4658      	mov	r0, fp
 8008846:	47a0      	blx	r4
 8008848:	f7ff bb39 	b.w	8007ebe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe2>
        TF_LITE_ENSURE(
 800884c:	4bb0      	ldr	r3, [pc, #704]	@ (8008b10 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd34>)
 800884e:	f8db 4014 	ldr.w	r4, [fp, #20]
 8008852:	4aac      	ldr	r2, [pc, #688]	@ (8008b04 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd28>)
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	49ac      	ldr	r1, [pc, #688]	@ (8008b08 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd2c>)
 8008858:	23f1      	movs	r3, #241	@ 0xf1
 800885a:	4658      	mov	r0, fp
 800885c:	47a0      	blx	r4
 800885e:	f7ff bb2e 	b.w	8007ebe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe2>
            tflite::micro::GetTensorShape(input),
 8008862:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008866:	ad16      	add	r5, sp, #88	@ 0x58
 8008868:	4641      	mov	r1, r8
 800886a:	4628      	mov	r0, r5
            op_params, op_data->multiplier, op_data->shift,
 800886c:	e9da 6700 	ldrd	r6, r7, [sl]
            tflite::micro::GetTensorShape(input),
 8008870:	f7fe f808 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
            tflite::micro::GetTensorShape(output),
 8008874:	ab1c      	add	r3, sp, #112	@ 0x70
 8008876:	4621      	mov	r1, r4
 8008878:	4618      	mov	r0, r3
  return reinterpret_cast<const T*>(tensor->data.raw);
 800887a:	f8d8 8000 	ldr.w	r8, [r8]
            tflite::micro::GetTensorData<int8_t>(input), op_data->input_zp,
 800887e:	f8da 9010 	ldr.w	r9, [sl, #16]
            tflite::micro::GetTensorShape(output),
 8008882:	9307      	str	r3, [sp, #28]
 8008884:	f7fd fffe 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8008888:	b104      	cbz	r4, 800888c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xab0>
 800888a:	6824      	ldr	r4, [r4, #0]
        reference_integer_ops::Mean(
 800888c:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008890:	f8cd 8000 	str.w	r8, [sp]
 8008894:	e9cd 4303 	strd	r4, r3, [sp, #12]
 8008898:	9b07      	ldr	r3, [sp, #28]
 800889a:	463a      	mov	r2, r7
 800889c:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80088a0:	4631      	mov	r1, r6
 80088a2:	462b      	mov	r3, r5
 80088a4:	a813      	add	r0, sp, #76	@ 0x4c
 80088a6:	f7ff f8f3 	bl	8007a90 <_ZN6tflite21reference_integer_ops4MeanIaEEvRKNS_10MeanParamsEllRKNS_12RuntimeShapeEPKT_lS7_PS8_l>
    if (size_ > kMaxSmallSize) {
 80088aa:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80088ac:	2b05      	cmp	r3, #5
 80088ae:	dd03      	ble.n	80088b8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xadc>
      delete[] dims_pointer_;
 80088b0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80088b2:	b108      	cbz	r0, 80088b8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xadc>
 80088b4:	f008 f82e 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 80088b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80088ba:	2b05      	cmp	r3, #5
 80088bc:	dc1e      	bgt.n	80088fc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb20>
  return kTfLiteOk;
 80088be:	2000      	movs	r0, #0
 80088c0:	f7ff bafe 	b.w	8007ec0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe4>
        reference_ops::Mean(op_params, tflite::micro::GetTensorShape(input),
 80088c4:	9e06      	ldr	r6, [sp, #24]
 80088c6:	ad16      	add	r5, sp, #88	@ 0x58
 80088c8:	4631      	mov	r1, r6
 80088ca:	4628      	mov	r0, r5
 80088cc:	f7fd ffda 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 80088d0:	a81c      	add	r0, sp, #112	@ 0x70
 80088d2:	4621      	mov	r1, r4
  return reinterpret_cast<const T*>(tensor->data.raw);
 80088d4:	6836      	ldr	r6, [r6, #0]
 80088d6:	9007      	str	r0, [sp, #28]
 80088d8:	f7fd ffd4 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80088dc:	b104      	cbz	r4, 80088e0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb04>
 80088de:	6824      	ldr	r4, [r4, #0]
        reference_ops::Mean(op_params, tflite::micro::GetTensorShape(input),
 80088e0:	9b07      	ldr	r3, [sp, #28]
 80088e2:	9400      	str	r4, [sp, #0]
 80088e4:	4632      	mov	r2, r6
 80088e6:	4629      	mov	r1, r5
 80088e8:	a813      	add	r0, sp, #76	@ 0x4c
 80088ea:	f7fe ffd5 	bl	8007898 <_ZN6tflite13reference_ops4MeanIfEEvRKNS_10MeanParamsERKNS_12RuntimeShapeEPKT_S7_PS8_>
 80088ee:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80088f0:	2b05      	cmp	r3, #5
 80088f2:	dde1      	ble.n	80088b8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xadc>
 80088f4:	e7dc      	b.n	80088b0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xad4>
 80088f6:	46a2      	mov	sl, r4
 80088f8:	f7ff bafc 	b.w	8007ef4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x118>
      delete[] dims_pointer_;
 80088fc:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80088fe:	2800      	cmp	r0, #0
 8008900:	d0dd      	beq.n	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
 8008902:	f008 f807 	bl	8010914 <_ZdaPv>
 8008906:	e7da      	b.n	80088be <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xae2>
      out_axis[*out_num_axis] = current;
 8008908:	ab22      	add	r3, sp, #136	@ 0x88
 800890a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      *out_num_axis += 1;
 800890e:	3401      	adds	r4, #1
      out_axis[*out_num_axis] = current;
 8008910:	f843 0c30 	str.w	r0, [r3, #-48]
      *out_num_axis += 1;
 8008914:	e640      	b.n	8008598 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x7bc>
      out_axis[*out_num_axis] = current;
 8008916:	ab22      	add	r3, sp, #136	@ 0x88
 8008918:	eb03 0384 	add.w	r3, r3, r4, lsl #2
      *out_num_axis += 1;
 800891c:	3401      	adds	r4, #1
      out_axis[*out_num_axis] = current;
 800891e:	f843 0c30 	str.w	r0, [r3, #-48]
      *out_num_axis += 1;
 8008922:	e6f4      	b.n	800870e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x932>
    TFLITE_DCHECK(current >= 0 && current < num_dims);
 8008924:	1940      	adds	r0, r0, r5
 8008926:	f57f aee4 	bpl.w	80086f2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x916>
 800892a:	e766      	b.n	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
 800892c:	1940      	adds	r0, r0, r5
 800892e:	f57f ae25 	bpl.w	800857c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x7a0>
 8008932:	e762      	b.n	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
      ((op_params.axis[0] == 1 && op_params.axis[1] == 2) ||
 8008934:	f9bd 1050 	ldrsh.w	r1, [sp, #80]	@ 0x50
 8008938:	f1a1 0102 	sub.w	r1, r1, #2
 800893c:	fab1 f181 	clz	r1, r1
 8008940:	0949      	lsrs	r1, r1, #5
 8008942:	e5a3      	b.n	800848c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x6b0>
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008944:	1e6b      	subs	r3, r5, #1
 8008946:	461a      	mov	r2, r3
 8008948:	1c6b      	adds	r3, r5, #1
 800894a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800894e:	a91c      	add	r1, sp, #112	@ 0x70
 8008950:	930a      	str	r3, [sp, #40]	@ 0x28
 8008952:	4613      	mov	r3, r2
 8008954:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  size_t offset = 0;
 8008958:	e9cd 6b0b 	strd	r6, fp, [sp, #44]	@ 0x2c
 800895c:	eb07 0885 	add.w	r8, r7, r5, lsl #2
 8008960:	46bb      	mov	fp, r7
 8008962:	9209      	str	r2, [sp, #36]	@ 0x24
 8008964:	f04f 0e00 	mov.w	lr, #0
 8008968:	461f      	mov	r7, r3
 800896a:	468c      	mov	ip, r1
  for (int idx = 0; idx < num_dims; ++idx) {
 800896c:	2d00      	cmp	r5, #0
 800896e:	dd58      	ble.n	8008a22 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc46>
  size_t offset = 0;
 8008970:	f8cd a01c 	str.w	sl, [sp, #28]
  for (int idx = 0; idx < num_dims; ++idx) {
 8008974:	4662      	mov	r2, ip
 8008976:	465b      	mov	r3, fp
  size_t offset = 0;
 8008978:	2000      	movs	r0, #0
 800897a:	46e2      	mov	sl, ip
      offset = offset * static_cast<size_t>(dims[idx]) +
 800897c:	f853 1f04 	ldr.w	r1, [r3, #4]!
               static_cast<size_t>(index[idx]);
 8008980:	f852 6b04 	ldr.w	r6, [r2], #4
  for (int idx = 0; idx < num_dims; ++idx) {
 8008984:	4543      	cmp	r3, r8
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008986:	fb01 6000 	mla	r0, r1, r0, r6
  for (int idx = 0; idx < num_dims; ++idx) {
 800898a:	d1f7      	bne.n	800897c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xba0>
  size_t offset = 0;
 800898c:	2600      	movs	r6, #0
 800898e:	4651      	mov	r1, sl
  for (int idx = 0; idx < num_dims; ++idx) {
 8008990:	4632      	mov	r2, r6
 8008992:	9008      	str	r0, [sp, #32]
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 8008994:	2c00      	cmp	r4, #0
 8008996:	d03a      	beq.n	8008a0e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc32>
 8008998:	a816      	add	r0, sp, #88	@ 0x58
 800899a:	2300      	movs	r3, #0
 800899c:	4692      	mov	sl, r2
 800899e:	e002      	b.n	80089a6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbca>
 80089a0:	3301      	adds	r3, #1
 80089a2:	42a3      	cmp	r3, r4
 80089a4:	d032      	beq.n	8008a0c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc30>
        if (idx == axis[axis_idx]) {
 80089a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80089aa:	4552      	cmp	r2, sl
 80089ac:	d1f8      	bne.n	80089a0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbc4>
 80089ae:	4652      	mov	r2, sl
  for (int idx = 0; idx < num_dims; ++idx) {
 80089b0:	3201      	adds	r2, #1
 80089b2:	42aa      	cmp	r2, r5
 80089b4:	f101 0104 	add.w	r1, r1, #4
 80089b8:	d1ec      	bne.n	8008994 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbb8>
        reducer(output_data[output_offset], input_data[input_offset]);
 80089ba:	e9dd a007 	ldrd	sl, r0, [sp, #28]
 80089be:	9b06      	ldr	r3, [sp, #24]
 80089c0:	eb0a 0686 	add.w	r6, sl, r6, lsl #2
 80089c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    return current + actual_in;
 80089c8:	ed90 7a00 	vldr	s14, [r0]
 80089cc:	edd6 7a00 	vldr	s15, [r6]
 80089d0:	ee77 7a87 	vadd.f32	s15, s15, s14
    output_data[output_offset] =
 80089d4:	edc6 7a00 	vstr	s15, [r6]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 80089d8:	2f00      	cmp	r7, #0
 80089da:	db1e      	blt.n	8008a1a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc3e>
 80089dc:	e9dd 2009 	ldrd	r2, r0, [sp, #36]	@ 0x24
 80089e0:	4639      	mov	r1, r7
 80089e2:	9707      	str	r7, [sp, #28]
 80089e4:	e004      	b.n	80089f0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc14>
 80089e6:	3901      	subs	r1, #1
 80089e8:	1c4e      	adds	r6, r1, #1
      current[idx] = 0;
 80089ea:	f8c2 e004 	str.w	lr, [r2, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 80089ee:	d014      	beq.n	8008a1a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc3e>
    int current_val = current[idx] + carry;
 80089f0:	4616      	mov	r6, r2
    TFLITE_DCHECK_GE(dims[idx], current_val);
 80089f2:	f850 7d04 	ldr.w	r7, [r0, #-4]!
    int current_val = current[idx] + carry;
 80089f6:	6833      	ldr	r3, [r6, #0]
 80089f8:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 80089fa:	42bb      	cmp	r3, r7
 80089fc:	f1a2 0204 	sub.w	r2, r2, #4
 8008a00:	f73f aefb 	bgt.w	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
    if (dims[idx] == current_val) {
 8008a04:	d0ef      	beq.n	80089e6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc0a>
      current[idx] = current_val;
 8008a06:	9f07      	ldr	r7, [sp, #28]
 8008a08:	6033      	str	r3, [r6, #0]
  if (num_dims == 0) {
 8008a0a:	e7af      	b.n	800896c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xb90>
 8008a0c:	4652      	mov	r2, sl
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008a0e:	f859 0022 	ldr.w	r0, [r9, r2, lsl #2]
 8008a12:	680b      	ldr	r3, [r1, #0]
 8008a14:	fb00 3606 	mla	r6, r0, r6, r3
 8008a18:	e7ca      	b.n	80089b0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbd4>
 8008a1a:	e9dd 6b0b 	ldrd	r6, fp, [sp, #44]	@ 0x2c
 8008a1e:	f7ff bad6 	b.w	8007fce <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1f2>
    return current + actual_in;
 8008a22:	9b06      	ldr	r3, [sp, #24]
 8008a24:	edda 7a00 	vldr	s15, [sl]
 8008a28:	ed93 7a00 	vldr	s14, [r3]
 8008a2c:	ee77 7a87 	vadd.f32	s15, s15, s14
    output_data[output_offset] =
 8008a30:	edca 7a00 	vstr	s15, [sl]
  if (num_dims == 0) {
 8008a34:	e7d0      	b.n	80089d8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xbfc>
 8008a36:	4619      	mov	r1, r3
 8008a38:	ab1c      	add	r3, sp, #112	@ 0x70
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	1c6b      	adds	r3, r5, #1
 8008a3e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008a42:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
  size_t offset = 0;
 8008a46:	e9cd 6b0e 	strd	r6, fp, [sp, #56]	@ 0x38
 8008a4a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a4c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8008a50:	9507      	str	r5, [sp, #28]
 8008a52:	4613      	mov	r3, r2
 8008a54:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008a58:	eb01 0085 	add.w	r0, r1, r5, lsl #2
 8008a5c:	920c      	str	r2, [sp, #48]	@ 0x30
 8008a5e:	f04f 0c00 	mov.w	ip, #0
 8008a62:	4698      	mov	r8, r3
  for (int idx = 0; idx < num_dims; ++idx) {
 8008a64:	9b07      	ldr	r3, [sp, #28]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	dd60      	ble.n	8008b2c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd50>
 8008a6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a6c:	4641      	mov	r1, r8
 8008a6e:	4642      	mov	r2, r8
  size_t offset = 0;
 8008a70:	2600      	movs	r6, #0
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008a72:	f853 7f04 	ldr.w	r7, [r3, #4]!
               static_cast<size_t>(index[idx]);
 8008a76:	f852 5b04 	ldr.w	r5, [r2], #4
  for (int idx = 0; idx < num_dims; ++idx) {
 8008a7a:	4298      	cmp	r0, r3
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008a7c:	fb07 5606 	mla	r6, r7, r6, r5
  for (int idx = 0; idx < num_dims; ++idx) {
 8008a80:	d1f7      	bne.n	8008a72 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc96>
 8008a82:	e9cd 9b08 	strd	r9, fp, [sp, #32]
  size_t offset = 0;
 8008a86:	2700      	movs	r7, #0
 8008a88:	9d07      	ldr	r5, [sp, #28]
 8008a8a:	9006      	str	r0, [sp, #24]
  for (int idx = 0; idx < num_dims; ++idx) {
 8008a8c:	463a      	mov	r2, r7
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 8008a8e:	2c00      	cmp	r4, #0
 8008a90:	d042      	beq.n	8008b18 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd3c>
 8008a92:	9806      	ldr	r0, [sp, #24]
 8008a94:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 8008a98:	2300      	movs	r3, #0
 8008a9a:	4693      	mov	fp, r2
 8008a9c:	e002      	b.n	8008aa4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xcc8>
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	429c      	cmp	r4, r3
 8008aa2:	d037      	beq.n	8008b14 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd38>
        if (idx == axis[axis_idx]) {
 8008aa4:	f859 2b04 	ldr.w	r2, [r9], #4
 8008aa8:	455a      	cmp	r2, fp
 8008aaa:	d1f8      	bne.n	8008a9e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xcc2>
 8008aac:	465a      	mov	r2, fp
 8008aae:	9006      	str	r0, [sp, #24]
  for (int idx = 0; idx < num_dims; ++idx) {
 8008ab0:	3201      	adds	r2, #1
 8008ab2:	4295      	cmp	r5, r2
 8008ab4:	f101 0104 	add.w	r1, r1, #4
 8008ab8:	d1e9      	bne.n	8008a8e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xcb2>
    const Out actual_in = static_cast<Out>(in);
 8008aba:	e9dd 9b08 	ldrd	r9, fp, [sp, #32]
 8008abe:	f91b 2006 	ldrsb.w	r2, [fp, r6]
    return current + actual_in;
 8008ac2:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
    const Out actual_in = static_cast<Out>(in);
 8008ac6:	9806      	ldr	r0, [sp, #24]
    return current + actual_in;
 8008ac8:	4413      	add	r3, r2
    output_data[output_offset] =
 8008aca:	f849 3027 	str.w	r3, [r9, r7, lsl #2]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008ace:	f1ba 0f00 	cmp.w	sl, #0
 8008ad2:	db27      	blt.n	8008b24 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd48>
 8008ad4:	e9dd 620b 	ldrd	r6, r2, [sp, #44]	@ 0x2c
 8008ad8:	4651      	mov	r1, sl
 8008ada:	e004      	b.n	8008ae6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd0a>
 8008adc:	3901      	subs	r1, #1
 8008ade:	1c4f      	adds	r7, r1, #1
      current[idx] = 0;
 8008ae0:	f8c2 c004 	str.w	ip, [r2, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008ae4:	d01e      	beq.n	8008b24 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd48>
    int current_val = current[idx] + carry;
 8008ae6:	4617      	mov	r7, r2
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8008ae8:	f856 5d04 	ldr.w	r5, [r6, #-4]!
    int current_val = current[idx] + carry;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8008af0:	42ab      	cmp	r3, r5
 8008af2:	f1a2 0204 	sub.w	r2, r2, #4
 8008af6:	f73f ae80 	bgt.w	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
    if (dims[idx] == current_val) {
 8008afa:	d0ef      	beq.n	8008adc <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd00>
      current[idx] = current_val;
 8008afc:	603b      	str	r3, [r7, #0]
  if (num_dims == 0) {
 8008afe:	e7b1      	b.n	8008a64 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xc88>
 8008b00:	080166bc 	.word	0x080166bc
 8008b04:	08016144 	.word	0x08016144
 8008b08:	080152b4 	.word	0x080152b4
 8008b0c:	08016934 	.word	0x08016934
 8008b10:	08016bfc 	.word	0x08016bfc
 8008b14:	465a      	mov	r2, fp
 8008b16:	9006      	str	r0, [sp, #24]
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008b18:	680b      	ldr	r3, [r1, #0]
 8008b1a:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8008b1e:	fb00 3707 	mla	r7, r0, r7, r3
 8008b22:	e7c5      	b.n	8008ab0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xcd4>
 8008b24:	e9dd 6b0e 	ldrd	r6, fp, [sp, #56]	@ 0x38
 8008b28:	f7ff bb26 	b.w	8008178 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x39c>
    const Out actual_in = static_cast<Out>(in);
 8008b2c:	f99b 2000 	ldrsb.w	r2, [fp]
    return current + actual_in;
 8008b30:	f8d9 3000 	ldr.w	r3, [r9]
 8008b34:	4413      	add	r3, r2
    output_data[output_offset] =
 8008b36:	f8c9 3000 	str.w	r3, [r9]
  if (num_dims == 0) {
 8008b3a:	e7c8      	b.n	8008ace <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xcf2>
  int num_resolved_axis = 0;
 8008b3c:	462c      	mov	r4, r5
 8008b3e:	f7ff ba38 	b.w	8007fb2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1d6>
 8008b42:	4619      	mov	r1, r3
 8008b44:	ab1c      	add	r3, sp, #112	@ 0x70
 8008b46:	461a      	mov	r2, r3
 8008b48:	1c6b      	adds	r3, r5, #1
 8008b4a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008b4e:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
  size_t offset = 0;
 8008b52:	e9cd 6b0e 	strd	r6, fp, [sp, #56]	@ 0x38
 8008b56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008b58:	f8dd b018 	ldr.w	fp, [sp, #24]
 8008b5c:	9507      	str	r5, [sp, #28]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008b64:	eb01 0085 	add.w	r0, r1, r5, lsl #2
 8008b68:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b6a:	f04f 0c00 	mov.w	ip, #0
 8008b6e:	4698      	mov	r8, r3
  for (int idx = 0; idx < num_dims; ++idx) {
 8008b70:	9b07      	ldr	r3, [sp, #28]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	dd55      	ble.n	8008c22 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe46>
 8008b76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b78:	4641      	mov	r1, r8
 8008b7a:	4642      	mov	r2, r8
  size_t offset = 0;
 8008b7c:	2600      	movs	r6, #0
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008b7e:	f853 7f04 	ldr.w	r7, [r3, #4]!
               static_cast<size_t>(index[idx]);
 8008b82:	f852 5b04 	ldr.w	r5, [r2], #4
  for (int idx = 0; idx < num_dims; ++idx) {
 8008b86:	4298      	cmp	r0, r3
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008b88:	fb07 5606 	mla	r6, r7, r6, r5
  for (int idx = 0; idx < num_dims; ++idx) {
 8008b8c:	d1f7      	bne.n	8008b7e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xda2>
 8008b8e:	e9cd 9b08 	strd	r9, fp, [sp, #32]
  size_t offset = 0;
 8008b92:	2700      	movs	r7, #0
 8008b94:	9d07      	ldr	r5, [sp, #28]
 8008b96:	9006      	str	r0, [sp, #24]
  for (int idx = 0; idx < num_dims; ++idx) {
 8008b98:	463a      	mov	r2, r7
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 8008b9a:	b3c4      	cbz	r4, 8008c0e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe32>
 8008b9c:	9806      	ldr	r0, [sp, #24]
 8008b9e:	f10d 0958 	add.w	r9, sp, #88	@ 0x58
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	4693      	mov	fp, r2
 8008ba6:	e002      	b.n	8008bae <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xdd2>
 8008ba8:	3301      	adds	r3, #1
 8008baa:	429c      	cmp	r4, r3
 8008bac:	d02d      	beq.n	8008c0a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe2e>
        if (idx == axis[axis_idx]) {
 8008bae:	f859 2b04 	ldr.w	r2, [r9], #4
 8008bb2:	455a      	cmp	r2, fp
 8008bb4:	d1f8      	bne.n	8008ba8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xdcc>
 8008bb6:	465a      	mov	r2, fp
 8008bb8:	9006      	str	r0, [sp, #24]
  for (int idx = 0; idx < num_dims; ++idx) {
 8008bba:	3201      	adds	r2, #1
 8008bbc:	4295      	cmp	r5, r2
 8008bbe:	f101 0104 	add.w	r1, r1, #4
 8008bc2:	d1ea      	bne.n	8008b9a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xdbe>
    const Out actual_in = static_cast<Out>(in);
 8008bc4:	e9dd 9b08 	ldrd	r9, fp, [sp, #32]
 8008bc8:	f81b 2006 	ldrb.w	r2, [fp, r6]
    return current + actual_in;
 8008bcc:	f859 3027 	ldr.w	r3, [r9, r7, lsl #2]
    const Out actual_in = static_cast<Out>(in);
 8008bd0:	9806      	ldr	r0, [sp, #24]
    return current + actual_in;
 8008bd2:	4413      	add	r3, r2
    output_data[output_offset] =
 8008bd4:	f849 3027 	str.w	r3, [r9, r7, lsl #2]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008bd8:	f1ba 0f00 	cmp.w	sl, #0
 8008bdc:	db1d      	blt.n	8008c1a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe3e>
 8008bde:	e9dd 620b 	ldrd	r6, r2, [sp, #44]	@ 0x2c
 8008be2:	4651      	mov	r1, sl
 8008be4:	e004      	b.n	8008bf0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe14>
 8008be6:	3901      	subs	r1, #1
 8008be8:	1c4b      	adds	r3, r1, #1
      current[idx] = 0;
 8008bea:	f8c2 c004 	str.w	ip, [r2, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008bee:	d014      	beq.n	8008c1a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe3e>
    int current_val = current[idx] + carry;
 8008bf0:	4617      	mov	r7, r2
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8008bf2:	f856 5d04 	ldr.w	r5, [r6, #-4]!
    int current_val = current[idx] + carry;
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8008bfa:	42ab      	cmp	r3, r5
 8008bfc:	f1a2 0204 	sub.w	r2, r2, #4
 8008c00:	f73f adfb 	bgt.w	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
    if (dims[idx] == current_val) {
 8008c04:	d0ef      	beq.n	8008be6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe0a>
      current[idx] = current_val;
 8008c06:	603b      	str	r3, [r7, #0]
  if (num_dims == 0) {
 8008c08:	e7b2      	b.n	8008b70 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xd94>
 8008c0a:	465a      	mov	r2, fp
 8008c0c:	9006      	str	r0, [sp, #24]
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008c0e:	680b      	ldr	r3, [r1, #0]
 8008c10:	f85e 0022 	ldr.w	r0, [lr, r2, lsl #2]
 8008c14:	fb00 3707 	mla	r7, r0, r7, r3
 8008c18:	e7cf      	b.n	8008bba <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xdde>
 8008c1a:	e9dd 6b0e 	ldrd	r6, fp, [sp, #56]	@ 0x38
 8008c1e:	f7ff bbbe 	b.w	800839e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x5c2>
    const Out actual_in = static_cast<Out>(in);
 8008c22:	f89b 2000 	ldrb.w	r2, [fp]
    return current + actual_in;
 8008c26:	f8d9 3000 	ldr.w	r3, [r9]
 8008c2a:	4413      	add	r3, r2
    output_data[output_offset] =
 8008c2c:	f8c9 3000 	str.w	r3, [r9]
  if (num_dims == 0) {
 8008c30:	e7d2      	b.n	8008bd8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xdfc>
  int num_resolved_axis = 0;
 8008c32:	462c      	mov	r4, r5
 8008c34:	f7ff bba6 	b.w	8008384 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x5a8>
 8008c38:	462c      	mov	r4, r5
 8008c3a:	f7ff ba8f 	b.w	800815c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x380>
 8008c3e:	940d      	str	r4, [sp, #52]	@ 0x34
 8008c40:	f7ff ba18 	b.w	8008074 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x298>
 8008c44:	940d      	str	r4, [sp, #52]	@ 0x34
 8008c46:	f7ff bb29 	b.w	800829c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x4c0>
        TF_LITE_ENSURE(
 8008c4a:	4bb9      	ldr	r3, [pc, #740]	@ (8008f30 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1154>)
 8008c4c:	f8db 4014 	ldr.w	r4, [fp, #20]
 8008c50:	4ab8      	ldr	r2, [pc, #736]	@ (8008f34 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1158>)
 8008c52:	9300      	str	r3, [sp, #0]
 8008c54:	49b8      	ldr	r1, [pc, #736]	@ (8008f38 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x115c>)
 8008c56:	23c1      	movs	r3, #193	@ 0xc1
 8008c58:	4658      	mov	r0, fp
 8008c5a:	47a0      	blx	r4
 8008c5c:	f7ff b92f 	b.w	8007ebe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe2>
        TF_LITE_ENSURE(
 8008c60:	4bb6      	ldr	r3, [pc, #728]	@ (8008f3c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1160>)
 8008c62:	f8db 4014 	ldr.w	r4, [fp, #20]
 8008c66:	4ab3      	ldr	r2, [pc, #716]	@ (8008f34 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1158>)
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	49b3      	ldr	r1, [pc, #716]	@ (8008f38 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x115c>)
 8008c6c:	23e5      	movs	r3, #229	@ 0xe5
 8008c6e:	4658      	mov	r0, fp
 8008c70:	47a0      	blx	r4
 8008c72:	f7ff b924 	b.w	8007ebe <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xe2>
      if (params->keep_dims && special_case_4d_axes_1_and_2) {
 8008c76:	f899 3000 	ldrb.w	r3, [r9]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f43f aaf0 	beq.w	8008260 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x484>
 8008c80:	2900      	cmp	r1, #0
 8008c82:	f43f aaed 	beq.w	8008260 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x484>
        reference_ops::Mean(op_params, tflite::micro::GetTensorShape(input),
 8008c86:	9e06      	ldr	r6, [sp, #24]
 8008c88:	ad16      	add	r5, sp, #88	@ 0x58
 8008c8a:	4631      	mov	r1, r6
 8008c8c:	4628      	mov	r0, r5
 8008c8e:	f7fd fdf9 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 8008c92:	ab1c      	add	r3, sp, #112	@ 0x70
 8008c94:	4621      	mov	r1, r4
 8008c96:	4618      	mov	r0, r3
  return reinterpret_cast<const T*>(tensor->data.raw);
 8008c98:	6836      	ldr	r6, [r6, #0]
                            op_data->input_zp, op_data->input_scale,
 8008c9a:	f8da 7010 	ldr.w	r7, [sl, #16]
        reference_ops::Mean(op_params, tflite::micro::GetTensorShape(input),
 8008c9e:	ed9a 8a05 	vldr	s16, [sl, #20]
                            tflite::micro::GetTensorShape(output),
 8008ca2:	9307      	str	r3, [sp, #28]
 8008ca4:	f7fd fdee 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8008ca8:	b104      	cbz	r4, 8008cac <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xed0>
 8008caa:	6824      	ldr	r4, [r4, #0]
        reference_ops::Mean(op_params, tflite::micro::GetTensorShape(input),
 8008cac:	f8da 3018 	ldr.w	r3, [sl, #24]
 8008cb0:	edda 0a07 	vldr	s1, [sl, #28]
 8008cb4:	9302      	str	r3, [sp, #8]
 8008cb6:	9b07      	ldr	r3, [sp, #28]
 8008cb8:	9300      	str	r3, [sp, #0]
 8008cba:	eeb0 0a48 	vmov.f32	s0, s16
 8008cbe:	463b      	mov	r3, r7
 8008cc0:	9401      	str	r4, [sp, #4]
 8008cc2:	4632      	mov	r2, r6
 8008cc4:	4629      	mov	r1, r5
 8008cc6:	a813      	add	r0, sp, #76	@ 0x4c
 8008cc8:	f7fe faee 	bl	80072a8 <_ZN6tflite13reference_ops4MeanERKNS_10MeanParamsERKNS_12RuntimeShapeEPKhlfS6_Phlf>
    if (size_ > kMaxSmallSize) {
 8008ccc:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	f77f adf2 	ble.w	80088b8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xadc>
 8008cd4:	e5ec      	b.n	80088b0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xad4>
  int num_resolved_axis = 0;
 8008cd6:	2400      	movs	r4, #0
 8008cd8:	f7ff b964 	b.w	8007fa4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1c8>
  size_t num_elements_in_axis = 1;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	f7ff ba70 	b.w	80081c2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x3e6>
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	1c6b      	adds	r3, r5, #1
 8008ce6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008cea:	aa1c      	add	r2, sp, #112	@ 0x70
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008cec:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 8008cf0:	930d      	str	r3, [sp, #52]	@ 0x34
 8008cf2:	eb02 0388 	add.w	r3, r2, r8, lsl #2
 8008cf6:	9207      	str	r2, [sp, #28]
 8008cf8:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8008cfc:	930e      	str	r3, [sp, #56]	@ 0x38
  size_t offset = 0;
 8008cfe:	f04f 0900 	mov.w	r9, #0
 8008d02:	46b6      	mov	lr, r6
  for (int idx = 0; idx < num_dims; ++idx) {
 8008d04:	2d00      	cmp	r5, #0
 8008d06:	dd57      	ble.n	8008db8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfdc>
 8008d08:	9a07      	ldr	r2, [sp, #28]
 8008d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  size_t offset = 0;
 8008d0c:	9506      	str	r5, [sp, #24]
 8008d0e:	4610      	mov	r0, r2
 8008d10:	2600      	movs	r6, #0
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008d12:	f853 7f04 	ldr.w	r7, [r3, #4]!
               static_cast<size_t>(index[idx]);
 8008d16:	f852 5b04 	ldr.w	r5, [r2], #4
  for (int idx = 0; idx < num_dims; ++idx) {
 8008d1a:	4299      	cmp	r1, r3
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008d1c:	fb07 5606 	mla	r6, r7, r6, r5
  for (int idx = 0; idx < num_dims; ++idx) {
 8008d20:	d1f7      	bne.n	8008d12 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf36>
 8008d22:	e9cd ae0b 	strd	sl, lr, [sp, #44]	@ 0x2c
  size_t offset = 0;
 8008d26:	2700      	movs	r7, #0
 8008d28:	9d06      	ldr	r5, [sp, #24]
 8008d2a:	9106      	str	r1, [sp, #24]
  for (int idx = 0; idx < num_dims; ++idx) {
 8008d2c:	463a      	mov	r2, r7
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 8008d2e:	2c00      	cmp	r4, #0
 8008d30:	d03a      	beq.n	8008da8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfcc>
 8008d32:	9906      	ldr	r1, [sp, #24]
 8008d34:	f10d 0e58 	add.w	lr, sp, #88	@ 0x58
 8008d38:	2300      	movs	r3, #0
 8008d3a:	4692      	mov	sl, r2
 8008d3c:	e002      	b.n	8008d44 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf68>
 8008d3e:	3301      	adds	r3, #1
 8008d40:	42a3      	cmp	r3, r4
 8008d42:	d02f      	beq.n	8008da4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfc8>
        if (idx == axis[axis_idx]) {
 8008d44:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008d48:	4552      	cmp	r2, sl
 8008d4a:	d1f8      	bne.n	8008d3e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf62>
 8008d4c:	4652      	mov	r2, sl
 8008d4e:	9106      	str	r1, [sp, #24]
  for (int idx = 0; idx < num_dims; ++idx) {
 8008d50:	3201      	adds	r2, #1
 8008d52:	4295      	cmp	r5, r2
 8008d54:	f100 0004 	add.w	r0, r0, #4
 8008d58:	d1e9      	bne.n	8008d2e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf52>
    const Out actual_in = static_cast<Out>(in);
 8008d5a:	e9dd ae0b 	ldrd	sl, lr, [sp, #44]	@ 0x2c
 8008d5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d60:	9906      	ldr	r1, [sp, #24]
 8008d62:	579a      	ldrsb	r2, [r3, r6]
    return current + actual_in;
 8008d64:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 8008d68:	4413      	add	r3, r2
    output_data[output_offset] =
 8008d6a:	f84a 3027 	str.w	r3, [sl, r7, lsl #2]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008d6e:	f1b8 0f00 	cmp.w	r8, #0
 8008d72:	db1f      	blt.n	8008db4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfd8>
 8008d74:	e9dd 620d 	ldrd	r6, r2, [sp, #52]	@ 0x34
 8008d78:	4640      	mov	r0, r8
 8008d7a:	9506      	str	r5, [sp, #24]
 8008d7c:	e004      	b.n	8008d88 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfac>
 8008d7e:	3801      	subs	r0, #1
 8008d80:	1c43      	adds	r3, r0, #1
      current[idx] = 0;
 8008d82:	f8c2 9004 	str.w	r9, [r2, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008d86:	d015      	beq.n	8008db4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfd8>
    int current_val = current[idx] + carry;
 8008d88:	4617      	mov	r7, r2
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8008d8a:	f856 5d04 	ldr.w	r5, [r6, #-4]!
    int current_val = current[idx] + carry;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8008d92:	42ab      	cmp	r3, r5
 8008d94:	f1a2 0204 	sub.w	r2, r2, #4
 8008d98:	f73f ad2f 	bgt.w	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
    if (dims[idx] == current_val) {
 8008d9c:	d0ef      	beq.n	8008d7e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xfa2>
      current[idx] = current_val;
 8008d9e:	9d06      	ldr	r5, [sp, #24]
 8008da0:	603b      	str	r3, [r7, #0]
  if (num_dims == 0) {
 8008da2:	e7af      	b.n	8008d04 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf28>
 8008da4:	4652      	mov	r2, sl
 8008da6:	9106      	str	r1, [sp, #24]
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008da8:	6803      	ldr	r3, [r0, #0]
 8008daa:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8008dae:	fb01 3707 	mla	r7, r1, r7, r3
 8008db2:	e7cd      	b.n	8008d50 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf74>
 8008db4:	4676      	mov	r6, lr
 8008db6:	e4c6      	b.n	8008746 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x96a>
    const Out actual_in = static_cast<Out>(in);
 8008db8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dba:	f993 2000 	ldrsb.w	r2, [r3]
    return current + actual_in;
 8008dbe:	f8da 3000 	ldr.w	r3, [sl]
 8008dc2:	4413      	add	r3, r2
    output_data[output_offset] =
 8008dc4:	f8ca 3000 	str.w	r3, [sl]
  if (num_dims == 0) {
 8008dc8:	e7d1      	b.n	8008d6e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xf92>
 8008dca:	9408      	str	r4, [sp, #32]
 8008dcc:	f7ff bb88 	b.w	80084e0 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x704>
  int num_resolved_axis = 0;
 8008dd0:	2400      	movs	r4, #0
 8008dd2:	f7ff b9bc 	b.w	800814e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x372>
 8008dd6:	2400      	movs	r4, #0
 8008dd8:	f7ff bacd 	b.w	8008376 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x59a>
  size_t num_elements_in_axis = 1;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f7ff b911 	b.w	8008004 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x228>
  int num_resolved_axis = 0;
 8008de2:	462c      	mov	r4, r5
 8008de4:	f7ff bbe6 	b.w	80085b4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x7d8>
 8008de8:	9408      	str	r4, [sp, #32]
 8008dea:	e434      	b.n	8008656 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x87a>
 8008dec:	462c      	mov	r4, r5
 8008dee:	e49c      	b.n	800872a <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x94e>
 8008df0:	4619      	mov	r1, r3
 8008df2:	1c6b      	adds	r3, r5, #1
 8008df4:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008df8:	aa1c      	add	r2, sp, #112	@ 0x70
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008dfa:	f105 38ff 	add.w	r8, r5, #4294967295	@ 0xffffffff
 8008dfe:	930d      	str	r3, [sp, #52]	@ 0x34
 8008e00:	eb02 0388 	add.w	r3, r2, r8, lsl #2
 8008e04:	9207      	str	r2, [sp, #28]
 8008e06:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8008e0a:	930e      	str	r3, [sp, #56]	@ 0x38
  size_t offset = 0;
 8008e0c:	f04f 0900 	mov.w	r9, #0
 8008e10:	46b6      	mov	lr, r6
  for (int idx = 0; idx < num_dims; ++idx) {
 8008e12:	2d00      	cmp	r5, #0
 8008e14:	dd58      	ble.n	8008ec8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10ec>
 8008e16:	9a07      	ldr	r2, [sp, #28]
 8008e18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  size_t offset = 0;
 8008e1a:	9506      	str	r5, [sp, #24]
 8008e1c:	4610      	mov	r0, r2
 8008e1e:	2600      	movs	r6, #0
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008e20:	f853 7f04 	ldr.w	r7, [r3, #4]!
               static_cast<size_t>(index[idx]);
 8008e24:	f852 5b04 	ldr.w	r5, [r2], #4
  for (int idx = 0; idx < num_dims; ++idx) {
 8008e28:	4299      	cmp	r1, r3
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008e2a:	fb07 5606 	mla	r6, r7, r6, r5
  for (int idx = 0; idx < num_dims; ++idx) {
 8008e2e:	d1f7      	bne.n	8008e20 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1044>
 8008e30:	e9cd ae0b 	strd	sl, lr, [sp, #44]	@ 0x2c
  size_t offset = 0;
 8008e34:	2700      	movs	r7, #0
 8008e36:	9d06      	ldr	r5, [sp, #24]
 8008e38:	9106      	str	r1, [sp, #24]
  for (int idx = 0; idx < num_dims; ++idx) {
 8008e3a:	463a      	mov	r2, r7
      for (int axis_idx = 0; axis_idx < num_axis; ++axis_idx) {
 8008e3c:	2c00      	cmp	r4, #0
 8008e3e:	d03a      	beq.n	8008eb6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10da>
 8008e40:	9906      	ldr	r1, [sp, #24]
 8008e42:	f10d 0e58 	add.w	lr, sp, #88	@ 0x58
 8008e46:	2300      	movs	r3, #0
 8008e48:	4692      	mov	sl, r2
 8008e4a:	e002      	b.n	8008e52 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1076>
 8008e4c:	3301      	adds	r3, #1
 8008e4e:	429c      	cmp	r4, r3
 8008e50:	d02f      	beq.n	8008eb2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10d6>
        if (idx == axis[axis_idx]) {
 8008e52:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008e56:	4552      	cmp	r2, sl
 8008e58:	d1f8      	bne.n	8008e4c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1070>
 8008e5a:	4652      	mov	r2, sl
 8008e5c:	9106      	str	r1, [sp, #24]
  for (int idx = 0; idx < num_dims; ++idx) {
 8008e5e:	3201      	adds	r2, #1
 8008e60:	4295      	cmp	r5, r2
 8008e62:	f100 0004 	add.w	r0, r0, #4
 8008e66:	d1e9      	bne.n	8008e3c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1060>
    const Out actual_in = static_cast<Out>(in);
 8008e68:	e9dd ae0b 	ldrd	sl, lr, [sp, #44]	@ 0x2c
 8008e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e6e:	9906      	ldr	r1, [sp, #24]
 8008e70:	5d9a      	ldrb	r2, [r3, r6]
    return current + actual_in;
 8008e72:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 8008e76:	4413      	add	r3, r2
    output_data[output_offset] =
 8008e78:	f84a 3027 	str.w	r3, [sl, r7, lsl #2]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008e7c:	f1b8 0f00 	cmp.w	r8, #0
 8008e80:	db1f      	blt.n	8008ec2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10e6>
 8008e82:	e9dd 620d 	ldrd	r6, r2, [sp, #52]	@ 0x34
 8008e86:	4640      	mov	r0, r8
 8008e88:	9506      	str	r5, [sp, #24]
 8008e8a:	e004      	b.n	8008e96 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10ba>
 8008e8c:	3801      	subs	r0, #1
 8008e8e:	1c45      	adds	r5, r0, #1
      current[idx] = 0;
 8008e90:	f8c2 9004 	str.w	r9, [r2, #4]
  for (int idx = num_dims - 1; idx >= 0; --idx) {
 8008e94:	d015      	beq.n	8008ec2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10e6>
    int current_val = current[idx] + carry;
 8008e96:	4617      	mov	r7, r2
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8008e98:	f856 5d04 	ldr.w	r5, [r6, #-4]!
    int current_val = current[idx] + carry;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	3301      	adds	r3, #1
    TFLITE_DCHECK_GE(dims[idx], current_val);
 8008ea0:	42ab      	cmp	r3, r5
 8008ea2:	f1a2 0204 	sub.w	r2, r2, #4
 8008ea6:	f73f aca8 	bgt.w	80087fa <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0xa1e>
    if (dims[idx] == current_val) {
 8008eaa:	d0ef      	beq.n	8008e8c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10b0>
      current[idx] = current_val;
 8008eac:	9d06      	ldr	r5, [sp, #24]
 8008eae:	603b      	str	r3, [r7, #0]
  if (num_dims == 0) {
 8008eb0:	e7af      	b.n	8008e12 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1036>
 8008eb2:	4652      	mov	r2, sl
 8008eb4:	9106      	str	r1, [sp, #24]
      offset = offset * static_cast<size_t>(dims[idx]) +
 8008eb6:	6803      	ldr	r3, [r0, #0]
 8008eb8:	f85c 1022 	ldr.w	r1, [ip, r2, lsl #2]
 8008ebc:	fb01 3707 	mla	r7, r1, r7, r3
 8008ec0:	e7cd      	b.n	8008e5e <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1082>
 8008ec2:	4676      	mov	r6, lr
 8008ec4:	f7ff bb83 	b.w	80085ce <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x7f2>
    const Out actual_in = static_cast<Out>(in);
 8008ec8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eca:	781a      	ldrb	r2, [r3, #0]
    return current + actual_in;
 8008ecc:	f8da 3000 	ldr.w	r3, [sl]
 8008ed0:	4413      	add	r3, r2
    output_data[output_offset] =
 8008ed2:	f8ca 3000 	str.w	r3, [sl]
  if (num_dims == 0) {
 8008ed6:	e7d1      	b.n	8008e7c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x10a0>
  size_t num_elements_in_axis = 1;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	f7ff ba7b 	b.w	80083d4 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x5f8>
  int num_resolved_axis = 0;
 8008ede:	2400      	movs	r4, #0
 8008ee0:	e41c      	b.n	800871c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x940>
 8008ee2:	3901      	subs	r1, #1
 8008ee4:	f1aa 0004 	sub.w	r0, sl, #4
 8008ee8:	460a      	mov	r2, r1
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008eea:	9f08      	ldr	r7, [sp, #32]
    output_data[idx] = T();
 8008eec:	f801 3f01 	strb.w	r3, [r1, #1]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008ef0:	3202      	adds	r2, #2
 8008ef2:	1bd2      	subs	r2, r2, r7
 8008ef4:	4296      	cmp	r6, r2
    temp_sum[idx] = U();
 8008ef6:	f840 3f04 	str.w	r3, [r0, #4]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008efa:	d8f5      	bhi.n	8008ee8 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x110c>
 8008efc:	f7ff bbe1 	b.w	80086c2 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x8e6>
  size_t num_elements_in_axis = 1;
 8008f00:	2301      	movs	r3, #1
 8008f02:	f7ff bb7f 	b.w	8008604 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x828>
  int num_resolved_axis = 0;
 8008f06:	2400      	movs	r4, #0
 8008f08:	f7ff bb4d 	b.w	80085a6 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x7ca>
 8008f0c:	3901      	subs	r1, #1
 8008f0e:	f1aa 0004 	sub.w	r0, sl, #4
 8008f12:	460a      	mov	r2, r1
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008f14:	9f08      	ldr	r7, [sp, #32]
    output_data[idx] = T();
 8008f16:	f801 3f01 	strb.w	r3, [r1, #1]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008f1a:	3202      	adds	r2, #2
 8008f1c:	1bd2      	subs	r2, r2, r7
 8008f1e:	4296      	cmp	r6, r2
    temp_sum[idx] = U();
 8008f20:	f840 3f04 	str.w	r3, [r0, #4]!
  for (size_t idx = 0; idx < num_outputs; ++idx) {
 8008f24:	d8f5      	bhi.n	8008f12 <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x1136>
 8008f26:	f7ff bb11 	b.w	800854c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x770>
  size_t num_elements_in_axis = 1;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	e426      	b.n	800877c <_ZN6tflite3ops5micro6reduce8EvalMeanEP13TfLiteContextP10TfLiteNode+0x9a0>
 8008f2e:	bf00      	nop
 8008f30:	08016808 	.word	0x08016808
 8008f34:	08016144 	.word	0x08016144
 8008f38:	080152b4 	.word	0x080152b4
 8008f3c:	08016acc 	.word	0x08016acc

08008f40 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8008f40:	b570      	push	{r4, r5, r6, lr}
 8008f42:	b082      	sub	sp, #8
  TFLITE_DCHECK(context != nullptr);
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d035      	beq.n	8008fb4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x74>
  TFLITE_DCHECK(node != nullptr);
 8008f48:	460e      	mov	r6, r1
 8008f4a:	2900      	cmp	r1, #0
 8008f4c:	d032      	beq.n	8008fb4 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x74>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8008f4e:	680a      	ldr	r2, [r1, #0]
 8008f50:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008f52:	6851      	ldr	r1, [r2, #4]
 8008f54:	4605      	mov	r5, r0
 8008f56:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8008f58:	6873      	ldr	r3, [r6, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8008f5a:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8008f5c:	6859      	ldr	r1, [r3, #4]
 8008f5e:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8008f60:	4628      	mov	r0, r5
 8008f62:	4798      	blx	r3
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  // TODO(b/162522304): storing input bytes in OpData increases some models
  // significantly, possibly due to alignment issues.
  size_t input_bytes;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(input->type, &input_bytes));
 8008f64:	a901      	add	r1, sp, #4
 8008f66:	4605      	mov	r5, r0
 8008f68:	7a20      	ldrb	r0, [r4, #8]
 8008f6a:	f7fb fae1 	bl	8004530 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8008f6e:	4606      	mov	r6, r0
 8008f70:	b110      	cbz	r0, 8008f78 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x38>
    for (size_t i = 0; i < input_bytes; ++i) {
      output->data.raw[i] = input->data.raw[i];
    }
  }
  return kTfLiteOk;
}
 8008f72:	4630      	mov	r0, r6
 8008f74:	b002      	add	sp, #8
 8008f76:	bd70      	pop	{r4, r5, r6, pc}
  input_bytes *= ElementCount(*input->dims);
 8008f78:	6860      	ldr	r0, [r4, #4]
 8008f7a:	f7fd fbbb 	bl	80066f4 <_ZN6tflite12ElementCountERK14TfLiteIntArray>
 8008f7e:	9b01      	ldr	r3, [sp, #4]
  if (input->data.raw != output->data.raw) {
 8008f80:	6822      	ldr	r2, [r4, #0]
  input_bytes *= ElementCount(*input->dims);
 8008f82:	fb03 f000 	mul.w	r0, r3, r0
  if (input->data.raw != output->data.raw) {
 8008f86:	682b      	ldr	r3, [r5, #0]
  input_bytes *= ElementCount(*input->dims);
 8008f88:	9001      	str	r0, [sp, #4]
  if (input->data.raw != output->data.raw) {
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d0f1      	beq.n	8008f72 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    for (size_t i = 0; i < input_bytes; ++i) {
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d0ef      	beq.n	8008f72 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
      output->data.raw[i] = input->data.raw[i];
 8008f92:	7812      	ldrb	r2, [r2, #0]
 8008f94:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_bytes; ++i) {
 8008f96:	9b01      	ldr	r3, [sp, #4]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d9ea      	bls.n	8008f72 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
 8008f9c:	2301      	movs	r3, #1
      output->data.raw[i] = input->data.raw[i];
 8008f9e:	6821      	ldr	r1, [r4, #0]
 8008fa0:	682a      	ldr	r2, [r5, #0]
 8008fa2:	5cc9      	ldrb	r1, [r1, r3]
 8008fa4:	54d1      	strb	r1, [r2, r3]
    for (size_t i = 0; i < input_bytes; ++i) {
 8008fa6:	9a01      	ldr	r2, [sp, #4]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d8f7      	bhi.n	8008f9e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x5e>
}
 8008fae:	4630      	mov	r0, r6
 8008fb0:	b002      	add	sp, #8
 8008fb2:	bd70      	pop	{r4, r5, r6, pc}
  TFLITE_DCHECK(context != nullptr);
 8008fb4:	f007 ff82 	bl	8010ebc <abort>

08008fb8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 8008fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8008fbc:	2200      	movs	r2, #0
TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 8008fbe:	b084      	sub	sp, #16
 8008fc0:	4605      	mov	r5, r0
 8008fc2:	460f      	mov	r7, r1
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8008fc4:	f7fa ff6c 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, input != nullptr);
 8008fc8:	2800      	cmp	r0, #0
 8008fca:	d05b      	beq.n	8009084 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xcc>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8008fcc:	4606      	mov	r6, r0
 8008fce:	2200      	movs	r2, #0
 8008fd0:	4639      	mov	r1, r7
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f7fa ff80 	bl	8003ed8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TF_LITE_ENSURE(context, output != nullptr);
 8008fd8:	4680      	mov	r8, r0
 8008fda:	2800      	cmp	r0, #0
 8008fdc:	f000 808b 	beq.w	80090f6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x13e>
  return NumElements(t->dims);
 8008fe0:	68b0      	ldr	r0, [r6, #8]
  for (int i = 0; i < dims->size; ++i) {
 8008fe2:	6804      	ldr	r4, [r0, #0]
 8008fe4:	2c00      	cmp	r4, #0
 8008fe6:	f340 808f 	ble.w	8009108 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x150>
  int64_t count = 1;
 8008fea:	2201      	movs	r2, #1
  for (int i = 0; i < dims->size; ++i) {
 8008fec:	2100      	movs	r1, #0
    count *= dims->data[i];
 8008fee:	f850 3f04 	ldr.w	r3, [r0, #4]!
  for (int i = 0; i < dims->size; ++i) {
 8008ff2:	3101      	adds	r1, #1
 8008ff4:	42a1      	cmp	r1, r4
    count *= dims->data[i];
 8008ff6:	fba2 2303 	umull	r2, r3, r2, r3
  for (int i = 0; i < dims->size; ++i) {
 8008ffa:	d1f8      	bne.n	8008fee <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x36>
  int num_input_elements = NumElements(input);
 8008ffc:	4614      	mov	r4, r2
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8008ffe:	683b      	ldr	r3, [r7, #0]
  TfLiteIntArray* output_shape = output->dims;
 8009000:	f8d8 e008 	ldr.w	lr, [r8, #8]
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f8de 0000 	ldr.w	r0, [lr]
 800900a:	2b01      	cmp	r3, #1
 800900c:	d044      	beq.n	8009098 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xe0>
  for (int i = 0; i < output_shape->size; ++i) {
 800900e:	2800      	cmp	r0, #0
 8009010:	dd4a      	ble.n	80090a8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf0>
 8009012:	4671      	mov	r1, lr
 8009014:	2300      	movs	r3, #0
  int stretch_dim = -1;
 8009016:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
  int num_output_elements = 1;
 800901a:	2701      	movs	r7, #1
 800901c:	e004      	b.n	8009028 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x70>
  for (int i = 0; i < output_shape->size; ++i) {
 800901e:	3301      	adds	r3, #1
 8009020:	4283      	cmp	r3, r0
      num_output_elements *= value;
 8009022:	fb02 f707 	mul.w	r7, r2, r7
  for (int i = 0; i < output_shape->size; ++i) {
 8009026:	d00b      	beq.n	8009040 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x88>
    int value = output_shape->data[i];
 8009028:	f851 2f04 	ldr.w	r2, [r1, #4]!
    if (value == -1) {
 800902c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009030:	d1f5      	bne.n	800901e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x66>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 8009032:	f1bc 3fff 	cmp.w	ip, #4294967295	@ 0xffffffff
 8009036:	d151      	bne.n	80090dc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x124>
 8009038:	469c      	mov	ip, r3
  for (int i = 0; i < output_shape->size; ++i) {
 800903a:	3301      	adds	r3, #1
 800903c:	4283      	cmp	r3, r0
 800903e:	d1f3      	bne.n	8009028 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x70>
  if (stretch_dim != -1) {
 8009040:	f1bc 3fff 	cmp.w	ip, #4294967295	@ 0xffffffff
 8009044:	d007      	beq.n	8009056 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9e>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 8009046:	fb94 f3f7 	sdiv	r3, r4, r7
 800904a:	eb0e 0e8c 	add.w	lr, lr, ip, lsl #2
    num_output_elements *= output_shape->data[stretch_dim];
 800904e:	fb03 f707 	mul.w	r7, r3, r7
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 8009052:	f8ce 3004 	str.w	r3, [lr, #4]
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8009056:	7830      	ldrb	r0, [r6, #0]
 8009058:	f898 3000 	ldrb.w	r3, [r8]
 800905c:	4283      	cmp	r3, r0
 800905e:	d129      	bne.n	80090b4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfc>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 8009060:	42bc      	cmp	r4, r7
 8009062:	d023      	beq.n	80090ac <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xf4>
 8009064:	e9cd 4702 	strd	r4, r7, [sp, #8]
 8009068:	4a28      	ldr	r2, [pc, #160]	@ (800910c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x154>)
 800906a:	4b29      	ldr	r3, [pc, #164]	@ (8009110 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x158>)
 800906c:	696c      	ldr	r4, [r5, #20]
 800906e:	4929      	ldr	r1, [pc, #164]	@ (8009114 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
 8009070:	e9cd 3200 	strd	r3, r2, [sp]
 8009074:	4628      	mov	r0, r5
 8009076:	4a28      	ldr	r2, [pc, #160]	@ (8009118 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x160>)
 8009078:	2346      	movs	r3, #70	@ 0x46
 800907a:	47a0      	blx	r4
  TF_LITE_ENSURE(context, input != nullptr);
 800907c:	2001      	movs	r0, #1
}
 800907e:	b004      	add	sp, #16
 8009080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE(context, input != nullptr);
 8009084:	4b25      	ldr	r3, [pc, #148]	@ (800911c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x164>)
 8009086:	696c      	ldr	r4, [r5, #20]
 8009088:	4a23      	ldr	r2, [pc, #140]	@ (8009118 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x160>)
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	4924      	ldr	r1, [pc, #144]	@ (8009120 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x168>)
 800908e:	2323      	movs	r3, #35	@ 0x23
 8009090:	4628      	mov	r0, r5
 8009092:	47a0      	blx	r4
 8009094:	2001      	movs	r0, #1
 8009096:	e7f2      	b.n	800907e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc6>
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8009098:	2801      	cmp	r0, #1
 800909a:	d1b8      	bne.n	800900e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 800909c:	f8de 3004 	ldr.w	r3, [lr, #4]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1b6      	bne.n	8009012 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x5a>
    output_shape->size = 0;
 80090a4:	f8ce 3000 	str.w	r3, [lr]
  int num_output_elements = 1;
 80090a8:	2701      	movs	r7, #1
 80090aa:	e7d4      	b.n	8009056 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x9e>
  return kTfLiteOk;
 80090ac:	2000      	movs	r0, #0
}
 80090ae:	b004      	add	sp, #16
 80090b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 80090b4:	696e      	ldr	r6, [r5, #20]
 80090b6:	f7fa fb27 	bl	8003708 <TfLiteTypeGetName>
 80090ba:	4604      	mov	r4, r0
 80090bc:	f898 0000 	ldrb.w	r0, [r8]
 80090c0:	f7fa fb22 	bl	8003708 <TfLiteTypeGetName>
 80090c4:	4917      	ldr	r1, [pc, #92]	@ (8009124 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>)
 80090c6:	4b18      	ldr	r3, [pc, #96]	@ (8009128 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x170>)
 80090c8:	4a13      	ldr	r2, [pc, #76]	@ (8009118 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x160>)
 80090ca:	e9cd 3100 	strd	r3, r1, [sp]
 80090ce:	e9cd 4002 	strd	r4, r0, [sp, #8]
 80090d2:	4916      	ldr	r1, [pc, #88]	@ (800912c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
 80090d4:	2345      	movs	r3, #69	@ 0x45
 80090d6:	4628      	mov	r0, r5
 80090d8:	47b0      	blx	r6
 80090da:	e7db      	b.n	8009094 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xdc>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 80090dc:	e9cd c202 	strd	ip, r2, [sp, #8]
 80090e0:	4913      	ldr	r1, [pc, #76]	@ (8009130 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
 80090e2:	4b14      	ldr	r3, [pc, #80]	@ (8009134 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 80090e4:	696c      	ldr	r4, [r5, #20]
 80090e6:	4a0c      	ldr	r2, [pc, #48]	@ (8009118 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x160>)
 80090e8:	e9cd 3100 	strd	r3, r1, [sp]
 80090ec:	4628      	mov	r0, r5
 80090ee:	4909      	ldr	r1, [pc, #36]	@ (8009114 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x15c>)
 80090f0:	233a      	movs	r3, #58	@ 0x3a
 80090f2:	47a0      	blx	r4
 80090f4:	e7ce      	b.n	8009094 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xdc>
  TF_LITE_ENSURE(context, output != nullptr);
 80090f6:	4b10      	ldr	r3, [pc, #64]	@ (8009138 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
 80090f8:	696c      	ldr	r4, [r5, #20]
 80090fa:	4a07      	ldr	r2, [pc, #28]	@ (8009118 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x160>)
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	4908      	ldr	r1, [pc, #32]	@ (8009120 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x168>)
 8009100:	2325      	movs	r3, #37	@ 0x25
 8009102:	4628      	mov	r0, r5
 8009104:	47a0      	blx	r4
 8009106:	e7c5      	b.n	8009094 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xdc>
  for (int i = 0; i < dims->size; ++i) {
 8009108:	2401      	movs	r4, #1
 800910a:	e778      	b.n	8008ffe <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x46>
 800910c:	08016e74 	.word	0x08016e74
 8009110:	08016e88 	.word	0x08016e88
 8009114:	08015314 	.word	0x08015314
 8009118:	08016e08 	.word	0x08016e08
 800911c:	08016e3c 	.word	0x08016e3c
 8009120:	080152b4 	.word	0x080152b4
 8009124:	08016194 	.word	0x08016194
 8009128:	080161a4 	.word	0x080161a4
 800912c:	08016178 	.word	0x08016178
 8009130:	08016e64 	.word	0x08016e64
 8009134:	08016e68 	.word	0x08016e68
 8009138:	08016e50 	.word	0x08016e50

0800913c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800913c:	680b      	ldr	r3, [r1, #0]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800913e:	b570      	push	{r4, r5, r6, lr}
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	3b01      	subs	r3, #1
 8009144:	2b01      	cmp	r3, #1
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8009146:	b084      	sub	sp, #16
 8009148:	4605      	mov	r5, r0
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 800914a:	d909      	bls.n	8009160 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x24>
 800914c:	4b18      	ldr	r3, [pc, #96]	@ (80091b0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x74>)
 800914e:	6944      	ldr	r4, [r0, #20]
 8009150:	4a18      	ldr	r2, [pc, #96]	@ (80091b4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
 8009152:	9300      	str	r3, [sp, #0]
 8009154:	4918      	ldr	r1, [pc, #96]	@ (80091b8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x7c>)
 8009156:	234b      	movs	r3, #75	@ 0x4b
 8009158:	47a0      	blx	r4
 800915a:	2001      	movs	r0, #1
}
 800915c:	b004      	add	sp, #16
 800915e:	bd70      	pop	{r4, r5, r6, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8009160:	684b      	ldr	r3, [r1, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8009164:	2b01      	cmp	r3, #1
 8009166:	460c      	mov	r4, r1
 8009168:	d00c      	beq.n	8009184 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x48>
 800916a:	4e14      	ldr	r6, [pc, #80]	@ (80091bc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>)
 800916c:	4914      	ldr	r1, [pc, #80]	@ (80091c0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x84>)
 800916e:	2201      	movs	r2, #1
 8009170:	9203      	str	r2, [sp, #12]
 8009172:	6944      	ldr	r4, [r0, #20]
 8009174:	4a0f      	ldr	r2, [pc, #60]	@ (80091b4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
 8009176:	9302      	str	r3, [sp, #8]
 8009178:	e9cd 1600 	strd	r1, r6, [sp]
 800917c:	234c      	movs	r3, #76	@ 0x4c
 800917e:	4911      	ldr	r1, [pc, #68]	@ (80091c4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
 8009180:	47a0      	blx	r4
 8009182:	e7ea      	b.n	800915a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x1e>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 8009184:	f7ff ff18 	bl	8008fb8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8009188:	2800      	cmp	r0, #0
 800918a:	d0e7      	beq.n	800915c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x20>
 800918c:	4621      	mov	r1, r4
 800918e:	4628      	mov	r0, r5
 8009190:	696c      	ldr	r4, [r5, #20]
 8009192:	f7ff ff11 	bl	8008fb8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8009196:	490c      	ldr	r1, [pc, #48]	@ (80091c8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x8c>)
 8009198:	4b0c      	ldr	r3, [pc, #48]	@ (80091cc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x90>)
 800919a:	2200      	movs	r2, #0
 800919c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 80091a0:	e9cd 3100 	strd	r3, r1, [sp]
 80091a4:	4a03      	ldr	r2, [pc, #12]	@ (80091b4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x78>)
 80091a6:	4907      	ldr	r1, [pc, #28]	@ (80091c4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x88>)
 80091a8:	234d      	movs	r3, #77	@ 0x4d
 80091aa:	4628      	mov	r0, r5
 80091ac:	47a0      	blx	r4
 80091ae:	e7d4      	b.n	800915a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x1e>
 80091b0:	08016e9c 	.word	0x08016e9c
 80091b4:	08016e08 	.word	0x08016e08
 80091b8:	080152b4 	.word	0x080152b4
 80091bc:	08017230 	.word	0x08017230
 80091c0:	08016ecc 	.word	0x08016ecc
 80091c4:	08015314 	.word	0x08015314
 80091c8:	08016ee0 	.word	0x08016ee0
 80091cc:	08016eec 	.word	0x08016eec

080091d0 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration Register_RESHAPE() {
 80091d0:	b510      	push	{r4, lr}
          /*prepare=*/reshape::Prepare,
          /*invoke=*/reshape::Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 80091d2:	4c06      	ldr	r4, [pc, #24]	@ (80091ec <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x1c>)
TfLiteRegistration Register_RESHAPE() {
 80091d4:	4686      	mov	lr, r0
          /*version=*/0};
 80091d6:	4684      	mov	ip, r0
 80091d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80091da:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80091de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80091e2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 80091e6:	4670      	mov	r0, lr
 80091e8:	bd10      	pop	{r4, pc}
 80091ea:	bf00      	nop
 80091ec:	08013cc0 	.word	0x08013cc0

080091f0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 80091f0:	b538      	push	{r3, r4, r5, lr}
  return a - b;
 80091f2:	f040 457f 	orr.w	r5, r0, #4278190080	@ 0xff000000
FixedPoint<tRawType, 0> exp_on_negative_values(
 80091f6:	4604      	mov	r4, r0
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 80091f8:	0168      	lsls	r0, r5, #5
 80091fa:	f7fd fccf 	bl	8006b9c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
  std::int64_t ab_64 = a_64 * b_64;
 80091fe:	4a8f      	ldr	r2, [pc, #572]	@ (800943c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x24c>)
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8009200:	4601      	mov	r1, r0
  std::int64_t ab_64 = a_64 * b_64;
 8009202:	fb81 2e02 	smull	r2, lr, r1, r2
  return a - b;
 8009206:	1b2b      	subs	r3, r5, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009208:	f1be 0f00 	cmp.w	lr, #0
  return a ? BitNot(zero) : zero;
 800920c:	f3c3 6000 	ubfx	r0, r3, #24, #1
 8009210:	f343 6c00 	sbfx	ip, r3, #24, #1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009214:	f2c0 80a1 	blt.w	800935a <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x16a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009218:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 800921c:	f14e 0e00 	adc.w	lr, lr, #0
 8009220:	0fd2      	lsrs	r2, r2, #31
 8009222:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
  return a & b;
 8009226:	3801      	subs	r0, #1
 8009228:	ea0c 0c02 	and.w	ip, ip, r2
 800922c:	4008      	ands	r0, r1
  std::int64_t ab_64 = a_64 * b_64;
 800922e:	4a84      	ldr	r2, [pc, #528]	@ (8009440 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x250>)
  return a ^ b;
 8009230:	ea80 000c 	eor.w	r0, r0, ip
  std::int64_t ab_64 = a_64 * b_64;
 8009234:	fb80 2e02 	smull	r2, lr, r0, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009238:	f1be 0f00 	cmp.w	lr, #0
  return a ? BitNot(zero) : zero;
 800923c:	f3c3 6140 	ubfx	r1, r3, #25, #1
 8009240:	f343 6c40 	sbfx	ip, r3, #25, #1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009244:	f2c0 80e9 	blt.w	800941a <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x22a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009248:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 800924c:	f14e 0e00 	adc.w	lr, lr, #0
 8009250:	0fd2      	lsrs	r2, r2, #31
 8009252:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
  return a & b;
 8009256:	3901      	subs	r1, #1
 8009258:	ea0c 0c02 	and.w	ip, ip, r2
 800925c:	4001      	ands	r1, r0
  std::int64_t ab_64 = a_64 * b_64;
 800925e:	4a79      	ldr	r2, [pc, #484]	@ (8009444 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x254>)
  return a ^ b;
 8009260:	ea81 010c 	eor.w	r1, r1, ip
  std::int64_t ab_64 = a_64 * b_64;
 8009264:	fb81 2e02 	smull	r2, lr, r1, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009268:	f1be 0f00 	cmp.w	lr, #0
  return a ? BitNot(zero) : zero;
 800926c:	f3c3 6080 	ubfx	r0, r3, #26, #1
 8009270:	f343 6c80 	sbfx	ip, r3, #26, #1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009274:	f2c0 80c1 	blt.w	80093fa <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x20a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009278:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 800927c:	f14e 0e00 	adc.w	lr, lr, #0
 8009280:	0fd2      	lsrs	r2, r2, #31
 8009282:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
  return a & b;
 8009286:	3801      	subs	r0, #1
 8009288:	ea0c 0c02 	and.w	ip, ip, r2
 800928c:	4008      	ands	r0, r1
  std::int64_t ab_64 = a_64 * b_64;
 800928e:	4a6e      	ldr	r2, [pc, #440]	@ (8009448 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x258>)
  return a ^ b;
 8009290:	ea80 000c 	eor.w	r0, r0, ip
  std::int64_t ab_64 = a_64 * b_64;
 8009294:	fb80 2e02 	smull	r2, lr, r0, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009298:	f1be 0f00 	cmp.w	lr, #0
  return a ? BitNot(zero) : zero;
 800929c:	f3c3 61c0 	ubfx	r1, r3, #27, #1
 80092a0:	f343 6cc0 	sbfx	ip, r3, #27, #1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80092a4:	f2c0 8099 	blt.w	80093da <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x1ea>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80092a8:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 80092ac:	f14e 0e00 	adc.w	lr, lr, #0
 80092b0:	0fd2      	lsrs	r2, r2, #31
 80092b2:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
  return a & b;
 80092b6:	3901      	subs	r1, #1
 80092b8:	ea0c 0c02 	and.w	ip, ip, r2
 80092bc:	4001      	ands	r1, r0
  std::int64_t ab_64 = a_64 * b_64;
 80092be:	4a63      	ldr	r2, [pc, #396]	@ (800944c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x25c>)
  return a ^ b;
 80092c0:	ea81 010c 	eor.w	r1, r1, ip
  std::int64_t ab_64 = a_64 * b_64;
 80092c4:	fb81 2e02 	smull	r2, lr, r1, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80092c8:	f1be 0f00 	cmp.w	lr, #0
  return a ? BitNot(zero) : zero;
 80092cc:	f3c3 7000 	ubfx	r0, r3, #28, #1
 80092d0:	f343 7c00 	sbfx	ip, r3, #28, #1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80092d4:	db71      	blt.n	80093ba <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x1ca>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80092d6:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 80092da:	f14e 0e00 	adc.w	lr, lr, #0
 80092de:	0fd2      	lsrs	r2, r2, #31
 80092e0:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
  return a & b;
 80092e4:	3801      	subs	r0, #1
 80092e6:	ea0c 0c02 	and.w	ip, ip, r2
 80092ea:	4008      	ands	r0, r1
  std::int64_t ab_64 = a_64 * b_64;
 80092ec:	4a58      	ldr	r2, [pc, #352]	@ (8009450 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x260>)
  return a ^ b;
 80092ee:	ea80 000c 	eor.w	r0, r0, ip
  std::int64_t ab_64 = a_64 * b_64;
 80092f2:	fb80 2e02 	smull	r2, lr, r0, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 80092f6:	f1be 0f00 	cmp.w	lr, #0
  return a ? BitNot(zero) : zero;
 80092fa:	f3c3 7140 	ubfx	r1, r3, #29, #1
 80092fe:	f343 7c40 	sbfx	ip, r3, #29, #1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009302:	db4a      	blt.n	800939a <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x1aa>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009304:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8009308:	f14e 0e00 	adc.w	lr, lr, #0
 800930c:	0fd2      	lsrs	r2, r2, #31
 800930e:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
  return a & b;
 8009312:	3901      	subs	r1, #1
 8009314:	ea02 020c 	and.w	r2, r2, ip
 8009318:	4001      	ands	r1, r0
  return a ^ b;
 800931a:	4051      	eors	r1, r2
  std::int64_t ab_64 = a_64 * b_64;
 800931c:	22f2      	movs	r2, #242	@ 0xf2
 800931e:	fb81 2c02 	smull	r2, ip, r1, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009322:	f1bc 0f00 	cmp.w	ip, #0
  return a ? BitNot(zero) : zero;
 8009326:	f3c3 7080 	ubfx	r0, r3, #30, #1
 800932a:	f343 7380 	sbfx	r3, r3, #30, #1
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800932e:	db24      	blt.n	800937a <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x18a>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009330:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8009334:	f14c 0c00 	adc.w	ip, ip, #0
 8009338:	0fd2      	lsrs	r2, r2, #31
 800933a:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
  return a ? BitNot(zero) : zero;
 800933e:	fab4 f484 	clz	r4, r4
  return a & b;
 8009342:	3801      	subs	r0, #1
 8009344:	4013      	ands	r3, r2
  return a ? BitNot(zero) : zero;
 8009346:	0964      	lsrs	r4, r4, #5
  return a & b;
 8009348:	4008      	ands	r0, r1
  return a ^ b;
 800934a:	4058      	eors	r0, r3
  return a & b;
 800934c:	1e63      	subs	r3, r4, #1
  return a ? BitNot(zero) : zero;
 800934e:	4264      	negs	r4, r4
  return a & b;
 8009350:	4018      	ands	r0, r3
 8009352:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
}
 8009356:	4060      	eors	r0, r4
 8009358:	bd38      	pop	{r3, r4, r5, pc}
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800935a:	4d3e      	ldr	r5, [pc, #248]	@ (8009454 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x264>)
 800935c:	1952      	adds	r2, r2, r5
 800935e:	f16e 0e00 	sbc.w	lr, lr, #0
 8009362:	f1be 0f00 	cmp.w	lr, #0
 8009366:	da04      	bge.n	8009372 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x182>
 8009368:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800936c:	1952      	adds	r2, r2, r5
 800936e:	f14e 0e00 	adc.w	lr, lr, #0
 8009372:	0fd2      	lsrs	r2, r2, #31
 8009374:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8009378:	e755      	b.n	8009226 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x36>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800937a:	4d36      	ldr	r5, [pc, #216]	@ (8009454 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x264>)
 800937c:	1952      	adds	r2, r2, r5
 800937e:	f16c 0c00 	sbc.w	ip, ip, #0
 8009382:	f1bc 0f00 	cmp.w	ip, #0
 8009386:	da04      	bge.n	8009392 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x1a2>
 8009388:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800938c:	1952      	adds	r2, r2, r5
 800938e:	f14c 0c00 	adc.w	ip, ip, #0
 8009392:	0fd2      	lsrs	r2, r2, #31
 8009394:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8009398:	e7d1      	b.n	800933e <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x14e>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800939a:	4d2e      	ldr	r5, [pc, #184]	@ (8009454 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x264>)
 800939c:	1952      	adds	r2, r2, r5
 800939e:	f16e 0e00 	sbc.w	lr, lr, #0
 80093a2:	f1be 0f00 	cmp.w	lr, #0
 80093a6:	da04      	bge.n	80093b2 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x1c2>
 80093a8:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80093ac:	1952      	adds	r2, r2, r5
 80093ae:	f14e 0e00 	adc.w	lr, lr, #0
 80093b2:	0fd2      	lsrs	r2, r2, #31
 80093b4:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 80093b8:	e7ab      	b.n	8009312 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x122>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80093ba:	4d26      	ldr	r5, [pc, #152]	@ (8009454 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x264>)
 80093bc:	1952      	adds	r2, r2, r5
 80093be:	f16e 0e00 	sbc.w	lr, lr, #0
 80093c2:	f1be 0f00 	cmp.w	lr, #0
 80093c6:	da04      	bge.n	80093d2 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x1e2>
 80093c8:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80093cc:	1952      	adds	r2, r2, r5
 80093ce:	f14e 0e00 	adc.w	lr, lr, #0
 80093d2:	0fd2      	lsrs	r2, r2, #31
 80093d4:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 80093d8:	e784      	b.n	80092e4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xf4>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80093da:	4d1e      	ldr	r5, [pc, #120]	@ (8009454 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x264>)
 80093dc:	1952      	adds	r2, r2, r5
 80093de:	f16e 0e00 	sbc.w	lr, lr, #0
 80093e2:	f1be 0f00 	cmp.w	lr, #0
 80093e6:	da04      	bge.n	80093f2 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x202>
 80093e8:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 80093ec:	1952      	adds	r2, r2, r5
 80093ee:	f14e 0e00 	adc.w	lr, lr, #0
 80093f2:	0fd2      	lsrs	r2, r2, #31
 80093f4:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 80093f8:	e75d      	b.n	80092b6 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0xc6>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 80093fa:	4d16      	ldr	r5, [pc, #88]	@ (8009454 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x264>)
 80093fc:	1952      	adds	r2, r2, r5
 80093fe:	f16e 0e00 	sbc.w	lr, lr, #0
 8009402:	f1be 0f00 	cmp.w	lr, #0
 8009406:	da04      	bge.n	8009412 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x222>
 8009408:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800940c:	1952      	adds	r2, r2, r5
 800940e:	f14e 0e00 	adc.w	lr, lr, #0
 8009412:	0fd2      	lsrs	r2, r2, #31
 8009414:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8009418:	e735      	b.n	8009286 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x96>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800941a:	4d0e      	ldr	r5, [pc, #56]	@ (8009454 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x264>)
 800941c:	1952      	adds	r2, r2, r5
 800941e:	f16e 0e00 	sbc.w	lr, lr, #0
 8009422:	f1be 0f00 	cmp.w	lr, #0
 8009426:	da04      	bge.n	8009432 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x242>
 8009428:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 800942c:	1952      	adds	r2, r2, r5
 800942e:	f14e 0e00 	adc.w	lr, lr, #0
 8009432:	0fd2      	lsrs	r2, r2, #31
 8009434:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8009438:	e70d      	b.n	8009256 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x66>
 800943a:	bf00      	nop
 800943c:	63afbe7b 	.word	0x63afbe7b
 8009440:	4da2cbf2 	.word	0x4da2cbf2
 8009444:	2f16ac6c 	.word	0x2f16ac6c
 8009448:	1152aaa4 	.word	0x1152aaa4
 800944c:	02582ab7 	.word	0x02582ab7
 8009450:	000afe11 	.word	0x000afe11
 8009454:	c0000001 	.word	0xc0000001

08009458 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  }
  return kTfLiteOk;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8009458:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800945a:	b10b      	cbz	r3, 8009460 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800945c:	2138      	movs	r1, #56	@ 0x38
 800945e:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8009460:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8009462:	f007 fd2b 	bl	8010ebc <abort>
 8009466:	bf00      	nop

08009468 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8009468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800946c:	690e      	ldr	r6, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800946e:	b0b5      	sub	sp, #212	@ 0xd4
  TFLITE_DCHECK(node->user_data != nullptr);
 8009470:	2e00      	cmp	r6, #0
 8009472:	f000 80f8 	beq.w	8009666 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8009476:	694b      	ldr	r3, [r1, #20]
 8009478:	930e      	str	r3, [sp, #56]	@ 0x38
 800947a:	460d      	mov	r5, r1
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 80f2 	beq.w	8009666 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>

  int32_t buf_size = 0;
  const auto params = static_cast<const TfLiteConvParams*>(node->builtin_data);
  OpData* data = static_cast<OpData*>(node->user_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8009482:	2200      	movs	r2, #0
 8009484:	4604      	mov	r4, r0
 8009486:	f7fa fd0b 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 800948a:	2201      	movs	r2, #1
 800948c:	4629      	mov	r1, r5
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800948e:	4607      	mov	r7, r0
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8009490:	4620      	mov	r0, r4
 8009492:	f7fa fd05 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8009496:	2200      	movs	r2, #0
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8009498:	900b      	str	r0, [sp, #44]	@ 0x2c
  const TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800949a:	4629      	mov	r1, r5
 800949c:	4620      	mov	r0, r4
 800949e:	f7fa fd1b 	bl	8003ed8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80094a2:	4680      	mov	r8, r0
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
  if (tensor == nullptr) {
 80094a4:	2f00      	cmp	r7, #0
 80094a6:	f000 80e0 	beq.w	800966a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x202>
    return RuntimeShape();
  }

  TfLiteIntArray* dims = tensor->dims;
  const int dims_size = dims->size;
 80094aa:	f8d7 9008 	ldr.w	r9, [r7, #8]
 80094ae:	f859 3b04 	ldr.w	r3, [r9], #4
    size_ = dimensions_count;
 80094b2:	931e      	str	r3, [sp, #120]	@ 0x78
    if (dimensions_count > kMaxSmallSize) {
 80094b4:	2b05      	cmp	r3, #5
      dims_pointer_ = new int32_t[dimensions_count];
 80094b6:	ea4f 0a83 	mov.w	sl, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
 80094ba:	f300 80a1 	bgt.w	8009600 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x198>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 80094be:	4652      	mov	r2, sl
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 80094c0:	a81f      	add	r0, sp, #124	@ 0x7c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 80094c2:	4649      	mov	r1, r9
 80094c4:	f008 fd41 	bl	8011f4a <memcpy>
    TFLITE_DCHECK_LT(i, size_);
 80094c8:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
  if (tensor == nullptr) {
 80094cc:	f1b8 0f00 	cmp.w	r8, #0
 80094d0:	f000 80aa 	beq.w	8009628 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c0>
  const int dims_size = dims->size;
 80094d4:	f8d8 9008 	ldr.w	r9, [r8, #8]
 80094d8:	f859 3b04 	ldr.w	r3, [r9], #4
    size_ = dimensions_count;
 80094dc:	9324      	str	r3, [sp, #144]	@ 0x90
    if (dimensions_count > kMaxSmallSize) {
 80094de:	2b05      	cmp	r3, #5
      dims_pointer_ = new int32_t[dimensions_count];
 80094e0:	ea4f 0b83 	mov.w	fp, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
 80094e4:	f340 80c6 	ble.w	8009674 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x20c>
      dims_pointer_ = new int32_t[dimensions_count];
 80094e8:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 80094ec:	4293      	cmp	r3, r2
 80094ee:	bfb4      	ite	lt
 80094f0:	4658      	movlt	r0, fp
 80094f2:	f04f 30ff 	movge.w	r0, #4294967295	@ 0xffffffff
 80094f6:	f007 fa2f 	bl	8010958 <_Znaj>
 80094fa:	9025      	str	r0, [sp, #148]	@ 0x94
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 80094fc:	465a      	mov	r2, fp
 80094fe:	4649      	mov	r1, r9
 8009500:	f008 fd23 	bl	8011f4a <memcpy>
    TFLITE_DCHECK_LT(i, size_);
 8009504:	f1ba 0f00 	cmp.w	sl, #0
 8009508:	f340 80ad 	ble.w	8009666 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800950c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
    TFLITE_DCHECK_LT(i, size_);
 800950e:	f8dd 9090 	ldr.w	r9, [sp, #144]	@ 0x90
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009512:	930d      	str	r3, [sp, #52]	@ 0x34
 8009514:	f1ba 0f05 	cmp.w	sl, #5
 8009518:	bfcc      	ite	gt
 800951a:	681a      	ldrgt	r2, [r3, #0]
 800951c:	461a      	movle	r2, r3
    TFLITE_DCHECK_LT(i, size_);
 800951e:	f1b9 0f00 	cmp.w	r9, #0
 8009522:	f340 80a0 	ble.w	8009666 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009526:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8009528:	930c      	str	r3, [sp, #48]	@ 0x30
 800952a:	f1b9 0f05 	cmp.w	r9, #5
 800952e:	f340 8097 	ble.w	8009660 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1f8>
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4293      	cmp	r3, r2
 8009536:	f040 8096 	bne.w	8009666 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
  RuntimeShape output_shape = GetTensorShape(output);

  // Initialize cmsis-nn input dimensions
  cmsis_nn_dims input_dims;
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
  input_dims.h = input->dims->data[1];
 800953a:	68bb      	ldr	r3, [r7, #8]
  input_dims.n = MatchingDim(input_shape, 0, output_shape, 0);
 800953c:	9212      	str	r2, [sp, #72]	@ 0x48
  input_dims.h = input->dims->data[1];
 800953e:	6899      	ldr	r1, [r3, #8]
  input_dims.w = input->dims->data[2];
 8009540:	68db      	ldr	r3, [r3, #12]
  input_dims.h = input->dims->data[1];
 8009542:	9113      	str	r1, [sp, #76]	@ 0x4c
    TFLITE_DCHECK_LT(i, size_);
 8009544:	f1ba 0f03 	cmp.w	sl, #3
  input_dims.w = input->dims->data[2];
 8009548:	9314      	str	r3, [sp, #80]	@ 0x50
 800954a:	f340 808c 	ble.w	8009666 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800954e:	f1ba 0f05 	cmp.w	sl, #5
 8009552:	bfca      	itet	gt
 8009554:	9b0d      	ldrgt	r3, [sp, #52]	@ 0x34
 8009556:	9922      	ldrle	r1, [sp, #136]	@ 0x88
 8009558:	68d9      	ldrgt	r1, [r3, #12]
  input_dims.c = input_shape.Dims(3);
 800955a:	9115      	str	r1, [sp, #84]	@ 0x54
    TFLITE_DCHECK_LT(i, size_);
 800955c:	f1b9 0f03 	cmp.w	r9, #3
 8009560:	f340 8081 	ble.w	8009666 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>

  // Initialize cmsis-nn filter dimensions
  cmsis_nn_dims filter_dims;
  filter_dims.n = output_shape.Dims(3);
  filter_dims.h = filter->dims->data[1];
 8009564:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  filter_dims.c = input_dims.c;

  // Initialize cmsis-nn output dimensions
  cmsis_nn_dims output_dims;
  output_dims.n = input_dims.n;
  output_dims.h = output->dims->data[1];
 8009566:	f8d8 0008 	ldr.w	r0, [r8, #8]
  filter_dims.h = filter->dims->data[1];
 800956a:	689b      	ldr	r3, [r3, #8]
  filter_dims.w = filter->dims->data[2];
 800956c:	f8d3 e00c 	ldr.w	lr, [r3, #12]
  filter_dims.h = filter->dims->data[1];
 8009570:	f8d3 b008 	ldr.w	fp, [r3, #8]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009574:	f1b9 0f05 	cmp.w	r9, #5
  output_dims.w = output->dims->data[2];
 8009578:	e9d0 c002 	ldrd	ip, r0, [r0, #8]
  filter_dims.w = filter->dims->data[2];
 800957c:	e9cd be17 	strd	fp, lr, [sp, #92]	@ 0x5c
 8009580:	dd67      	ble.n	8009652 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ea>
  output_dims.w = output->dims->data[2];
 8009582:	901c      	str	r0, [sp, #112]	@ 0x70
  filter_dims.n = output_shape.Dims(3);
 8009584:	980c      	ldr	r0, [sp, #48]	@ 0x30
  output_dims.h = output->dims->data[1];
 8009586:	e9cd 2c1a 	strd	r2, ip, [sp, #104]	@ 0x68
  filter_dims.n = output_shape.Dims(3);
 800958a:	68c2      	ldr	r2, [r0, #12]
  filter_dims.c = input_dims.c;
 800958c:	9119      	str	r1, [sp, #100]	@ 0x64
  filter_dims.n = output_shape.Dims(3);
 800958e:	9216      	str	r2, [sp, #88]	@ 0x58
 8009590:	68c2      	ldr	r2, [r0, #12]
  // a bug in kernel_utils.cc which incorrectly uses per_channel_output_shift in
  // non-int8 cases. Protect this section with a if (input->type == kTfLiteInt8)
  // when the issue is fixed.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
  data->per_channel_output_multiplier =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8009592:	6859      	ldr	r1, [r3, #4]
  output_dims.c = output_shape.Dims(3);
 8009594:	921d      	str	r2, [sp, #116]	@ 0x74
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 8009596:	ea4f 0b81 	mov.w	fp, r1, lsl #2
 800959a:	4659      	mov	r1, fp
 800959c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800959e:	4620      	mov	r0, r4
 80095a0:	4798      	blx	r3
          context, num_channels * sizeof(int32_t)));
  data->per_channel_output_shift =
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80095a2:	4659      	mov	r1, fp
 80095a4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  data->per_channel_output_multiplier =
 80095a6:	6270      	str	r0, [r6, #36]	@ 0x24
      static_cast<int32_t*>(context->AllocatePersistentBuffer(
 80095a8:	4620      	mov	r0, r4
 80095aa:	4798      	blx	r3
  bool has_bias = node->inputs->size == 3;
 80095ac:	682b      	ldr	r3, [r5, #0]
          context, num_channels * sizeof(int32_t)));

  TF_LITE_ENSURE_STATUS(CalculateOpData(
 80095ae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 80095b0:	681b      	ldr	r3, [r3, #0]
  data->per_channel_output_shift =
 80095b2:	62b0      	str	r0, [r6, #40]	@ 0x28
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 80095b4:	3b02      	subs	r3, #2
 80095b6:	2b01      	cmp	r3, #1
  TF_LITE_ENSURE_STATUS(CalculateOpData(
 80095b8:	e9dd 0c17 	ldrd	r0, ip, [sp, #92]	@ 0x5c
 80095bc:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80095be:	f897 b000 	ldrb.w	fp, [r7]
 80095c2:	920f      	str	r2, [sp, #60]	@ 0x3c
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 80095c4:	d933      	bls.n	800962e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c6>
 80095c6:	4b8f      	ldr	r3, [pc, #572]	@ (8009804 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x39c>)
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	6965      	ldr	r5, [r4, #20]
 80095cc:	4a8e      	ldr	r2, [pc, #568]	@ (8009808 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a0>)
 80095ce:	498f      	ldr	r1, [pc, #572]	@ (800980c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a4>)
 80095d0:	4620      	mov	r0, r4
 80095d2:	2357      	movs	r3, #87	@ 0x57
 80095d4:	47a8      	blx	r5
 80095d6:	2501      	movs	r5, #1
    if (size_ > kMaxSmallSize) {
 80095d8:	f1b9 0f05 	cmp.w	r9, #5
 80095dc:	dd04      	ble.n	80095e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x180>
      delete[] dims_pointer_;
 80095de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095e0:	b113      	cbz	r3, 80095e8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x180>
 80095e2:	4618      	mov	r0, r3
 80095e4:	f007 f996 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 80095e8:	f1ba 0f05 	cmp.w	sl, #5
 80095ec:	dd04      	ble.n	80095f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
      delete[] dims_pointer_;
 80095ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095f0:	b113      	cbz	r3, 80095f8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x190>
 80095f2:	4618      	mov	r0, r3
 80095f4:	f007 f98e 	bl	8010914 <_ZdaPv>
        context, buf_size, &data->buffer_idx));
  } else {
    data->buffer_idx = -1;
  }
  return kTfLiteOk;
}
 80095f8:	4628      	mov	r0, r5
 80095fa:	b035      	add	sp, #212	@ 0xd4
 80095fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      dims_pointer_ = new int32_t[dimensions_count];
 8009600:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8009604:	4293      	cmp	r3, r2
 8009606:	bfb4      	ite	lt
 8009608:	4650      	movlt	r0, sl
 800960a:	f04f 30ff 	movge.w	r0, #4294967295	@ 0xffffffff
 800960e:	f007 f9a3 	bl	8010958 <_Znaj>
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8009612:	4652      	mov	r2, sl
 8009614:	4649      	mov	r1, r9
      dims_pointer_ = new int32_t[dimensions_count];
 8009616:	901f      	str	r0, [sp, #124]	@ 0x7c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8009618:	f008 fc97 	bl	8011f4a <memcpy>
    TFLITE_DCHECK_LT(i, size_);
 800961c:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
  if (tensor == nullptr) {
 8009620:	f1b8 0f00 	cmp.w	r8, #0
 8009624:	f47f af56 	bne.w	80094d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6c>
  RuntimeShape() : size_(0) {}
 8009628:	f8cd 8090 	str.w	r8, [sp, #144]	@ 0x90
 800962c:	e76a      	b.n	8009504 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x9c>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 800962e:	686b      	ldr	r3, [r5, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b01      	cmp	r3, #1
 8009634:	d020      	beq.n	8009678 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>
 8009636:	9302      	str	r3, [sp, #8]
 8009638:	4b75      	ldr	r3, [pc, #468]	@ (8009810 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a8>)
 800963a:	9301      	str	r3, [sp, #4]
 800963c:	4b75      	ldr	r3, [pc, #468]	@ (8009814 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3ac>)
 800963e:	9300      	str	r3, [sp, #0]
 8009640:	2301      	movs	r3, #1
 8009642:	9303      	str	r3, [sp, #12]
 8009644:	6965      	ldr	r5, [r4, #20]
 8009646:	4a70      	ldr	r2, [pc, #448]	@ (8009808 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3a0>)
 8009648:	4973      	ldr	r1, [pc, #460]	@ (8009818 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x3b0>)
 800964a:	4620      	mov	r0, r4
 800964c:	2358      	movs	r3, #88	@ 0x58
 800964e:	47a8      	blx	r5
  TF_LITE_ENSURE_STATUS(CalculateOpData(
 8009650:	e7c1      	b.n	80095d6 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16e>
  output_dims.n = input_dims.n;
 8009652:	e9cd 1219 	strd	r1, r2, [sp, #100]	@ 0x64
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009656:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
  filter_dims.n = output_shape.Dims(3);
 8009658:	9216      	str	r2, [sp, #88]	@ 0x58
  output_dims.w = output->dims->data[2];
 800965a:	e9cd c01b 	strd	ip, r0, [sp, #108]	@ 0x6c
 800965e:	e798      	b.n	8009592 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x12a>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009660:	429a      	cmp	r2, r3
 8009662:	f43f af6a 	beq.w	800953a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xd2>
  TFLITE_DCHECK(node->user_data != nullptr);
 8009666:	f007 fc29 	bl	8010ebc <abort>
  RuntimeShape() : size_(0) {}
 800966a:	971e      	str	r7, [sp, #120]	@ 0x78
 800966c:	2800      	cmp	r0, #0
 800966e:	d0fa      	beq.n	8009666 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1fe>
 8009670:	46ba      	mov	sl, r7
 8009672:	e72f      	b.n	80094d4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x6c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009674:	a825      	add	r0, sp, #148	@ 0x94
 8009676:	e741      	b.n	80094fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x94>
}

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8009678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800967a:	691b      	ldr	r3, [r3, #16]
 800967c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009680:	fb03 fc0c 	mul.w	ip, r3, ip
 8009684:	f10c 0201 	add.w	r2, ip, #1
 8009688:	9210      	str	r2, [sp, #64]	@ 0x40
 800968a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800968c:	6953      	ldr	r3, [r2, #20]
 800968e:	3801      	subs	r0, #1
 8009690:	fb03 f000 	mul.w	r0, r3, r0
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	9311      	str	r3, [sp, #68]	@ 0x44
  auto padding = params->padding;
 8009698:	7813      	ldrb	r3, [r2, #0]
  switch (padding) {
 800969a:	2b01      	cmp	r3, #1
      params->stride_height, params->stride_width,
 800969c:	e9d2 ce01 	ldrd	ip, lr, [r2, #4]
 80096a0:	d03b      	beq.n	800971a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2b2>
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d02a      	beq.n	80096fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x294>
 80096a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80096aa:	4618      	mov	r0, r3
      ((out_size - 1) * stride + effective_filter_size - in_size);
 80096ac:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80096ae:	fb00 200e 	mla	r0, r0, lr, r2
 80096b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80096b4:	fb03 230c 	mla	r3, r3, ip, r2
  int total_padding =
 80096b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80096ba:	1a9b      	subs	r3, r3, r2
  total_padding = total_padding > 0 ? total_padding : 0;
 80096bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  int total_padding =
 80096c0:	1a40      	subs	r0, r0, r1
  total_padding = total_padding > 0 ? total_padding : 0;
 80096c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  return total_padding / 2;
 80096c6:	105a      	asrs	r2, r3, #1
  *offset = total_padding % 2;
 80096c8:	f003 0301 	and.w	r3, r3, #1
  data->padding = ComputePaddingHeightWidth(
 80096cc:	60b3      	str	r3, [r6, #8]
  if (data_type != kTfLiteFloat32) {
 80096ce:	f1bb 0f01 	cmp.w	fp, #1
  return total_padding / 2;
 80096d2:	ea4f 0360 	mov.w	r3, r0, asr #1
  *offset = total_padding % 2;
 80096d6:	f000 0001 	and.w	r0, r0, #1
  data->padding = ComputePaddingHeightWidth(
 80096da:	6032      	str	r2, [r6, #0]
 80096dc:	6073      	str	r3, [r6, #4]
 80096de:	60f0      	str	r0, [r6, #12]
  if (data_type != kTfLiteFloat32) {
 80096e0:	d128      	bne.n	8009734 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x2cc>
  data->input_zero_point = input->params.zero_point;
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	6133      	str	r3, [r6, #16]
  data->filter_zero_point = filter->params.zero_point;
 80096e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096e8:	691b      	ldr	r3, [r3, #16]
 80096ea:	6173      	str	r3, [r6, #20]
  data->output_zero_point = output->params.zero_point;
 80096ec:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80096f0:	61b3      	str	r3, [r6, #24]
    data->buffer_idx = -1;
 80096f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80096f6:	6373      	str	r3, [r6, #52]	@ 0x34
  return kTfLiteOk;
 80096f8:	2500      	movs	r5, #0
 80096fa:	e76d      	b.n	80095d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 80096fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80096fe:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8009700:	eb01 000e 	add.w	r0, r1, lr
 8009704:	1ac0      	subs	r0, r0, r3
 8009706:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009708:	fb90 f0fe 	sdiv	r0, r0, lr
 800970c:	4463      	add	r3, ip
 800970e:	1a9b      	subs	r3, r3, r2
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8009710:	3801      	subs	r0, #1
      return (image_size + stride - effective_filter_size) / stride;
 8009712:	fb93 f3fc 	sdiv	r3, r3, ip
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8009716:	3b01      	subs	r3, #1
      return (image_size + stride - effective_filter_size) / stride;
 8009718:	e7c8      	b.n	80096ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>
      return (image_size + stride - 1) / stride;
 800971a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800971c:	eb01 000e 	add.w	r0, r1, lr
 8009720:	4463      	add	r3, ip
 8009722:	3801      	subs	r0, #1
 8009724:	3b01      	subs	r3, #1
 8009726:	fb90 f0fe 	sdiv	r0, r0, lr
 800972a:	fb93 f3fc 	sdiv	r3, r3, ip
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800972e:	3801      	subs	r0, #1
 8009730:	3b01      	subs	r3, #1
      return (image_size + stride - 1) / stride;
 8009732:	e7bb      	b.n	80096ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x244>
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8009734:	4629      	mov	r1, r5
 8009736:	2200      	movs	r2, #0
 8009738:	4620      	mov	r0, r4
 800973a:	f7fa fbb1 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 800973e:	4629      	mov	r1, r5
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8009740:	900f      	str	r0, [sp, #60]	@ 0x3c
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8009742:	2201      	movs	r2, #1
 8009744:	4620      	mov	r0, r4
 8009746:	f7fa fbab 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
        GetOptionalInputTensor(context, node, kBiasTensor);
 800974a:	4629      	mov	r1, r5
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 800974c:	4683      	mov	fp, r0
        GetOptionalInputTensor(context, node, kBiasTensor);
 800974e:	2202      	movs	r2, #2
 8009750:	4620      	mov	r0, r4
 8009752:	f7fa fbdd 	bl	8003f10 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8009756:	4629      	mov	r1, r5
 8009758:	2200      	movs	r2, #0
        GetOptionalInputTensor(context, node, kBiasTensor);
 800975a:	4605      	mov	r5, r0
    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800975c:	4620      	mov	r0, r4
 800975e:	f7fa fbbb 	bl	8003ed8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8009762:	462b      	mov	r3, r5
    int num_channels = filter->dims->data[kConvQuantizedDimension];
 8009764:	f8db 5008 	ldr.w	r5, [fp, #8]
    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8009768:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800976a:	686d      	ldr	r5, [r5, #4]
 800976c:	9508      	str	r5, [sp, #32]
 800976e:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
 8009770:	9507      	str	r5, [sp, #28]
 8009772:	6a75      	ldr	r5, [r6, #36]	@ 0x24
 8009774:	9000      	str	r0, [sp, #0]
 8009776:	f106 0030 	add.w	r0, r6, #48	@ 0x30
 800977a:	9005      	str	r0, [sp, #20]
 800977c:	f106 002c 	add.w	r0, r6, #44	@ 0x2c
 8009780:	9004      	str	r0, [sp, #16]
 8009782:	f106 0020 	add.w	r0, r6, #32
 8009786:	9003      	str	r0, [sp, #12]
 8009788:	f106 001c 	add.w	r0, r6, #28
 800978c:	9002      	str	r0, [sp, #8]
 800978e:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8009790:	9506      	str	r5, [sp, #24]
 8009792:	300c      	adds	r0, #12
 8009794:	9001      	str	r0, [sp, #4]
 8009796:	465a      	mov	r2, fp
 8009798:	4620      	mov	r0, r4
 800979a:	f7fa fcdd 	bl	8004158 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 800979e:	4605      	mov	r5, r0
 80097a0:	2800      	cmp	r0, #0
 80097a2:	f47f af19 	bne.w	80095d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>
  data->filter_zero_point = filter->params.zero_point;
 80097a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  if (input->type == kTfLiteInt8) {
 80097a8:	7839      	ldrb	r1, [r7, #0]
  data->filter_zero_point = filter->params.zero_point;
 80097aa:	6918      	ldr	r0, [r3, #16]
  data->input_zero_point = input->params.zero_point;
 80097ac:	693b      	ldr	r3, [r7, #16]
  data->output_zero_point = output->params.zero_point;
 80097ae:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80097b2:	61b2      	str	r2, [r6, #24]
  if (input->type == kTfLiteInt8) {
 80097b4:	2909      	cmp	r1, #9
  data->input_zero_point = input->params.zero_point;
 80097b6:	e9c6 3004 	strd	r3, r0, [r6, #16]
  if (input->type == kTfLiteInt8) {
 80097ba:	d19a      	bne.n	80096f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x28a>
    conv_params.output_offset = output->params.zero_point;
 80097bc:	922b      	str	r2, [sp, #172]	@ 0xac
    conv_params.stride.h = params->stride_height;
 80097be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
    conv_params.input_offset = -input->params.zero_point;
 80097c0:	425b      	negs	r3, r3
 80097c2:	932a      	str	r3, [sp, #168]	@ 0xa8
    conv_params.stride.h = params->stride_height;
 80097c4:	6893      	ldr	r3, [r2, #8]
 80097c6:	932d      	str	r3, [sp, #180]	@ 0xb4
    conv_params.stride.w = params->stride_width;
 80097c8:	6853      	ldr	r3, [r2, #4]
 80097ca:	932c      	str	r3, [sp, #176]	@ 0xb0
    conv_params.dilation.h = params->dilation_height_factor;
 80097cc:	6953      	ldr	r3, [r2, #20]
 80097ce:	9331      	str	r3, [sp, #196]	@ 0xc4
    conv_params.dilation.w = params->dilation_width_factor;
 80097d0:	6913      	ldr	r3, [r2, #16]
 80097d2:	9330      	str	r3, [sp, #192]	@ 0xc0
    conv_params.padding.h = data->padding.height;
 80097d4:	6873      	ldr	r3, [r6, #4]
 80097d6:	932f      	str	r3, [sp, #188]	@ 0xbc
    conv_params.padding.w = data->padding.width;
 80097d8:	6833      	ldr	r3, [r6, #0]
 80097da:	932e      	str	r3, [sp, #184]	@ 0xb8
    conv_params.activation.min = data->output_activation_min;
 80097dc:	6af3      	ldr	r3, [r6, #44]	@ 0x2c
 80097de:	9332      	str	r3, [sp, #200]	@ 0xc8
 80097e0:	6b33      	ldr	r3, [r6, #48]	@ 0x30
 80097e2:	9333      	str	r3, [sp, #204]	@ 0xcc
    buf_size = arm_convolve_wrapper_s8_get_buffer_size(
 80097e4:	a912      	add	r1, sp, #72	@ 0x48
 80097e6:	ab1a      	add	r3, sp, #104	@ 0x68
 80097e8:	aa16      	add	r2, sp, #88	@ 0x58
 80097ea:	a82a      	add	r0, sp, #168	@ 0xa8
 80097ec:	f004 fd06 	bl	800e1fc <arm_convolve_wrapper_s8_get_buffer_size>
  if (buf_size > 0) {
 80097f0:	1e01      	subs	r1, r0, #0
 80097f2:	f77f af7e 	ble.w	80096f2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x28a>
    TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 80097f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80097f8:	f106 0234 	add.w	r2, r6, #52	@ 0x34
 80097fc:	4620      	mov	r0, r4
 80097fe:	4798      	blx	r3
 8009800:	4605      	mov	r5, r0
 8009802:	e6e9      	b.n	80095d8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x170>
 8009804:	08016f48 	.word	0x08016f48
 8009808:	08016f0c 	.word	0x08016f0c
 800980c:	080152b4 	.word	0x080152b4
 8009810:	08017230 	.word	0x08017230
 8009814:	0801667c 	.word	0x0801667c
 8009818:	08015314 	.word	0x08015314

0800981c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32_t* output_multiplier,
    const int32_t* output_shift, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800981c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009820:	b0a3      	sub	sp, #140	@ 0x8c
 8009822:	4689      	mov	r9, r1
  // Get parameters.
  const int32_t input_offset = params.input_offset;  // r = s(q - Z)
 8009824:	6941      	ldr	r1, [r0, #20]
 8009826:	9102      	str	r1, [sp, #8]
  const int stride_width = params.stride_width;
 8009828:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
  const int pad_height = params.padding_values.height;
  const int32_t output_offset = params.output_offset;

  // Set min and max value of the output.
  const int32_t output_activation_min = params.quantized_activation_min;
  const int32_t output_activation_max = params.quantized_activation_max;
 800982c:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
  const int stride_width = params.stride_width;
 800982e:	9114      	str	r1, [sp, #80]	@ 0x50
    int8_t* output_data) {
 8009830:	4616      	mov	r6, r2
  const int dilation_width_factor = params.dilation_width_factor;
 8009832:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
  const int32_t output_activation_min = params.quantized_activation_min;
 8009836:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  const int dilation_width_factor = params.dilation_width_factor;
 8009838:	9115      	str	r1, [sp, #84]	@ 0x54
  const int dilation_height_factor = params.dilation_height_factor;
 800983a:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
  const int stride_height = params.stride_height;
 800983e:	f9b0 700c 	ldrsh.w	r7, [r0, #12]
  const int pad_height = params.padding_values.height;
 8009842:	f9b0 c004 	ldrsh.w	ip, [r0, #4]
  const int dilation_height_factor = params.dilation_height_factor;
 8009846:	9109      	str	r1, [sp, #36]	@ 0x24

  // Consistency check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8009848:	42a2      	cmp	r2, r4
  const int pad_width = params.padding_values.width;
 800984a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
  const int32_t output_offset = params.output_offset;
 800984e:	69c0      	ldr	r0, [r0, #28]
    int8_t* output_data) {
 8009850:	f8dd a0b4 	ldr.w	sl, [sp, #180]	@ 0xb4
  const int32_t output_activation_min = params.quantized_activation_min;
 8009854:	9211      	str	r2, [sp, #68]	@ 0x44
    int8_t* output_data) {
 8009856:	4698      	mov	r8, r3
  const int32_t output_activation_max = params.quantized_activation_max;
 8009858:	9412      	str	r4, [sp, #72]	@ 0x48
    int8_t* output_data) {
 800985a:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
  const int32_t output_offset = params.output_offset;
 800985c:	9013      	str	r0, [sp, #76]	@ 0x4c
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800985e:	f300 8217 	bgt.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8009862:	f8d8 2000 	ldr.w	r2, [r8]
 8009866:	2a04      	cmp	r2, #4
 8009868:	f040 8212 	bne.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800986c:	f8da 2000 	ldr.w	r2, [sl]
 8009870:	2a04      	cmp	r2, #4
 8009872:	f040 820d 	bne.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8009876:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8009878:	6812      	ldr	r2, [r2, #0]
 800987a:	2a04      	cmp	r2, #4
 800987c:	f040 8208 	bne.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009880:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009882:	f8d8 5004 	ldr.w	r5, [r8, #4]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009886:	6852      	ldr	r2, [r2, #4]
 8009888:	42aa      	cmp	r2, r5
 800988a:	f040 8201 	bne.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800988e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009892:	9200      	str	r2, [sp, #0]
 8009894:	4610      	mov	r0, r2
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009896:	f8da 2010 	ldr.w	r2, [sl, #16]
 800989a:	4282      	cmp	r2, r0
 800989c:	f040 81f8 	bne.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
 80098a0:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80098a2:	f8da 0004 	ldr.w	r0, [sl, #4]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 80098a6:	6912      	ldr	r2, [r2, #16]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80098a8:	900e      	str	r0, [sp, #56]	@ 0x38
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 80098aa:	4282      	cmp	r2, r0
 80098ac:	f040 81f0 	bne.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
 80098b0:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 80098b2:	b1a2      	cbz	r2, 80098de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xc2>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 80098b4:	6818      	ldr	r0, [r3, #0]
 80098b6:	2805      	cmp	r0, #5
 80098b8:	f340 81db 	ble.w	8009c72 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x456>
 80098bc:	685b      	ldr	r3, [r3, #4]
    for (int i = 0; i < size_; i++) {
 80098be:	3b04      	subs	r3, #4
 80098c0:	f04f 0e00 	mov.w	lr, #0
    int buffer_size = 1;
 80098c4:	2201      	movs	r2, #1
      buffer_size *= dims_data[i];
 80098c6:	f853 4f04 	ldr.w	r4, [r3, #4]!
    for (int i = 0; i < size_; i++) {
 80098ca:	f10e 0e01 	add.w	lr, lr, #1
 80098ce:	4586      	cmp	lr, r0
      buffer_size *= dims_data[i];
 80098d0:	fb04 f202 	mul.w	r2, r4, r2
    for (int i = 0; i < size_; i++) {
 80098d4:	dbf7      	blt.n	80098c6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xaa>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80098d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098d8:	4293      	cmp	r3, r2
 80098da:	f040 81d9 	bne.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 80098de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80098e2:	9304      	str	r3, [sp, #16]
 80098e4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80098e8:	9317      	str	r3, [sp, #92]	@ 0x5c
 80098ea:	f8da 3008 	ldr.w	r3, [sl, #8]
 80098ee:	9308      	str	r3, [sp, #32]
 80098f0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80098f4:	9316      	str	r3, [sp, #88]	@ 0x58
 80098f6:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
 80098f8:	2d00      	cmp	r5, #0
 80098fa:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80098fe:	bfc8      	it	gt
 8009900:	f04f 0b00 	movgt.w	fp, #0
 8009904:	f340 8142 	ble.w	8009b8c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8009908:	2800      	cmp	r0, #0
 800990a:	f340 81b6 	ble.w	8009c7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x45e>
 800990e:	424b      	negs	r3, r1
 8009910:	9319      	str	r3, [sp, #100]	@ 0x64
 8009912:	4662      	mov	r2, ip
 8009914:	4649      	mov	r1, r9
 8009916:	4643      	mov	r3, r8
 8009918:	46f1      	mov	r9, lr
 800991a:	46d8      	mov	r8, fp
 800991c:	46bc      	mov	ip, r7
 800991e:	4686      	mov	lr, r0
 8009920:	46d3      	mov	fp, sl
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8009922:	f1b9 0f00 	cmp.w	r9, #0
 8009926:	f340 812c 	ble.w	8009b82 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x366>
 800992a:	4250      	negs	r0, r2
 800992c:	9010      	str	r0, [sp, #64]	@ 0x40
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800992e:	2000      	movs	r0, #0
 8009930:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009932:	4648      	mov	r0, r9
 8009934:	f8dd 9054 	ldr.w	r9, [sp, #84]	@ 0x54
 8009938:	921a      	str	r2, [sp, #104]	@ 0x68
 800993a:	469a      	mov	sl, r3
 800993c:	4673      	mov	r3, lr
 800993e:	46c6      	mov	lr, r8
 8009940:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009942:	920a      	str	r2, [sp, #40]	@ 0x28
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8009944:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009946:	2a00      	cmp	r2, #0
 8009948:	f340 810d 	ble.w	8009b66 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34a>
 800994c:	f8cd c06c 	str.w	ip, [sp, #108]	@ 0x6c
 8009950:	e9dd c816 	ldrd	ip, r8, [sp, #88]	@ 0x58
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8009954:	2200      	movs	r2, #0
 8009956:	1f34      	subs	r4, r6, #4
 8009958:	920d      	str	r2, [sp, #52]	@ 0x34
 800995a:	9418      	str	r4, [sp, #96]	@ 0x60
 800995c:	1f0a      	subs	r2, r1, #4
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800995e:	e9cd 501c 	strd	r5, r0, [sp, #112]	@ 0x70
 8009962:	e9cd 161f 	strd	r1, r6, [sp, #124]	@ 0x7c
 8009966:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8009968:	940b      	str	r4, [sp, #44]	@ 0x2c
 800996a:	920c      	str	r2, [sp, #48]	@ 0x30
 800996c:	2700      	movs	r7, #0
 800996e:	931e      	str	r3, [sp, #120]	@ 0x78
 8009970:	4664      	mov	r4, ip
 8009972:	9221      	str	r2, [sp, #132]	@ 0x84
          int32_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8009974:	9b08      	ldr	r3, [sp, #32]
 8009976:	2b00      	cmp	r3, #0
          int32_t acc = 0;
 8009978:	f04f 0c00 	mov.w	ip, #0
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800997c:	dd7d      	ble.n	8009a7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x25e>
 800997e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8009980:	4666      	mov	r6, ip
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8009982:	2c00      	cmp	r4, #0
 8009984:	dd73      	ble.n	8009a6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x252>
 8009986:	4643      	mov	r3, r8
 8009988:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800998a:	46a0      	mov	r8, r4
 800998c:	2000      	movs	r0, #0
 800998e:	461c      	mov	r4, r3
 8009990:	e003      	b.n	800999a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17e>
 8009992:	3001      	adds	r0, #1
 8009994:	4540      	cmp	r0, r8
 8009996:	4449      	add	r1, r9
 8009998:	d066      	beq.n	8009a68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x24c>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800999a:	ea51 0305 	orrs.w	r3, r1, r5
 800999e:	d4f8      	bmi.n	8009992 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x176>
 80099a0:	42a1      	cmp	r1, r4
 80099a2:	daf6      	bge.n	8009992 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x176>
 80099a4:	9b04      	ldr	r3, [sp, #16]
 80099a6:	429d      	cmp	r5, r3
 80099a8:	daf3      	bge.n	8009992 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x176>

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80099aa:	9b00      	ldr	r3, [sp, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	ddf0      	ble.n	8009992 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x176>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 80099b0:	f8da 3000 	ldr.w	r3, [sl]
 80099b4:	2b04      	cmp	r3, #4
 80099b6:	f040 816b 	bne.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
 80099ba:	e9cd 8406 	strd	r8, r4, [sp, #24]
 80099be:	f8da 3004 	ldr.w	r3, [sl, #4]
 80099c2:	9303      	str	r3, [sp, #12]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f8cd 9014 	str.w	r9, [sp, #20]
 80099ca:	9101      	str	r1, [sp, #4]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 80099cc:	9b03      	ldr	r3, [sp, #12]
 80099ce:	459e      	cmp	lr, r3
 80099d0:	f280 815e 	bge.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 80099d4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80099d8:	429d      	cmp	r5, r3
 80099da:	f280 8159 	bge.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 80099de:	f8da 800c 	ldr.w	r8, [sl, #12]
 80099e2:	9901      	ldr	r1, [sp, #4]
 80099e4:	4541      	cmp	r1, r8
 80099e6:	f280 8153 	bge.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 80099ea:	f8da 4010 	ldr.w	r4, [sl, #16]
 80099ee:	42a2      	cmp	r2, r4
 80099f0:	f280 814e 	bge.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 80099f4:	fb03 530e 	mla	r3, r3, lr, r5
 80099f8:	fb08 1303 	mla	r3, r8, r3, r1
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
 80099fc:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80099fe:	fb04 1303 	mla	r3, r4, r3, r1
 8009a02:	569c      	ldrsb	r4, [r3, r2]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8009a04:	f8db 3000 	ldr.w	r3, [fp]
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	f040 8141 	bne.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8009a0e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009a12:	429f      	cmp	r7, r3
 8009a14:	f280 813c 	bge.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8009a18:	f8db 3008 	ldr.w	r3, [fp, #8]
 8009a1c:	429e      	cmp	r6, r3
 8009a1e:	f280 8137 	bge.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8009a22:	f8db 900c 	ldr.w	r9, [fp, #12]
 8009a26:	4548      	cmp	r0, r9
 8009a28:	f280 8132 	bge.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8009a2c:	f8db 8010 	ldr.w	r8, [fp, #16]
 8009a30:	4542      	cmp	r2, r8
 8009a32:	f280 812d 	bge.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
                int32_t filter_val = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8009a36:	992e      	ldr	r1, [sp, #184]	@ 0xb8
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8009a38:	fb03 6307 	mla	r3, r3, r7, r6
 8009a3c:	fb09 0303 	mla	r3, r9, r3, r0
 8009a40:	fb08 1303 	mla	r3, r8, r3, r1
                // long as the filter size (filter_y * filter_x * in_channel)
                // does not exceed 2^16, which is the case in all the models
                // we have seen so far.
                // TODO(jianlijianli): Add a check to make sure the
                // accumulator depth is smaller than 2^16.
                acc += filter_val * (input_val + input_offset);
 8009a44:	9902      	ldr	r1, [sp, #8]
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 8009a46:	569b      	ldrsb	r3, [r3, r2]
                acc += filter_val * (input_val + input_offset);
 8009a48:	440c      	add	r4, r1
 8009a4a:	fb04 cc03 	mla	ip, r4, r3, ip
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8009a4e:	9b00      	ldr	r3, [sp, #0]
 8009a50:	3201      	adds	r2, #1
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d1ba      	bne.n	80099cc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b0>
 8009a56:	e9dd 8406 	ldrd	r8, r4, [sp, #24]
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8009a5a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8009a5e:	9901      	ldr	r1, [sp, #4]
 8009a60:	3001      	adds	r0, #1
 8009a62:	4540      	cmp	r0, r8
 8009a64:	4449      	add	r1, r9
 8009a66:	d198      	bne.n	800999a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x17e>
 8009a68:	4623      	mov	r3, r4
 8009a6a:	4644      	mov	r4, r8
 8009a6c:	4698      	mov	r8, r3
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8009a6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a70:	441d      	add	r5, r3
 8009a72:	9b08      	ldr	r3, [sp, #32]
 8009a74:	3601      	adds	r6, #1
 8009a76:	429e      	cmp	r6, r3
 8009a78:	d183      	bne.n	8009982 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x166>
              }
            }
          }

          if (bias_data) {
 8009a7a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8009a7c:	b113      	cbz	r3, 8009a84 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x268>
            acc += bias_data[out_channel];
 8009a7e:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 8009a82:	449c      	add	ip, r3
          }
          acc = MultiplyByQuantizedMultiplier(
 8009a84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a86:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009a88:	f853 1f04 	ldr.w	r1, [r3, #4]!
 8009a8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009a8e:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8009a92:	920c      	str	r2, [sp, #48]	@ 0x30
 8009a94:	2900      	cmp	r1, #0
  int left_shift = shift > 0 ? shift : 0;
 8009a96:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8009a9a:	fa0c fc02 	lsl.w	ip, ip, r2
  int right_shift = shift > 0 ? 0 : -shift;
 8009a9e:	dd78      	ble.n	8009b92 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x376>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8009aa0:	4563      	cmp	r3, ip
 8009aa2:	f000 808f 	beq.w	8009bc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3a8>
  std::int64_t ab_64 = a_64 * b_64;
 8009aa6:	fb8c c303 	smull	ip, r3, ip, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f2c0 809a 	blt.w	8009be4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3c8>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009ab0:	f11c 4c80 	adds.w	ip, ip, #1073741824	@ 0x40000000
 8009ab4:	f143 0300 	adc.w	r3, r3, #0
 8009ab8:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8009abc:	ea4c 0043 	orr.w	r0, ip, r3, lsl #1
 8009ac0:	2500      	movs	r5, #0
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	fa03 f205 	lsl.w	r2, r3, r5
 8009ac8:	3a01      	subs	r2, #1
  return a >> offset;
 8009aca:	1051      	asrs	r1, r2, #1
 8009acc:	fa40 f305 	asr.w	r3, r0, r5
  return a & b;
 8009ad0:	4002      	ands	r2, r0
  return a + b;
 8009ad2:	eb01 71d0 	add.w	r1, r1, r0, lsr #31
 8009ad6:	428a      	cmp	r2, r1
 8009ad8:	bfc8      	it	gt
 8009ada:	3301      	addgt	r3, #1
              acc, output_multiplier[out_channel], output_shift[out_channel]);
          acc += output_offset;
 8009adc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009ade:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8009ae0:	4413      	add	r3, r2
 8009ae2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	bfb8      	it	lt
 8009ae8:	4613      	movlt	r3, r2
 8009aea:	4298      	cmp	r0, r3
 8009aec:	bfa8      	it	ge
 8009aee:	4618      	movge	r0, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 8009af0:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	2b04      	cmp	r3, #4
 8009af6:	f040 80cb 	bne.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 8009afa:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	459e      	cmp	lr, r3
 8009b00:	f280 80c6 	bge.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 8009b04:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8009b06:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8009b08:	689b      	ldr	r3, [r3, #8]
 8009b0a:	429d      	cmp	r5, r3
 8009b0c:	f280 80c0 	bge.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 8009b10:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8009b12:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8009b14:	68d1      	ldr	r1, [r2, #12]
 8009b16:	428e      	cmp	r6, r1
 8009b18:	f280 80ba 	bge.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 8009b1c:	6912      	ldr	r2, [r2, #16]
 8009b1e:	4297      	cmp	r7, r2
 8009b20:	f280 80b6 	bge.w	8009c90 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x474>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 8009b24:	fb03 530e 	mla	r3, r3, lr, r5
 8009b28:	fb01 6303 	mla	r3, r1, r3, r6
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8009b2c:	9932      	ldr	r1, [sp, #200]	@ 0xc8
 8009b2e:	fb02 1303 	mla	r3, r2, r3, r1
 8009b32:	55d8      	strb	r0, [r3, r7]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8009b34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b36:	3701      	adds	r7, #1
 8009b38:	429f      	cmp	r7, r3
 8009b3a:	f47f af1b 	bne.w	8009974 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x158>
 8009b3e:	4637      	mov	r7, r6
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8009b40:	3701      	adds	r7, #1
 8009b42:	970d      	str	r7, [sp, #52]	@ 0x34
 8009b44:	46a4      	mov	ip, r4
 8009b46:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8009b48:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b4a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009b4c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009b4e:	e9dd 501c 	ldrd	r5, r0, [sp, #112]	@ 0x70
 8009b52:	443c      	add	r4, r7
 8009b54:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8009b56:	940a      	str	r4, [sp, #40]	@ 0x28
 8009b58:	42b8      	cmp	r0, r7
 8009b5a:	e9dd 161f 	ldrd	r1, r6, [sp, #124]	@ 0x7c
 8009b5e:	f47f aefe 	bne.w	800995e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x142>
 8009b62:	f8dd c06c 	ldr.w	ip, [sp, #108]	@ 0x6c
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8009b66:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009b68:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8009b6a:	3201      	adds	r2, #1
 8009b6c:	4464      	add	r4, ip
 8009b6e:	4293      	cmp	r3, r2
 8009b70:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009b72:	9410      	str	r4, [sp, #64]	@ 0x40
 8009b74:	f47f aee4 	bne.w	8009940 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x124>
 8009b78:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009b7a:	46f0      	mov	r8, lr
 8009b7c:	4681      	mov	r9, r0
 8009b7e:	469e      	mov	lr, r3
 8009b80:	4653      	mov	r3, sl
  for (int batch = 0; batch < batches; ++batch) {
 8009b82:	f108 0801 	add.w	r8, r8, #1
 8009b86:	4545      	cmp	r5, r8
 8009b88:	f47f aecb 	bne.w	8009922 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x106>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 8009b8c:	b023      	add	sp, #140	@ 0x8c
 8009b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8009b92:	4563      	cmp	r3, ip
 8009b94:	f1c1 0500 	rsb	r5, r1, #0
 8009b98:	d047      	beq.n	8009c2a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x40e>
  std::int64_t ab_64 = a_64 * b_64;
 8009b9a:	fb8c c303 	smull	ip, r3, ip, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	db33      	blt.n	8009c0a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3ee>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009ba2:	f11c 4c80 	adds.w	ip, ip, #1073741824	@ 0x40000000
 8009ba6:	f143 0300 	adc.w	r3, r3, #0
 8009baa:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8009bae:	ea4c 0043 	orr.w	r0, ip, r3, lsl #1
  assert(exponent <= 31);
 8009bb2:	311f      	adds	r1, #31
 8009bb4:	da85      	bge.n	8009ac2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a6>
 8009bb6:	4b37      	ldr	r3, [pc, #220]	@ (8009c94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x478>)
 8009bb8:	4a37      	ldr	r2, [pc, #220]	@ (8009c98 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x47c>)
 8009bba:	4838      	ldr	r0, [pc, #224]	@ (8009c9c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x480>)
 8009bbc:	f240 1167 	movw	r1, #359	@ 0x167
 8009bc0:	f007 f984 	bl	8010ecc <__assert_func>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8009bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009bc8:	d040      	beq.n	8009c4c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x430>
  std::int64_t ab_64 = a_64 * b_64;
 8009bca:	fb83 3203 	smull	r3, r2, r3, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009bce:	2a00      	cmp	r2, #0
 8009bd0:	db3f      	blt.n	8009c52 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x436>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009bd2:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 8009bd6:	f142 0200 	adc.w	r2, r2, #0
 8009bda:	0fdb      	lsrs	r3, r3, #31
 8009bdc:	ea43 0042 	orr.w	r0, r3, r2, lsl #1
 8009be0:	2500      	movs	r5, #0
 8009be2:	e76e      	b.n	8009ac2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a6>
 8009be4:	4a2e      	ldr	r2, [pc, #184]	@ (8009ca0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x484>)
 8009be6:	eb1c 0c02 	adds.w	ip, ip, r2
 8009bea:	f163 0300 	sbc.w	r3, r3, #0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	da05      	bge.n	8009bfe <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x3e2>
 8009bf2:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8009bf6:	eb1c 0c02 	adds.w	ip, ip, r2
 8009bfa:	f143 0300 	adc.w	r3, r3, #0
 8009bfe:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
 8009c02:	ea4c 0043 	orr.w	r0, ip, r3, lsl #1
 8009c06:	2500      	movs	r5, #0
 8009c08:	e75b      	b.n	8009ac2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a6>
 8009c0a:	4a25      	ldr	r2, [pc, #148]	@ (8009ca0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x484>)
 8009c0c:	eb1c 0202 	adds.w	r2, ip, r2
 8009c10:	f163 0300 	sbc.w	r3, r3, #0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	da04      	bge.n	8009c22 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x406>
 8009c18:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8009c1c:	1812      	adds	r2, r2, r0
 8009c1e:	f143 0300 	adc.w	r3, r3, #0
 8009c22:	0fd2      	lsrs	r2, r2, #31
 8009c24:	ea42 0043 	orr.w	r0, r2, r3, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8009c28:	e7c3      	b.n	8009bb2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x396>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8009c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c2e:	d1b4      	bne.n	8009b9a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x37e>
  assert(exponent <= 31);
 8009c30:	311f      	adds	r1, #31
 8009c32:	dbc0      	blt.n	8009bb6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x39a>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8009c34:	2301      	movs	r3, #1
 8009c36:	fa03 f205 	lsl.w	r2, r3, r5
 8009c3a:	3a01      	subs	r2, #1
  return a >> offset;
 8009c3c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8009c40:	412b      	asrs	r3, r5
  return a & b;
 8009c42:	1051      	asrs	r1, r2, #1
  return a + b;
 8009c44:	4291      	cmp	r1, r2
 8009c46:	bfb8      	it	lt
 8009c48:	3301      	addlt	r3, #1
 8009c4a:	e747      	b.n	8009adc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c0>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8009c4c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
tIntegerType MaskIfNonZero(tIntegerType a) {
 8009c50:	e744      	b.n	8009adc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2c0>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009c52:	4913      	ldr	r1, [pc, #76]	@ (8009ca0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x484>)
 8009c54:	185b      	adds	r3, r3, r1
 8009c56:	f162 0200 	sbc.w	r2, r2, #0
 8009c5a:	2a00      	cmp	r2, #0
 8009c5c:	da04      	bge.n	8009c68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x44c>
 8009c5e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009c62:	185b      	adds	r3, r3, r1
 8009c64:	f142 0200 	adc.w	r2, r2, #0
 8009c68:	0fdb      	lsrs	r3, r3, #31
 8009c6a:	ea43 0042 	orr.w	r0, r3, r2, lsl #1
 8009c6e:	2500      	movs	r5, #0
 8009c70:	e727      	b.n	8009ac2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a6>
    for (int i = 0; i < size_; i++) {
 8009c72:	2800      	cmp	r0, #0
 8009c74:	dd07      	ble.n	8009c86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x46a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009c76:	3304      	adds	r3, #4
 8009c78:	e621      	b.n	80098be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xa2>
  for (int batch = 0; batch < batches; ++batch) {
 8009c7a:	f10b 0b01 	add.w	fp, fp, #1
 8009c7e:	45ab      	cmp	fp, r5
 8009c80:	f47f ae42 	bne.w	8009908 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xec>
 8009c84:	e782      	b.n	8009b8c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x370>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8009c86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    int buffer_size = 1;
 8009c88:	2201      	movs	r2, #1
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	f43f ae27 	beq.w	80098de <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xc2>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8009c90:	f007 f914 	bl	8010ebc <abort>
 8009c94:	080165c4 	.word	0x080165c4
 8009c98:	080165d4 	.word	0x080165d4
 8009c9c:	08016630 	.word	0x08016630
 8009ca0:	c0000001 	.word	0xc0000001

08009ca4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0>:
                      tflite::micro::GetTensorShape(im2col),
                      tflite::micro::GetTensorData<uint8_t>(im2col), nullptr);
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedPerChannel(
 8009ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ca8:	4614      	mov	r4, r2
 8009caa:	461d      	mov	r5, r3
  // TODO(#43557) Remove checks for dilation and call to reference
  // implementation when dilation is supported in the optimized implementation
  // by CMSIS-NN.
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
    // Initialize cmsis-nn convolution parameters
    conv_params.input_offset = -data.input_zero_point;
 8009cac:	6923      	ldr	r3, [r4, #16]
  conv_params.dilation.h = params->dilation_height_factor;
 8009cae:	694a      	ldr	r2, [r1, #20]
  conv_params.dilation.w = params->dilation_width_factor;
 8009cb0:	690f      	ldr	r7, [r1, #16]
    conv_params.output_offset = data.output_zero_point;
 8009cb2:	f8d4 b018 	ldr.w	fp, [r4, #24]

    // Initialize cmsis-nn per channel quantization parameters
    cmsis_nn_per_channel_quant_params quant_params;
    quant_params.multiplier =
        const_cast<int32_t*>(data.per_channel_output_multiplier);
    quant_params.shift = const_cast<int32_t*>(data.per_channel_output_shift);
 8009cb6:	f8d4 a028 	ldr.w	sl, [r4, #40]	@ 0x28
TfLiteStatus EvalQuantizedPerChannel(
 8009cba:	b0e3      	sub	sp, #396	@ 0x18c
    conv_params.input_offset = -data.input_zero_point;
 8009cbc:	425b      	negs	r3, r3
 8009cbe:	930a      	str	r3, [sp, #40]	@ 0x28
    conv_params.stride.w = params->stride_width;
 8009cc0:	e9d1 ce01 	ldrd	ip, lr, [r1, #4]
        const_cast<int32_t*>(data.per_channel_output_multiplier);
 8009cc4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
    conv_params.activation.min = data.output_activation_min;
 8009cc6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
TfLiteStatus EvalQuantizedPerChannel(
 8009cc8:	900b      	str	r0, [sp, #44]	@ 0x2c
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 8009cca:	2a01      	cmp	r2, #1
    conv_params.activation.min = data.output_activation_min;
 8009ccc:	9108      	str	r1, [sp, #32]
        const_cast<int32_t*>(data.per_channel_output_multiplier);
 8009cce:	9309      	str	r3, [sp, #36]	@ 0x24
TfLiteStatus EvalQuantizedPerChannel(
 8009cd0:	e9dd 866d 	ldrd	r8, r6, [sp, #436]	@ 0x1b4
    conv_params.padding.w = data.padding.width;
 8009cd4:	e9d4 9000 	ldrd	r9, r0, [r4]
    conv_params.activation.min = data.output_activation_min;
 8009cd8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
    conv_params.input_offset = -data.input_zero_point;
 8009cda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  conv_params.dilation.h = params->dilation_height_factor;
 8009cdc:	9251      	str	r2, [sp, #324]	@ 0x144
  conv_params.dilation.w = params->dilation_width_factor;
 8009cde:	9750      	str	r7, [sp, #320]	@ 0x140
  if (conv_params.dilation.h == 1 && conv_params.dilation.w == 1) {
 8009ce0:	d101      	bne.n	8009ce6 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x42>
 8009ce2:	2f01      	cmp	r7, #1
 8009ce4:	d066      	beq.n	8009db4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x110>
            tflite::micro::GetTensorData<int8_t>(output)),
        ARM_MATH_SUCCESS);
  } else {
    // TODO(b/154032858): Investigate removing extra copies.
    ConvParams op_params;
    op_params.input_offset = -data.input_zero_point;
 8009ce6:	9359      	str	r3, [sp, #356]	@ 0x164
    op_params.stride_width = params->stride_width;
    op_params.dilation_height_factor = params->dilation_height_factor;
    op_params.dilation_width_factor = params->dilation_width_factor;
    op_params.padding_values.height = data.padding.height;
    op_params.padding_values.width = data.padding.width;
    op_params.quantized_activation_min = data.output_activation_min;
 8009ce8:	9b08      	ldr	r3, [sp, #32]
    op_params.padding_values.height = data.padding.height;
 8009cea:	f8ad 0154 	strh.w	r0, [sp, #340]	@ 0x154
    op_params.quantized_activation_min = data.output_activation_min;
 8009cee:	e9cd 315e 	strd	r3, r1, [sp, #376]	@ 0x178
    op_params.quantized_activation_max = data.output_activation_max;

    reference_integer_ops::ConvPerChannel(
        op_params, data.per_channel_output_multiplier,
        data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 8009cf2:	a844      	add	r0, sp, #272	@ 0x110
 8009cf4:	4629      	mov	r1, r5
    op_params.output_offset = data.output_zero_point;
 8009cf6:	f8cd b16c 	str.w	fp, [sp, #364]	@ 0x16c
    op_params.stride_height = params->stride_height;
 8009cfa:	f8ad e15c 	strh.w	lr, [sp, #348]	@ 0x15c
    op_params.stride_width = params->stride_width;
 8009cfe:	f8ad c15a 	strh.w	ip, [sp, #346]	@ 0x15a
    op_params.dilation_height_factor = params->dilation_height_factor;
 8009d02:	f8ad 2160 	strh.w	r2, [sp, #352]	@ 0x160
    op_params.dilation_width_factor = params->dilation_width_factor;
 8009d06:	f8ad 715e 	strh.w	r7, [sp, #350]	@ 0x15e
    op_params.padding_values.width = data.padding.width;
 8009d0a:	f8ad 9152 	strh.w	r9, [sp, #338]	@ 0x152
        data.per_channel_output_shift, tflite::micro::GetTensorShape(input),
 8009d0e:	f7fc fdb9 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8009d12:	2d00      	cmp	r5, #0
 8009d14:	f000 810a 	beq.w	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
        tflite::micro::GetTensorData<int8_t>(input),
        tflite::micro::GetTensorShape(filter),
 8009d18:	ac3e      	add	r4, sp, #248	@ 0xf8
 8009d1a:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009d1c:	682f      	ldr	r7, [r5, #0]
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f7fc fdb0 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8009d24:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	f000 8100 	beq.w	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
        tflite::micro::GetTensorData<int8_t>(filter),
        tflite::micro::GetTensorShape(bias),
 8009d2c:	ad38      	add	r5, sp, #224	@ 0xe0
 8009d2e:	4641      	mov	r1, r8
 8009d30:	4628      	mov	r0, r5
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009d32:	f8d3 b000 	ldr.w	fp, [r3]
 8009d36:	f7fc fda5 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 8009d3a:	f1b8 0f00 	cmp.w	r8, #0
 8009d3e:	f000 80f5 	beq.w	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009d42:	f8d8 3000 	ldr.w	r3, [r8]
 8009d46:	9308      	str	r3, [sp, #32]
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
 8009d48:	f10d 08c8 	add.w	r8, sp, #200	@ 0xc8
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	4640      	mov	r0, r8
 8009d50:	f7fc fd98 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8009d54:	9b08      	ldr	r3, [sp, #32]
 8009d56:	b106      	cbz	r6, 8009d5a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xb6>
 8009d58:	6836      	ldr	r6, [r6, #0]
    reference_integer_ops::ConvPerChannel(
 8009d5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d5c:	9700      	str	r7, [sp, #0]
 8009d5e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8009d62:	e9cd 8605 	strd	r8, r6, [sp, #20]
 8009d66:	ab44      	add	r3, sp, #272	@ 0x110
 8009d68:	e9cd 4b01 	strd	r4, fp, [sp, #4]
 8009d6c:	4652      	mov	r2, sl
 8009d6e:	a854      	add	r0, sp, #336	@ 0x150
 8009d70:	f7ff fd54 	bl	800981c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
    if (size_ > kMaxSmallSize) {
 8009d74:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8009d76:	2b05      	cmp	r3, #5
 8009d78:	dd03      	ble.n	8009d82 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xde>
      delete[] dims_pointer_;
 8009d7a:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8009d7c:	b108      	cbz	r0, 8009d82 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xde>
 8009d7e:	f006 fdc9 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8009d82:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8009d84:	2b05      	cmp	r3, #5
 8009d86:	dd03      	ble.n	8009d90 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xec>
      delete[] dims_pointer_;
 8009d88:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 8009d8a:	b108      	cbz	r0, 8009d90 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xec>
 8009d8c:	f006 fdc2 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8009d90:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8009d92:	2b05      	cmp	r3, #5
 8009d94:	dd03      	ble.n	8009d9e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xfa>
      delete[] dims_pointer_;
 8009d96:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 8009d98:	b108      	cbz	r0, 8009d9e <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0xfa>
 8009d9a:	f006 fdbb 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8009d9e:	9b44      	ldr	r3, [sp, #272]	@ 0x110
 8009da0:	2b05      	cmp	r3, #5
 8009da2:	dd03      	ble.n	8009dac <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x108>
      delete[] dims_pointer_;
 8009da4:	9845      	ldr	r0, [sp, #276]	@ 0x114
 8009da6:	b108      	cbz	r0, 8009dac <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x108>
 8009da8:	f006 fdb4 	bl	8010914 <_ZdaPv>
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
}
 8009dac:	2000      	movs	r0, #0
 8009dae:	b063      	add	sp, #396	@ 0x18c
 8009db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    conv_params.output_offset = data.output_zero_point;
 8009db4:	e9cd 3b4a 	strd	r3, fp, [sp, #296]	@ 0x128
    conv_params.activation.min = data.output_activation_min;
 8009db8:	9b08      	ldr	r3, [sp, #32]
 8009dba:	e9cd 3152 	strd	r3, r1, [sp, #328]	@ 0x148
    quant_params.multiplier =
 8009dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8009dc0:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
    conv_params.padding.w = data.padding.width;
 8009dc2:	e9cd 904e 	strd	r9, r0, [sp, #312]	@ 0x138
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8009dc6:	a820      	add	r0, sp, #128	@ 0x80
    quant_params.shift = const_cast<int32_t*>(data.per_channel_output_shift);
 8009dc8:	e9cd 3a0c 	strd	r3, sl, [sp, #48]	@ 0x30
    conv_params.stride.w = params->stride_width;
 8009dcc:	e9cd ce4c 	strd	ip, lr, [sp, #304]	@ 0x130
    RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 8009dd0:	f7fc fd58 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 8009dd4:	4629      	mov	r1, r5
 8009dd6:	a826      	add	r0, sp, #152	@ 0x98
 8009dd8:	f7fc fd54 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 8009ddc:	4631      	mov	r1, r6
 8009dde:	a82c      	add	r0, sp, #176	@ 0xb0
 8009de0:	f7fc fd50 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    RuntimeShape bias_shape = tflite::micro::GetTensorShape(bias);
 8009de4:	4641      	mov	r1, r8
 8009de6:	a832      	add	r0, sp, #200	@ 0xc8
 8009de8:	f7fc fd4c 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 8009dec:	e9dd 2352 	ldrd	r2, r3, [sp, #328]	@ 0x148
 8009df0:	429a      	cmp	r2, r3
 8009df2:	f300 809b 	bgt.w	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8009df6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009df8:	2b04      	cmp	r3, #4
 8009dfa:	f040 8097 	bne.w	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
    TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8009dfe:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009e00:	2b04      	cmp	r3, #4
 8009e02:	f040 8093 	bne.w	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8009e06:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8009e08:	2b04      	cmp	r3, #4
 8009e0a:	f040 808f 	bne.w	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009e0e:	9827      	ldr	r0, [sp, #156]	@ 0x9c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009e10:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8009e12:	4283      	cmp	r3, r0
 8009e14:	f040 808a 	bne.w	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009e18:	992a      	ldr	r1, [sp, #168]	@ 0xa8
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009e1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009e1c:	428b      	cmp	r3, r1
 8009e1e:	f040 8085 	bne.w	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009e22:	f8dd c084 	ldr.w	ip, [sp, #132]	@ 0x84
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8009e26:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8009e28:	4563      	cmp	r3, ip
 8009e2a:	d17f      	bne.n	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
  TFLITE_DCHECK(tensor != nullptr);
 8009e2c:	f1b8 0f00 	cmp.w	r8, #0
 8009e30:	d07c      	beq.n	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
    if (tflite::micro::GetTensorData<int8_t>(bias)) {
 8009e32:	f8d8 3000 	ldr.w	r3, [r8]
 8009e36:	b1ab      	cbz	r3, 8009e64 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x1c0>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009e38:	f8dd e0c8 	ldr.w	lr, [sp, #200]	@ 0xc8
 8009e3c:	f1be 0f05 	cmp.w	lr, #5
 8009e40:	dc72      	bgt.n	8009f28 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x284>
    for (int i = 0; i < size_; i++) {
 8009e42:	f1be 0f00 	cmp.w	lr, #0
 8009e46:	dd0b      	ble.n	8009e60 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x1bc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009e48:	aa33      	add	r2, sp, #204	@ 0xcc
 8009e4a:	3a04      	subs	r2, #4
    for (int i = 0; i < size_; i++) {
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	4689      	mov	r9, r1
      buffer_size *= dims_data[i];
 8009e50:	f852 1f04 	ldr.w	r1, [r2, #4]!
    for (int i = 0; i < size_; i++) {
 8009e54:	3301      	adds	r3, #1
 8009e56:	459e      	cmp	lr, r3
      buffer_size *= dims_data[i];
 8009e58:	fb01 f707 	mul.w	r7, r1, r7
    for (int i = 0; i < size_; i++) {
 8009e5c:	dcf8      	bgt.n	8009e50 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x1ac>
 8009e5e:	4649      	mov	r1, r9
      TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8009e60:	4567      	cmp	r7, ip
 8009e62:	d163      	bne.n	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
    bias_dims.n = 1;
 8009e64:	af18      	add	r7, sp, #96	@ 0x60
 8009e66:	2301      	movs	r3, #1
    bias_dims.h = 1;
 8009e68:	e9c7 3300 	strd	r3, r3, [r7]
    bias_dims.w = 1;
 8009e6c:	60bb      	str	r3, [r7, #8]
    ctx.buf = nullptr;
 8009e6e:	2300      	movs	r3, #0
    ctx.size = 0;
 8009e70:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    input_dims.h = input_shape.Dims(1);
 8009e74:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
    if (data.buffer_idx > -1) {
 8009e76:	6b62      	ldr	r2, [r4, #52]	@ 0x34
    input_dims.h = input_shape.Dims(1);
 8009e78:	9311      	str	r3, [sp, #68]	@ 0x44
    input_dims.w = input_shape.Dims(2);
 8009e7a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8009e7c:	9312      	str	r3, [sp, #72]	@ 0x48
    filter_dims.h = filter_shape.Dims(1);
 8009e7e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009e80:	9315      	str	r3, [sp, #84]	@ 0x54
    filter_dims.w = filter_shape.Dims(2);
 8009e82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009e84:	9316      	str	r3, [sp, #88]	@ 0x58
    output_dims.h = output_shape.Dims(1);
 8009e86:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8009e88:	931d      	str	r3, [sp, #116]	@ 0x74
    if (data.buffer_idx > -1) {
 8009e8a:	2a00      	cmp	r2, #0
    output_dims.w = output_shape.Dims(2);
 8009e8c:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
    input_dims.n = batch_size;
 8009e8e:	9010      	str	r0, [sp, #64]	@ 0x40
    filter_dims.n = output_depth;
 8009e90:	ac14      	add	r4, sp, #80	@ 0x50
    output_dims.n = batch_size;
 8009e92:	f10d 0970 	add.w	r9, sp, #112	@ 0x70
    input_dims.c = input_depth;
 8009e96:	9113      	str	r1, [sp, #76]	@ 0x4c
    filter_dims.c = input_depth;
 8009e98:	60e1      	str	r1, [r4, #12]
    filter_dims.n = output_depth;
 8009e9a:	f8c4 c000 	str.w	ip, [r4]
    bias_dims.c = output_depth;
 8009e9e:	f8c7 c00c 	str.w	ip, [r7, #12]
    output_dims.n = batch_size;
 8009ea2:	f8c9 0000 	str.w	r0, [r9]
    output_dims.c = output_depth;
 8009ea6:	f8c9 c00c 	str.w	ip, [r9, #12]
    output_dims.w = output_shape.Dims(2);
 8009eaa:	f8c9 3008 	str.w	r3, [r9, #8]
    if (data.buffer_idx > -1) {
 8009eae:	db04      	blt.n	8009eba <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x216>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 8009eb0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009eb2:	4611      	mov	r1, r2
 8009eb4:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8009eb6:	4798      	blx	r3
 8009eb8:	900e      	str	r0, [sp, #56]	@ 0x38
 8009eba:	2d00      	cmp	r5, #0
 8009ebc:	d036      	beq.n	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
 8009ebe:	9a6c      	ldr	r2, [sp, #432]	@ 0x1b0
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009ec0:	682b      	ldr	r3, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
 8009ec2:	2a00      	cmp	r2, #0
 8009ec4:	d032      	beq.n	8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
  return reinterpret_cast<const T*>(tensor->data.raw);
 8009ec6:	6812      	ldr	r2, [r2, #0]
 8009ec8:	f8d8 1000 	ldr.w	r1, [r8]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8009ecc:	b106      	cbz	r6, 8009ed0 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x22c>
 8009ece:	6836      	ldr	r6, [r6, #0]
    TFLITE_DCHECK_EQ(
 8009ed0:	9300      	str	r3, [sp, #0]
 8009ed2:	e9cd 7103 	strd	r7, r1, [sp, #12]
 8009ed6:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8009eda:	e9cd 9605 	strd	r9, r6, [sp, #20]
 8009ede:	ab10      	add	r3, sp, #64	@ 0x40
 8009ee0:	aa0c      	add	r2, sp, #48	@ 0x30
 8009ee2:	a94a      	add	r1, sp, #296	@ 0x128
 8009ee4:	a80e      	add	r0, sp, #56	@ 0x38
 8009ee6:	f004 f929 	bl	800e13c <arm_convolve_wrapper_s8>
 8009eea:	b9f8      	cbnz	r0, 8009f2c <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x288>
    if (size_ > kMaxSmallSize) {
 8009eec:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8009eee:	2b05      	cmp	r3, #5
 8009ef0:	dd03      	ble.n	8009efa <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x256>
      delete[] dims_pointer_;
 8009ef2:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8009ef4:	b108      	cbz	r0, 8009efa <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x256>
 8009ef6:	f006 fd0d 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8009efa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8009efc:	2b05      	cmp	r3, #5
 8009efe:	dd03      	ble.n	8009f08 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x264>
      delete[] dims_pointer_;
 8009f00:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8009f02:	b108      	cbz	r0, 8009f08 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x264>
 8009f04:	f006 fd06 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8009f08:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8009f0a:	2b05      	cmp	r3, #5
 8009f0c:	dd03      	ble.n	8009f16 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x272>
      delete[] dims_pointer_;
 8009f0e:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8009f10:	b108      	cbz	r0, 8009f16 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x272>
 8009f12:	f006 fcff 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 8009f16:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f18:	2b05      	cmp	r3, #5
 8009f1a:	f77f af47 	ble.w	8009dac <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x108>
      delete[] dims_pointer_;
 8009f1e:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8009f20:	2800      	cmp	r0, #0
 8009f22:	f47f af41 	bne.w	8009da8 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x104>
 8009f26:	e741      	b.n	8009dac <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x108>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009f28:	9a33      	ldr	r2, [sp, #204]	@ 0xcc
    for (int i = 0; i < size_; i++) {
 8009f2a:	e78e      	b.n	8009e4a <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0+0x1a6>
    TFLITE_DCHECK_LE(conv_params.activation.min, conv_params.activation.max);
 8009f2c:	f006 ffc6 	bl	8010ebc <abort>

08009f30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
                      tflite::micro::GetTensorShape(im2col),
                      tflite::micro::GetTensorData<float>(im2col));
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8009f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f34:	ed2d 8b02 	vpush	{d8}
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
 8009f38:	f8d1 a014 	ldr.w	sl, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8009f3c:	b0f3      	sub	sp, #460	@ 0x1cc
  TFLITE_DCHECK(context != nullptr);
 8009f3e:	2800      	cmp	r0, #0
 8009f40:	f000 8497 	beq.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8009f44:	680b      	ldr	r3, [r1, #0]
 8009f46:	4688      	mov	r8, r1
 8009f48:	6859      	ldr	r1, [r3, #4]
 8009f4a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	4798      	blx	r3
 8009f50:	f8d8 3000 	ldr.w	r3, [r8]
 8009f54:	4605      	mov	r5, r0
 8009f56:	6899      	ldr	r1, [r3, #8]
 8009f58:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	4798      	blx	r3
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8009f5e:	f8d8 3000 	ldr.w	r3, [r8]
      tflite::micro::GetEvalInput(context, node, kInputTensor);
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kFilterTensor);
  const TfLiteEvalTensor* bias =
      (NumInputs(node) == 3)
          ? tflite::micro::GetEvalInput(context, node, kBiasTensor)
 8009f62:	681a      	ldr	r2, [r3, #0]
 8009f64:	2a03      	cmp	r2, #3
 8009f66:	4607      	mov	r7, r0
 8009f68:	d021      	beq.n	8009fae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7e>
 8009f6a:	2400      	movs	r4, #0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8009f6c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f70:	4630      	mov	r0, r6
 8009f72:	6859      	ldr	r1, [r3, #4]
 8009f74:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8009f76:	4798      	blx	r3
          : nullptr;
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
 8009f78:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009f7c:	4681      	mov	r9, r0
 8009f7e:	2a00      	cmp	r2, #0
 8009f80:	f000 8477 	beq.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  switch (input->type) {  // Already know in/out types are same.
 8009f84:	7a28      	ldrb	r0, [r5, #8]
 8009f86:	2803      	cmp	r0, #3
 8009f88:	d03c      	beq.n	800a004 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xd4>
 8009f8a:	2809      	cmp	r0, #9
 8009f8c:	d02d      	beq.n	8009fea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xba>
 8009f8e:	2801      	cmp	r0, #1
 8009f90:	d013      	beq.n	8009fba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8a>
    case kTfLiteUInt8:
      return EvalQuantized(context, node, params, data, input, filter, bias,
                           nullptr, nullptr, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8009f92:	6974      	ldr	r4, [r6, #20]
 8009f94:	f7f9 fbb8 	bl	8003708 <TfLiteTypeGetName>
 8009f98:	7a2b      	ldrb	r3, [r5, #8]
 8009f9a:	49a2      	ldr	r1, [pc, #648]	@ (800a224 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8009fa2:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
 8009fa4:	b073      	add	sp, #460	@ 0x1cc
 8009fa6:	ecbd 8b02 	vpop	{d8}
 8009faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8009fae:	68d9      	ldr	r1, [r3, #12]
 8009fb0:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	4798      	blx	r3
 8009fb6:	4604      	mov	r4, r0
 8009fb8:	e7d8      	b.n	8009f6c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3c>
  CalculateActivationRange(params->activation, &output_activation_min,
 8009fba:	f89a 300c 	ldrb.w	r3, [sl, #12]
// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	f000 8190 	beq.w	800a2e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3b4>
    *activation_min = 0;
    *activation_max = std::numeric_limits<T>::max();
  } else if (activation == kTfLiteActRelu6) {
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	f000 844b 	beq.w	800a860 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x930>
    *activation_min = 0;
    *activation_max = 6;
  } else if (activation == kTfLiteActReluN1To1) {
    *activation_min = -1;
    *activation_max = 1;
 8009fca:	eddf 8a98 	vldr	s17, [pc, #608]	@ 800a22c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
 8009fce:	ed9f 8a96 	vldr	s16, [pc, #600]	@ 800a228 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2f8>
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009fd8:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8009fdc:	bf08      	it	eq
 8009fde:	eef0 8a47 	vmoveq.f32	s17, s14
 8009fe2:	bf08      	it	eq
 8009fe4:	eeb0 8a67 	vmoveq.f32	s16, s15
 8009fe8:	e180      	b.n	800a2ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3bc>
      return EvalQuantizedPerChannel(context, node, params, data, input, filter,
 8009fea:	e9cd 4901 	strd	r4, r9, [sp, #4]
 8009fee:	9700      	str	r7, [sp, #0]
 8009ff0:	462b      	mov	r3, r5
 8009ff2:	4651      	mov	r1, sl
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f7ff fe55 	bl	8009ca4 <_ZN6tflite12_GLOBAL__N_123EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS0_6OpDataEPK16TfLiteEvalTensorSC_SC_PSA_SD_.constprop.0>
}
 8009ffa:	b073      	add	sp, #460	@ 0x1cc
 8009ffc:	ecbd 8b02 	vpop	{d8}
 800a000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const int32_t input_offset = -data.input_zero_point;
 800a004:	6913      	ldr	r3, [r2, #16]
 800a006:	9314      	str	r3, [sp, #80]	@ 0x50
  const int32_t filter_offset = -data.filter_zero_point;
 800a008:	6953      	ldr	r3, [r2, #20]
 800a00a:	9315      	str	r3, [sp, #84]	@ 0x54
  const int32_t output_offset = data.output_zero_point;
 800a00c:	6993      	ldr	r3, [r2, #24]
 800a00e:	9316      	str	r3, [sp, #88]	@ 0x58
  op_params.padding_values.width = data.padding.width;
 800a010:	f9b2 3000 	ldrsh.w	r3, [r2]
 800a014:	9305      	str	r3, [sp, #20]
  op_params.padding_values.height = data.padding.height;
 800a016:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800a01a:	9317      	str	r3, [sp, #92]	@ 0x5c
  op_params.stride_width = params->stride_width;
 800a01c:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 800a020:	9318      	str	r3, [sp, #96]	@ 0x60
  op_params.stride_height = params->stride_height;
 800a022:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
 800a026:	9319      	str	r3, [sp, #100]	@ 0x64
  op_params.dilation_width_factor = params->dilation_width_factor;
 800a028:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
 800a02c:	9308      	str	r3, [sp, #32]
  op_params.dilation_height_factor = params->dilation_height_factor;
 800a02e:	f9ba 3014 	ldrsh.w	r3, [sl, #20]
 800a032:	9309      	str	r3, [sp, #36]	@ 0x24
  op_params.output_multiplier = data.output_multiplier;
 800a034:	69d3      	ldr	r3, [r2, #28]
 800a036:	9304      	str	r3, [sp, #16]
  op_params.quantized_activation_min = data.output_activation_min;
 800a038:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
  op_params.output_shift = -data.output_shift;
 800a03a:	f8d2 8020 	ldr.w	r8, [r2, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 800a03e:	930a      	str	r3, [sp, #40]	@ 0x28
  reference_ops::Conv(op_params, tflite::micro::GetTensorShape(input),
 800a040:	4629      	mov	r1, r5
  op_params.quantized_activation_max = data.output_activation_max;
 800a042:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a044:	930b      	str	r3, [sp, #44]	@ 0x2c
  reference_ops::Conv(op_params, tflite::micro::GetTensorShape(input),
 800a046:	a854      	add	r0, sp, #336	@ 0x150
 800a048:	f7fc fc1c 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a04c:	682b      	ldr	r3, [r5, #0]
 800a04e:	931a      	str	r3, [sp, #104]	@ 0x68
                      tflite::micro::GetTensorShape(filter),
 800a050:	4639      	mov	r1, r7
 800a052:	a85a      	add	r0, sp, #360	@ 0x168
  op_params.output_shift = -data.output_shift;
 800a054:	f1c8 0a00 	rsb	sl, r8, #0
                      tflite::micro::GetTensorShape(filter),
 800a058:	f7fc fc14 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800a05c:	2f00      	cmp	r7, #0
 800a05e:	f000 8408 	beq.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	931b      	str	r3, [sp, #108]	@ 0x6c
                      tflite::micro::GetTensorShape(bias),
 800a066:	4621      	mov	r1, r4
 800a068:	a860      	add	r0, sp, #384	@ 0x180
 800a06a:	f7fc fc0b 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800a06e:	2c00      	cmp	r4, #0
 800a070:	f000 83ff 	beq.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
                      tflite::micro::GetTensorShape(output),
 800a074:	4649      	mov	r1, r9
 800a076:	a866      	add	r0, sp, #408	@ 0x198
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a078:	f8d4 b000 	ldr.w	fp, [r4]
 800a07c:	f7fc fc02 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800a080:	f1b9 0f00 	cmp.w	r9, #0
 800a084:	d001      	beq.n	800a08a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x15a>
 800a086:	f8d9 9000 	ldr.w	r9, [r9]
                      tflite::micro::GetTensorShape(im2col),
 800a08a:	2100      	movs	r1, #0
 800a08c:	a86c      	add	r0, sp, #432	@ 0x1b0
 800a08e:	f7fc fbf9 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const int32_t output_offset = params.output_offset;
  const int32_t output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32_t output_activation_min = params.quantized_activation_min;
  const int32_t output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800a092:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	@ 0x28
 800a096:	4293      	cmp	r3, r2
 800a098:	f300 83eb 	bgt.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800a09c:	9b54      	ldr	r3, [sp, #336]	@ 0x150
 800a09e:	2b04      	cmp	r3, #4
 800a0a0:	f040 83e7 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800a0a4:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
 800a0a6:	2b04      	cmp	r3, #4
 800a0a8:	f040 83e3 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800a0ac:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800a0ae:	2b04      	cmp	r3, #4
 800a0b0:	f040 83df 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a0b4:	9a55      	ldr	r2, [sp, #340]	@ 0x154
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a0b6:	9b67      	ldr	r3, [sp, #412]	@ 0x19c
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	f040 83da 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a0be:	9b58      	ldr	r3, [sp, #352]	@ 0x160
 800a0c0:	930c      	str	r3, [sp, #48]	@ 0x30
 800a0c2:	4619      	mov	r1, r3
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a0c4:	9b5e      	ldr	r3, [sp, #376]	@ 0x178
 800a0c6:	428b      	cmp	r3, r1
 800a0c8:	f040 83d3 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a0cc:	f8dd e16c 	ldr.w	lr, [sp, #364]	@ 0x16c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a0d0:	9b6a      	ldr	r3, [sp, #424]	@ 0x1a8
 800a0d2:	4573      	cmp	r3, lr
 800a0d4:	f040 83cd 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
  if (bias_data) {
 800a0d8:	f1bb 0f00 	cmp.w	fp, #0
 800a0dc:	d014      	beq.n	800a108 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800a0de:	9c60      	ldr	r4, [sp, #384]	@ 0x180
 800a0e0:	2c05      	cmp	r4, #5
 800a0e2:	f300 83bb 	bgt.w	800a85c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x92c>
    for (int i = 0; i < size_; i++) {
 800a0e6:	2c00      	cmp	r4, #0
 800a0e8:	f340 83c1 	ble.w	800a86e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x93e>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800a0ec:	ab61      	add	r3, sp, #388	@ 0x184
 800a0ee:	3b04      	subs	r3, #4
    int buffer_size = 1;
 800a0f0:	2101      	movs	r1, #1
    for (int i = 0; i < size_; i++) {
 800a0f2:	2000      	movs	r0, #0
      buffer_size *= dims_data[i];
 800a0f4:	f853 5f04 	ldr.w	r5, [r3, #4]!
    for (int i = 0; i < size_; i++) {
 800a0f8:	3001      	adds	r0, #1
 800a0fa:	4284      	cmp	r4, r0
      buffer_size *= dims_data[i];
 800a0fc:	fb05 f101 	mul.w	r1, r5, r1
    for (int i = 0; i < size_; i++) {
 800a100:	dcf8      	bgt.n	800a0f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1c4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800a102:	458e      	cmp	lr, r1
 800a104:	f040 83b5 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a108:	9b56      	ldr	r3, [sp, #344]	@ 0x158
 800a10a:	931d      	str	r3, [sp, #116]	@ 0x74
 800a10c:	9b57      	ldr	r3, [sp, #348]	@ 0x15c
 800a10e:	931c      	str	r3, [sp, #112]	@ 0x70
 800a110:	9b5c      	ldr	r3, [sp, #368]	@ 0x170
 800a112:	930e      	str	r3, [sp, #56]	@ 0x38
  const int input_width = input_shape.Dims(2);
  const int filter_height = filter_shape.Dims(1);
  const int filter_width = filter_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  for (int batch = 0; batch < batches; ++batch) {
 800a114:	2a00      	cmp	r2, #0
 800a116:	9b5d      	ldr	r3, [sp, #372]	@ 0x174
 800a118:	930d      	str	r3, [sp, #52]	@ 0x34
 800a11a:	e9dd 3668 	ldrd	r3, r6, [sp, #416]	@ 0x1a0
 800a11e:	f340 82ac 	ble.w	800a67a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x74a>
 800a122:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
 800a126:	4608      	mov	r0, r1
 800a128:	9113      	str	r1, [sp, #76]	@ 0x4c
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800a12a:	2101      	movs	r1, #1
 800a12c:	4081      	lsls	r1, r0
 800a12e:	3901      	subs	r1, #1
 800a130:	910f      	str	r1, [sp, #60]	@ 0x3c
  return a >> offset;
 800a132:	1049      	asrs	r1, r1, #1
 800a134:	9110      	str	r1, [sp, #64]	@ 0x40
 800a136:	2500      	movs	r5, #0
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800a138:	2b00      	cmp	r3, #0
 800a13a:	f340 8211 	ble.w	800a560 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x630>
 800a13e:	9905      	ldr	r1, [sp, #20]
 800a140:	f8cd e044 	str.w	lr, [sp, #68]	@ 0x44
 800a144:	424f      	negs	r7, r1
  int left_shift = shift > 0 ? shift : 0;
 800a146:	ea2a 71ea 	bic.w	r1, sl, sl, asr #31
 800a14a:	e9cd 1929 	strd	r1, r9, [sp, #164]	@ 0xa4
 800a14e:	46ae      	mov	lr, r5
 800a150:	469c      	mov	ip, r3
 800a152:	465d      	mov	r5, fp
 800a154:	463c      	mov	r4, r7
      const int in_y_origin = (out_y * stride_height) - pad_height;
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800a156:	2e00      	cmp	r6, #0
 800a158:	f340 828a 	ble.w	800a670 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x740>
 800a15c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a15e:	f8cd 801c 	str.w	r8, [sp, #28]
 800a162:	f1c3 0b00 	rsb	fp, r3, #0
 800a166:	46aa      	mov	sl, r5
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800a168:	f04f 0900 	mov.w	r9, #0
 800a16c:	465d      	mov	r5, fp
 800a16e:	46f0      	mov	r8, lr
 800a170:	4610      	mov	r0, r2
        const int in_x_origin = (out_x * stride_width) - pad_width;
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800a172:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a174:	2b00      	cmp	r3, #0
 800a176:	46a3      	mov	fp, r4
 800a178:	f340 826e 	ble.w	800a658 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x728>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800a17c:	f04f 0e00 	mov.w	lr, #0
 800a180:	f8cd c0ac 	str.w	ip, [sp, #172]	@ 0xac
 800a184:	942c      	str	r4, [sp, #176]	@ 0xb0
 800a186:	46ac      	mov	ip, r5
 800a188:	4674      	mov	r4, lr
 800a18a:	46c6      	mov	lr, r8
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800a18c:	4621      	mov	r1, r4
 800a18e:	f04f 0800 	mov.w	r8, #0
 800a192:	902d      	str	r0, [sp, #180]	@ 0xb4
 800a194:	4634      	mov	r4, r6
          int32_t acc = 0;
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800a196:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a198:	2b00      	cmp	r3, #0
 800a19a:	f340 82a0 	ble.w	800a6de <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7ae>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800a19e:	9b56      	ldr	r3, [sp, #344]	@ 0x158
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800a1a0:	9d57      	ldr	r5, [sp, #348]	@ 0x15c
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a1a2:	985e      	ldr	r0, [sp, #376]	@ 0x178
 800a1a4:	9a58      	ldr	r2, [sp, #352]	@ 0x160
 800a1a6:	9005      	str	r0, [sp, #20]
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800a1a8:	9324      	str	r3, [sp, #144]	@ 0x90
 800a1aa:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800a1ac:	9e5c      	ldr	r6, [sp, #368]	@ 0x170
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800a1ae:	9f5d      	ldr	r7, [sp, #372]	@ 0x174
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800a1b0:	9620      	str	r6, [sp, #128]	@ 0x80
 800a1b2:	fb0e c303 	mla	r3, lr, r3, ip
 800a1b6:	fb05 b303 	mla	r3, r5, r3, fp
 800a1ba:	fb02 0003 	mla	r0, r2, r3, r0
 800a1be:	9b05      	ldr	r3, [sp, #20]
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800a1c0:	9721      	str	r7, [sp, #132]	@ 0x84
 800a1c2:	fb03 f707 	mul.w	r7, r3, r7
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800a1c6:	fb06 f308 	mul.w	r3, r6, r8
 800a1ca:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800a1cc:	9525      	str	r5, [sp, #148]	@ 0x94
 800a1ce:	fb07 6303 	mla	r3, r7, r3, r6
 800a1d2:	9306      	str	r3, [sp, #24]
 800a1d4:	fb02 f305 	mul.w	r3, r2, r5
 800a1d8:	9d09      	ldr	r5, [sp, #36]	@ 0x24
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a1da:	9226      	str	r2, [sp, #152]	@ 0x98
 800a1dc:	fb05 f303 	mul.w	r3, r5, r3
  inline int32_t DimensionsCount() const { return size_; }
 800a1e0:	9d54      	ldr	r5, [sp, #336]	@ 0x150
 800a1e2:	9522      	str	r5, [sp, #136]	@ 0x88
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800a1e4:	9d55      	ldr	r5, [sp, #340]	@ 0x154
 800a1e6:	9523      	str	r5, [sp, #140]	@ 0x8c
  inline int32_t DimensionsCount() const { return size_; }
 800a1e8:	9d5a      	ldr	r5, [sp, #360]	@ 0x168
 800a1ea:	951e      	str	r5, [sp, #120]	@ 0x78
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800a1ec:	9d5b      	ldr	r5, [sp, #364]	@ 0x16c
 800a1ee:	951f      	str	r5, [sp, #124]	@ 0x7c
 800a1f0:	9d08      	ldr	r5, [sp, #32]
 800a1f2:	9727      	str	r7, [sp, #156]	@ 0x9c
 800a1f4:	fb05 f202 	mul.w	r2, r5, r2
 800a1f8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a1fa:	9228      	str	r2, [sp, #160]	@ 0xa0
 800a1fc:	e9cd c92e 	strd	ip, r9, [sp, #184]	@ 0xb8
 800a200:	e9cd 1a30 	strd	r1, sl, [sp, #192]	@ 0xc0
          int32_t acc = 0;
 800a204:	2300      	movs	r3, #0
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800a206:	4662      	mov	r2, ip
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800a208:	461f      	mov	r7, r3
            const int in_y = in_y_origin + dilation_height_factor * filter_y;
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800a20a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a20c:	2900      	cmp	r1, #0
 800a20e:	f340 81b0 	ble.w	800a572 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x642>
 800a212:	e9cd 0b32 	strd	r0, fp, [sp, #200]	@ 0xc8
 800a216:	4659      	mov	r1, fp
 800a218:	9e06      	ldr	r6, [sp, #24]
 800a21a:	4684      	mov	ip, r0
 800a21c:	2500      	movs	r5, #0
 800a21e:	46a3      	mov	fp, r4
 800a220:	e013      	b.n	800a24a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x31a>
 800a222:	bf00      	nop
 800a224:	08016f6c 	.word	0x08016f6c
 800a228:	ff7fffff 	.word	0xff7fffff
 800a22c:	7f7fffff 	.word	0x7f7fffff
 800a230:	00000000 	.word	0x00000000
 800a234:	9808      	ldr	r0, [sp, #32]
 800a236:	4401      	add	r1, r0
 800a238:	9805      	ldr	r0, [sp, #20]
 800a23a:	4406      	add	r6, r0
 800a23c:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 800a23e:	4484      	add	ip, r0
 800a240:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800a242:	3501      	adds	r5, #1
 800a244:	4285      	cmp	r5, r0
 800a246:	f000 8190 	beq.w	800a56a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x63a>
              const int in_x = in_x_origin + dilation_width_factor * filter_x;

              // Zero padding by omitting the areas outside the image.
              const bool is_point_inside_image =
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800a24a:	ea52 0001 	orrs.w	r0, r2, r1
 800a24e:	d4f1      	bmi.n	800a234 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>
 800a250:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800a252:	4288      	cmp	r0, r1
 800a254:	ddee      	ble.n	800a234 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>
 800a256:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800a258:	4282      	cmp	r2, r0
 800a25a:	daeb      	bge.n	800a234 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>

              if (!is_point_inside_image) {
                continue;
              }

              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800a25c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800a25e:	2800      	cmp	r0, #0
 800a260:	dde8      	ble.n	800a234 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>
 800a262:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800a264:	2804      	cmp	r0, #4
 800a266:	f040 8304 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
 800a26a:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800a26c:	42a8      	cmp	r0, r5
 800a26e:	f340 8300 	ble.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
 800a272:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800a274:	4287      	cmp	r7, r0
 800a276:	f280 82fc 	bge.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
 800a27a:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800a27c:	4580      	cmp	r8, r0
 800a27e:	f280 82f8 	bge.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
 800a282:	e9cd 8534 	strd	r8, r5, [sp, #208]	@ 0xd0
 800a286:	f106 3aff 	add.w	sl, r6, #4294967295	@ 0xffffffff
 800a28a:	f10c 39ff 	add.w	r9, ip, #4294967295	@ 0xffffffff
 800a28e:	2000      	movs	r0, #0
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800a290:	9c23      	ldr	r4, [sp, #140]	@ 0x8c
 800a292:	45a6      	cmp	lr, r4
 800a294:	f280 82ed 	bge.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800a298:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 800a29a:	42a2      	cmp	r2, r4
 800a29c:	f280 82e9 	bge.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800a2a0:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 800a2a2:	428c      	cmp	r4, r1
 800a2a4:	f340 82e5 	ble.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a2a8:	9c26      	ldr	r4, [sp, #152]	@ 0x98
 800a2aa:	42a0      	cmp	r0, r4
 800a2ac:	f280 82e1 	bge.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800a2b0:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
                int32_t input_val = input_data[Offset(input_shape, batch, in_y,
                                                      in_x, in_channel)];
 800a2b2:	f819 8f01 	ldrb.w	r8, [r9, #1]!
 800a2b6:	2c04      	cmp	r4, #4
 800a2b8:	f040 82db 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a2bc:	9c05      	ldr	r4, [sp, #20]
 800a2be:	42a0      	cmp	r0, r4
 800a2c0:	f280 82d7 	bge.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
                int32_t filter_val = filter_data[Offset(
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
                acc +=
                    (filter_val + filter_offset) * (input_val + input_offset);
 800a2c4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800a2c6:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 800a2c8:	eba8 0804 	sub.w	r8, r8, r4
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800a2cc:	f81a 4f01 	ldrb.w	r4, [sl, #1]!
                    (filter_val + filter_offset) * (input_val + input_offset);
 800a2d0:	1b64      	subs	r4, r4, r5
                acc +=
 800a2d2:	fb08 3304 	mla	r3, r8, r4, r3
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800a2d6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800a2d8:	3001      	adds	r0, #1
 800a2da:	42a0      	cmp	r0, r4
 800a2dc:	d1d8      	bne.n	800a290 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x360>
 800a2de:	e9dd 8534 	ldrd	r8, r5, [sp, #208]	@ 0xd0
 800a2e2:	e7a7      	b.n	800a234 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x304>
    *activation_max = std::numeric_limits<T>::max();
 800a2e4:	ed5f 8a2f 	vldr	s17, [pc, #-188]	@ 800a22c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2fc>
    *activation_min = 0;
 800a2e8:	ed1f 8a2f 	vldr	s16, [pc, #-188]	@ 800a230 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x300>
  op_params.stride_width = params->stride_width;
 800a2ec:	f9ba 3004 	ldrsh.w	r3, [sl, #4]
 800a2f0:	930f      	str	r3, [sp, #60]	@ 0x3c
  op_params.stride_height = params->stride_height;
 800a2f2:	f9ba 3008 	ldrsh.w	r3, [sl, #8]
 800a2f6:	9310      	str	r3, [sp, #64]	@ 0x40
  op_params.dilation_width_factor = params->dilation_width_factor;
 800a2f8:	f9ba 3010 	ldrsh.w	r3, [sl, #16]
 800a2fc:	9311      	str	r3, [sp, #68]	@ 0x44
  reference_ops::Conv(op_params, tflite::micro::GetTensorShape(input),
 800a2fe:	4629      	mov	r1, r5
  op_params.dilation_height_factor = params->dilation_height_factor;
 800a300:	f9ba 3014 	ldrsh.w	r3, [sl, #20]
 800a304:	9312      	str	r3, [sp, #72]	@ 0x48
  reference_ops::Conv(op_params, tflite::micro::GetTensorShape(input),
 800a306:	a84e      	add	r0, sp, #312	@ 0x138
  op_params.padding_values.width = data.padding.width;
 800a308:	f9b2 8000 	ldrsh.w	r8, [r2]
  op_params.padding_values.height = data.padding.height;
 800a30c:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
  reference_ops::Conv(op_params, tflite::micro::GetTensorShape(input),
 800a310:	f7fc fab8 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a314:	682b      	ldr	r3, [r5, #0]
 800a316:	9316      	str	r3, [sp, #88]	@ 0x58
                      tflite::micro::GetTensorShape(filter),
 800a318:	4639      	mov	r1, r7
 800a31a:	a848      	add	r0, sp, #288	@ 0x120
 800a31c:	f7fc fab2 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800a320:	2f00      	cmp	r7, #0
 800a322:	f000 82a6 	beq.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	9317      	str	r3, [sp, #92]	@ 0x5c
                      tflite::micro::GetTensorShape(bias),
 800a32a:	4621      	mov	r1, r4
 800a32c:	a842      	add	r0, sp, #264	@ 0x108
 800a32e:	f7fc faa9 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800a332:	2c00      	cmp	r4, #0
 800a334:	f000 829d 	beq.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a338:	6823      	ldr	r3, [r4, #0]
 800a33a:	9313      	str	r3, [sp, #76]	@ 0x4c
                      tflite::micro::GetTensorShape(output),
 800a33c:	4649      	mov	r1, r9
 800a33e:	a83c      	add	r0, sp, #240	@ 0xf0
 800a340:	f7fc faa0 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800a344:	f1b9 0f00 	cmp.w	r9, #0
 800a348:	d001      	beq.n	800a34e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x41e>
 800a34a:	f8d9 9000 	ldr.w	r9, [r9]
                      tflite::micro::GetTensorShape(im2col),
 800a34e:	2100      	movs	r1, #0
 800a350:	a836      	add	r0, sp, #216	@ 0xd8
 800a352:	f7fc fa97 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800a356:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 800a358:	2b04      	cmp	r3, #4
 800a35a:	f040 828a 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 800a35e:	9b48      	ldr	r3, [sp, #288]	@ 0x120
 800a360:	2b04      	cmp	r3, #4
 800a362:	f040 8286 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800a366:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800a368:	2b04      	cmp	r3, #4
 800a36a:	f040 8282 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a36e:	9b4f      	ldr	r3, [sp, #316]	@ 0x13c
 800a370:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800a372:	9308      	str	r3, [sp, #32]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a374:	429a      	cmp	r2, r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a376:	9218      	str	r2, [sp, #96]	@ 0x60
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a378:	f040 827b 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a37c:	9b4c      	ldr	r3, [sp, #304]	@ 0x130
 800a37e:	f8dd e148 	ldr.w	lr, [sp, #328]	@ 0x148
 800a382:	9304      	str	r3, [sp, #16]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a384:	4573      	cmp	r3, lr
 800a386:	f040 8274 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a38a:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 800a38c:	9a40      	ldr	r2, [sp, #256]	@ 0x100
 800a38e:	9306      	str	r3, [sp, #24]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a390:	429a      	cmp	r2, r3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a392:	9205      	str	r2, [sp, #20]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a394:	f040 826d 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  if (bias_data) {
 800a398:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a39a:	b193      	cbz	r3, 800a3c2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x492>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800a39c:	9842      	ldr	r0, [sp, #264]	@ 0x108
 800a39e:	2805      	cmp	r0, #5
 800a3a0:	f340 8258 	ble.w	800a854 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x924>
 800a3a4:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
    for (int i = 0; i < size_; i++) {
 800a3a6:	3b04      	subs	r3, #4
    int buffer_size = 1;
 800a3a8:	2201      	movs	r2, #1
    for (int i = 0; i < size_; i++) {
 800a3aa:	2100      	movs	r1, #0
      buffer_size *= dims_data[i];
 800a3ac:	f853 4f04 	ldr.w	r4, [r3, #4]!
    for (int i = 0; i < size_; i++) {
 800a3b0:	3101      	adds	r1, #1
 800a3b2:	4288      	cmp	r0, r1
      buffer_size *= dims_data[i];
 800a3b4:	fb04 f202 	mul.w	r2, r4, r2
    for (int i = 0; i < size_; i++) {
 800a3b8:	dcf8      	bgt.n	800a3ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x47c>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 800a3ba:	9b06      	ldr	r3, [sp, #24]
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	f040 8258 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  for (int batch = 0; batch < batches; ++batch) {
 800a3c2:	9d08      	ldr	r5, [sp, #32]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a3c4:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800a3c6:	9851      	ldr	r0, [sp, #324]	@ 0x144
 800a3c8:	9a4a      	ldr	r2, [sp, #296]	@ 0x128
 800a3ca:	9f3e      	ldr	r7, [sp, #248]	@ 0xf8
 800a3cc:	9c3f      	ldr	r4, [sp, #252]	@ 0xfc
 800a3ce:	994b      	ldr	r1, [sp, #300]	@ 0x12c
 800a3d0:	9314      	str	r3, [sp, #80]	@ 0x50
 800a3d2:	2d00      	cmp	r5, #0
 800a3d4:	901c      	str	r0, [sp, #112]	@ 0x70
 800a3d6:	9207      	str	r2, [sp, #28]
 800a3d8:	970a      	str	r7, [sp, #40]	@ 0x28
 800a3da:	9409      	str	r4, [sp, #36]	@ 0x24
 800a3dc:	f340 8205 	ble.w	800a7ea <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8ba>
 800a3e0:	fb00 f306 	mul.w	r3, r0, r6
 800a3e4:	425b      	negs	r3, r3
 800a3e6:	eba3 0308 	sub.w	r3, r3, r8
 800a3ea:	fb0e f503 	mul.w	r5, lr, r3
 800a3ee:	fb04 f307 	mul.w	r3, r4, r7
 800a3f2:	9f05      	ldr	r7, [sp, #20]
          float bias_value = 0.0f;
 800a3f4:	ed5f 6a72 	vldr	s13, [pc, #-456]	@ 800a230 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x300>
 800a3f8:	910c      	str	r1, [sp, #48]	@ 0x30
 800a3fa:	fb07 f703 	mul.w	r7, r7, r3
 800a3fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a400:	f8cd e054 	str.w	lr, [sp, #84]	@ 0x54
 800a404:	fb00 f303 	mul.w	r3, r0, r3
 800a408:	fb0e fc03 	mul.w	ip, lr, r3
 800a40c:	9b07      	ldr	r3, [sp, #28]
 800a40e:	fb00 f20e 	mul.w	r2, r0, lr
 800a412:	9804      	ldr	r0, [sp, #16]
 800a414:	fb01 f303 	mul.w	r3, r1, r3
 800a418:	fb00 f303 	mul.w	r3, r0, r3
 800a41c:	9805      	ldr	r0, [sp, #20]
 800a41e:	931f      	str	r3, [sp, #124]	@ 0x7c
 800a420:	fb04 fa00 	mul.w	sl, r4, r0
 800a424:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800a426:	9804      	ldr	r0, [sp, #16]
 800a428:	f8cd a080 	str.w	sl, [sp, #128]	@ 0x80
 800a42c:	fb02 f404 	mul.w	r4, r2, r4
 800a430:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a432:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800a434:	fb04 f202 	mul.w	r2, r4, r2
 800a438:	921e      	str	r2, [sp, #120]	@ 0x78
 800a43a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a43c:	fb0e f202 	mul.w	r2, lr, r2
 800a440:	921d      	str	r2, [sp, #116]	@ 0x74
 800a442:	fb00 f201 	mul.w	r2, r0, r1
 800a446:	921a      	str	r2, [sp, #104]	@ 0x68
 800a448:	9a11      	ldr	r2, [sp, #68]	@ 0x44
  for (int batch = 0; batch < batches; ++batch) {
 800a44a:	2300      	movs	r3, #0
 800a44c:	fb0e f202 	mul.w	r2, lr, r2
 800a450:	9219      	str	r2, [sp, #100]	@ 0x64
 800a452:	4640      	mov	r0, r8
 800a454:	461a      	mov	r2, r3
 800a456:	4649      	mov	r1, r9
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800a458:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a45a:	2c00      	cmp	r4, #0
 800a45c:	f340 81be 	ble.w	800a7dc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8ac>
 800a460:	920d      	str	r2, [sp, #52]	@ 0x34
 800a462:	f1c6 0b00 	rsb	fp, r6, #0
 800a466:	46ae      	mov	lr, r5
 800a468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a46a:	f04f 0800 	mov.w	r8, #0
 800a46e:	460c      	mov	r4, r1
 800a470:	9621      	str	r6, [sp, #132]	@ 0x84
 800a472:	9722      	str	r7, [sp, #136]	@ 0x88
 800a474:	461a      	mov	r2, r3
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800a476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a478:	2b00      	cmp	r3, #0
 800a47a:	f340 819c 	ble.w	800a7b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x886>
 800a47e:	f1c0 0900 	rsb	r9, r0, #0
 800a482:	2600      	movs	r6, #0
 800a484:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a486:	9023      	str	r0, [sp, #140]	@ 0x8c
 800a488:	4621      	mov	r1, r4
 800a48a:	960e      	str	r6, [sp, #56]	@ 0x38
 800a48c:	f8cd e090 	str.w	lr, [sp, #144]	@ 0x90
 800a490:	4674      	mov	r4, lr
 800a492:	9525      	str	r5, [sp, #148]	@ 0x94
 800a494:	4610      	mov	r0, r2
 800a496:	46ca      	mov	sl, r9
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800a498:	9b06      	ldr	r3, [sp, #24]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	f340 8179 	ble.w	800a792 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x862>
 800a4a0:	2500      	movs	r5, #0
 800a4a2:	eb01 0987 	add.w	r9, r1, r7, lsl #2
 800a4a6:	462b      	mov	r3, r5
 800a4a8:	9126      	str	r1, [sp, #152]	@ 0x98
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800a4aa:	9a07      	ldr	r2, [sp, #28]
          float total = 0.f;
 800a4ac:	ed1f 7aa0 	vldr	s14, [pc, #-640]	@ 800a230 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x300>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800a4b0:	2a00      	cmp	r2, #0
 800a4b2:	f340 8139 	ble.w	800a728 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7f8>
 800a4b6:	e9cd 8427 	strd	r8, r4, [sp, #156]	@ 0x9c
 800a4ba:	e9cd 5b29 	strd	r5, fp, [sp, #164]	@ 0xa4
 800a4be:	4659      	mov	r1, fp
 800a4c0:	46a6      	mov	lr, r4
 800a4c2:	462e      	mov	r6, r5
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	902b      	str	r0, [sp, #172]	@ 0xac
 800a4c8:	46e3      	mov	fp, ip
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 800a4ca:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	f340 8119 	ble.w	800a704 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7d4>
 800a4d2:	e9cd 6e2c 	strd	r6, lr, [sp, #176]	@ 0xb0
 800a4d6:	46f0      	mov	r8, lr
 800a4d8:	46b4      	mov	ip, r6
 800a4da:	4654      	mov	r4, sl
 800a4dc:	2000      	movs	r0, #0
 800a4de:	e00a      	b.n	800a4f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c6>
 800a4e0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800a4e2:	442c      	add	r4, r5
 800a4e4:	9d04      	ldr	r5, [sp, #16]
 800a4e6:	44ac      	add	ip, r5
 800a4e8:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a4ea:	44a8      	add	r8, r5
 800a4ec:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	42a8      	cmp	r0, r5
 800a4f2:	f000 8105 	beq.w	800a700 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7d0>
                  (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 800a4f6:	ea54 0501 	orrs.w	r5, r4, r1
 800a4fa:	d4f1      	bmi.n	800a4e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b0>
 800a4fc:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 800a4fe:	42ac      	cmp	r4, r5
 800a500:	daee      	bge.n	800a4e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b0>
 800a502:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800a504:	428d      	cmp	r5, r1
 800a506:	ddeb      	ble.n	800a4e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b0>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800a508:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 800a50a:	2d00      	cmp	r5, #0
 800a50c:	dde8      	ble.n	800a4e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b0>
 800a50e:	9d08      	ldr	r5, [sp, #32]
 800a510:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800a512:	42b5      	cmp	r5, r6
 800a514:	f340 81ad 	ble.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
 800a518:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800a51a:	4285      	cmp	r5, r0
 800a51c:	f340 81a9 	ble.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
 800a520:	9d07      	ldr	r5, [sp, #28]
 800a522:	4295      	cmp	r5, r2
 800a524:	f340 81a5 	ble.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
 800a528:	9d06      	ldr	r5, [sp, #24]
 800a52a:	429d      	cmp	r5, r3
 800a52c:	f340 81a1 	ble.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
 800a530:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800a532:	932e      	str	r3, [sp, #184]	@ 0xb8
 800a534:	eb05 0e8c 	add.w	lr, r5, ip, lsl #2
 800a538:	9d16      	ldr	r5, [sp, #88]	@ 0x58
 800a53a:	eb05 0688 	add.w	r6, r5, r8, lsl #2
 800a53e:	2500      	movs	r5, #0
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a540:	9b04      	ldr	r3, [sp, #16]
                                                      in_x, in_channel)];
 800a542:	ecb6 6a01 	vldmia	r6!, {s12}
 800a546:	42ab      	cmp	r3, r5
 800a548:	f340 8193 	ble.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800a54c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
                    filter_shape, out_channel, filter_y, filter_x, in_channel)];
 800a54e:	ecfe 7a01 	vldmia	lr!, {s15}
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800a552:	3501      	adds	r5, #1
 800a554:	429d      	cmp	r5, r3
                total += (input_value * filter_value);
 800a556:	eea6 7a27 	vfma.f32	s14, s12, s15
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 800a55a:	d1f1      	bne.n	800a540 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x610>
 800a55c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 800a55e:	e7bf      	b.n	800a4e0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5b0>
  for (int batch = 0; batch < batches; ++batch) {
 800a560:	3501      	adds	r5, #1
 800a562:	4295      	cmp	r5, r2
 800a564:	f47f ade8 	bne.w	800a138 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x208>
 800a568:	e087      	b.n	800a67a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x74a>
 800a56a:	465c      	mov	r4, fp
 800a56c:	9832      	ldr	r0, [sp, #200]	@ 0xc8
 800a56e:	f8dd b0cc 	ldr.w	fp, [sp, #204]	@ 0xcc
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800a572:	9906      	ldr	r1, [sp, #24]
 800a574:	9d27      	ldr	r5, [sp, #156]	@ 0x9c
 800a576:	4429      	add	r1, r5
 800a578:	9106      	str	r1, [sp, #24]
 800a57a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800a57c:	4408      	add	r0, r1
 800a57e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a580:	440a      	add	r2, r1
 800a582:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a584:	3701      	adds	r7, #1
 800a586:	428f      	cmp	r7, r1
 800a588:	f47f ae3f 	bne.w	800a20a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2da>
 800a58c:	e9dd c92e 	ldrd	ip, r9, [sp, #184]	@ 0xb8
 800a590:	e9dd 1a30 	ldrd	r1, sl, [sp, #192]	@ 0xc0
              }
            }
          }
          if (bias_data) {
 800a594:	f1ba 0f00 	cmp.w	sl, #0
 800a598:	d002      	beq.n	800a5a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x670>
            acc += bias_data[out_channel];
 800a59a:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800a59e:	4413      	add	r3, r2
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800a5a0:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 800a5a2:	4093      	lsls	r3, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800a5a4:	9a04      	ldr	r2, [sp, #16]
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	f000 808c 	beq.w	800a6c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x794>
  std::int64_t ab_64 = a_64 * b_64;
 800a5ac:	9a04      	ldr	r2, [sp, #16]
 800a5ae:	fb83 3202 	smull	r3, r2, r3, r2
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800a5b2:	2a00      	cmp	r2, #0
 800a5b4:	f2c0 8095 	blt.w	800a6e2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7b2>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800a5b8:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 800a5bc:	f142 0200 	adc.w	r2, r2, #0
 800a5c0:	0fdb      	lsrs	r3, r3, #31
 800a5c2:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  assert(exponent <= 31);
 800a5c6:	9a07      	ldr	r2, [sp, #28]
 800a5c8:	2a1f      	cmp	r2, #31
 800a5ca:	f300 813c 	bgt.w	800a846 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x916>
  return a & b;
 800a5ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a5d0:	ea03 0002 	and.w	r0, r3, r2
  return a + b;
 800a5d4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a5d6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
  return a >> offset;
 800a5da:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800a5dc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800a5de:	412b      	asrs	r3, r5
  return a + b;
 800a5e0:	4290      	cmp	r0, r2
 800a5e2:	bfc8      	it	gt
 800a5e4:	3301      	addgt	r3, #1
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
                                              output_shift);
          acc += output_offset;
 800a5e6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a5e8:	4413      	add	r3, r2
 800a5ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	bfb8      	it	lt
 800a5f0:	4613      	movlt	r3, r2
 800a5f2:	429f      	cmp	r7, r3
 800a5f4:	bfa8      	it	ge
 800a5f6:	461f      	movge	r7, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800a5f8:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800a5fa:	2b04      	cmp	r3, #4
 800a5fc:	f040 8139 	bne.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800a600:	9b67      	ldr	r3, [sp, #412]	@ 0x19c
 800a602:	459e      	cmp	lr, r3
 800a604:	f280 8135 	bge.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800a608:	9b68      	ldr	r3, [sp, #416]	@ 0x1a0
 800a60a:	4599      	cmp	r9, r3
 800a60c:	f280 8131 	bge.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800a610:	9869      	ldr	r0, [sp, #420]	@ 0x1a4
 800a612:	4281      	cmp	r1, r0
 800a614:	f280 812d 	bge.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a618:	9a6a      	ldr	r2, [sp, #424]	@ 0x1a8
 800a61a:	4590      	cmp	r8, r2
 800a61c:	f280 8129 	bge.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800a620:	fb03 930e 	mla	r3, r3, lr, r9
 800a624:	fb00 1303 	mla	r3, r0, r3, r1
          acc = std::max(acc, output_activation_min);
          acc = std::min(acc, output_activation_max);
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800a628:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 800a62a:	fb02 0303 	mla	r3, r2, r3, r0
 800a62e:	f803 7008 	strb.w	r7, [r3, r8]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800a632:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a634:	f108 0801 	add.w	r8, r8, #1
 800a638:	4598      	cmp	r8, r3
 800a63a:	f47f adac 	bne.w	800a196 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x266>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800a63e:	4626      	mov	r6, r4
 800a640:	460c      	mov	r4, r1
 800a642:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800a644:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 800a646:	3401      	adds	r4, #1
 800a648:	42b4      	cmp	r4, r6
 800a64a:	449b      	add	fp, r3
 800a64c:	f47f ad9e 	bne.w	800a18c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x25c>
 800a650:	4665      	mov	r5, ip
 800a652:	e9dd c42b 	ldrd	ip, r4, [sp, #172]	@ 0xac
 800a656:	46f0      	mov	r8, lr
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800a658:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a65a:	f109 0901 	add.w	r9, r9, #1
 800a65e:	45cc      	cmp	ip, r9
 800a660:	441d      	add	r5, r3
 800a662:	f47f ad86 	bne.w	800a172 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x242>
 800a666:	46c6      	mov	lr, r8
 800a668:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800a66c:	4655      	mov	r5, sl
 800a66e:	4602      	mov	r2, r0
  for (int batch = 0; batch < batches; ++batch) {
 800a670:	f10e 0e01 	add.w	lr, lr, #1
 800a674:	4596      	cmp	lr, r2
 800a676:	f47f ad6e 	bne.w	800a156 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x226>
    if (size_ > kMaxSmallSize) {
 800a67a:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 800a67c:	2b05      	cmp	r3, #5
 800a67e:	dd03      	ble.n	800a688 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x758>
      delete[] dims_pointer_;
 800a680:	986d      	ldr	r0, [sp, #436]	@ 0x1b4
 800a682:	b108      	cbz	r0, 800a688 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x758>
 800a684:	f006 f946 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a688:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800a68a:	2b05      	cmp	r3, #5
 800a68c:	dd03      	ble.n	800a696 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x766>
      delete[] dims_pointer_;
 800a68e:	9867      	ldr	r0, [sp, #412]	@ 0x19c
 800a690:	b108      	cbz	r0, 800a696 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x766>
 800a692:	f006 f93f 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a696:	9b60      	ldr	r3, [sp, #384]	@ 0x180
 800a698:	2b05      	cmp	r3, #5
 800a69a:	dd03      	ble.n	800a6a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x774>
      delete[] dims_pointer_;
 800a69c:	9861      	ldr	r0, [sp, #388]	@ 0x184
 800a69e:	b108      	cbz	r0, 800a6a4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x774>
 800a6a0:	f006 f938 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a6a4:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
 800a6a6:	2b05      	cmp	r3, #5
 800a6a8:	dd03      	ble.n	800a6b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x782>
      delete[] dims_pointer_;
 800a6aa:	985b      	ldr	r0, [sp, #364]	@ 0x16c
 800a6ac:	b108      	cbz	r0, 800a6b2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x782>
 800a6ae:	f006 f931 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a6b2:	9b54      	ldr	r3, [sp, #336]	@ 0x150
 800a6b4:	2b05      	cmp	r3, #5
 800a6b6:	f340 80b7 	ble.w	800a828 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8f8>
      delete[] dims_pointer_;
 800a6ba:	9855      	ldr	r0, [sp, #340]	@ 0x154
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	f040 80bf 	bne.w	800a840 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x910>
 800a6c2:	e0b1      	b.n	800a828 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8f8>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800a6c4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800a6c8:	f47f af70 	bne.w	800a5ac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x67c>
  assert(exponent <= 31);
 800a6cc:	9b07      	ldr	r3, [sp, #28]
 800a6ce:	2b1f      	cmp	r3, #31
 800a6d0:	f300 80b9 	bgt.w	800a846 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x916>
  return a & b;
 800a6d4:	e9dd 020f 	ldrd	r0, r2, [sp, #60]	@ 0x3c
  assert(exponent <= 31);
 800a6d8:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a6dc:	e77d      	b.n	800a5da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6aa>
          int32_t acc = 0;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e758      	b.n	800a594 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x664>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800a6e2:	4865      	ldr	r0, [pc, #404]	@ (800a878 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x948>)
 800a6e4:	181b      	adds	r3, r3, r0
 800a6e6:	f162 0200 	sbc.w	r2, r2, #0
 800a6ea:	2a00      	cmp	r2, #0
 800a6ec:	da04      	bge.n	800a6f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7c8>
 800a6ee:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800a6f2:	181b      	adds	r3, r3, r0
 800a6f4:	f142 0200 	adc.w	r2, r2, #0
 800a6f8:	0fdb      	lsrs	r3, r3, #31
 800a6fa:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800a6fe:	e762      	b.n	800a5c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x696>
 800a700:	e9dd 6e2c 	ldrd	r6, lr, [sp, #176]	@ 0xb0
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 800a704:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800a706:	4406      	add	r6, r0
 800a708:	981e      	ldr	r0, [sp, #120]	@ 0x78
 800a70a:	4486      	add	lr, r0
 800a70c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800a70e:	4401      	add	r1, r0
 800a710:	9807      	ldr	r0, [sp, #28]
 800a712:	3201      	adds	r2, #1
 800a714:	4282      	cmp	r2, r0
 800a716:	f47f aed8 	bne.w	800a4ca <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x59a>
 800a71a:	e9dd 8427 	ldrd	r8, r4, [sp, #156]	@ 0x9c
 800a71e:	46dc      	mov	ip, fp
 800a720:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 800a722:	982b      	ldr	r0, [sp, #172]	@ 0xac
 800a724:	f8dd b0a8 	ldr.w	fp, [sp, #168]	@ 0xa8
          if (bias_data) {
 800a728:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800a72a:	2a00      	cmp	r2, #0
 800a72c:	f000 8082 	beq.w	800a834 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x904>
            bias_value = bias_data[out_channel];
 800a730:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a734:	edd2 7a00 	vldr	s15, [r2]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800a738:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800a73a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a73c:	428a      	cmp	r2, r1
              ActivationFunctionWithMinMax(total + bias_value,
 800a73e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a742:	f340 8096 	ble.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800a746:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a748:	4542      	cmp	r2, r8
 800a74a:	f340 8092 	ble.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800a74e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a750:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a752:	428a      	cmp	r2, r1
 800a754:	f340 808d 	ble.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800a758:	9a05      	ldr	r2, [sp, #20]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	f340 8089 	ble.w	800a872 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x942>
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
 800a760:	eef4 7a48 	vcmp.f32	s15, s16
 800a764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800a768:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800a76a:	bf48      	it	mi
 800a76c:	eef0 7a48 	vmovmi.f32	s15, s16
	return __b;
 800a770:	eef4 7a68 	vcmp.f32	s15, s17
 800a774:	4415      	add	r5, r2
 800a776:	9a06      	ldr	r2, [sp, #24]
 800a778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a77c:	f103 0301 	add.w	r3, r3, #1
 800a780:	bfc8      	it	gt
 800a782:	eef0 7a68 	vmovgt.f32	s15, s17
 800a786:	4293      	cmp	r3, r2
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 800a788:	ece9 7a01 	vstmia	r9!, {s15}
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 800a78c:	f47f ae8d 	bne.w	800a4aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x57a>
 800a790:	9926      	ldr	r1, [sp, #152]	@ 0x98
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800a792:	9a05      	ldr	r2, [sp, #20]
 800a794:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a796:	4417      	add	r7, r2
 800a798:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a79a:	4414      	add	r4, r2
 800a79c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a79e:	4492      	add	sl, r2
 800a7a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	930e      	str	r3, [sp, #56]	@ 0x38
 800a7a8:	f47f ae76 	bne.w	800a498 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x568>
 800a7ac:	e9dd e524 	ldrd	lr, r5, [sp, #144]	@ 0x90
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800a7b4:	460c      	mov	r4, r1
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800a7b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7b8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a7ba:	440b      	add	r3, r1
 800a7bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a7be:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800a7c0:	449e      	add	lr, r3
 800a7c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a7c4:	449b      	add	fp, r3
 800a7c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7c8:	f108 0801 	add.w	r8, r8, #1
 800a7cc:	4598      	cmp	r8, r3
 800a7ce:	f47f ae52 	bne.w	800a476 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x546>
 800a7d2:	e9dd 6721 	ldrd	r6, r7, [sp, #132]	@ 0x84
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a7da:	4621      	mov	r1, r4
  for (int batch = 0; batch < batches; ++batch) {
 800a7dc:	9c08      	ldr	r4, [sp, #32]
 800a7de:	3201      	adds	r2, #1
 800a7e0:	42a2      	cmp	r2, r4
 800a7e2:	443b      	add	r3, r7
 800a7e4:	4465      	add	r5, ip
 800a7e6:	f47f ae37 	bne.w	800a458 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x528>
    if (size_ > kMaxSmallSize) {
 800a7ea:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800a7ec:	2b05      	cmp	r3, #5
 800a7ee:	dd0a      	ble.n	800a806 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8d6>
      delete[] dims_pointer_;
 800a7f0:	9837      	ldr	r0, [sp, #220]	@ 0xdc
 800a7f2:	b140      	cbz	r0, 800a806 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8d6>
 800a7f4:	f006 f88e 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a7f8:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800a7fa:	2b05      	cmp	r3, #5
 800a7fc:	dd03      	ble.n	800a806 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8d6>
      delete[] dims_pointer_;
 800a7fe:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 800a800:	b108      	cbz	r0, 800a806 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8d6>
 800a802:	f006 f887 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a806:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 800a808:	2b05      	cmp	r3, #5
 800a80a:	dd03      	ble.n	800a814 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8e4>
      delete[] dims_pointer_;
 800a80c:	9843      	ldr	r0, [sp, #268]	@ 0x10c
 800a80e:	b108      	cbz	r0, 800a814 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8e4>
 800a810:	f006 f880 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a814:	9b48      	ldr	r3, [sp, #288]	@ 0x120
 800a816:	2b05      	cmp	r3, #5
 800a818:	dd03      	ble.n	800a822 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8f2>
      delete[] dims_pointer_;
 800a81a:	9849      	ldr	r0, [sp, #292]	@ 0x124
 800a81c:	b108      	cbz	r0, 800a822 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8f2>
 800a81e:	f006 f879 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a822:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 800a824:	2b05      	cmp	r3, #5
 800a826:	dc08      	bgt.n	800a83a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x90a>
      return EvalQuantized(context, node, params, data, input, filter, bias,
 800a828:	2000      	movs	r0, #0
}
 800a82a:	b073      	add	sp, #460	@ 0x1cc
 800a82c:	ecbd 8b02 	vpop	{d8}
 800a830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          float bias_value = 0.0f;
 800a834:	eef0 7a66 	vmov.f32	s15, s13
 800a838:	e77e      	b.n	800a738 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x808>
      delete[] dims_pointer_;
 800a83a:	984f      	ldr	r0, [sp, #316]	@ 0x13c
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d0f3      	beq.n	800a828 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8f8>
 800a840:	f006 f868 	bl	8010914 <_ZdaPv>
                           nullptr, nullptr, output);
 800a844:	e7f0      	b.n	800a828 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x8f8>
  assert(exponent <= 31);
 800a846:	4b0d      	ldr	r3, [pc, #52]	@ (800a87c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94c>)
 800a848:	4a0d      	ldr	r2, [pc, #52]	@ (800a880 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x950>)
 800a84a:	480e      	ldr	r0, [pc, #56]	@ (800a884 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x954>)
 800a84c:	f240 1167 	movw	r1, #359	@ 0x167
 800a850:	f006 fb3c 	bl	8010ecc <__assert_func>
    for (int i = 0; i < size_; i++) {
 800a854:	2800      	cmp	r0, #0
 800a856:	dd08      	ble.n	800a86a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x93a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800a858:	ab43      	add	r3, sp, #268	@ 0x10c
 800a85a:	e5a4      	b.n	800a3a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x476>
 800a85c:	9b61      	ldr	r3, [sp, #388]	@ 0x184
    for (int i = 0; i < size_; i++) {
 800a85e:	e446      	b.n	800a0ee <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1be>
    *activation_min = 0;
 800a860:	ed9f 8a09 	vldr	s16, [pc, #36]	@ 800a888 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x958>
    *activation_max = 6;
 800a864:	eef1 8a08 	vmov.f32	s17, #24	@ 0x40c00000  6.0
 800a868:	e540      	b.n	800a2ec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3bc>
    int buffer_size = 1;
 800a86a:	2201      	movs	r2, #1
 800a86c:	e5a5      	b.n	800a3ba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x48a>
 800a86e:	2101      	movs	r1, #1
 800a870:	e447      	b.n	800a102 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d2>
  TFLITE_DCHECK(context != nullptr);
 800a872:	f006 fb23 	bl	8010ebc <abort>
 800a876:	bf00      	nop
 800a878:	c0000001 	.word	0xc0000001
 800a87c:	080165c4 	.word	0x080165c4
 800a880:	080165d4 	.word	0x080165d4
 800a884:	08016630 	.word	0x08016630
 800a888:	00000000 	.word	0x00000000

0800a88c <_ZN6tflite16Register_CONV_2DEv>:

}  // namespace

TfLiteRegistration Register_CONV_2D() {
 800a88c:	b510      	push	{r4, lr}
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800a88e:	4c06      	ldr	r4, [pc, #24]	@ (800a8a8 <_ZN6tflite16Register_CONV_2DEv+0x1c>)
TfLiteRegistration Register_CONV_2D() {
 800a890:	4686      	mov	lr, r0
          /*version=*/0};
 800a892:	4684      	mov	ip, r0
 800a894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a896:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a89a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a89e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 800a8a2:	4670      	mov	r0, lr
 800a8a4:	bd10      	pop	{r4, pc}
 800a8a6:	bf00      	nop
 800a8a8:	08013ce0 	.word	0x08013ce0

0800a8ac <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:
  }
  return status;
}

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800a8ac:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800a8ae:	b10b      	cbz	r3, 800a8b4 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800a8b0:	2124      	movs	r1, #36	@ 0x24
 800a8b2:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800a8b4:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800a8b6:	f006 fb01 	bl	8010ebc <abort>
 800a8ba:	bf00      	nop

0800a8bc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>:
    }
  }
  return kTfLiteOk;
}

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
 800a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	b0dd      	sub	sp, #372	@ 0x174
 800a8c2:	f8dd 9198 	ldr.w	r9, [sp, #408]	@ 0x198
  TFLITE_DCHECK(tensor != nullptr);
 800a8c6:	f1b9 0f00 	cmp.w	r9, #0
 800a8ca:	f000 821d 	beq.w	800ad08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x44c>
 800a8ce:	4698      	mov	r8, r3
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
  // The 'if' condition can be removed when null handling of bias is added to
  // arm_fully_connected_s8
  if (nullptr != tflite::micro::GetTensorData<int32_t>(bias)) {
 800a8d0:	f8d9 3000 	ldr.w	r3, [r9]
 800a8d4:	468a      	mov	sl, r1
 800a8d6:	4615      	mov	r5, r2
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	f000 8099 	beq.w	800aa10 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x154>
    const RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 800a8de:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	a832      	add	r0, sp, #200	@ 0xc8
 800a8e4:	f7fb ffce 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800a8e8:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800a8ea:	2b02      	cmp	r3, #2
 800a8ec:	f040 820c 	bne.w	800ad08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x44c>
    const int batches = output_shape.Dims(0);
    const int output_depth = output_shape.Dims(1);
    const RuntimeShape filter_shape = tflite::micro::GetTensorShape(filter);
 800a8f0:	4641      	mov	r1, r8
 800a8f2:	a838      	add	r0, sp, #224	@ 0xe0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a8f4:	e9dd 7633 	ldrd	r7, r6, [sp, #204]	@ 0xcc
 800a8f8:	f7fb ffc4 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  inline int32_t DimensionsCount() const { return size_; }
 800a8fc:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
    TFLITE_DCHECK_GE(i, 0);
 800a8fe:	1e5a      	subs	r2, r3, #1
 800a900:	f100 8202 	bmi.w	800ad08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x44c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800a904:	2b05      	cmp	r3, #5
 800a906:	dc7f      	bgt.n	800aa08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x14c>
 800a908:	ab5c      	add	r3, sp, #368	@ 0x170
 800a90a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800a90e:	f852 bc8c 	ldr.w	fp, [r2, #-140]
    const int filter_dim_count = filter_shape.DimensionsCount();
    const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
    const RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 800a912:	4629      	mov	r1, r5
 800a914:	a83e      	add	r0, sp, #248	@ 0xf8
 800a916:	f7fb ffb5 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>

    cmsis_nn_fc_params fc_params;
    fc_params.input_offset = -data.input_zero_point;
 800a91a:	f8da 3018 	ldr.w	r3, [sl, #24]
    quant_params.multiplier = data.output_multiplier;
    // TODO(b/138810107): Figure out whether output shift should be inverted
    quant_params.shift = -data.output_shift;

    cmsis_nn_dims input_dims;
    input_dims.n = batches;
 800a91e:	971d      	str	r7, [sp, #116]	@ 0x74
    fc_params.input_offset = -data.input_zero_point;
 800a920:	425b      	negs	r3, r3
 800a922:	932d      	str	r3, [sp, #180]	@ 0xb4
    fc_params.filter_offset = -data.filter_zero_point;
 800a924:	f8da 301c 	ldr.w	r3, [sl, #28]
    bias_dims.h = 1;
    bias_dims.w = 1;
    bias_dims.c = output_depth;

    cmsis_nn_dims output_dims;
    output_dims.n = batches;
 800a928:	9729      	str	r7, [sp, #164]	@ 0xa4
    fc_params.filter_offset = -data.filter_zero_point;
 800a92a:	425b      	negs	r3, r3
 800a92c:	932e      	str	r3, [sp, #184]	@ 0xb8
    quant_params.shift = -data.output_shift;
 800a92e:	f8da 3004 	ldr.w	r3, [sl, #4]
    filter_dims.c = output_depth;
 800a932:	9624      	str	r6, [sp, #144]	@ 0x90
    quant_params.shift = -data.output_shift;
 800a934:	425b      	negs	r3, r3
 800a936:	931a      	str	r3, [sp, #104]	@ 0x68
    input_dims.h = 1;
 800a938:	2301      	movs	r3, #1
    input_dims.w = 1;
 800a93a:	e9cd 331e 	strd	r3, r3, [sp, #120]	@ 0x78
    filter_dims.w = 1;
 800a93e:	e9cd 3322 	strd	r3, r3, [sp, #136]	@ 0x88
    bias_dims.h = 1;
 800a942:	e9cd 3325 	strd	r3, r3, [sp, #148]	@ 0x94
    output_dims.h = 1;
    output_dims.w = 1;
 800a946:	e9cd 332a 	strd	r3, r3, [sp, #168]	@ 0xa8
    bias_dims.w = 1;
 800a94a:	9327      	str	r3, [sp, #156]	@ 0x9c
    fc_params.output_offset = data.output_zero_point;
 800a94c:	f8da 3008 	ldr.w	r3, [sl, #8]
 800a950:	9330      	str	r3, [sp, #192]	@ 0xc0
 800a952:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a956:	9331      	str	r3, [sp, #196]	@ 0xc4
 800a958:	f8da 3020 	ldr.w	r3, [sl, #32]
 800a95c:	932f      	str	r3, [sp, #188]	@ 0xbc
    quant_params.multiplier = data.output_multiplier;
 800a95e:	f8da 3000 	ldr.w	r3, [sl]
 800a962:	9319      	str	r3, [sp, #100]	@ 0x64
    output_dims.c = output_depth;

    cmsis_nn_context ctx;
    ctx.buf = nullptr;
 800a964:	2300      	movs	r3, #0
    filter_dims.n = accum_depth;
 800a966:	e9cd bb20 	strd	fp, fp, [sp, #128]	@ 0x80
    ctx.size = 0;
 800a96a:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
    bias_dims.c = output_depth;
 800a96e:	9628      	str	r6, [sp, #160]	@ 0xa0
    output_dims.c = output_depth;
 800a970:	962c      	str	r6, [sp, #176]	@ 0xb0

    if (data.buffer_idx > -1) {
 800a972:	f8da 1014 	ldr.w	r1, [sl, #20]
 800a976:	4299      	cmp	r1, r3
 800a978:	db03      	blt.n	800a982 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0xc6>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 800a97a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a97c:	4620      	mov	r0, r4
 800a97e:	4798      	blx	r3
 800a980:	901b      	str	r0, [sp, #108]	@ 0x6c
 800a982:	2d00      	cmp	r5, #0
 800a984:	f000 81c0 	beq.w	800ad08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x44c>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a988:	682b      	ldr	r3, [r5, #0]
  TFLITE_DCHECK(tensor != nullptr);
 800a98a:	f1b8 0f00 	cmp.w	r8, #0
 800a98e:	f000 81bb 	beq.w	800ad08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x44c>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800a992:	9867      	ldr	r0, [sp, #412]	@ 0x19c
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a994:	f8d8 2000 	ldr.w	r2, [r8]
 800a998:	f8d9 1000 	ldr.w	r1, [r9]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800a99c:	2800      	cmp	r0, #0
 800a99e:	f000 818a 	beq.w	800acb6 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3fa>
    }

    TF_LITE_ENSURE_EQ(
 800a9a2:	6800      	ldr	r0, [r0, #0]
 800a9a4:	9006      	str	r0, [sp, #24]
 800a9a6:	f10d 0b74 	add.w	fp, sp, #116	@ 0x74
 800a9aa:	af29      	add	r7, sp, #164	@ 0xa4
 800a9ac:	ae25      	add	r6, sp, #148	@ 0x94
 800a9ae:	f10d 0a84 	add.w	sl, sp, #132	@ 0x84
 800a9b2:	9104      	str	r1, [sp, #16]
 800a9b4:	9202      	str	r2, [sp, #8]
 800a9b6:	a92d      	add	r1, sp, #180	@ 0xb4
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	9705      	str	r7, [sp, #20]
 800a9bc:	9603      	str	r6, [sp, #12]
 800a9be:	f8cd a004 	str.w	sl, [sp, #4]
 800a9c2:	465b      	mov	r3, fp
 800a9c4:	aa19      	add	r2, sp, #100	@ 0x64
 800a9c6:	a81b      	add	r0, sp, #108	@ 0x6c
 800a9c8:	9109      	str	r1, [sp, #36]	@ 0x24
 800a9ca:	f003 fed5 	bl	800e778 <arm_fully_connected_s8>
 800a9ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9d0:	2800      	cmp	r0, #0
 800a9d2:	f040 810b 	bne.w	800abec <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x330>
    if (size_ > kMaxSmallSize) {
 800a9d6:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 800a9d8:	2b05      	cmp	r3, #5
 800a9da:	dd03      	ble.n	800a9e4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x128>
      delete[] dims_pointer_;
 800a9dc:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 800a9de:	b108      	cbz	r0, 800a9e4 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x128>
 800a9e0:	f005 ff98 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a9e4:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800a9e6:	2b05      	cmp	r3, #5
 800a9e8:	dd03      	ble.n	800a9f2 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x136>
      delete[] dims_pointer_;
 800a9ea:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 800a9ec:	b108      	cbz	r0, 800a9f2 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x136>
 800a9ee:	f005 ff91 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800a9f2:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800a9f4:	2b05      	cmp	r3, #5
 800a9f6:	dd03      	ble.n	800aa00 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x144>
      delete[] dims_pointer_;
 800a9f8:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 800a9fa:	b108      	cbz	r0, 800aa00 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x144>
 800a9fc:	f005 ff8a 	bl	8010914 <_ZdaPv>
        tflite::micro::GetTensorShape(bias),
        tflite::micro::GetTensorData<int32_t>(bias),
        tflite::micro::GetTensorShape(output),
        tflite::micro::GetTensorData<int8_t>(output));
  }
  return kTfLiteOk;
 800aa00:	2000      	movs	r0, #0
}
 800aa02:	b05d      	add	sp, #372	@ 0x174
 800aa04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800aa08:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800aa0a:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 800aa0e:	e780      	b.n	800a912 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x56>
    op_params.output_shift = -data.output_shift;
 800aa10:	684b      	ldr	r3, [r1, #4]
    op_params.output_multiplier = data.output_multiplier;
 800aa12:	f8da 4000 	ldr.w	r4, [sl]
    op_params.output_shift = -data.output_shift;
 800aa16:	930f      	str	r3, [sp, #60]	@ 0x3c
        op_params, tflite::micro::GetTensorShape(input),
 800aa18:	4611      	mov	r1, r2
    op_params.output_offset = data.output_zero_point;
 800aa1a:	f8da 2020 	ldr.w	r2, [sl, #32]
 800aa1e:	920e      	str	r2, [sp, #56]	@ 0x38
    op_params.quantized_activation_min = data.output_activation_min;
 800aa20:	f8da 2008 	ldr.w	r2, [sl, #8]
 800aa24:	920b      	str	r2, [sp, #44]	@ 0x2c
        op_params, tflite::micro::GetTensorShape(input),
 800aa26:	a856      	add	r0, sp, #344	@ 0x158
    op_params.quantized_activation_max = data.output_activation_max;
 800aa28:	f8da 200c 	ldr.w	r2, [sl, #12]
 800aa2c:	920c      	str	r2, [sp, #48]	@ 0x30
    op_params.weights_offset = -data.filter_zero_point;
 800aa2e:	e9da 6706 	ldrd	r6, r7, [sl, #24]
    op_params.output_shift = -data.output_shift;
 800aa32:	f1c3 0a00 	rsb	sl, r3, #0
        op_params, tflite::micro::GetTensorShape(input),
 800aa36:	f7fb ff25 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800aa3a:	2d00      	cmp	r5, #0
 800aa3c:	f000 8164 	beq.w	800ad08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x44c>
        tflite::micro::GetTensorShape(filter),
 800aa40:	4641      	mov	r1, r8
 800aa42:	a850      	add	r0, sp, #320	@ 0x140
  return reinterpret_cast<const T*>(tensor->data.raw);
 800aa44:	682d      	ldr	r5, [r5, #0]
 800aa46:	f7fb ff1d 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800aa4a:	f1b8 0f00 	cmp.w	r8, #0
 800aa4e:	f000 815b 	beq.w	800ad08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x44c>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800aa52:	f8d8 3000 	ldr.w	r3, [r8]
 800aa56:	9317      	str	r3, [sp, #92]	@ 0x5c
        tflite::micro::GetTensorShape(bias),
 800aa58:	4649      	mov	r1, r9
 800aa5a:	a84a      	add	r0, sp, #296	@ 0x128
 800aa5c:	f7fb ff12 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800aa60:	f8d9 3000 	ldr.w	r3, [r9]
        tflite::micro::GetTensorShape(output),
 800aa64:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800aa66:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa68:	a844      	add	r0, sp, #272	@ 0x110
 800aa6a:	f7fb ff0b 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800aa6e:	9b67      	ldr	r3, [sp, #412]	@ 0x19c
 800aa70:	b10b      	cbz	r3, 800aa76 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1ba>
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	9367      	str	r3, [sp, #412]	@ 0x19c
  inline int32_t DimensionsCount() const { return size_; }
 800aa76:	9950      	ldr	r1, [sp, #320]	@ 0x140
  const int32_t output_offset = params.output_offset;
  const int32_t output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32_t output_activation_min = params.quantized_activation_min;
  const int32_t output_activation_max = params.quantized_activation_max;
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800aa78:	2901      	cmp	r1, #1
 800aa7a:	f340 8145 	ble.w	800ad08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x44c>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800aa7e:	9b44      	ldr	r3, [sp, #272]	@ 0x110
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	f040 8141 	bne.w	800ad08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x44c>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800aa86:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	@ 0x2c
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	f300 813c 	bgt.w	800ad08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x44c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800aa90:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800aa92:	9316      	str	r3, [sp, #88]	@ 0x58
 800aa94:	2905      	cmp	r1, #5
 800aa96:	9a46      	ldr	r2, [sp, #280]	@ 0x118
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = output_shape.Dims(0);
  const int output_depth = output_shape.Dims(1);
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800aa98:	f1a1 0302 	sub.w	r3, r1, #2
 800aa9c:	f300 80e0 	bgt.w	800ac60 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3a4>
 800aaa0:	a85c      	add	r0, sp, #368	@ 0x170
 800aaa2:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800aaa6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	f2c0 812c 	blt.w	800ad08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x44c>
 800aab0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aab4:	f851 8c30 	ldr.w	r8, [r1, #-48]
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
  for (int b = 0; b < batches; ++b) {
 800aab8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	dd7f      	ble.n	800abbe <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x302>
  int left_shift = shift > 0 ? shift : 0;
 800aabe:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800aac2:	9312      	str	r3, [sp, #72]	@ 0x48
  int right_shift = shift > 0 ? 0 : -shift;
 800aac4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aac6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aaca:	4618      	mov	r0, r3
 800aacc:	930d      	str	r3, [sp, #52]	@ 0x34
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800aace:	2301      	movs	r3, #1
 800aad0:	4083      	lsls	r3, r0
 800aad2:	3b01      	subs	r3, #1
 800aad4:	9310      	str	r3, [sp, #64]	@ 0x40
  return a >> offset;
 800aad6:	105b      	asrs	r3, r3, #1
 800aad8:	9311      	str	r3, [sp, #68]	@ 0x44
 800aada:	9b67      	ldr	r3, [sp, #412]	@ 0x19c
 800aadc:	2000      	movs	r0, #0
 800aade:	4629      	mov	r1, r5
 800aae0:	eb03 0a02 	add.w	sl, r3, r2
 800aae4:	eb05 0908 	add.w	r9, r5, r8
 800aae8:	4683      	mov	fp, r0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800aaea:	2a00      	cmp	r2, #0
 800aaec:	dd57      	ble.n	800ab9e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x2e2>
 800aaee:	9b67      	ldr	r3, [sp, #412]	@ 0x19c
 800aaf0:	f8dd e024 	ldr.w	lr, [sp, #36]	@ 0x24
 800aaf4:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 800aaf8:	910a      	str	r1, [sp, #40]	@ 0x28
 800aafa:	e9cd b213 	strd	fp, r2, [sp, #76]	@ 0x4c
 800aafe:	181d      	adds	r5, r3, r0
 800ab00:	9015      	str	r0, [sp, #84]	@ 0x54
      int32_t acc = 0;
      for (int d = 0; d < accum_depth; ++d) {
 800ab02:	f1b8 0f00 	cmp.w	r8, #0
 800ab06:	f340 80d0 	ble.w	800acaa <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3ee>
 800ab0a:	f10c 3bff 	add.w	fp, ip, #4294967295	@ 0xffffffff
 800ab0e:	980a      	ldr	r0, [sp, #40]	@ 0x28
      int32_t acc = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	4659      	mov	r1, fp
        int32_t input_val = input_data[b * accum_depth + d];
 800ab14:	f910 bb01 	ldrsb.w	fp, [r0], #1
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800ab18:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800ab1c:	ebab 0b06 	sub.w	fp, fp, r6
 800ab20:	1bd2      	subs	r2, r2, r7
      for (int d = 0; d < accum_depth; ++d) {
 800ab22:	4581      	cmp	r9, r0
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800ab24:	fb0b 3302 	mla	r3, fp, r2, r3
      for (int d = 0; d < accum_depth; ++d) {
 800ab28:	d1f4      	bne.n	800ab14 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x258>
      }
      if (bias_data) {
 800ab2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab2c:	b112      	cbz	r2, 800ab34 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x278>
        acc += bias_data[out_c];
 800ab2e:	f8de 2000 	ldr.w	r2, [lr]
 800ab32:	4413      	add	r3, r2
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800ab34:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ab36:	4093      	lsls	r3, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800ab38:	429c      	cmp	r4, r3
 800ab3a:	f000 80aa 	beq.w	800ac92 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3d6>
  std::int64_t ab_64 = a_64 * b_64;
 800ab3e:	fb83 3204 	smull	r3, r2, r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800ab42:	2a00      	cmp	r2, #0
 800ab44:	f2c0 8096 	blt.w	800ac74 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3b8>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800ab48:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 800ab4c:	f142 0200 	adc.w	r2, r2, #0
 800ab50:	0fdb      	lsrs	r3, r3, #31
 800ab52:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  assert(exponent <= 31);
 800ab56:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ab58:	2a1f      	cmp	r2, #31
 800ab5a:	f300 80ce 	bgt.w	800acfa <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x43e>
  return a & b;
 800ab5e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800ab60:	ea03 0002 	and.w	r0, r3, r2
  return a + b;
 800ab64:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ab66:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
  return a >> offset;
 800ab6a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800ab6c:	410b      	asrs	r3, r1
  return a + b;
 800ab6e:	4290      	cmp	r0, r2
 800ab70:	bfc8      	it	gt
 800ab72:	3301      	addgt	r3, #1
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
      acc += output_offset;
 800ab74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ab76:	4413      	add	r3, r2
      acc = std::max(acc, output_activation_min);
      acc = std::min(acc, output_activation_max);
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800ab78:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	bfb8      	it	lt
 800ab7e:	4613      	movlt	r3, r2
 800ab80:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ab82:	4293      	cmp	r3, r2
 800ab84:	bfa8      	it	ge
 800ab86:	4613      	movge	r3, r2
 800ab88:	f805 3b01 	strb.w	r3, [r5], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ab8c:	45aa      	cmp	sl, r5
 800ab8e:	f10e 0e04 	add.w	lr, lr, #4
 800ab92:	44c4      	add	ip, r8
 800ab94:	d1b5      	bne.n	800ab02 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x246>
 800ab96:	e9dd b213 	ldrd	fp, r2, [sp, #76]	@ 0x4c
 800ab9a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ab9c:	9815      	ldr	r0, [sp, #84]	@ 0x54
  for (int b = 0; b < batches; ++b) {
 800ab9e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aba0:	f10b 0b01 	add.w	fp, fp, #1
 800aba4:	459b      	cmp	fp, r3
 800aba6:	4410      	add	r0, r2
 800aba8:	4492      	add	sl, r2
 800abaa:	4441      	add	r1, r8
 800abac:	44c1      	add	r9, r8
 800abae:	d19c      	bne.n	800aaea <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x22e>
    if (size_ > kMaxSmallSize) {
 800abb0:	9b44      	ldr	r3, [sp, #272]	@ 0x110
 800abb2:	2b05      	cmp	r3, #5
 800abb4:	dd03      	ble.n	800abbe <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x302>
      delete[] dims_pointer_;
 800abb6:	9845      	ldr	r0, [sp, #276]	@ 0x114
 800abb8:	b108      	cbz	r0, 800abbe <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x302>
 800abba:	f005 feab 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800abbe:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 800abc0:	2b05      	cmp	r3, #5
 800abc2:	dd03      	ble.n	800abcc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x310>
      delete[] dims_pointer_;
 800abc4:	984b      	ldr	r0, [sp, #300]	@ 0x12c
 800abc6:	b108      	cbz	r0, 800abcc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x310>
 800abc8:	f005 fea4 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800abcc:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800abce:	2b05      	cmp	r3, #5
 800abd0:	dd03      	ble.n	800abda <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x31e>
      delete[] dims_pointer_;
 800abd2:	9851      	ldr	r0, [sp, #324]	@ 0x144
 800abd4:	b108      	cbz	r0, 800abda <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x31e>
 800abd6:	f005 fe9d 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800abda:	9b56      	ldr	r3, [sp, #344]	@ 0x158
 800abdc:	2b05      	cmp	r3, #5
 800abde:	f77f af0f 	ble.w	800aa00 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x144>
      delete[] dims_pointer_;
 800abe2:	9857      	ldr	r0, [sp, #348]	@ 0x15c
 800abe4:	2800      	cmp	r0, #0
 800abe6:	f47f af09 	bne.w	800a9fc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x140>
 800abea:	e709      	b.n	800aa00 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x144>
 800abec:	9b67      	ldr	r3, [sp, #412]	@ 0x19c
  return reinterpret_cast<const T*>(tensor->data.raw);
 800abee:	6828      	ldr	r0, [r5, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800abf0:	681b      	ldr	r3, [r3, #0]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800abf2:	f8d8 2000 	ldr.w	r2, [r8]
 800abf6:	f8d9 c000 	ldr.w	ip, [r9]
    TF_LITE_ENSURE_EQ(
 800abfa:	6965      	ldr	r5, [r4, #20]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800abfc:	9367      	str	r3, [sp, #412]	@ 0x19c
 800abfe:	e9cd 7305 	strd	r7, r3, [sp, #20]
 800ac02:	e9cd 6c03 	strd	r6, ip, [sp, #12]
 800ac06:	e9cd a201 	strd	sl, r2, [sp, #4]
 800ac0a:	9000      	str	r0, [sp, #0]
 800ac0c:	465b      	mov	r3, fp
 800ac0e:	aa19      	add	r2, sp, #100	@ 0x64
 800ac10:	a81b      	add	r0, sp, #108	@ 0x6c
 800ac12:	f003 fdb1 	bl	800e778 <arm_fully_connected_s8>
 800ac16:	493d      	ldr	r1, [pc, #244]	@ (800ad0c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x450>)
 800ac18:	4b3d      	ldr	r3, [pc, #244]	@ (800ad10 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x454>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	e9cd 0202 	strd	r0, r2, [sp, #8]
 800ac20:	e9cd 3100 	strd	r3, r1, [sp]
 800ac24:	4a3b      	ldr	r2, [pc, #236]	@ (800ad14 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x458>)
 800ac26:	493c      	ldr	r1, [pc, #240]	@ (800ad18 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x45c>)
 800ac28:	23c7      	movs	r3, #199	@ 0xc7
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	47a8      	blx	r5
    if (size_ > kMaxSmallSize) {
 800ac2e:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 800ac30:	2b05      	cmp	r3, #5
 800ac32:	dd03      	ble.n	800ac3c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x380>
      delete[] dims_pointer_;
 800ac34:	983f      	ldr	r0, [sp, #252]	@ 0xfc
 800ac36:	b108      	cbz	r0, 800ac3c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x380>
 800ac38:	f005 fe6c 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800ac3c:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800ac3e:	2b05      	cmp	r3, #5
 800ac40:	dd03      	ble.n	800ac4a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x38e>
      delete[] dims_pointer_;
 800ac42:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 800ac44:	b108      	cbz	r0, 800ac4a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x38e>
 800ac46:	f005 fe65 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800ac4a:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800ac4c:	2b05      	cmp	r3, #5
 800ac4e:	dd03      	ble.n	800ac58 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x39c>
      delete[] dims_pointer_;
 800ac50:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 800ac52:	b108      	cbz	r0, 800ac58 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x39c>
 800ac54:	f005 fe5e 	bl	8010914 <_ZdaPv>
 800ac58:	2001      	movs	r0, #1
}
 800ac5a:	b05d      	add	sp, #372	@ 0x174
 800ac5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ac60:	9951      	ldr	r1, [sp, #324]	@ 0x144
 800ac62:	0098      	lsls	r0, r3, #2
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800ac64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	db4d      	blt.n	800ad08 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x44c>
 800ac6c:	4401      	add	r1, r0
 800ac6e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800ac72:	e721      	b.n	800aab8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x1fc>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800ac74:	4929      	ldr	r1, [pc, #164]	@ (800ad1c <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x460>)
 800ac76:	185b      	adds	r3, r3, r1
 800ac78:	f162 0200 	sbc.w	r2, r2, #0
 800ac7c:	2a00      	cmp	r2, #0
 800ac7e:	da04      	bge.n	800ac8a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3ce>
 800ac80:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ac84:	185b      	adds	r3, r3, r1
 800ac86:	f142 0200 	adc.w	r2, r2, #0
 800ac8a:	0fdb      	lsrs	r3, r3, #31
 800ac8c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800ac90:	e761      	b.n	800ab56 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x29a>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800ac92:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 800ac96:	f47f af52 	bne.w	800ab3e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x282>
  assert(exponent <= 31);
 800ac9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac9c:	2b1f      	cmp	r3, #31
 800ac9e:	dc2c      	bgt.n	800acfa <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x43e>
  return a & b;
 800aca0:	e9dd 0210 	ldrd	r0, r2, [sp, #64]	@ 0x40
  assert(exponent <= 31);
 800aca4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800aca8:	e75f      	b.n	800ab6a <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x2ae>
      if (bias_data) {
 800acaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acac:	b10b      	cbz	r3, 800acb2 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x3f6>
      int32_t acc = 0;
 800acae:	2300      	movs	r3, #0
 800acb0:	e73d      	b.n	800ab2e <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x272>
  std::int64_t ab_64 = a_64 * b_64;
 800acb2:	461a      	mov	r2, r3
 800acb4:	e748      	b.n	800ab48 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x28c>
    TF_LITE_ENSURE_EQ(
 800acb6:	9300      	str	r3, [sp, #0]
 800acb8:	f10d 0b74 	add.w	fp, sp, #116	@ 0x74
 800acbc:	9b67      	ldr	r3, [sp, #412]	@ 0x19c
 800acbe:	9104      	str	r1, [sp, #16]
 800acc0:	af29      	add	r7, sp, #164	@ 0xa4
 800acc2:	ae25      	add	r6, sp, #148	@ 0x94
 800acc4:	f10d 0a84 	add.w	sl, sp, #132	@ 0x84
 800acc8:	a92d      	add	r1, sp, #180	@ 0xb4
 800acca:	9202      	str	r2, [sp, #8]
 800accc:	9306      	str	r3, [sp, #24]
 800acce:	9705      	str	r7, [sp, #20]
 800acd0:	9603      	str	r6, [sp, #12]
 800acd2:	f8cd a004 	str.w	sl, [sp, #4]
 800acd6:	465b      	mov	r3, fp
 800acd8:	aa19      	add	r2, sp, #100	@ 0x64
 800acda:	a81b      	add	r0, sp, #108	@ 0x6c
 800acdc:	9109      	str	r1, [sp, #36]	@ 0x24
 800acde:	f003 fd4b 	bl	800e778 <arm_fully_connected_s8>
 800ace2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ace4:	2800      	cmp	r0, #0
 800ace6:	f43f ae76 	beq.w	800a9d6 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x11a>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800acea:	6828      	ldr	r0, [r5, #0]
 800acec:	f8d8 2000 	ldr.w	r2, [r8]
 800acf0:	f8d9 c000 	ldr.w	ip, [r9]
 800acf4:	6965      	ldr	r5, [r4, #20]
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800acf6:	9b67      	ldr	r3, [sp, #412]	@ 0x19c
 800acf8:	e781      	b.n	800abfe <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x342>
  assert(exponent <= 31);
 800acfa:	4b09      	ldr	r3, [pc, #36]	@ (800ad20 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x464>)
 800acfc:	4a09      	ldr	r2, [pc, #36]	@ (800ad24 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x468>)
 800acfe:	480a      	ldr	r0, [pc, #40]	@ (800ad28 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0+0x46c>)
 800ad00:	f240 1167 	movw	r1, #359	@ 0x167
 800ad04:	f006 f8e2 	bl	8010ecc <__assert_func>
  TFLITE_DCHECK(tensor != nullptr);
 800ad08:	f006 f8d8 	bl	8010ebc <abort>
 800ad0c:	08016fcc 	.word	0x08016fcc
 800ad10:	08016fe0 	.word	0x08016fe0
 800ad14:	08016f88 	.word	0x08016f88
 800ad18:	08015314 	.word	0x08015314
 800ad1c:	c0000001 	.word	0xc0000001
 800ad20:	080165c4 	.word	0x080165c4
 800ad24:	080165d4 	.word	0x080165d4
 800ad28:	08016630 	.word	0x08016630

0800ad2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:
      tflite::micro::GetTensorShape(output),
      tflite::micro::GetTensorData<float>(output));
  return kTfLiteOk;
}

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800ad2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad30:	ed2d 8b02 	vpush	{d8}
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800ad34:	694d      	ldr	r5, [r1, #20]
TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800ad36:	b0dd      	sub	sp, #372	@ 0x174
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800ad38:	2d00      	cmp	r5, #0
 800ad3a:	f000 8423 	beq.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
  TFLITE_DCHECK(context != nullptr);
 800ad3e:	4606      	mov	r6, r0
 800ad40:	2800      	cmp	r0, #0
 800ad42:	f000 841f 	beq.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800ad46:	680b      	ldr	r3, [r1, #0]
 800ad48:	460c      	mov	r4, r1
 800ad4a:	6859      	ldr	r1, [r3, #4]
 800ad4c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800ad4e:	4798      	blx	r3
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	4681      	mov	r9, r0
 800ad54:	6899      	ldr	r1, [r3, #8]
 800ad56:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ad58:	4630      	mov	r0, r6
 800ad5a:	4798      	blx	r3
 800ad5c:	6823      	ldr	r3, [r4, #0]
 800ad5e:	4607      	mov	r7, r0
 800ad60:	68d9      	ldr	r1, [r3, #12]
 800ad62:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ad64:	4630      	mov	r0, r6
 800ad66:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800ad68:	6863      	ldr	r3, [r4, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800ad6a:	4680      	mov	r8, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800ad6c:	6859      	ldr	r1, [r3, #4]
 800ad6e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800ad70:	4630      	mov	r0, r6
 800ad72:	4798      	blx	r3
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kBiasTensor);
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  TFLITE_DCHECK(node->user_data != nullptr);
 800ad74:	6921      	ldr	r1, [r4, #16]
 800ad76:	9005      	str	r0, [sp, #20]
 800ad78:	2900      	cmp	r1, #0
 800ad7a:	f000 8403 	beq.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800ad7e:	f899 0008 	ldrb.w	r0, [r9, #8]
 800ad82:	2803      	cmp	r0, #3
 800ad84:	d014      	beq.n	800adb0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84>
 800ad86:	2809      	cmp	r0, #9
 800ad88:	f000 8215 	beq.w	800b1b6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x48a>
 800ad8c:	2801      	cmp	r0, #1
 800ad8e:	f000 812d 	beq.w	800afec <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2c0>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800ad92:	6974      	ldr	r4, [r6, #20]
 800ad94:	f7f8 fcb8 	bl	8003708 <TfLiteTypeGetName>
 800ad98:	f899 3008 	ldrb.w	r3, [r9, #8]
 800ad9c:	498f      	ldr	r1, [pc, #572]	@ (800afdc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b0>)
 800ad9e:	4602      	mov	r2, r0
 800ada0:	4630      	mov	r0, r6
 800ada2:	47a0      	blx	r4
      return kTfLiteError;
 800ada4:	2001      	movs	r0, #1
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
  }
  return kTfLiteOk;
}
 800ada6:	b05d      	add	sp, #372	@ 0x174
 800ada8:	ecbd 8b02 	vpop	{d8}
 800adac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (output->type) {
 800adb0:	9a05      	ldr	r2, [sp, #20]
  op_params.output_shift = -data.output_shift;
 800adb2:	684b      	ldr	r3, [r1, #4]
  switch (output->type) {
 800adb4:	7a10      	ldrb	r0, [r2, #8]
  const int32_t output_offset = data.output_zero_point;
 800adb6:	6a0a      	ldr	r2, [r1, #32]
 800adb8:	9208      	str	r2, [sp, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 800adba:	688a      	ldr	r2, [r1, #8]
  op_params.output_shift = -data.output_shift;
 800adbc:	9302      	str	r3, [sp, #8]
  op_params.quantized_activation_min = data.output_activation_min;
 800adbe:	9203      	str	r2, [sp, #12]
  op_params.output_shift = -data.output_shift;
 800adc0:	425b      	negs	r3, r3
  op_params.quantized_activation_max = data.output_activation_max;
 800adc2:	68ca      	ldr	r2, [r1, #12]
  op_params.output_multiplier = data.output_multiplier;
 800adc4:	f8d1 b000 	ldr.w	fp, [r1]
  op_params.quantized_activation_max = data.output_activation_max;
 800adc8:	9204      	str	r2, [sp, #16]
  switch (output->type) {
 800adca:	2803      	cmp	r0, #3
  const int32_t filter_offset = -data.filter_zero_point;
 800adcc:	e9d1 5406 	ldrd	r5, r4, [r1, #24]
  op_params.output_shift = -data.output_shift;
 800add0:	9306      	str	r3, [sp, #24]
  switch (output->type) {
 800add2:	f000 8207 	beq.w	800b1e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4b8>
 800add6:	2807      	cmp	r0, #7
 800add8:	f040 81fa 	bne.w	800b1d0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x4a4>
      TF_LITE_FULLY_CONNECTED(int16_t);
 800addc:	4649      	mov	r1, r9
 800adde:	a844      	add	r0, sp, #272	@ 0x110
 800ade0:	f7fb fd50 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800ade4:	4639      	mov	r1, r7
 800ade6:	a84a      	add	r0, sp, #296	@ 0x128
  return reinterpret_cast<const T*>(tensor->data.raw);
 800ade8:	f8d9 9000 	ldr.w	r9, [r9]
 800adec:	f7fb fd4a 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800adf0:	2f00      	cmp	r7, #0
 800adf2:	f000 83c7 	beq.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800adf6:	683b      	ldr	r3, [r7, #0]
 800adf8:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adfa:	4641      	mov	r1, r8
 800adfc:	a850      	add	r0, sp, #320	@ 0x140
 800adfe:	f7fb fd41 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800ae02:	f1b8 0f00 	cmp.w	r8, #0
 800ae06:	f000 83bd 	beq.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
 800ae0a:	9e05      	ldr	r6, [sp, #20]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800ae0c:	f8d8 3000 	ldr.w	r3, [r8]
 800ae10:	9310      	str	r3, [sp, #64]	@ 0x40
 800ae12:	4631      	mov	r1, r6
 800ae14:	a856      	add	r0, sp, #344	@ 0x158
 800ae16:	f7fb fd35 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800ae1a:	6833      	ldr	r3, [r6, #0]
 800ae1c:	9311      	str	r3, [sp, #68]	@ 0x44
  const int32_t output_multiplier = params.output_multiplier;
  const int output_shift = params.output_shift;
  const int32_t output_activation_min = params.quantized_activation_min;
  const int32_t output_activation_max = params.quantized_activation_max;

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800ae1e:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800ae22:	4293      	cmp	r3, r2
 800ae24:	f300 83ae 	bgt.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
  TFLITE_DCHECK_EQ(output_offset, 0);
 800ae28:	9b08      	ldr	r3, [sp, #32]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f040 83aa 	bne.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
  inline int32_t DimensionsCount() const { return size_; }
 800ae30:	9e56      	ldr	r6, [sp, #344]	@ 0x158
 800ae32:	9f4a      	ldr	r7, [sp, #296]	@ 0x128
// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
  const int dims_count = shape.DimensionsCount();
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800ae34:	1e72      	subs	r2, r6, #1
 800ae36:	f100 83a5 	bmi.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800ae3a:	2e05      	cmp	r6, #5
 800ae3c:	bfcc      	ite	gt
 800ae3e:	9b57      	ldrgt	r3, [sp, #348]	@ 0x15c
 800ae40:	ab57      	addle	r3, sp, #348	@ 0x15c
  const auto* dims_data = shape.DimsData();
  int flat_size = 1;
  for (int i = 0; i < dims_count; ++i) {
 800ae42:	2000      	movs	r0, #0
  int flat_size = 1;
 800ae44:	2101      	movs	r1, #1
 800ae46:	46a4      	mov	ip, r4
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800ae48:	4282      	cmp	r2, r0
 800ae4a:	f000 82d9 	beq.w	800b400 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6d4>
 800ae4e:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 800ae52:	3001      	adds	r0, #1
 800ae54:	42b0      	cmp	r0, r6
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800ae56:	fb04 f101 	mul.w	r1, r4, r1
  for (int i = 0; i < dims_count; ++i) {
 800ae5a:	d1f5      	bne.n	800ae48 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11c>
    TFLITE_DCHECK_GE(i, 0);
 800ae5c:	1eb8      	subs	r0, r7, #2
 800ae5e:	4664      	mov	r4, ip
 800ae60:	f100 8390 	bmi.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ae64:	2f05      	cmp	r7, #5
 800ae66:	f300 8300 	bgt.w	800b46a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x73e>
 800ae6a:	ab5c      	add	r3, sp, #368	@ 0x170
 800ae6c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ae70:	f850 3c44 	ldr.w	r3, [r0, #-68]
 800ae74:	469e      	mov	lr, r3
 800ae76:	2e05      	cmp	r6, #5
 800ae78:	f340 834d 	ble.w	800b516 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7ea>
 800ae7c:	9857      	ldr	r0, [sp, #348]	@ 0x15c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800ae7e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800ae82:	4573      	cmp	r3, lr
 800ae84:	f040 837e 	bne.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ae88:	2f05      	cmp	r7, #5
  const int output_dim_count = output_shape.DimensionsCount();
  const int filter_dim_count = filter_shape.DimensionsCount();
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800ae8a:	f107 32ff 	add.w	r2, r7, #4294967295	@ 0xffffffff
 800ae8e:	f300 833b 	bgt.w	800b508 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7dc>
 800ae92:	ab5c      	add	r3, sp, #368	@ 0x170
 800ae94:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  for (int b = 0; b < batches; ++b) {
 800ae98:	2900      	cmp	r1, #0
 800ae9a:	f852 8c44 	ldr.w	r8, [r2, #-68]
 800ae9e:	f340 8082 	ble.w	800afa6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x27a>
  const int32_t input_offset = -data.input_zero_point;
 800aea2:	426b      	negs	r3, r5
 800aea4:	930e      	str	r3, [sp, #56]	@ 0x38
  int left_shift = shift > 0 ? shift : 0;
 800aea6:	9b06      	ldr	r3, [sp, #24]
 800aea8:	910d      	str	r1, [sp, #52]	@ 0x34
 800aeaa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aeae:	930a      	str	r3, [sp, #40]	@ 0x28
  int right_shift = shift > 0 ? 0 : -shift;
 800aeb0:	9b02      	ldr	r3, [sp, #8]
 800aeb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	9306      	str	r3, [sp, #24]
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800aeba:	2301      	movs	r3, #1
 800aebc:	4083      	lsls	r3, r0
  const int32_t filter_offset = -data.filter_zero_point;
 800aebe:	4264      	negs	r4, r4
 800aec0:	3b01      	subs	r3, #1
 800aec2:	e9cd 4612 	strd	r4, r6, [sp, #72]	@ 0x48
 800aec6:	9307      	str	r3, [sp, #28]
 800aec8:	9c08      	ldr	r4, [sp, #32]
  return a >> offset;
 800aeca:	105b      	asrs	r3, r3, #1
 800aecc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aece:	464a      	mov	r2, r9
 800aed0:	eb09 0508 	add.w	r5, r9, r8
 800aed4:	f04f 0c00 	mov.w	ip, #0
 800aed8:	4673      	mov	r3, lr
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	eb03 000c 	add.w	r0, r3, ip
 800aee0:	dd56      	ble.n	800af90 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x264>
 800aee2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800aee4:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800aee6:	f8dd 903c 	ldr.w	r9, [sp, #60]	@ 0x3c
      int32_t accum = bias_data[out_c];
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
        int16_t input_val = input_data[b * accum_depth + d] + input_offset;
        int16_t filter_val =
            filter_data[out_c * accum_depth + d] + filter_offset;
 800aeea:	f8bd 7048 	ldrh.w	r7, [sp, #72]	@ 0x48
 800aeee:	9408      	str	r4, [sp, #32]
 800aef0:	e9cd 300b 	strd	r3, r0, [sp, #44]	@ 0x2c
 800aef4:	eb01 0e4c 	add.w	lr, r1, ip, lsl #1
        int16_t input_val = input_data[b * accum_depth + d] + input_offset;
 800aef8:	f8bd c038 	ldrh.w	ip, [sp, #56]	@ 0x38
 800aefc:	f1a6 0a04 	sub.w	sl, r6, #4
 800af00:	eb01 0140 	add.w	r1, r1, r0, lsl #1
      for (int d = 0; d < accum_depth; ++d) {
 800af04:	f1b8 0f00 	cmp.w	r8, #0
      int32_t accum = bias_data[out_c];
 800af08:	f85a 3f04 	ldr.w	r3, [sl, #4]!
      for (int d = 0; d < accum_depth; ++d) {
 800af0c:	dd10      	ble.n	800af30 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x204>
 800af0e:	f109 36ff 	add.w	r6, r9, #4294967295	@ 0xffffffff
            filter_data[out_c * accum_depth + d] + filter_offset;
 800af12:	4614      	mov	r4, r2
 800af14:	f8cd b014 	str.w	fp, [sp, #20]
        int16_t input_val = input_data[b * accum_depth + d] + input_offset;
 800af18:	f814 0b01 	ldrb.w	r0, [r4], #1
            filter_data[out_c * accum_depth + d] + filter_offset;
 800af1c:	f816 bf01 	ldrb.w	fp, [r6, #1]!
        int16_t input_val = input_data[b * accum_depth + d] + input_offset;
 800af20:	4460      	add	r0, ip
            filter_data[out_c * accum_depth + d] + filter_offset;
 800af22:	44bb      	add	fp, r7
      for (int d = 0; d < accum_depth; ++d) {
 800af24:	42a5      	cmp	r5, r4
        accum += filter_val * input_val;
 800af26:	fb1b 3300 	smlabb	r3, fp, r0, r3
      for (int d = 0; d < accum_depth; ++d) {
 800af2a:	d1f5      	bne.n	800af18 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ec>
 800af2c:	f8dd b014 	ldr.w	fp, [sp, #20]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800af30:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af32:	4083      	lsls	r3, r0
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800af34:	459b      	cmp	fp, r3
 800af36:	f000 82c9 	beq.w	800b4cc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7a0>
  std::int64_t ab_64 = a_64 * b_64;
 800af3a:	fb8b 3003 	smull	r3, r0, fp, r3
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800af3e:	2800      	cmp	r0, #0
 800af40:	f2c0 82ad 	blt.w	800b49e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x772>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800af44:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 800af48:	f140 0000 	adc.w	r0, r0, #0
 800af4c:	0fdb      	lsrs	r3, r3, #31
 800af4e:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  assert(exponent <= 31);
 800af52:	9802      	ldr	r0, [sp, #8]
 800af54:	281f      	cmp	r0, #31
 800af56:	f300 830e 	bgt.w	800b576 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84a>
  return a & b;
 800af5a:	9807      	ldr	r0, [sp, #28]
 800af5c:	ea00 0403 	and.w	r4, r0, r3
  return a + b;
 800af60:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af62:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  return a >> offset;
 800af66:	9e06      	ldr	r6, [sp, #24]
 800af68:	4133      	asrs	r3, r6
  return a + b;
 800af6a:	4284      	cmp	r4, r0
 800af6c:	bfc8      	it	gt
 800af6e:	3301      	addgt	r3, #1
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
      // Saturate, cast to int16_t, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
      accum = std::min(accum, output_activation_max - output_offset);
      accum += output_offset;
      output_data[out_c + output_depth * b] = accum;
 800af70:	9803      	ldr	r0, [sp, #12]
 800af72:	4283      	cmp	r3, r0
 800af74:	bfb8      	it	lt
 800af76:	4603      	movlt	r3, r0
 800af78:	9804      	ldr	r0, [sp, #16]
 800af7a:	4283      	cmp	r3, r0
 800af7c:	bfa8      	it	ge
 800af7e:	4603      	movge	r3, r0
 800af80:	f82e 3b02 	strh.w	r3, [lr], #2
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800af84:	4571      	cmp	r1, lr
 800af86:	44c1      	add	r9, r8
 800af88:	d1bc      	bne.n	800af04 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1d8>
 800af8a:	e9dd 300b 	ldrd	r3, r0, [sp, #44]	@ 0x2c
 800af8e:	9c08      	ldr	r4, [sp, #32]
  for (int b = 0; b < batches; ++b) {
 800af90:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800af92:	3401      	adds	r4, #1
 800af94:	42a1      	cmp	r1, r4
 800af96:	4684      	mov	ip, r0
 800af98:	4442      	add	r2, r8
 800af9a:	4445      	add	r5, r8
 800af9c:	d19d      	bne.n	800aeda <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x1ae>
 800af9e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
    if (size_ > kMaxSmallSize) {
 800afa0:	2e05      	cmp	r6, #5
 800afa2:	dd03      	ble.n	800afac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x280>
 800afa4:	9857      	ldr	r0, [sp, #348]	@ 0x15c
      delete[] dims_pointer_;
 800afa6:	b108      	cbz	r0, 800afac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x280>
 800afa8:	f005 fcb4 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800afac:	9b50      	ldr	r3, [sp, #320]	@ 0x140
 800afae:	2b05      	cmp	r3, #5
 800afb0:	dd03      	ble.n	800afba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x28e>
      delete[] dims_pointer_;
 800afb2:	9851      	ldr	r0, [sp, #324]	@ 0x144
 800afb4:	b108      	cbz	r0, 800afba <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x28e>
 800afb6:	f005 fcad 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800afba:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 800afbc:	2b05      	cmp	r3, #5
 800afbe:	dd03      	ble.n	800afc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29c>
      delete[] dims_pointer_;
 800afc0:	984b      	ldr	r0, [sp, #300]	@ 0x12c
 800afc2:	b108      	cbz	r0, 800afc8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x29c>
 800afc4:	f005 fca6 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800afc8:	9b44      	ldr	r3, [sp, #272]	@ 0x110
 800afca:	2b05      	cmp	r3, #5
 800afcc:	f340 80ed 	ble.w	800b1aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x47e>
      delete[] dims_pointer_;
 800afd0:	9845      	ldr	r0, [sp, #276]	@ 0x114
 800afd2:	2800      	cmp	r0, #0
 800afd4:	f040 80e7 	bne.w	800b1a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x47a>
 800afd8:	e0e7      	b.n	800b1aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x47e>
 800afda:	bf00      	nop
 800afdc:	08016f6c 	.word	0x08016f6c
 800afe0:	7f7fffff 	.word	0x7f7fffff
 800afe4:	ff7fffff 	.word	0xff7fffff
 800afe8:	00000000 	.word	0x00000000
      return EvalFloat(context, node, params->activation, input, filter, bias,
 800afec:	782b      	ldrb	r3, [r5, #0]
  if (activation == kTfLiteActRelu) {
 800afee:	2b01      	cmp	r3, #1
 800aff0:	f000 81f9 	beq.w	800b3e6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6ba>
  } else if (activation == kTfLiteActRelu6) {
 800aff4:	2b03      	cmp	r3, #3
 800aff6:	f000 8233 	beq.w	800b460 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x734>
    *activation_max = 1;
 800affa:	ed5f 8a07 	vldr	s17, [pc, #-28]	@ 800afe0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b4>
 800affe:	ed1f 8a07 	vldr	s16, [pc, #-28]	@ 800afe4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2b8>
 800b002:	2b02      	cmp	r3, #2
 800b004:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b008:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800b00c:	bf08      	it	eq
 800b00e:	eef0 8a47 	vmoveq.f32	s17, s14
 800b012:	bf08      	it	eq
 800b014:	eeb0 8a67 	vmoveq.f32	s16, s15
      op_params, tflite::micro::GetTensorShape(input),
 800b018:	4649      	mov	r1, r9
 800b01a:	a814      	add	r0, sp, #80	@ 0x50
 800b01c:	f7fb fc32 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b020:	f8d9 3000 	ldr.w	r3, [r9]
 800b024:	9304      	str	r3, [sp, #16]
      tflite::micro::GetTensorShape(filter),
 800b026:	4639      	mov	r1, r7
 800b028:	a81a      	add	r0, sp, #104	@ 0x68
 800b02a:	f7fb fc2b 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b02e:	2f00      	cmp	r7, #0
 800b030:	f000 82a8 	beq.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
      tflite::micro::GetTensorShape(bias),
 800b034:	4641      	mov	r1, r8
 800b036:	a820      	add	r0, sp, #128	@ 0x80
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b038:	683f      	ldr	r7, [r7, #0]
 800b03a:	f7fb fc23 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b03e:	f1b8 0f00 	cmp.w	r8, #0
 800b042:	f000 829f 	beq.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
      tflite::micro::GetTensorShape(output),
 800b046:	9c05      	ldr	r4, [sp, #20]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b048:	f8d8 5000 	ldr.w	r5, [r8]
 800b04c:	4621      	mov	r1, r4
 800b04e:	a826      	add	r0, sp, #152	@ 0x98
 800b050:	f7fb fc18 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b054:	b10c      	cbz	r4, 800b05a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x32e>
 800b056:	6823      	ldr	r3, [r4, #0]
 800b058:	9305      	str	r3, [sp, #20]
  inline int32_t DimensionsCount() const { return size_; }
 800b05a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800b05c:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800b05e:	1e5c      	subs	r4, r3, #1
 800b060:	f100 8290 	bmi.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b064:	2b05      	cmp	r3, #5
 800b066:	bfcc      	ite	gt
 800b068:	9827      	ldrgt	r0, [sp, #156]	@ 0x9c
 800b06a:	a827      	addle	r0, sp, #156	@ 0x9c
  int flat_size = 1;
 800b06c:	f04f 0b01 	mov.w	fp, #1
  for (int i = 0; i < dims_count; ++i) {
 800b070:	2200      	movs	r2, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800b072:	4294      	cmp	r4, r2
 800b074:	f000 81bf 	beq.w	800b3f6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6ca>
 800b078:	f850 1022 	ldr.w	r1, [r0, r2, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 800b07c:	3201      	adds	r2, #1
 800b07e:	4293      	cmp	r3, r2
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800b080:	fb01 fb0b 	mul.w	fp, r1, fp
  for (int i = 0; i < dims_count; ++i) {
 800b084:	d1f5      	bne.n	800b072 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x346>
    TFLITE_DCHECK_GE(i, 0);
 800b086:	1eb1      	subs	r1, r6, #2
 800b088:	f100 827c 	bmi.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b08c:	2e05      	cmp	r6, #5
 800b08e:	f340 81c1 	ble.w	800b414 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6e8>
 800b092:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b094:	2b05      	cmp	r3, #5
 800b096:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b09a:	9203      	str	r2, [sp, #12]
 800b09c:	f340 81c2 	ble.w	800b424 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6f8>
 800b0a0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800b0a2:	9803      	ldr	r0, [sp, #12]
 800b0a4:	f852 1024 	ldr.w	r1, [r2, r4, lsl #2]
 800b0a8:	4281      	cmp	r1, r0
 800b0aa:	f040 826b 	bne.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b0ae:	2e05      	cmp	r6, #5
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800b0b0:	f106 31ff 	add.w	r1, r6, #4294967295	@ 0xffffffff
 800b0b4:	f300 81cc 	bgt.w	800b450 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x724>
 800b0b8:	a81a      	add	r0, sp, #104	@ 0x68
 800b0ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
  for (int b = 0; b < batches; ++b) {
 800b0be:	f1bb 0f00 	cmp.w	fp, #0
 800b0c2:	6848      	ldr	r0, [r1, #4]
 800b0c4:	dd58      	ble.n	800b178 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x44c>
 800b0c6:	9a03      	ldr	r2, [sp, #12]
 800b0c8:	2a00      	cmp	r2, #0
 800b0ca:	dd52      	ble.n	800b172 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x446>
 800b0cc:	0091      	lsls	r1, r2, #2
 800b0ce:	9106      	str	r1, [sp, #24]
 800b0d0:	e9cd b307 	strd	fp, r3, [sp, #28]
 800b0d4:	9905      	ldr	r1, [sp, #20]
      float bias_value = 0.0f;
 800b0d6:	ed1f 6a3c 	vldr	s12, [pc, #-240]	@ 800afe8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
 800b0da:	f04f 0e00 	mov.w	lr, #0
 800b0de:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800b0e2:	46f2      	mov	sl, lr
  for (int b = 0; b < batches; ++b) {
 800b0e4:	46f1      	mov	r9, lr
 800b0e6:	46f4      	mov	ip, lr
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b0e8:	9a04      	ldr	r2, [sp, #16]
 800b0ea:	9b05      	ldr	r3, [sp, #20]
 800b0ec:	f8cd 9008 	str.w	r9, [sp, #8]
 800b0f0:	4486      	add	lr, r0
 800b0f2:	eb02 080c 	add.w	r8, r2, ip
 800b0f6:	eb02 0b8e 	add.w	fp, r2, lr, lsl #2
 800b0fa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b0fe:	4629      	mov	r1, r5
 800b100:	ea4f 0c8e 	mov.w	ip, lr, lsl #2
 800b104:	2200      	movs	r2, #0
      for (int d = 0; d < accum_depth; ++d) {
 800b106:	2800      	cmp	r0, #0
      float total = 0.f;
 800b108:	ed1f 7a49 	vldr	s14, [pc, #-292]	@ 800afe8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2bc>
      for (int d = 0; d < accum_depth; ++d) {
 800b10c:	dd0a      	ble.n	800b124 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3f8>
 800b10e:	eb07 0982 	add.w	r9, r7, r2, lsl #2
 800b112:	4646      	mov	r6, r8
        total += input_data[b * accum_depth + d] *
 800b114:	ecf6 6a01 	vldmia	r6!, {s13}
                 weights_data[out_c * accum_depth + d];
 800b118:	ecf9 7a01 	vldmia	r9!, {s15}
      for (int d = 0; d < accum_depth; ++d) {
 800b11c:	455e      	cmp	r6, fp
        total += input_data[b * accum_depth + d] *
 800b11e:	eea6 7aa7 	vfma.f32	s14, s13, s15
      for (int d = 0; d < accum_depth; ++d) {
 800b122:	d1f7      	bne.n	800b114 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3e8>
      if (bias_data) {
 800b124:	2d00      	cmp	r5, #0
 800b126:	f000 8163 	beq.w	800b3f0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6c4>
        bias_value = bias_data[out_c];
 800b12a:	edd1 7a00 	vldr	s15, [r1]
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800b12e:	ee77 7a87 	vadd.f32	s15, s15, s14
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b132:	3104      	adds	r1, #4
	return __b;
 800b134:	eef4 7a48 	vcmp.f32	s15, s16
 800b138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b13c:	bf48      	it	mi
 800b13e:	eef0 7a48 	vmovmi.f32	s15, s16
	return __b;
 800b142:	eef4 7a68 	vcmp.f32	s15, s17
 800b146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b14a:	bfc8      	it	gt
 800b14c:	eef0 7a68 	vmovgt.f32	s15, s17
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800b150:	ece3 7a01 	vstmia	r3!, {s15}
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b154:	42a3      	cmp	r3, r4
 800b156:	4402      	add	r2, r0
 800b158:	d1d5      	bne.n	800b106 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3da>
  for (int b = 0; b < batches; ++b) {
 800b15a:	9b06      	ldr	r3, [sp, #24]
 800b15c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b160:	441c      	add	r4, r3
 800b162:	9b03      	ldr	r3, [sp, #12]
 800b164:	449a      	add	sl, r3
 800b166:	9b07      	ldr	r3, [sp, #28]
 800b168:	f109 0901 	add.w	r9, r9, #1
 800b16c:	4599      	cmp	r9, r3
 800b16e:	d1bb      	bne.n	800b0e8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x3bc>
 800b170:	9b08      	ldr	r3, [sp, #32]
    if (size_ > kMaxSmallSize) {
 800b172:	2b05      	cmp	r3, #5
 800b174:	dd04      	ble.n	800b180 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x454>
 800b176:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
      delete[] dims_pointer_;
 800b178:	b112      	cbz	r2, 800b180 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x454>
 800b17a:	4610      	mov	r0, r2
 800b17c:	f005 fbca 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b180:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b182:	2b05      	cmp	r3, #5
 800b184:	dd03      	ble.n	800b18e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x462>
      delete[] dims_pointer_;
 800b186:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800b188:	b108      	cbz	r0, 800b18e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x462>
 800b18a:	f005 fbc3 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b18e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800b190:	2b05      	cmp	r3, #5
 800b192:	dd03      	ble.n	800b19c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x470>
      delete[] dims_pointer_;
 800b194:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800b196:	b108      	cbz	r0, 800b19c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x470>
 800b198:	f005 fbbc 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b19c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b19e:	2b05      	cmp	r3, #5
 800b1a0:	dd03      	ble.n	800b1aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x47e>
      delete[] dims_pointer_;
 800b1a2:	9815      	ldr	r0, [sp, #84]	@ 0x54
 800b1a4:	b108      	cbz	r0, 800b1aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x47e>
 800b1a6:	f005 fbb5 	bl	8010914 <_ZdaPv>
      return EvalFloat(context, node, params->activation, input, filter, bias,
 800b1aa:	2000      	movs	r0, #0
}
 800b1ac:	b05d      	add	sp, #372	@ 0x174
 800b1ae:	ecbd 8b02 	vpop	{d8}
 800b1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 800b1b6:	9b05      	ldr	r3, [sp, #20]
 800b1b8:	464a      	mov	r2, r9
 800b1ba:	e9cd 8300 	strd	r8, r3, [sp]
 800b1be:	4630      	mov	r0, r6
 800b1c0:	463b      	mov	r3, r7
 800b1c2:	f7ff fb7b 	bl	800a8bc <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_.constprop.0>
}
 800b1c6:	b05d      	add	sp, #372	@ 0x174
 800b1c8:	ecbd 8b02 	vpop	{d8}
 800b1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800b1d0:	6974      	ldr	r4, [r6, #20]
 800b1d2:	f7f8 fa99 	bl	8003708 <TfLiteTypeGetName>
 800b1d6:	9b05      	ldr	r3, [sp, #20]
 800b1d8:	49b8      	ldr	r1, [pc, #736]	@ (800b4bc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x790>)
 800b1da:	7a1b      	ldrb	r3, [r3, #8]
 800b1dc:	4602      	mov	r2, r0
 800b1de:	4630      	mov	r0, r6
 800b1e0:	47a0      	blx	r4
      return kTfLiteError;
 800b1e2:	e5df      	b.n	800ada4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x78>
      TF_LITE_FULLY_CONNECTED(uint8_t);
 800b1e4:	4649      	mov	r1, r9
 800b1e6:	a82c      	add	r0, sp, #176	@ 0xb0
 800b1e8:	f7fb fb4c 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b1ec:	4639      	mov	r1, r7
 800b1ee:	a832      	add	r0, sp, #200	@ 0xc8
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b1f0:	f8d9 9000 	ldr.w	r9, [r9]
 800b1f4:	f7fb fb46 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b1f8:	2f00      	cmp	r7, #0
 800b1fa:	f000 81c3 	beq.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
 800b1fe:	4641      	mov	r1, r8
 800b200:	a838      	add	r0, sp, #224	@ 0xe0
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b202:	f8d7 a000 	ldr.w	sl, [r7]
 800b206:	f7fb fb3d 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  TFLITE_DCHECK(tensor != nullptr);
 800b20a:	f1b8 0f00 	cmp.w	r8, #0
 800b20e:	f000 81b9 	beq.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
 800b212:	9e05      	ldr	r6, [sp, #20]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800b214:	f8d8 3000 	ldr.w	r3, [r8]
 800b218:	930d      	str	r3, [sp, #52]	@ 0x34
 800b21a:	4631      	mov	r1, r6
 800b21c:	a83e      	add	r0, sp, #248	@ 0xf8
 800b21e:	f7fb fb31 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  inline int32_t DimensionsCount() const { return size_; }
 800b222:	f8dd c0c8 	ldr.w	ip, [sp, #200]	@ 0xc8
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b226:	f8d6 e000 	ldr.w	lr, [r6]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800b22a:	f1bc 0f01 	cmp.w	ip, #1
 800b22e:	f340 81a9 	ble.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
 800b232:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800b234:	2a00      	cmp	r2, #0
 800b236:	f340 81a5 	ble.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800b23a:	e9dd 3103 	ldrd	r3, r1, [sp, #12]
 800b23e:	428b      	cmp	r3, r1
 800b240:	f300 81a0 	bgt.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b244:	2a05      	cmp	r2, #5
 800b246:	bfc8      	it	gt
 800b248:	9f3f      	ldrgt	r7, [sp, #252]	@ 0xfc
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800b24a:	f102 36ff 	add.w	r6, r2, #4294967295	@ 0xffffffff
 800b24e:	bfd8      	it	le
 800b250:	af3f      	addle	r7, sp, #252	@ 0xfc
  int flat_size = 1;
 800b252:	2101      	movs	r1, #1
  for (int i = 0; i < dims_count; ++i) {
 800b254:	2000      	movs	r0, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800b256:	4286      	cmp	r6, r0
 800b258:	f000 80d7 	beq.w	800b40a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6de>
 800b25c:	f857 3020 	ldr.w	r3, [r7, r0, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 800b260:	3001      	adds	r0, #1
 800b262:	4282      	cmp	r2, r0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800b264:	fb03 f101 	mul.w	r1, r3, r1
  for (int i = 0; i < dims_count; ++i) {
 800b268:	d1f5      	bne.n	800b256 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x52a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b26a:	f1bc 0f05 	cmp.w	ip, #5
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800b26e:	f1ac 0002 	sub.w	r0, ip, #2
 800b272:	f340 80ff 	ble.w	800b474 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x748>
 800b276:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 800b278:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800b27c:	2a05      	cmp	r2, #5
 800b27e:	f340 8165 	ble.w	800b54c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x820>
 800b282:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800b284:	f853 6026 	ldr.w	r6, [r3, r6, lsl #2]
 800b288:	4286      	cmp	r6, r0
 800b28a:	f040 817b 	bne.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b28e:	f1bc 0f05 	cmp.w	ip, #5
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800b292:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
 800b296:	f300 8152 	bgt.w	800b53e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x812>
 800b29a:	aa5c      	add	r2, sp, #368	@ 0x170
 800b29c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
  for (int b = 0; b < batches; ++b) {
 800b2a0:	2900      	cmp	r1, #0
 800b2a2:	f856 8ca4 	ldr.w	r8, [r6, #-164]
 800b2a6:	f340 8083 	ble.w	800b3b0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x684>
  int left_shift = shift > 0 ? shift : 0;
 800b2aa:	9a06      	ldr	r2, [sp, #24]
 800b2ac:	f8cd 901c 	str.w	r9, [sp, #28]
 800b2b0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800b2b4:	920c      	str	r2, [sp, #48]	@ 0x30
  int right_shift = shift > 0 ? 0 : -shift;
 800b2b6:	9a02      	ldr	r2, [sp, #8]
 800b2b8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 800b2bc:	4616      	mov	r6, r2
 800b2be:	920b      	str	r2, [sp, #44]	@ 0x2c
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	40b2      	lsls	r2, r6
 800b2c4:	3a01      	subs	r2, #1
 800b2c6:	e9cd 1a0f 	strd	r1, sl, [sp, #60]	@ 0x3c
 800b2ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2cc:	990d      	ldr	r1, [sp, #52]	@ 0x34
  return a >> offset;
 800b2ce:	1052      	asrs	r2, r2, #1
 800b2d0:	920a      	str	r2, [sp, #40]	@ 0x28
 800b2d2:	4673      	mov	r3, lr
 800b2d4:	eb09 0608 	add.w	r6, r9, r8
 800b2d8:	2200      	movs	r2, #0
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	bfd8      	it	le
 800b2de:	181b      	addle	r3, r3, r0
 800b2e0:	dd5a      	ble.n	800b398 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x66c>
 800b2e2:	e9cd 200d 	strd	r2, r0, [sp, #52]	@ 0x34
 800b2e6:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
 800b2ea:	9405      	str	r4, [sp, #20]
  int left_shift = shift > 0 ? shift : 0;
 800b2ec:	461f      	mov	r7, r3
 800b2ee:	468e      	mov	lr, r1
 800b2f0:	eb03 0900 	add.w	r9, r3, r0
      for (int d = 0; d < accum_depth; ++d) {
 800b2f4:	f1b8 0f00 	cmp.w	r8, #0
 800b2f8:	f340 8100 	ble.w	800b4fc <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7d0>
 800b2fc:	9807      	ldr	r0, [sp, #28]
      int32_t acc = 0;
 800b2fe:	9c05      	ldr	r4, [sp, #20]
 800b300:	f8cd b018 	str.w	fp, [sp, #24]
 800b304:	f10c 3aff 	add.w	sl, ip, #4294967295	@ 0xffffffff
 800b308:	2300      	movs	r3, #0
        int32_t input_val = input_data[b * accum_depth + d];
 800b30a:	f810 bb01 	ldrb.w	fp, [r0], #1
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800b30e:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800b312:	ebab 0b05 	sub.w	fp, fp, r5
 800b316:	1b12      	subs	r2, r2, r4
      for (int d = 0; d < accum_depth; ++d) {
 800b318:	4286      	cmp	r6, r0
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800b31a:	fb0b 3302 	mla	r3, fp, r2, r3
      for (int d = 0; d < accum_depth; ++d) {
 800b31e:	d1f4      	bne.n	800b30a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5de>
      if (bias_data) {
 800b320:	f8dd b018 	ldr.w	fp, [sp, #24]
 800b324:	9405      	str	r4, [sp, #20]
 800b326:	b111      	cbz	r1, 800b32e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x602>
        acc += bias_data[out_c];
 800b328:	f8de 2000 	ldr.w	r2, [lr]
 800b32c:	4413      	add	r3, r2
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800b32e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b330:	4093      	lsls	r3, r2
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800b332:	459b      	cmp	fp, r3
 800b334:	f000 80d6 	beq.w	800b4e4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7b8>
  std::int64_t ab_64 = a_64 * b_64;
 800b338:	fb83 320b 	smull	r3, r2, r3, fp
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800b33c:	2a00      	cmp	r2, #0
 800b33e:	f2c0 809f 	blt.w	800b480 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x754>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800b342:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 800b346:	f142 0200 	adc.w	r2, r2, #0
 800b34a:	0fdb      	lsrs	r3, r3, #31
 800b34c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  assert(exponent <= 31);
 800b350:	9a02      	ldr	r2, [sp, #8]
 800b352:	2a1f      	cmp	r2, #31
 800b354:	f300 810f 	bgt.w	800b576 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84a>
  return a & b;
 800b358:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b35a:	ea02 0003 	and.w	r0, r2, r3
  return a + b;
 800b35e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b360:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
  return a >> offset;
 800b364:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800b366:	4123      	asrs	r3, r4
  return a + b;
 800b368:	4290      	cmp	r0, r2
 800b36a:	bfc8      	it	gt
 800b36c:	3301      	addgt	r3, #1
      acc += output_offset;
 800b36e:	9a08      	ldr	r2, [sp, #32]
 800b370:	4413      	add	r3, r2
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
 800b372:	9a03      	ldr	r2, [sp, #12]
 800b374:	4293      	cmp	r3, r2
 800b376:	bfb8      	it	lt
 800b378:	4613      	movlt	r3, r2
 800b37a:	9a04      	ldr	r2, [sp, #16]
 800b37c:	4293      	cmp	r3, r2
 800b37e:	bfa8      	it	ge
 800b380:	4613      	movge	r3, r2
 800b382:	f807 3b01 	strb.w	r3, [r7], #1
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b386:	45b9      	cmp	r9, r7
 800b388:	f10e 0e04 	add.w	lr, lr, #4
 800b38c:	44c4      	add	ip, r8
 800b38e:	464b      	mov	r3, r9
 800b390:	d1b0      	bne.n	800b2f4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5c8>
 800b392:	e9dd 200d 	ldrd	r2, r0, [sp, #52]	@ 0x34
 800b396:	9c05      	ldr	r4, [sp, #20]
  for (int b = 0; b < batches; ++b) {
 800b398:	9f07      	ldr	r7, [sp, #28]
 800b39a:	4447      	add	r7, r8
 800b39c:	9707      	str	r7, [sp, #28]
 800b39e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 800b3a0:	3201      	adds	r2, #1
 800b3a2:	42ba      	cmp	r2, r7
 800b3a4:	4446      	add	r6, r8
 800b3a6:	d198      	bne.n	800b2da <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5ae>
    if (size_ > kMaxSmallSize) {
 800b3a8:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 800b3aa:	2a05      	cmp	r2, #5
 800b3ac:	dd04      	ble.n	800b3b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x68c>
 800b3ae:	9b3f      	ldr	r3, [sp, #252]	@ 0xfc
      delete[] dims_pointer_;
 800b3b0:	b113      	cbz	r3, 800b3b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x68c>
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f005 faae 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b3b8:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 800b3ba:	2b05      	cmp	r3, #5
 800b3bc:	dd03      	ble.n	800b3c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x69a>
      delete[] dims_pointer_;
 800b3be:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 800b3c0:	b108      	cbz	r0, 800b3c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x69a>
 800b3c2:	f005 faa7 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b3c6:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 800b3c8:	2b05      	cmp	r3, #5
 800b3ca:	dd03      	ble.n	800b3d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a8>
      delete[] dims_pointer_;
 800b3cc:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 800b3ce:	b108      	cbz	r0, 800b3d4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x6a8>
 800b3d0:	f005 faa0 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800b3d4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 800b3d6:	2b05      	cmp	r3, #5
 800b3d8:	f77f aee7 	ble.w	800b1aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x47e>
      delete[] dims_pointer_;
 800b3dc:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	f47f aee1 	bne.w	800b1a6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x47a>
 800b3e4:	e6e1      	b.n	800b1aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x47e>
    *activation_max = std::numeric_limits<T>::max();
 800b3e6:	eddf 8a36 	vldr	s17, [pc, #216]	@ 800b4c0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x794>
    *activation_min = 0;
 800b3ea:	ed9f 8a36 	vldr	s16, [pc, #216]	@ 800b4c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x798>
 800b3ee:	e613      	b.n	800b018 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ec>
      float bias_value = 0.0f;
 800b3f0:	eef0 7a46 	vmov.f32	s15, s12
 800b3f4:	e69b      	b.n	800b12e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x402>
  for (int i = 0; i < dims_count; ++i) {
 800b3f6:	1c62      	adds	r2, r4, #1
 800b3f8:	4293      	cmp	r3, r2
 800b3fa:	f47f ae3a 	bne.w	800b072 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x346>
 800b3fe:	e642      	b.n	800b086 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x35a>
 800b400:	1c50      	adds	r0, r2, #1
 800b402:	4286      	cmp	r6, r0
 800b404:	f47f ad20 	bne.w	800ae48 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x11c>
 800b408:	e528      	b.n	800ae5c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x130>
 800b40a:	1c70      	adds	r0, r6, #1
 800b40c:	4282      	cmp	r2, r0
 800b40e:	f47f af22 	bne.w	800b256 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x52a>
 800b412:	e72a      	b.n	800b26a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x53e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b414:	aa1a      	add	r2, sp, #104	@ 0x68
 800b416:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800b41a:	2b05      	cmp	r3, #5
 800b41c:	684a      	ldr	r2, [r1, #4]
 800b41e:	9203      	str	r2, [sp, #12]
 800b420:	f73f ae3e 	bgt.w	800b0a0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x374>
 800b424:	aa5c      	add	r2, sp, #368	@ 0x170
 800b426:	eb02 0484 	add.w	r4, r2, r4, lsl #2
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800b42a:	9903      	ldr	r1, [sp, #12]
 800b42c:	f854 2cd4 	ldr.w	r2, [r4, #-212]
 800b430:	428a      	cmp	r2, r1
 800b432:	f040 80a7 	bne.w	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b436:	2e05      	cmp	r6, #5
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800b438:	f106 31ff 	add.w	r1, r6, #4294967295	@ 0xffffffff
 800b43c:	dc08      	bgt.n	800b450 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x724>
 800b43e:	aa1a      	add	r2, sp, #104	@ 0x68
 800b440:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  for (int b = 0; b < batches; ++b) {
 800b444:	f1bb 0f00 	cmp.w	fp, #0
 800b448:	6848      	ldr	r0, [r1, #4]
 800b44a:	f73f ae3c 	bgt.w	800b0c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x39a>
 800b44e:	e697      	b.n	800b180 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x454>
 800b450:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800b452:	f1bb 0f00 	cmp.w	fp, #0
 800b456:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800b45a:	f73f ae34 	bgt.w	800b0c6 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x39a>
 800b45e:	e688      	b.n	800b172 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x446>
    *activation_min = 0;
 800b460:	ed9f 8a18 	vldr	s16, [pc, #96]	@ 800b4c4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x798>
    *activation_max = 6;
 800b464:	eef1 8a08 	vmov.f32	s17, #24	@ 0x40c00000  6.0
 800b468:	e5d6      	b.n	800b018 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x2ec>
 800b46a:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
 800b46c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b470:	469e      	mov	lr, r3
 800b472:	e500      	b.n	800ae76 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x14a>
 800b474:	ab5c      	add	r3, sp, #368	@ 0x170
 800b476:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b47a:	f850 0ca4 	ldr.w	r0, [r0, #-164]
 800b47e:	e6fd      	b.n	800b27c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x550>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800b480:	4811      	ldr	r0, [pc, #68]	@ (800b4c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x79c>)
 800b482:	181b      	adds	r3, r3, r0
 800b484:	f162 0200 	sbc.w	r2, r2, #0
 800b488:	2a00      	cmp	r2, #0
 800b48a:	da04      	bge.n	800b496 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x76a>
 800b48c:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800b490:	181b      	adds	r3, r3, r0
 800b492:	f142 0200 	adc.w	r2, r2, #0
 800b496:	0fdb      	lsrs	r3, r3, #31
 800b498:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800b49c:	e758      	b.n	800b350 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x624>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800b49e:	4c0a      	ldr	r4, [pc, #40]	@ (800b4c8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x79c>)
 800b4a0:	191b      	adds	r3, r3, r4
 800b4a2:	f160 0000 	sbc.w	r0, r0, #0
 800b4a6:	2800      	cmp	r0, #0
 800b4a8:	da04      	bge.n	800b4b4 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x788>
 800b4aa:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800b4ae:	191b      	adds	r3, r3, r4
 800b4b0:	f140 0000 	adc.w	r0, r0, #0
 800b4b4:	0fdb      	lsrs	r3, r3, #31
 800b4b6:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800b4ba:	e54a      	b.n	800af52 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x226>
 800b4bc:	08016f6c 	.word	0x08016f6c
 800b4c0:	7f7fffff 	.word	0x7f7fffff
 800b4c4:	00000000 	.word	0x00000000
 800b4c8:	c0000001 	.word	0xc0000001
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800b4cc:	f1bb 4f00 	cmp.w	fp, #2147483648	@ 0x80000000
 800b4d0:	f47f ad33 	bne.w	800af3a <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x20e>
  assert(exponent <= 31);
 800b4d4:	9b02      	ldr	r3, [sp, #8]
 800b4d6:	2b1f      	cmp	r3, #31
 800b4d8:	dc4d      	bgt.n	800b576 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84a>
 800b4da:	9809      	ldr	r0, [sp, #36]	@ 0x24
  return a & b;
 800b4dc:	9c07      	ldr	r4, [sp, #28]
  assert(exponent <= 31);
 800b4de:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b4e2:	e540      	b.n	800af66 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x23a>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800b4e4:	f1bb 4f00 	cmp.w	fp, #2147483648	@ 0x80000000
 800b4e8:	f47f af26 	bne.w	800b338 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60c>
  assert(exponent <= 31);
 800b4ec:	9b02      	ldr	r3, [sp, #8]
 800b4ee:	2b1f      	cmp	r3, #31
 800b4f0:	dc41      	bgt.n	800b576 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x84a>
  return a & b;
 800b4f2:	e9dd 0209 	ldrd	r0, r2, [sp, #36]	@ 0x24
  assert(exponent <= 31);
 800b4f6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800b4fa:	e733      	b.n	800b364 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x638>
      if (bias_data) {
 800b4fc:	b109      	cbz	r1, 800b502 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7d6>
      int32_t acc = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	e712      	b.n	800b328 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x5fc>
  std::int64_t ab_64 = a_64 * b_64;
 800b502:	460b      	mov	r3, r1
 800b504:	460a      	mov	r2, r1
 800b506:	e71c      	b.n	800b342 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x616>
 800b508:	9b4b      	ldr	r3, [sp, #300]	@ 0x12c
  for (int b = 0; b < batches; ++b) {
 800b50a:	2900      	cmp	r1, #0
 800b50c:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 800b510:	f73f acc7 	bgt.w	800aea2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
 800b514:	e544      	b.n	800afa0 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x274>
 800b516:	ab5c      	add	r3, sp, #368	@ 0x170
 800b518:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800b51c:	f852 3c14 	ldr.w	r3, [r2, #-20]
 800b520:	4573      	cmp	r3, lr
 800b522:	d12f      	bne.n	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b524:	2f05      	cmp	r7, #5
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800b526:	f107 32ff 	add.w	r2, r7, #4294967295	@ 0xffffffff
 800b52a:	dced      	bgt.n	800b508 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x7dc>
 800b52c:	ab5c      	add	r3, sp, #368	@ 0x170
 800b52e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
  for (int b = 0; b < batches; ++b) {
 800b532:	2900      	cmp	r1, #0
 800b534:	f852 8c44 	ldr.w	r8, [r2, #-68]
 800b538:	f73f acb3 	bgt.w	800aea2 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x176>
 800b53c:	e536      	b.n	800afac <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x280>
 800b53e:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
  for (int b = 0; b < batches; ++b) {
 800b540:	2900      	cmp	r1, #0
 800b542:	f853 8026 	ldr.w	r8, [r3, r6, lsl #2]
 800b546:	f73f aeb0 	bgt.w	800b2aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x57e>
 800b54a:	e72e      	b.n	800b3aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x67e>
 800b54c:	ab5c      	add	r3, sp, #368	@ 0x170
 800b54e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800b552:	f856 3c74 	ldr.w	r3, [r6, #-116]
 800b556:	4283      	cmp	r3, r0
 800b558:	d114      	bne.n	800b584 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x858>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b55a:	f1bc 0f05 	cmp.w	ip, #5
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800b55e:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
 800b562:	dcec      	bgt.n	800b53e <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x812>
 800b564:	ab5c      	add	r3, sp, #368	@ 0x170
 800b566:	eb03 0686 	add.w	r6, r3, r6, lsl #2
  for (int b = 0; b < batches; ++b) {
 800b56a:	2900      	cmp	r1, #0
 800b56c:	f856 8ca4 	ldr.w	r8, [r6, #-164]
 800b570:	f73f ae9b 	bgt.w	800b2aa <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x57e>
 800b574:	e720      	b.n	800b3b8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x68c>
  assert(exponent <= 31);
 800b576:	4b04      	ldr	r3, [pc, #16]	@ (800b588 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x85c>)
 800b578:	4a04      	ldr	r2, [pc, #16]	@ (800b58c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x860>)
 800b57a:	4805      	ldr	r0, [pc, #20]	@ (800b590 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x864>)
 800b57c:	f240 1167 	movw	r1, #359	@ 0x167
 800b580:	f005 fca4 	bl	8010ecc <__assert_func>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b584:	f005 fc9a 	bl	8010ebc <abort>
 800b588:	080165c4 	.word	0x080165c4
 800b58c:	080165d4 	.word	0x080165d4
 800b590:	08016630 	.word	0x08016630
 800b594:	00000000 	.word	0x00000000

0800b598 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800b59c:	f8d1 9010 	ldr.w	r9, [r1, #16]
TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800b5a0:	b095      	sub	sp, #84	@ 0x54
  TFLITE_DCHECK(node->user_data != nullptr);
 800b5a2:	f1b9 0f00 	cmp.w	r9, #0
 800b5a6:	f000 80f7 	beq.w	800b798 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b5aa:	f8d1 a014 	ldr.w	sl, [r1, #20]
 800b5ae:	460c      	mov	r4, r1
 800b5b0:	f1ba 0f00 	cmp.w	sl, #0
 800b5b4:	f000 80f0 	beq.w	800b798 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	4605      	mov	r5, r0
 800b5bc:	f7f8 fc70 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800b5c0:	4621      	mov	r1, r4
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b5c2:	4606      	mov	r6, r0
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800b5c4:	2201      	movs	r2, #1
 800b5c6:	4628      	mov	r0, r5
 800b5c8:	f7f8 fc6a 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800b5cc:	4621      	mov	r1, r4
 800b5ce:	2202      	movs	r2, #2
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800b5d0:	4607      	mov	r7, r0
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800b5d2:	4628      	mov	r0, r5
 800b5d4:	f7f8 fc9c 	bl	8003f10 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b5d8:	4621      	mov	r1, r4
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800b5da:	4680      	mov	r8, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b5dc:	2200      	movs	r2, #0
 800b5de:	4628      	mov	r0, r5
 800b5e0:	f7f8 fc7a 	bl	8003ed8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800b5e4:	4604      	mov	r4, r0
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800b5e6:	7830      	ldrb	r0, [r6, #0]
 800b5e8:	7823      	ldrb	r3, [r4, #0]
 800b5ea:	4283      	cmp	r3, r0
 800b5ec:	d11a      	bne.n	800b624 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x8c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800b5ee:	783a      	ldrb	r2, [r7, #0]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d009      	beq.n	800b608 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x70>
 800b5f4:	696b      	ldr	r3, [r5, #20]
 800b5f6:	496c      	ldr	r1, [pc, #432]	@ (800b7a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	4798      	blx	r3
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800b5fc:	f04f 0a01 	mov.w	sl, #1
}
 800b600:	4650      	mov	r0, sl
 800b602:	b015      	add	sp, #84	@ 0x54
 800b604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  data->buffer_idx = -1;
 800b608:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
  if (data_type != kTfLiteFloat32) {
 800b60c:	2a01      	cmp	r2, #1
  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params->activation,
 800b60e:	f89a b000 	ldrb.w	fp, [sl]
  data->buffer_idx = -1;
 800b612:	f8c9 3014 	str.w	r3, [r9, #20]
  if (data_type != kTfLiteFloat32) {
 800b616:	d119      	bne.n	800b64c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xb4>
  return kTfLiteOk;
 800b618:	f04f 0a00 	mov.w	sl, #0
}
 800b61c:	4650      	mov	r0, sl
 800b61e:	b015      	add	sp, #84	@ 0x54
 800b620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800b624:	696e      	ldr	r6, [r5, #20]
 800b626:	f7f8 f86f 	bl	8003708 <TfLiteTypeGetName>
 800b62a:	4603      	mov	r3, r0
 800b62c:	7820      	ldrb	r0, [r4, #0]
 800b62e:	461c      	mov	r4, r3
 800b630:	f7f8 f86a 	bl	8003708 <TfLiteTypeGetName>
 800b634:	495d      	ldr	r1, [pc, #372]	@ (800b7ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 800b636:	4b5e      	ldr	r3, [pc, #376]	@ (800b7b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 800b638:	4a5e      	ldr	r2, [pc, #376]	@ (800b7b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 800b63a:	e9cd 3100 	strd	r3, r1, [sp]
 800b63e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 800b642:	495d      	ldr	r1, [pc, #372]	@ (800b7b8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 800b644:	2369      	movs	r3, #105	@ 0x69
 800b646:	4628      	mov	r0, r5
 800b648:	47b0      	blx	r6
 800b64a:	e7d7      	b.n	800b5fc <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x64>
    double real_multiplier = 0.0;
 800b64c:	ed9f 7b54 	vldr	d7, [pc, #336]	@ 800b7a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x208>
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800b650:	ab0e      	add	r3, sp, #56	@ 0x38
 800b652:	9301      	str	r3, [sp, #4]
 800b654:	9400      	str	r4, [sp, #0]
 800b656:	4643      	mov	r3, r8
 800b658:	463a      	mov	r2, r7
 800b65a:	4631      	mov	r1, r6
 800b65c:	4628      	mov	r0, r5
    double real_multiplier = 0.0;
 800b65e:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800b662:	f7f8 fc71 	bl	8003f48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800b666:	4682      	mov	sl, r0
 800b668:	2800      	cmp	r0, #0
 800b66a:	d1c9      	bne.n	800b600 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 800b66c:	ed9d 0b0e 	vldr	d0, [sp, #56]	@ 0x38
 800b670:	a908      	add	r1, sp, #32
 800b672:	4648      	mov	r0, r9
 800b674:	f7f8 fb16 	bl	8003ca4 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 800b678:	9b08      	ldr	r3, [sp, #32]
 800b67a:	425b      	negs	r3, r3
 800b67c:	f8c9 3004 	str.w	r3, [r9, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800b680:	f109 030c 	add.w	r3, r9, #12
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	4659      	mov	r1, fp
 800b688:	f109 0308 	add.w	r3, r9, #8
 800b68c:	4622      	mov	r2, r4
 800b68e:	4628      	mov	r0, r5
 800b690:	f7f8 fcde 	bl	8004050 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800b694:	4682      	mov	sl, r0
 800b696:	2800      	cmp	r0, #0
 800b698:	d1b2      	bne.n	800b600 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
  if (input->type == kTfLiteInt8 && nullptr != GetTensorData<int32_t>(bias)) {
 800b69a:	7833      	ldrb	r3, [r6, #0]
    data->input_zero_point = input->params.zero_point;
 800b69c:	6932      	ldr	r2, [r6, #16]
 800b69e:	f8c9 2018 	str.w	r2, [r9, #24]
    data->filter_zero_point = filter->params.zero_point;
 800b6a2:	693a      	ldr	r2, [r7, #16]
 800b6a4:	f8c9 201c 	str.w	r2, [r9, #28]
  if (input->type == kTfLiteInt8 && nullptr != GetTensorData<int32_t>(bias)) {
 800b6a8:	2b09      	cmp	r3, #9
    data->output_zero_point = output->params.zero_point;
 800b6aa:	6922      	ldr	r2, [r4, #16]
 800b6ac:	f8c9 2020 	str.w	r2, [r9, #32]
  if (input->type == kTfLiteInt8 && nullptr != GetTensorData<int32_t>(bias)) {
 800b6b0:	d1b2      	bne.n	800b618 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800b6b2:	f1b8 0f00 	cmp.w	r8, #0
 800b6b6:	d0af      	beq.n	800b618 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 800b6b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d0ab      	beq.n	800b618 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x80>
  const int dims_size = dims->size;
 800b6c0:	68be      	ldr	r6, [r7, #8]
 800b6c2:	f856 3b04 	ldr.w	r3, [r6], #4
    size_ = dimensions_count;
 800b6c6:	9308      	str	r3, [sp, #32]
    if (dimensions_count > kMaxSmallSize) {
 800b6c8:	2b05      	cmp	r3, #5
      dims_pointer_ = new int32_t[dimensions_count];
 800b6ca:	ea4f 0783 	mov.w	r7, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
 800b6ce:	dd41      	ble.n	800b754 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1bc>
      dims_pointer_ = new int32_t[dimensions_count];
 800b6d0:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	bfb4      	ite	lt
 800b6d8:	4638      	movlt	r0, r7
 800b6da:	f04f 30ff 	movge.w	r0, #4294967295	@ 0xffffffff
 800b6de:	f005 f93b 	bl	8010958 <_Znaj>
 800b6e2:	9009      	str	r0, [sp, #36]	@ 0x24
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800b6e4:	4631      	mov	r1, r6
 800b6e6:	463a      	mov	r2, r7
 800b6e8:	f006 fc2f 	bl	8011f4a <memcpy>
 800b6ec:	68a4      	ldr	r4, [r4, #8]
 800b6ee:	f854 3b04 	ldr.w	r3, [r4], #4
    size_ = dimensions_count;
 800b6f2:	930e      	str	r3, [sp, #56]	@ 0x38
    if (dimensions_count > kMaxSmallSize) {
 800b6f4:	2b05      	cmp	r3, #5
      dims_pointer_ = new int32_t[dimensions_count];
 800b6f6:	ea4f 0683 	mov.w	r6, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
 800b6fa:	dc33      	bgt.n	800b764 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1cc>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b6fc:	a80f      	add	r0, sp, #60	@ 0x3c
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800b6fe:	4632      	mov	r2, r6
 800b700:	4621      	mov	r1, r4
 800b702:	f006 fc22 	bl	8011f4a <memcpy>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800b706:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b708:	2b02      	cmp	r3, #2
 800b70a:	d145      	bne.n	800b798 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>
  inline int32_t DimensionsCount() const { return size_; }
 800b70c:	9c08      	ldr	r4, [sp, #32]
    TFLITE_DCHECK_GE(i, 0);
 800b70e:	1e63      	subs	r3, r4, #1
 800b710:	d442      	bmi.n	800b798 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x200>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b712:	2c05      	cmp	r4, #5
 800b714:	dd20      	ble.n	800b758 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1c0>
 800b716:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b718:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    filter_dims.c = output_shape.Dims(1);
 800b71c:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800b71e:	9107      	str	r1, [sp, #28]
    filter_dims.h = 1;
 800b720:	2301      	movs	r3, #1
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 800b722:	a804      	add	r0, sp, #16
    filter_dims.h = 1;
 800b724:	e9cd 2304 	strd	r2, r3, [sp, #16]
    filter_dims.w = 1;
 800b728:	9306      	str	r3, [sp, #24]
        arm_fully_connected_s8_get_buffer_size(&filter_dims);
 800b72a:	f003 f85b 	bl	800e7e4 <arm_fully_connected_s8_get_buffer_size>
    if (buf_size > 0) {
 800b72e:	1e01      	subs	r1, r0, #0
 800b730:	dd23      	ble.n	800b77a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 800b732:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 800b734:	f109 0214 	add.w	r2, r9, #20
 800b738:	4628      	mov	r0, r5
 800b73a:	4798      	blx	r3
 800b73c:	4682      	mov	sl, r0
 800b73e:	bb08      	cbnz	r0, 800b784 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1ec>
    if (size_ > kMaxSmallSize) {
 800b740:	2c05      	cmp	r4, #5
 800b742:	f77f af69 	ble.w	800b618 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x80>
      delete[] dims_pointer_;
 800b746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b748:	2800      	cmp	r0, #0
 800b74a:	f43f af65 	beq.w	800b618 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 800b74e:	f005 f8e1 	bl	8010914 <_ZdaPv>
 800b752:	e761      	b.n	800b618 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x80>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b754:	a809      	add	r0, sp, #36	@ 0x24
 800b756:	e7c5      	b.n	800b6e4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800b758:	aa14      	add	r2, sp, #80	@ 0x50
 800b75a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b75e:	f853 2c2c 	ldr.w	r2, [r3, #-44]
    TFLITE_DCHECK_LT(i, size_);
 800b762:	e7db      	b.n	800b71c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x184>
      dims_pointer_ = new int32_t[dimensions_count];
 800b764:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 800b768:	4293      	cmp	r3, r2
 800b76a:	bfb4      	ite	lt
 800b76c:	4630      	movlt	r0, r6
 800b76e:	f04f 30ff 	movge.w	r0, #4294967295	@ 0xffffffff
 800b772:	f005 f8f1 	bl	8010958 <_Znaj>
 800b776:	900f      	str	r0, [sp, #60]	@ 0x3c
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800b778:	e7c1      	b.n	800b6fe <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x166>
      data->buffer_idx = -1;
 800b77a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b77e:	f8c9 3014 	str.w	r3, [r9, #20]
 800b782:	e7dd      	b.n	800b740 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x1a8>
    if (size_ > kMaxSmallSize) {
 800b784:	2c05      	cmp	r4, #5
 800b786:	f77f af3b 	ble.w	800b600 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
      delete[] dims_pointer_;
 800b78a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b78c:	2800      	cmp	r0, #0
 800b78e:	f43f af37 	beq.w	800b600 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
 800b792:	f005 f8bf 	bl	8010914 <_ZdaPv>
 800b796:	e733      	b.n	800b600 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x68>
  TFLITE_DCHECK(node->user_data != nullptr);
 800b798:	f005 fb90 	bl	8010ebc <abort>
 800b79c:	f3af 8000 	nop.w
	...
 800b7a8:	08017104 	.word	0x08017104
 800b7ac:	08016194 	.word	0x08016194
 800b7b0:	080161a4 	.word	0x080161a4
 800b7b4:	08016f88 	.word	0x08016f88
 800b7b8:	08016178 	.word	0x08016178

0800b7bc <_ZN6tflite24Register_FULLY_CONNECTEDEv>:
  return EvalQuantizedInt8(context, node, data, input, filter, bias, output);
}

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 800b7bc:	b510      	push	{r4, lr}
  fully_connected_registration.init = Init;
 800b7be:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f4 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x38>)
 800b7c0:	4c0d      	ldr	r4, [pc, #52]	@ (800b7f8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x3c>)
  fully_connected_registration.free = nullptr;
  fully_connected_registration.prepare = Prepare;
 800b7c2:	490e      	ldr	r1, [pc, #56]	@ (800b7fc <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x40>)
 800b7c4:	6099      	str	r1, [r3, #8]
  fully_connected_registration.free = nullptr;
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	e9c3 4200 	strd	r4, r2, [r3]
  fully_connected_registration.invoke = Eval;
 800b7cc:	490c      	ldr	r1, [pc, #48]	@ (800b800 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x44>)
 800b7ce:	60d9      	str	r1, [r3, #12]
  fully_connected_registration.profiling_string = nullptr;
  fully_connected_registration.builtin_code = 0;
  fully_connected_registration.custom_name = nullptr;
  fully_connected_registration.version = 0;
  return fully_connected_registration;
 800b7d0:	469e      	mov	lr, r3
  fully_connected_registration.builtin_code = 0;
 800b7d2:	e9c3 2204 	strd	r2, r2, [r3, #16]
  fully_connected_registration.version = 0;
 800b7d6:	e9c3 2206 	strd	r2, r2, [r3, #24]
TfLiteRegistration Register_FULLY_CONNECTED() {
 800b7da:	4604      	mov	r4, r0
  return fully_connected_registration;
 800b7dc:	4684      	mov	ip, r0
 800b7de:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800b7e2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800b7e6:	e89e 000f 	ldmia.w	lr, {r0, r1, r2, r3}
 800b7ea:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 800b7ee:	4620      	mov	r0, r4
 800b7f0:	bd10      	pop	{r4, pc}
 800b7f2:	bf00      	nop
 800b7f4:	2000e9b0 	.word	0x2000e9b0
 800b7f8:	0800a8ad 	.word	0x0800a8ad
 800b7fc:	0800b599 	.word	0x0800b599
 800b800:	0800ad2d 	.word	0x0800ad2d

0800b804 <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj>:
}

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800b804:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b806:	b10b      	cbz	r3, 800b80c <_ZN6tflite3ops5micro7pooling4InitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800b808:	211c      	movs	r1, #28
 800b80a:	4718      	bx	r3
void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800b80c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800b80e:	f005 fb55 	bl	8010ebc <abort>
 800b812:	bf00      	nop

0800b814 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800b814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800b818:	690c      	ldr	r4, [r1, #16]
TfLiteStatus MaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800b81a:	b082      	sub	sp, #8
  TFLITE_DCHECK(node->user_data != nullptr);
 800b81c:	2c00      	cmp	r4, #0
 800b81e:	d062      	beq.n	800b8e6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xd2>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b820:	694e      	ldr	r6, [r1, #20]
 800b822:	460f      	mov	r7, r1
 800b824:	2e00      	cmp	r6, #0
 800b826:	d05e      	beq.n	800b8e6 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xd2>

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b828:	2200      	movs	r2, #0
 800b82a:	4605      	mov	r5, r0
 800b82c:	f7f8 fb38 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b830:	4639      	mov	r1, r7
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b832:	4680      	mov	r8, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b834:	2200      	movs	r2, #0
 800b836:	4628      	mov	r0, r5
 800b838:	f7f8 fb4e 	bl	8003ed8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
      params->filter_width, params->padding, &out_height, &out_width);
 800b83c:	f896 c000 	ldrb.w	ip, [r6]
 800b840:	f8d8 3008 	ldr.w	r3, [r8, #8]
  switch (padding) {
 800b844:	f1bc 0f01 	cmp.w	ip, #1
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b848:	4602      	mov	r2, r0
      params->stride_height, params->stride_width,
 800b84a:	e9d6 9a01 	ldrd	r9, sl, [r6, #4]
 800b84e:	f898 0000 	ldrb.w	r0, [r8]
  return t->dims->data[dim];
 800b852:	e9d3 8702 	ldrd	r8, r7, [r3, #8]
      params->filter_width, params->padding, &out_height, &out_width);
 800b856:	e9d6 1303 	ldrd	r1, r3, [r6, #12]
 800b85a:	d046      	beq.n	800b8ea <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xd6>
 800b85c:	f1bc 0f02 	cmp.w	ip, #2
 800b860:	d12e      	bne.n	800b8c0 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xac>
      return (image_size + stride - effective_filter_size) / stride;
 800b862:	eb08 0e0a 	add.w	lr, r8, sl
 800b866:	eb07 0c09 	add.w	ip, r7, r9
 800b86a:	ebae 0e03 	sub.w	lr, lr, r3
 800b86e:	ebac 0c01 	sub.w	ip, ip, r1
 800b872:	fb9e fefa 	sdiv	lr, lr, sl
 800b876:	fb9c fcf9 	sdiv	ip, ip, r9
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800b87a:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
 800b87e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b882:	fb0c 1109 	mla	r1, ip, r9, r1
  int total_padding =
 800b886:	1bc9      	subs	r1, r1, r7
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800b888:	fb0e 330a 	mla	r3, lr, sl, r3
  total_padding = total_padding > 0 ? total_padding : 0;
 800b88c:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
  int total_padding =
 800b890:	eba3 0308 	sub.w	r3, r3, r8
  total_padding = total_padding > 0 ? total_padding : 0;
 800b894:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
 800b898:	104f      	asrs	r7, r1, #1
  *offset = total_padding % 2;
 800b89a:	f001 0101 	and.w	r1, r1, #1
  data->padding = ComputePaddingHeightWidth(
 800b89e:	60a1      	str	r1, [r4, #8]
  if (input->type != kTfLiteFloat32) {
 800b8a0:	2801      	cmp	r0, #1
  return total_padding / 2;
 800b8a2:	ea4f 0163 	mov.w	r1, r3, asr #1
  *offset = total_padding % 2;
 800b8a6:	f003 0301 	and.w	r3, r3, #1
  data->padding = ComputePaddingHeightWidth(
 800b8aa:	6027      	str	r7, [r4, #0]
 800b8ac:	6061      	str	r1, [r4, #4]
 800b8ae:	60e3      	str	r3, [r4, #12]
  if (input->type != kTfLiteFloat32) {
 800b8b0:	d10a      	bne.n	800b8c8 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xb4>
  data->buffer_idx = -1;
 800b8b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b8b6:	6123      	str	r3, [r4, #16]
  return kTfLiteOk;
 800b8b8:	2000      	movs	r0, #0

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, data));

  return kTfLiteOk;
}
 800b8ba:	b002      	add	sp, #8
 800b8bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (padding) {
 800b8c0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800b8c4:	46e6      	mov	lr, ip
 800b8c6:	e7dc      	b.n	800b882 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800b8c8:	f104 0318 	add.w	r3, r4, #24
 800b8cc:	7d31      	ldrb	r1, [r6, #20]
 800b8ce:	9300      	str	r3, [sp, #0]
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f104 0314 	add.w	r3, r4, #20
 800b8d6:	f7f8 fbbb 	bl	8004050 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	d1ed      	bne.n	800b8ba <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 800b8de:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	dde5      	ble.n	800b8b2 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x9e>
  TFLITE_DCHECK(node->user_data != nullptr);
 800b8e6:	f005 fae9 	bl	8010ebc <abort>
      return (image_size + stride - 1) / stride;
 800b8ea:	eb08 0e0a 	add.w	lr, r8, sl
 800b8ee:	eb07 0c09 	add.w	ip, r7, r9
 800b8f2:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
 800b8f6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b8fa:	fb9e fefa 	sdiv	lr, lr, sl
 800b8fe:	fb9c fcf9 	sdiv	ip, ip, r9
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800b902:	f10e 3eff 	add.w	lr, lr, #4294967295	@ 0xffffffff
 800b906:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
      return (image_size + stride - 1) / stride;
 800b90a:	e7ba      	b.n	800b882 <_ZN6tflite3ops5micro7pooling10MaxPrepareEP13TfLiteContextP10TfLiteNode+0x6e>

0800b90c <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 800b90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TFLITE_DCHECK(node->user_data != nullptr);
 800b910:	690c      	ldr	r4, [r1, #16]
TfLiteStatus AveragePrepare(TfLiteContext* context, TfLiteNode* node) {
 800b912:	b08f      	sub	sp, #60	@ 0x3c
  TFLITE_DCHECK(node->user_data != nullptr);
 800b914:	2c00      	cmp	r4, #0
 800b916:	f000 80c2 	beq.w	800ba9e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x192>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b91a:	f8d1 8014 	ldr.w	r8, [r1, #20]
 800b91e:	460f      	mov	r7, r1
 800b920:	f1b8 0f00 	cmp.w	r8, #0
 800b924:	f000 80bb 	beq.w	800ba9e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x192>

  OpData* data = static_cast<OpData*>(node->user_data);
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b928:	2200      	movs	r2, #0
 800b92a:	4606      	mov	r6, r0
 800b92c:	f7f8 fab8 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b930:	4639      	mov	r1, r7
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b932:	4605      	mov	r5, r0
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b934:	2200      	movs	r2, #0
 800b936:	4630      	mov	r0, r6
 800b938:	f7f8 face 	bl	8003ed8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800b93c:	4607      	mov	r7, r0
      params->filter_width, params->padding, &out_height, &out_width);
 800b93e:	f898 0000 	ldrb.w	r0, [r8]
 800b942:	68ab      	ldr	r3, [r5, #8]
 800b944:	7829      	ldrb	r1, [r5, #0]
  switch (padding) {
 800b946:	2801      	cmp	r0, #1
 800b948:	e9d3 9e02 	ldrd	r9, lr, [r3, #8]
      params->stride_height, params->stride_width,
 800b94c:	e9d8 ab01 	ldrd	sl, fp, [r8, #4]
      params->filter_width, params->padding, &out_height, &out_width);
 800b950:	e9d8 2303 	ldrd	r2, r3, [r8, #12]
 800b954:	f000 8087 	beq.w	800ba66 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x15a>
 800b958:	2802      	cmp	r0, #2
 800b95a:	d12d      	bne.n	800b9b8 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xac>
      return (image_size + stride - effective_filter_size) / stride;
 800b95c:	eb09 0c0b 	add.w	ip, r9, fp
 800b960:	eb0e 000a 	add.w	r0, lr, sl
 800b964:	ebac 0c03 	sub.w	ip, ip, r3
 800b968:	1a80      	subs	r0, r0, r2
 800b96a:	fb9c fcfb 	sdiv	ip, ip, fp
 800b96e:	fb90 f0fa 	sdiv	r0, r0, sl
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800b972:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b976:	3801      	subs	r0, #1
 800b978:	fb00 220a 	mla	r2, r0, sl, r2
 800b97c:	fb0c 330b 	mla	r3, ip, fp, r3
  int total_padding =
 800b980:	eba2 020e 	sub.w	r2, r2, lr
  total_padding = total_padding > 0 ? total_padding : 0;
 800b984:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  int total_padding =
 800b988:	eba3 0309 	sub.w	r3, r3, r9
  total_padding = total_padding > 0 ? total_padding : 0;
 800b98c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  return total_padding / 2;
 800b990:	1050      	asrs	r0, r2, #1
  *offset = total_padding % 2;
 800b992:	f002 0201 	and.w	r2, r2, #1
  data->padding = ComputePaddingHeightWidth(
 800b996:	60a2      	str	r2, [r4, #8]
  if (input->type != kTfLiteFloat32) {
 800b998:	2901      	cmp	r1, #1
  return total_padding / 2;
 800b99a:	ea4f 0263 	mov.w	r2, r3, asr #1
  *offset = total_padding % 2;
 800b99e:	f003 0301 	and.w	r3, r3, #1
  data->padding = ComputePaddingHeightWidth(
 800b9a2:	6020      	str	r0, [r4, #0]
 800b9a4:	6062      	str	r2, [r4, #4]
 800b9a6:	60e3      	str	r3, [r4, #12]
  if (input->type != kTfLiteFloat32) {
 800b9a8:	d10a      	bne.n	800b9c0 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xb4>

    if (buffer_size > 0) {
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
          context, buffer_size, &data->buffer_idx));
    } else {
      data->buffer_idx = -1;
 800b9aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b9ae:	6123      	str	r3, [r4, #16]
    }
  }
  return kTfLiteOk;
 800b9b0:	2000      	movs	r0, #0
}
 800b9b2:	b00f      	add	sp, #60	@ 0x3c
 800b9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch (padding) {
 800b9b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b9bc:	4684      	mov	ip, r0
 800b9be:	e7db      	b.n	800b978 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x6c>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800b9c0:	f104 0318 	add.w	r3, r4, #24
 800b9c4:	f898 1014 	ldrb.w	r1, [r8, #20]
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	463a      	mov	r2, r7
 800b9cc:	f104 0314 	add.w	r3, r4, #20
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	f7f8 fb3d 	bl	8004050 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800b9d6:	2800      	cmp	r0, #0
 800b9d8:	d1eb      	bne.n	800b9b2 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa6>
    TFLITE_DCHECK_LE(data->activation_min, data->activation_max);
 800b9da:	e9d4 2305 	ldrd	r2, r3, [r4, #20]
 800b9de:	429a      	cmp	r2, r3
 800b9e0:	dc5d      	bgt.n	800ba9e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x192>
  if (input->type == kTfLiteInt8) {
 800b9e2:	782b      	ldrb	r3, [r5, #0]
  data->buffer_idx = -1;
 800b9e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
  if (input->type == kTfLiteInt8) {
 800b9e8:	2b09      	cmp	r3, #9
  data->buffer_idx = -1;
 800b9ea:	6122      	str	r2, [r4, #16]
  if (input->type == kTfLiteInt8) {
 800b9ec:	d1e0      	bne.n	800b9b0 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa4>
 800b9ee:	68ad      	ldr	r5, [r5, #8]
 800b9f0:	f855 3b04 	ldr.w	r3, [r5], #4
    size_ = dimensions_count;
 800b9f4:	9302      	str	r3, [sp, #8]
    if (dimensions_count > kMaxSmallSize) {
 800b9f6:	2b05      	cmp	r3, #5
      dims_pointer_ = new int32_t[dimensions_count];
 800b9f8:	ea4f 0883 	mov.w	r8, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
 800b9fc:	dd42      	ble.n	800ba84 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x178>
      dims_pointer_ = new int32_t[dimensions_count];
 800b9fe:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 800ba02:	4293      	cmp	r3, r2
 800ba04:	bfb4      	ite	lt
 800ba06:	4640      	movlt	r0, r8
 800ba08:	f04f 30ff 	movge.w	r0, #4294967295	@ 0xffffffff
 800ba0c:	f004 ffa4 	bl	8010958 <_Znaj>
 800ba10:	9003      	str	r0, [sp, #12]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800ba12:	4642      	mov	r2, r8
 800ba14:	4629      	mov	r1, r5
 800ba16:	f006 fa98 	bl	8011f4a <memcpy>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800ba1a:	9b02      	ldr	r3, [sp, #8]
 800ba1c:	2b04      	cmp	r3, #4
 800ba1e:	d13e      	bne.n	800ba9e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x192>
  if (tensor == nullptr) {
 800ba20:	2f00      	cmp	r7, #0
 800ba22:	d03c      	beq.n	800ba9e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x192>
  const int dims_size = dims->size;
 800ba24:	68bd      	ldr	r5, [r7, #8]
 800ba26:	f855 3b04 	ldr.w	r3, [r5], #4
    size_ = dimensions_count;
 800ba2a:	9308      	str	r3, [sp, #32]
    if (dimensions_count > kMaxSmallSize) {
 800ba2c:	2b05      	cmp	r3, #5
      dims_pointer_ = new int32_t[dimensions_count];
 800ba2e:	ea4f 0783 	mov.w	r7, r3, lsl #2
    if (dimensions_count > kMaxSmallSize) {
 800ba32:	dc29      	bgt.n	800ba88 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x17c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800ba34:	a809      	add	r0, sp, #36	@ 0x24
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 800ba36:	463a      	mov	r2, r7
 800ba38:	4629      	mov	r1, r5
 800ba3a:	f006 fa86 	bl	8011f4a <memcpy>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800ba3e:	9b08      	ldr	r3, [sp, #32]
 800ba40:	2b04      	cmp	r3, #4
 800ba42:	d12c      	bne.n	800ba9e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x192>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ba44:	9b06      	ldr	r3, [sp, #24]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800ba46:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ba48:	4299      	cmp	r1, r3
 800ba4a:	d128      	bne.n	800ba9e <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x192>
        arm_avgpool_s8_get_buffer_size(output_width, depth);
 800ba4c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ba4e:	f004 f87b 	bl	800fb48 <arm_avgpool_s8_get_buffer_size>
    if (buffer_size > 0) {
 800ba52:	1e01      	subs	r1, r0, #0
 800ba54:	dda9      	ble.n	800b9aa <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x9e>
      TF_LITE_ENSURE_STATUS(context->RequestScratchBufferInArena(
 800ba56:	6c33      	ldr	r3, [r6, #64]	@ 0x40
 800ba58:	f104 0210 	add.w	r2, r4, #16
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	4798      	blx	r3
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d0a5      	beq.n	800b9b0 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa4>
 800ba64:	e7a5      	b.n	800b9b2 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0xa6>
      return (image_size + stride - 1) / stride;
 800ba66:	eb09 0c0b 	add.w	ip, r9, fp
 800ba6a:	eb0e 000a 	add.w	r0, lr, sl
 800ba6e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ba72:	3801      	subs	r0, #1
 800ba74:	fb9c fcfb 	sdiv	ip, ip, fp
 800ba78:	fb90 f0fa 	sdiv	r0, r0, sl
      ((out_size - 1) * stride + effective_filter_size - in_size);
 800ba7c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800ba80:	3801      	subs	r0, #1
      return (image_size + stride - 1) / stride;
 800ba82:	e779      	b.n	800b978 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x6c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800ba84:	a803      	add	r0, sp, #12
 800ba86:	e7c4      	b.n	800ba12 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x106>
      dims_pointer_ = new int32_t[dimensions_count];
 800ba88:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	bfb4      	ite	lt
 800ba90:	4638      	movlt	r0, r7
 800ba92:	f04f 30ff 	movge.w	r0, #4294967295	@ 0xffffffff
 800ba96:	f004 ff5f 	bl	8010958 <_Znaj>
 800ba9a:	9009      	str	r0, [sp, #36]	@ 0x24
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800ba9c:	e7cb      	b.n	800ba36 <_ZN6tflite3ops5micro7pooling14AveragePrepareEP13TfLiteContextP10TfLiteNode+0x12a>
  TFLITE_DCHECK(node->user_data != nullptr);
 800ba9e:	f005 fa0d 	bl	8010ebc <abort>
 800baa2:	bf00      	nop

0800baa4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 800baa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa8:	ed2d 8b02 	vpush	{d8}
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);

  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 800baac:	e9d1 5604 	ldrd	r5, r6, [r1, #16]
TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 800bab0:	b0e1      	sub	sp, #388	@ 0x184
  TFLITE_DCHECK(context != nullptr);
 800bab2:	2800      	cmp	r0, #0
 800bab4:	f000 8348 	beq.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800bab8:	680b      	ldr	r3, [r1, #0]
 800baba:	4688      	mov	r8, r1
 800babc:	6859      	ldr	r1, [r3, #4]
 800babe:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800bac0:	4607      	mov	r7, r0
 800bac2:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800bac4:	f8d8 3004 	ldr.w	r3, [r8, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800bac8:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800baca:	6859      	ldr	r1, [r3, #4]
 800bacc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bace:	4638      	mov	r0, r7
 800bad0:	4798      	blx	r3
 800bad2:	9005      	str	r0, [sp, #20]
  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);

  switch (input->type) {
 800bad4:	7a20      	ldrb	r0, [r4, #8]
 800bad6:	2803      	cmp	r0, #3
 800bad8:	d012      	beq.n	800bb00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5c>
 800bada:	2809      	cmp	r0, #9
 800badc:	f000 82ba 	beq.w	800c054 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5b0>
 800bae0:	2801      	cmp	r0, #1
 800bae2:	f000 815f 	beq.w	800bda4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x300>
      break;
    case kTfLiteInt8:
      MaxEvalInt8(context, node, params, data, input, output);
      break;
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 800bae6:	697c      	ldr	r4, [r7, #20]
 800bae8:	f7f7 fe0e 	bl	8003708 <TfLiteTypeGetName>
 800baec:	49aa      	ldr	r1, [pc, #680]	@ (800bd98 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2f4>)
 800baee:	4602      	mov	r2, r0
 800baf0:	4638      	mov	r0, r7
 800baf2:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 800baf4:	2001      	movs	r0, #1
  }
  return kTfLiteOk;
}
 800baf6:	b061      	add	sp, #388	@ 0x184
 800baf8:	ecbd 8b02 	vpop	{d8}
 800bafc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  op_params.filter_height = params->filter_height;
 800bb00:	6933      	ldr	r3, [r6, #16]
 800bb02:	9309      	str	r3, [sp, #36]	@ 0x24
  op_params.filter_width = params->filter_width;
 800bb04:	68f3      	ldr	r3, [r6, #12]
 800bb06:	930a      	str	r3, [sp, #40]	@ 0x28
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 800bb08:	4621      	mov	r1, r4
  op_params.padding_values.width = data.padding.width;
 800bb0a:	f9b5 3000 	ldrsh.w	r3, [r5]
  op_params.stride_height = params->stride_height;
 800bb0e:	f8d6 9008 	ldr.w	r9, [r6, #8]
  op_params.stride_width = params->stride_width;
 800bb12:	f8d6 a004 	ldr.w	sl, [r6, #4]
  op_params.padding_values.height = data.padding.height;
 800bb16:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
  op_params.padding_values.width = data.padding.width;
 800bb1a:	930b      	str	r3, [sp, #44]	@ 0x2c
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 800bb1c:	a842      	add	r0, sp, #264	@ 0x108
  op_params.quantized_activation_max = data.activation_max;
 800bb1e:	e9d5 6505 	ldrd	r6, r5, [r5, #20]
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 800bb22:	f7fa feaf 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bb26:	6823      	ldr	r3, [r4, #0]
                         tflite::micro::GetTensorShape(output),
 800bb28:	9c05      	ldr	r4, [sp, #20]
 800bb2a:	930c      	str	r3, [sp, #48]	@ 0x30
 800bb2c:	4621      	mov	r1, r4
 800bb2e:	a848      	add	r0, sp, #288	@ 0x120
 800bb30:	f7fa fea8 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800bb34:	b10c      	cbz	r4, 800bb3a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x96>
 800bb36:	6823      	ldr	r3, [r4, #0]
 800bb38:	9305      	str	r3, [sp, #20]
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8_t* input_data, const RuntimeShape& output_shape,
                    uint8_t* output_data) {
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 800bb3a:	42ae      	cmp	r6, r5
 800bb3c:	f300 8304 	bgt.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
 800bb40:	2e00      	cmp	r6, #0
 800bb42:	f2c0 8301 	blt.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
 800bb46:	2dff      	cmp	r5, #255	@ 0xff
 800bb48:	f300 82fe 	bgt.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800bb4c:	9842      	ldr	r0, [sp, #264]	@ 0x108
 800bb4e:	2804      	cmp	r0, #4
 800bb50:	f040 82fa 	bne.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800bb54:	9b48      	ldr	r3, [sp, #288]	@ 0x120
 800bb56:	2b04      	cmp	r3, #4
 800bb58:	f040 82f6 	bne.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800bb5c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800bb5e:	9a49      	ldr	r2, [sp, #292]	@ 0x124
 800bb60:	429a      	cmp	r2, r3
 800bb62:	f040 82f1 	bne.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800bb66:	9a46      	ldr	r2, [sp, #280]	@ 0x118
 800bb68:	9208      	str	r2, [sp, #32]
 800bb6a:	4611      	mov	r1, r2
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800bb6c:	9a4c      	ldr	r2, [sp, #304]	@ 0x130
 800bb6e:	428a      	cmp	r2, r1
 800bb70:	f040 82ea 	bne.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800bb74:	9a44      	ldr	r2, [sp, #272]	@ 0x110
 800bb76:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb78:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bb7a:	920d      	str	r2, [sp, #52]	@ 0x34
 800bb7c:	e9dd 124a 	ldrd	r1, r2, [sp, #296]	@ 0x128
  const int input_width = input_shape.Dims(2);
  const int output_height = output_shape.Dims(1);
  const int output_width = output_shape.Dims(2);
  const int stride_height = params.stride_height;
  const int stride_width = params.stride_width;
  for (int batch = 0; batch < batches; ++batch) {
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	4614      	mov	r4, r2
 800bb84:	f340 8102 	ble.w	800bd8c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800bb88:	2900      	cmp	r1, #0
 800bb8a:	f340 80f9 	ble.w	800bd80 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2dc>
 800bb8e:	b2f2      	uxtb	r2, r6
 800bb90:	9217      	str	r2, [sp, #92]	@ 0x5c
 800bb92:	b2ea      	uxtb	r2, r5
  for (int batch = 0; batch < batches; ++batch) {
 800bb94:	2000      	movs	r0, #0
 800bb96:	9218      	str	r2, [sp, #96]	@ 0x60
 800bb98:	427a      	negs	r2, r7
 800bb9a:	463d      	mov	r5, r7
 800bb9c:	46a0      	mov	r8, r4
 800bb9e:	4683      	mov	fp, r0
 800bba0:	461c      	mov	r4, r3
 800bba2:	4610      	mov	r0, r2
 800bba4:	460f      	mov	r7, r1
 800bba6:	4653      	mov	r3, sl
 800bba8:	464a      	mov	r2, r9
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800bbaa:	f04f 0a00 	mov.w	sl, #0
 800bbae:	e9cd 5419 	strd	r5, r4, [sp, #100]	@ 0x64
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	4684      	mov	ip, r0
 800bbb6:	4654      	mov	r4, sl
 800bbb8:	46de      	mov	lr, fp
 800bbba:	4606      	mov	r6, r0
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800bbbc:	f1b8 0f00 	cmp.w	r8, #0
 800bbc0:	f340 80c7 	ble.w	800bd52 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2ae>
 800bbc4:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800bbc6:	971d      	str	r7, [sp, #116]	@ 0x74
 800bbc8:	1845      	adds	r5, r0, r1
 800bbca:	4628      	mov	r0, r5
 800bbcc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800bbce:	42a8      	cmp	r0, r5
 800bbd0:	bfa8      	it	ge
 800bbd2:	4628      	movge	r0, r5
      if (__a < __b)
 800bbd4:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 800bbd8:	9007      	str	r0, [sp, #28]
 800bbda:	9514      	str	r5, [sp, #80]	@ 0x50
 800bbdc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800bbde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bbe0:	9506      	str	r5, [sp, #24]
 800bbe2:	eb00 0b05 	add.w	fp, r0, r5
 800bbe6:	9807      	ldr	r0, [sp, #28]
 800bbe8:	4460      	add	r0, ip
 800bbea:	e9cd 121b 	strd	r1, r2, [sp, #108]	@ 0x6c
 800bbee:	9016      	str	r0, [sp, #88]	@ 0x58
 800bbf0:	4637      	mov	r7, r6
 800bbf2:	f1c5 0900 	rsb	r9, r5, #0
 800bbf6:	f04f 0a00 	mov.w	sl, #0
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	4659      	mov	r1, fp
 800bbfe:	4666      	mov	r6, ip
        for (int channel = 0; channel < depth; ++channel) {
 800bc00:	9a08      	ldr	r2, [sp, #32]
 800bc02:	2a00      	cmp	r2, #0
 800bc04:	f340 8095 	ble.w	800bd32 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x28e>
 800bc08:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bc0a:	428a      	cmp	r2, r1
 800bc0c:	bfa8      	it	ge
 800bc0e:	460a      	movge	r2, r1
 800bc10:	ea25 74e5 	bic.w	r4, r5, r5, asr #31
 800bc14:	9213      	str	r2, [sp, #76]	@ 0x4c
 800bc16:	444a      	add	r2, r9
 800bc18:	e9cd 381e 	strd	r3, r8, [sp, #120]	@ 0x78
 800bc1c:	9406      	str	r4, [sp, #24]
 800bc1e:	f04f 0b00 	mov.w	fp, #0
 800bc22:	9215      	str	r2, [sp, #84]	@ 0x54
 800bc24:	46ac      	mov	ip, r5
 800bc26:	4688      	mov	r8, r1
 800bc28:	463c      	mov	r4, r7
              std::min(params.filter_width, input_width - in_x_origin);
          const int filter_y_start = std::max(0, -in_y_origin);
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
          uint8_t max = 0;
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800bc2a:	9b07      	ldr	r3, [sp, #28]
 800bc2c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800bc2e:	4293      	cmp	r3, r2
 800bc30:	f340 827c 	ble.w	800c12c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x688>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800bc34:	9b44      	ldr	r3, [sp, #272]	@ 0x110
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800bc36:	9f45      	ldr	r7, [sp, #276]	@ 0x114
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800bc38:	9311      	str	r3, [sp, #68]	@ 0x44
 800bc3a:	fb03 630e 	mla	r3, r3, lr, r6
 800bc3e:	9906      	ldr	r1, [sp, #24]
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800bc40:	9d46      	ldr	r5, [sp, #280]	@ 0x118
 800bc42:	4413      	add	r3, r2
 800bc44:	fb07 9303 	mla	r3, r7, r3, r9
 800bc48:	440b      	add	r3, r1
 800bc4a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800bc4c:	fb05 b303 	mla	r3, r5, r3, fp
 800bc50:	440b      	add	r3, r1
  inline int32_t DimensionsCount() const { return size_; }
 800bc52:	9942      	ldr	r1, [sp, #264]	@ 0x108
 800bc54:	910f      	str	r1, [sp, #60]	@ 0x3c
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800bc56:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 800bc58:	9110      	str	r1, [sp, #64]	@ 0x40
 800bc5a:	fb05 f107 	mul.w	r1, r5, r7
 800bc5e:	e9cd 6a20 	strd	r6, sl, [sp, #128]	@ 0x80
 800bc62:	9112      	str	r1, [sp, #72]	@ 0x48
 800bc64:	4682      	mov	sl, r0
 800bc66:	1991      	adds	r1, r2, r6
          uint8_t max = 0;
 800bc68:	2200      	movs	r2, #0
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800bc6a:	9806      	ldr	r0, [sp, #24]
 800bc6c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bc6e:	42b0      	cmp	r0, r6
 800bc70:	da25      	bge.n	800bcbe <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x21a>
 800bc72:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 800bc74:	2804      	cmp	r0, #4
 800bc76:	f040 8267 	bne.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
 800bc7a:	455d      	cmp	r5, fp
 800bc7c:	f340 8264 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
 800bc80:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800bc82:	4288      	cmp	r0, r1
 800bc84:	f340 8260 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
 800bc88:	2900      	cmp	r1, #0
 800bc8a:	f2c0 825d 	blt.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
 800bc8e:	9806      	ldr	r0, [sp, #24]
 800bc90:	9322      	str	r3, [sp, #136]	@ 0x88
 800bc92:	4448      	add	r0, r9
 800bc94:	461e      	mov	r6, r3
 800bc96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800bc98:	4573      	cmp	r3, lr
 800bc9a:	f340 8255 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800bc9e:	2800      	cmp	r0, #0
 800bca0:	f2c0 8252 	blt.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
 800bca4:	42b8      	cmp	r0, r7
 800bca6:	f280 824f 	bge.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
    max(const _Tp& __a, const _Tp& __b)
 800bcaa:	7833      	ldrb	r3, [r6, #0]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	bf38      	it	cc
 800bcb0:	461a      	movcc	r2, r3
 800bcb2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bcb4:	3001      	adds	r0, #1
 800bcb6:	4298      	cmp	r0, r3
 800bcb8:	442e      	add	r6, r5
 800bcba:	d1ec      	bne.n	800bc96 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1f2>
 800bcbc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800bcbe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800bcc0:	4403      	add	r3, r0
 800bcc2:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800bcc4:	3101      	adds	r1, #1
 800bcc6:	4288      	cmp	r0, r1
 800bcc8:	d1cf      	bne.n	800bc6a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x1c6>
 800bcca:	4650      	mov	r0, sl
 800bccc:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bcce:	f8dd a084 	ldr.w	sl, [sp, #132]	@ 0x84
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
            }
          }
          max = std::max<uint8_t>(max, params.quantized_activation_min);
          max = std::min<uint8_t>(max, params.quantized_activation_max);
 800bcd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bcd4:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800bcd6:	429a      	cmp	r2, r3
 800bcd8:	bf38      	it	cc
 800bcda:	461a      	movcc	r2, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800bcdc:	9b48      	ldr	r3, [sp, #288]	@ 0x120
 800bcde:	4295      	cmp	r5, r2
 800bce0:	bf28      	it	cs
 800bce2:	4615      	movcs	r5, r2
 800bce4:	2b04      	cmp	r3, #4
 800bce6:	f040 822f 	bne.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800bcea:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 800bcec:	4573      	cmp	r3, lr
 800bcee:	f340 822b 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800bcf2:	9b4a      	ldr	r3, [sp, #296]	@ 0x128
 800bcf4:	4283      	cmp	r3, r0
 800bcf6:	f340 8227 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800bcfa:	994b      	ldr	r1, [sp, #300]	@ 0x12c
 800bcfc:	4551      	cmp	r1, sl
 800bcfe:	f340 8223 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800bd02:	9a4c      	ldr	r2, [sp, #304]	@ 0x130
 800bd04:	455a      	cmp	r2, fp
 800bd06:	f340 821f 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800bd0a:	fb0e 0303 	mla	r3, lr, r3, r0
 800bd0e:	fb01 a303 	mla	r3, r1, r3, sl
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 800bd12:	9905      	ldr	r1, [sp, #20]
 800bd14:	fb02 1303 	mla	r3, r2, r3, r1
 800bd18:	f803 500b 	strb.w	r5, [r3, fp]
        for (int channel = 0; channel < depth; ++channel) {
 800bd1c:	9b08      	ldr	r3, [sp, #32]
 800bd1e:	f10b 0b01 	add.w	fp, fp, #1
 800bd22:	459b      	cmp	fp, r3
 800bd24:	d181      	bne.n	800bc2a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x186>
 800bd26:	4641      	mov	r1, r8
 800bd28:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800bd2a:	f8dd 807c 	ldr.w	r8, [sp, #124]	@ 0x7c
 800bd2e:	4665      	mov	r5, ip
 800bd30:	4627      	mov	r7, r4
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800bd32:	f10a 0a01 	add.w	sl, sl, #1
 800bd36:	45c2      	cmp	sl, r8
 800bd38:	eba5 0503 	sub.w	r5, r5, r3
 800bd3c:	eba1 0103 	sub.w	r1, r1, r3
 800bd40:	4499      	add	r9, r3
 800bd42:	f47f af5d 	bne.w	800bc00 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x15c>
 800bd46:	46b4      	mov	ip, r6
 800bd48:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800bd4a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800bd4c:	463e      	mov	r6, r7
 800bd4e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 800bd50:	4604      	mov	r4, r0
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800bd52:	3401      	adds	r4, #1
 800bd54:	42bc      	cmp	r4, r7
 800bd56:	eba1 0102 	sub.w	r1, r1, r2
 800bd5a:	4494      	add	ip, r2
 800bd5c:	f47f af2e 	bne.w	800bbbc <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x118>
  for (int batch = 0; batch < batches; ++batch) {
 800bd60:	e9dd 5419 	ldrd	r5, r4, [sp, #100]	@ 0x64
 800bd64:	f10e 0b01 	add.w	fp, lr, #1
 800bd68:	455c      	cmp	r4, fp
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	f47f af1d 	bne.w	800bbaa <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x106>
    if (size_ > kMaxSmallSize) {
 800bd70:	9b48      	ldr	r3, [sp, #288]	@ 0x120
 800bd72:	2b05      	cmp	r3, #5
 800bd74:	dd03      	ble.n	800bd7e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2da>
      delete[] dims_pointer_;
 800bd76:	9849      	ldr	r0, [sp, #292]	@ 0x124
 800bd78:	b108      	cbz	r0, 800bd7e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2da>
 800bd7a:	f004 fdcb 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800bd7e:	9842      	ldr	r0, [sp, #264]	@ 0x108
 800bd80:	2805      	cmp	r0, #5
 800bd82:	dd03      	ble.n	800bd8c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
      delete[] dims_pointer_;
 800bd84:	9843      	ldr	r0, [sp, #268]	@ 0x10c
 800bd86:	b108      	cbz	r0, 800bd8c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
 800bd88:	f004 fdc4 	bl	8010914 <_ZdaPv>
  return kTfLiteOk;
 800bd8c:	2000      	movs	r0, #0
}
 800bd8e:	b061      	add	sp, #388	@ 0x184
 800bd90:	ecbd 8b02 	vpop	{d8}
 800bd94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd98:	0801717c 	.word	0x0801717c
 800bd9c:	7f7fffff 	.word	0x7f7fffff
 800bda0:	ff7fffff 	.word	0xff7fffff
  CalculateActivationRange(params->activation, &activation_min,
 800bda4:	7d33      	ldrb	r3, [r6, #20]
  if (activation == kTfLiteActRelu) {
 800bda6:	2b01      	cmp	r3, #1
 800bda8:	f000 81d5 	beq.w	800c156 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6b2>
  } else if (activation == kTfLiteActRelu6) {
 800bdac:	2b03      	cmp	r3, #3
 800bdae:	f000 81cd 	beq.w	800c14c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a8>
    *activation_max = 1;
 800bdb2:	ed5f 8a06 	vldr	s17, [pc, #-24]	@ 800bd9c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2f8>
 800bdb6:	ed1f 8a06 	vldr	s16, [pc, #-24]	@ 800bda0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2fc>
 800bdba:	2b02      	cmp	r3, #2
 800bdbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bdc0:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800bdc4:	bf08      	it	eq
 800bdc6:	eef0 8a47 	vmoveq.f32	s17, s14
 800bdca:	bf08      	it	eq
 800bdcc:	eeb0 8a67 	vmoveq.f32	s16, s15
  op_params.stride_height = params->stride_height;
 800bdd0:	68b3      	ldr	r3, [r6, #8]
 800bdd2:	9315      	str	r3, [sp, #84]	@ 0x54
  op_params.stride_width = params->stride_width;
 800bdd4:	6873      	ldr	r3, [r6, #4]
 800bdd6:	9316      	str	r3, [sp, #88]	@ 0x58
  op_params.filter_height = params->filter_height;
 800bdd8:	6933      	ldr	r3, [r6, #16]
 800bdda:	9317      	str	r3, [sp, #92]	@ 0x5c
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 800bddc:	4621      	mov	r1, r4
  op_params.filter_width = params->filter_width;
 800bdde:	68f3      	ldr	r3, [r6, #12]
 800bde0:	9318      	str	r3, [sp, #96]	@ 0x60
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 800bde2:	a836      	add	r0, sp, #216	@ 0xd8
  op_params.padding_values.height = data.padding.height;
 800bde4:	f9b5 7004 	ldrsh.w	r7, [r5, #4]
  op_params.padding_values.width = data.padding.width;
 800bde8:	f9b5 8000 	ldrsh.w	r8, [r5]
  reference_ops::MaxPool(op_params, tflite::micro::GetTensorShape(input),
 800bdec:	f7fa fd4a 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800bdf0:	6823      	ldr	r3, [r4, #0]
                         tflite::micro::GetTensorShape(output),
 800bdf2:	9c05      	ldr	r4, [sp, #20]
 800bdf4:	9319      	str	r3, [sp, #100]	@ 0x64
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	a83c      	add	r0, sp, #240	@ 0xf0
 800bdfa:	f7fa fd43 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800bdfe:	b10c      	cbz	r4, 800be04 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x360>
 800be00:	6823      	ldr	r3, [r4, #0]
 800be02:	9305      	str	r3, [sp, #20]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800be04:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800be06:	2b04      	cmp	r3, #4
 800be08:	f040 819e 	bne.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800be0c:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800be0e:	2b04      	cmp	r3, #4
 800be10:	f040 819a 	bne.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800be14:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 800be16:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800be18:	9210      	str	r2, [sp, #64]	@ 0x40
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800be1a:	4293      	cmp	r3, r2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800be1c:	931b      	str	r3, [sp, #108]	@ 0x6c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800be1e:	f040 8193 	bne.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800be22:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 800be24:	f8dd a100 	ldr.w	sl, [sp, #256]	@ 0x100
 800be28:	920b      	str	r2, [sp, #44]	@ 0x2c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800be2a:	4592      	cmp	sl, r2
 800be2c:	f040 818c 	bne.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800be30:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 800be32:	9839      	ldr	r0, [sp, #228]	@ 0xe4
 800be34:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 800be36:	920a      	str	r2, [sp, #40]	@ 0x28
  for (int batch = 0; batch < batches; ++batch) {
 800be38:	2b00      	cmp	r3, #0
 800be3a:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 800be3c:	900f      	str	r0, [sp, #60]	@ 0x3c
 800be3e:	9209      	str	r2, [sp, #36]	@ 0x24
 800be40:	9108      	str	r1, [sp, #32]
 800be42:	dda3      	ble.n	800bd8c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
 800be44:	fb01 f202 	mul.w	r2, r1, r2
 800be48:	fb0a fc02 	mul.w	ip, sl, r2
 800be4c:	fb0a f200 	mul.w	r2, sl, r0
 800be50:	0092      	lsls	r2, r2, #2
 800be52:	2300      	movs	r3, #0
 800be54:	fb01 fe0a 	mul.w	lr, r1, sl
 800be58:	921d      	str	r2, [sp, #116]	@ 0x74
 800be5a:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800be5e:	f8cd a07c 	str.w	sl, [sp, #124]	@ 0x7c
 800be62:	920c      	str	r2, [sp, #48]	@ 0x30
 800be64:	4619      	mov	r1, r3
 800be66:	461e      	mov	r6, r3
 800be68:	46f2      	mov	sl, lr
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800be6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be6c:	2a00      	cmp	r2, #0
 800be6e:	f340 80e7 	ble.w	800c040 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x59c>
 800be72:	427a      	negs	r2, r7
 800be74:	9206      	str	r2, [sp, #24]
 800be76:	2200      	movs	r2, #0
 800be78:	46b9      	mov	r9, r7
 800be7a:	9207      	str	r2, [sp, #28]
 800be7c:	9720      	str	r7, [sp, #128]	@ 0x80
 800be7e:	4634      	mov	r4, r6
 800be80:	9121      	str	r1, [sp, #132]	@ 0x84
 800be82:	910d      	str	r1, [sp, #52]	@ 0x34
 800be84:	46d6      	mov	lr, sl
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800be86:	9a08      	ldr	r2, [sp, #32]
 800be88:	2a00      	cmp	r2, #0
 800be8a:	f340 80c5 	ble.w	800c018 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x574>
 800be8e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800be90:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800be92:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800be94:	4449      	add	r1, r9
 800be96:	42a9      	cmp	r1, r5
 800be98:	4608      	mov	r0, r1
 800be9a:	bfa8      	it	ge
 800be9c:	4628      	movge	r0, r5
 800be9e:	9d06      	ldr	r5, [sp, #24]
 800bea0:	901c      	str	r0, [sp, #112]	@ 0x70
      if (__a < __b)
 800bea2:	ea29 72e9 	bic.w	r2, r9, r9, asr #31
 800bea6:	18e9      	adds	r1, r5, r3
 800bea8:	4411      	add	r1, r2
 800beaa:	9213      	str	r2, [sp, #76]	@ 0x4c
 800beac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800beae:	fb02 f101 	mul.w	r1, r2, r1
 800beb2:	911a      	str	r1, [sp, #104]	@ 0x68
 800beb4:	e9cd 8c22 	strd	r8, ip, [sp, #136]	@ 0x88
 800beb8:	9905      	ldr	r1, [sp, #20]
 800beba:	eb08 0a02 	add.w	sl, r8, r2
 800bebe:	1942      	adds	r2, r0, r5
 800bec0:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800bec4:	f1c8 0b00 	rsb	fp, r8, #0
 800bec8:	4646      	mov	r6, r8
 800beca:	2700      	movs	r7, #0
 800becc:	921e      	str	r2, [sp, #120]	@ 0x78
 800bece:	4618      	mov	r0, r3
        for (int channel = 0; channel < depth; ++channel) {
 800bed0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	f340 8091 	ble.w	800bffa <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x556>
 800bed8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800beda:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800bedc:	f8cd 9090 	str.w	r9, [sp, #144]	@ 0x90
 800bee0:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
 800bee4:	445b      	add	r3, fp
 800bee6:	9211      	str	r2, [sp, #68]	@ 0x44
 800bee8:	4413      	add	r3, r2
 800beea:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800beec:	910e      	str	r1, [sp, #56]	@ 0x38
 800beee:	fb02 5303 	mla	r3, r2, r3, r5
 800bef2:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800bef4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800bef6:	4555      	cmp	r5, sl
 800bef8:	bfa8      	it	ge
 800befa:	4655      	movge	r5, sl
 800befc:	445a      	add	r2, fp
 800befe:	f04f 0c00 	mov.w	ip, #0
 800bf02:	9512      	str	r5, [sp, #72]	@ 0x48
 800bf04:	9214      	str	r2, [sp, #80]	@ 0x50
 800bf06:	46b0      	mov	r8, r6
              std::min(params.filter_width, input_width - in_x_origin);
 800bf08:	460d      	mov	r5, r1
 800bf0a:	4662      	mov	r2, ip
 800bf0c:	4606      	mov	r6, r0
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800bf0e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800bf10:	991c      	ldr	r1, [sp, #112]	@ 0x70
          float max = std::numeric_limits<float>::lowest();
 800bf12:	ed5f 7a5d 	vldr	s15, [pc, #-372]	@ 800bda0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2fc>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800bf16:	4288      	cmp	r0, r1
 800bf18:	da42      	bge.n	800bfa0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x4fc>
 800bf1a:	9906      	ldr	r1, [sp, #24]
 800bf1c:	e9cd 5725 	strd	r5, r7, [sp, #148]	@ 0x94
 800bf20:	1808      	adds	r0, r1, r0
 800bf22:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bf24:	469c      	mov	ip, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800bf26:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	@ 0x44
 800bf2a:	42bd      	cmp	r5, r7
 800bf2c:	da2f      	bge.n	800bf8e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x4ea>
 800bf2e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800bf30:	42a5      	cmp	r5, r4
 800bf32:	f340 8109 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
 800bf36:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bf38:	4295      	cmp	r5, r2
 800bf3a:	f340 8105 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
 800bf3e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800bf40:	4285      	cmp	r5, r0
 800bf42:	f340 8101 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
 800bf46:	2800      	cmp	r0, #0
 800bf48:	f2c0 80fe 	blt.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
 800bf4c:	9d14      	ldr	r5, [sp, #80]	@ 0x50
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800bf4e:	2d00      	cmp	r5, #0
 800bf50:	46a9      	mov	r9, r5
 800bf52:	f2c0 80f9 	blt.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
 800bf56:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 800bf58:	9327      	str	r3, [sp, #156]	@ 0x9c
 800bf5a:	445f      	add	r7, fp
 800bf5c:	970e      	str	r7, [sp, #56]	@ 0x38
 800bf5e:	4667      	mov	r7, ip
 800bf60:	e000      	b.n	800bf64 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x4c0>
 800bf62:	46a9      	mov	r9, r5
 800bf64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf66:	454b      	cmp	r3, r9
 800bf68:	f340 80ee 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
 800bf6c:	ed97 7a00 	vldr	s14, [r7]
 800bf70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bf72:	eeb4 7a67 	vcmp.f32	s14, s15
 800bf76:	441f      	add	r7, r3
 800bf78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf7e:	f105 0501 	add.w	r5, r5, #1
 800bf82:	bfc8      	it	gt
 800bf84:	eef0 7a47 	vmovgt.f32	s15, s14
 800bf88:	42ab      	cmp	r3, r5
 800bf8a:	d1ea      	bne.n	800bf62 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x4be>
 800bf8c:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800bf8e:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 800bf90:	44ac      	add	ip, r5
 800bf92:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
 800bf94:	3001      	adds	r0, #1
 800bf96:	4285      	cmp	r5, r0
 800bf98:	d1c5      	bne.n	800bf26 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x482>
 800bf9a:	e9dd 5725 	ldrd	r5, r7, [sp, #148]	@ 0x94
 800bf9e:	910e      	str	r1, [sp, #56]	@ 0x38
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800bfa0:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 800bfa2:	42a1      	cmp	r1, r4
 800bfa4:	f340 80d0 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800bfa8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bfaa:	9807      	ldr	r0, [sp, #28]
 800bfac:	4281      	cmp	r1, r0
 800bfae:	f340 80cb 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800bfb2:	9908      	ldr	r1, [sp, #32]
 800bfb4:	42b9      	cmp	r1, r7
 800bfb6:	f340 80c7 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800bfba:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 800bfbc:	4291      	cmp	r1, r2
 800bfbe:	f340 80c3 	ble.w	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
	return __b;
 800bfc2:	eef4 7a48 	vcmp.f32	s15, s16
 800bfc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfca:	bf48      	it	mi
 800bfcc:	eef0 7a48 	vmovmi.f32	s15, s16
	return __b;
 800bfd0:	eef4 7a68 	vcmp.f32	s15, s17
        for (int channel = 0; channel < depth; ++channel) {
 800bfd4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bfd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfda:	f102 0201 	add.w	r2, r2, #1
 800bfde:	bfc8      	it	gt
 800bfe0:	eef0 7a68 	vmovgt.f32	s15, s17
 800bfe4:	428a      	cmp	r2, r1
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 800bfe6:	ece5 7a01 	vstmia	r5!, {s15}
        for (int channel = 0; channel < depth; ++channel) {
 800bfea:	f103 0304 	add.w	r3, r3, #4
 800bfee:	d18e      	bne.n	800bf0e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x46a>
 800bff0:	f8dd 9090 	ldr.w	r9, [sp, #144]	@ 0x90
 800bff4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800bff6:	4630      	mov	r0, r6
 800bff8:	4646      	mov	r6, r8
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800bffa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800bffc:	4419      	add	r1, r3
 800bffe:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c000:	1af6      	subs	r6, r6, r3
 800c002:	ebaa 0a03 	sub.w	sl, sl, r3
 800c006:	449b      	add	fp, r3
 800c008:	9b08      	ldr	r3, [sp, #32]
 800c00a:	3701      	adds	r7, #1
 800c00c:	429f      	cmp	r7, r3
 800c00e:	f47f af5f 	bne.w	800bed0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x42c>
 800c012:	e9dd 8c22 	ldrd	r8, ip, [sp, #136]	@ 0x88
 800c016:	4603      	mov	r3, r0
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c018:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800c01a:	9806      	ldr	r0, [sp, #24]
 800c01c:	9a07      	ldr	r2, [sp, #28]
 800c01e:	4471      	add	r1, lr
 800c020:	910d      	str	r1, [sp, #52]	@ 0x34
 800c022:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800c024:	4408      	add	r0, r1
 800c026:	eba9 0901 	sub.w	r9, r9, r1
 800c02a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c02c:	9006      	str	r0, [sp, #24]
 800c02e:	3201      	adds	r2, #1
 800c030:	428a      	cmp	r2, r1
 800c032:	9207      	str	r2, [sp, #28]
 800c034:	f47f af27 	bne.w	800be86 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3e2>
 800c038:	9f20      	ldr	r7, [sp, #128]	@ 0x80
 800c03a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c03c:	4626      	mov	r6, r4
 800c03e:	46f2      	mov	sl, lr
  for (int batch = 0; batch < batches; ++batch) {
 800c040:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c042:	4413      	add	r3, r2
 800c044:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c046:	3601      	adds	r6, #1
 800c048:	4296      	cmp	r6, r2
 800c04a:	4461      	add	r1, ip
 800c04c:	f47f af0d 	bne.w	800be6a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x3c6>
  return kTfLiteOk;
 800c050:	2000      	movs	r0, #0
 800c052:	e69c      	b.n	800bd8e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2ea>
  RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 800c054:	a84e      	add	r0, sp, #312	@ 0x138
 800c056:	4621      	mov	r1, r4
 800c058:	f7fa fc14 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 800c05c:	a854      	add	r0, sp, #336	@ 0x150
 800c05e:	9905      	ldr	r1, [sp, #20]
 800c060:	f7fa fc10 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_LT(i, size_);
 800c064:	984e      	ldr	r0, [sp, #312]	@ 0x138
 800c066:	2803      	cmp	r0, #3
 800c068:	dd6e      	ble.n	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c06a:	2805      	cmp	r0, #5
 800c06c:	bfc8      	it	gt
 800c06e:	9b4f      	ldrgt	r3, [sp, #316]	@ 0x13c
    TFLITE_DCHECK_LT(i, size_);
 800c070:	9a54      	ldr	r2, [sp, #336]	@ 0x150
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c072:	bfcc      	ite	gt
 800c074:	68db      	ldrgt	r3, [r3, #12]
 800c076:	9b52      	ldrle	r3, [sp, #328]	@ 0x148
    TFLITE_DCHECK_LT(i, size_);
 800c078:	2a03      	cmp	r2, #3
 800c07a:	dd65      	ble.n	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c07c:	2a05      	cmp	r2, #5
 800c07e:	dc5f      	bgt.n	800c140 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x69c>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c080:	9958      	ldr	r1, [sp, #352]	@ 0x160
 800c082:	4299      	cmp	r1, r3
 800c084:	d160      	bne.n	800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
  input_dims.n = 1;
 800c086:	2101      	movs	r1, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c088:	2805      	cmp	r0, #5
 800c08a:	912a      	str	r1, [sp, #168]	@ 0xa8
 800c08c:	dd54      	ble.n	800c138 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x694>
 800c08e:	984f      	ldr	r0, [sp, #316]	@ 0x13c
 800c090:	6841      	ldr	r1, [r0, #4]
  input_dims.h = input_shape.Dims(1);
 800c092:	912b      	str	r1, [sp, #172]	@ 0xac
 800c094:	6881      	ldr	r1, [r0, #8]
  input_dims.c = depth;
 800c096:	e9cd 132c 	strd	r1, r3, [sp, #176]	@ 0xb0
 800c09a:	2a05      	cmp	r2, #5
  output_dims.n = 1;
 800c09c:	f04f 0101 	mov.w	r1, #1
 800c0a0:	912e      	str	r1, [sp, #184]	@ 0xb8
 800c0a2:	dd45      	ble.n	800c130 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x68c>
 800c0a4:	9a55      	ldr	r2, [sp, #340]	@ 0x154
 800c0a6:	6851      	ldr	r1, [r2, #4]
 800c0a8:	6892      	ldr	r2, [r2, #8]
  output_dims.h = output_shape.Dims(1);
 800c0aa:	912f      	str	r1, [sp, #188]	@ 0xbc
  output_dims.c = depth;
 800c0ac:	e9cd 2330 	strd	r2, r3, [sp, #192]	@ 0xc0
  pool_params.stride.w = params->stride_width;
 800c0b0:	6873      	ldr	r3, [r6, #4]
 800c0b2:	935a      	str	r3, [sp, #360]	@ 0x168
 800c0b4:	68b3      	ldr	r3, [r6, #8]
 800c0b6:	935b      	str	r3, [sp, #364]	@ 0x16c
  pool_params.padding.w = data.padding.width;
 800c0b8:	e9d5 3200 	ldrd	r3, r2, [r5]
 800c0bc:	e9cd 325c 	strd	r3, r2, [sp, #368]	@ 0x170
 800c0c0:	696b      	ldr	r3, [r5, #20]
  if (data.buffer_idx > -1) {
 800c0c2:	6929      	ldr	r1, [r5, #16]
  pool_params.padding.w = data.padding.width;
 800c0c4:	935e      	str	r3, [sp, #376]	@ 0x178
 800c0c6:	69ab      	ldr	r3, [r5, #24]
 800c0c8:	935f      	str	r3, [sp, #380]	@ 0x17c
  filter_dims.w = params->filter_width;
 800c0ca:	68f3      	ldr	r3, [r6, #12]
 800c0cc:	9334      	str	r3, [sp, #208]	@ 0xd0
  filter_dims.h = params->filter_height;
 800c0ce:	6933      	ldr	r3, [r6, #16]
 800c0d0:	9333      	str	r3, [sp, #204]	@ 0xcc
  filter_dims.n = 1;
 800c0d2:	2301      	movs	r3, #1
 800c0d4:	9332      	str	r3, [sp, #200]	@ 0xc8
  filter_dims.c = 1;
 800c0d6:	9335      	str	r3, [sp, #212]	@ 0xd4
  ctx.buf = nullptr;
 800c0d8:	2300      	movs	r3, #0
  if (data.buffer_idx > -1) {
 800c0da:	4299      	cmp	r1, r3
  ctx.size = 0;
 800c0dc:	e9cd 3328 	strd	r3, r3, [sp, #160]	@ 0xa0
  if (data.buffer_idx > -1) {
 800c0e0:	db03      	blt.n	800c0ea <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x646>
    ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 800c0e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c0e4:	4638      	mov	r0, r7
 800c0e6:	4798      	blx	r3
 800c0e8:	9028      	str	r0, [sp, #160]	@ 0xa0
 800c0ea:	9a05      	ldr	r2, [sp, #20]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800c0ec:	6823      	ldr	r3, [r4, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800c0ee:	b10a      	cbz	r2, 800c0f4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x650>
 800c0f0:	6812      	ldr	r2, [r2, #0]
 800c0f2:	9205      	str	r2, [sp, #20]
  TFLITE_DCHECK_EQ(
 800c0f4:	9805      	ldr	r0, [sp, #20]
 800c0f6:	a92e      	add	r1, sp, #184	@ 0xb8
 800c0f8:	aa32      	add	r2, sp, #200	@ 0xc8
 800c0fa:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800c0fe:	9200      	str	r2, [sp, #0]
 800c100:	a95a      	add	r1, sp, #360	@ 0x168
 800c102:	aa2a      	add	r2, sp, #168	@ 0xa8
 800c104:	a828      	add	r0, sp, #160	@ 0xa0
 800c106:	f003 fd21 	bl	800fb4c <arm_max_pool_s8>
 800c10a:	b9e8      	cbnz	r0, 800c148 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6a4>
    if (size_ > kMaxSmallSize) {
 800c10c:	9b54      	ldr	r3, [sp, #336]	@ 0x150
 800c10e:	2b05      	cmp	r3, #5
 800c110:	dd03      	ble.n	800c11a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x676>
      delete[] dims_pointer_;
 800c112:	9855      	ldr	r0, [sp, #340]	@ 0x154
 800c114:	b108      	cbz	r0, 800c11a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x676>
 800c116:	f004 fbfd 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800c11a:	9b4e      	ldr	r3, [sp, #312]	@ 0x138
 800c11c:	2b05      	cmp	r3, #5
 800c11e:	f77f ae35 	ble.w	800bd8c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
      delete[] dims_pointer_;
 800c122:	984f      	ldr	r0, [sp, #316]	@ 0x13c
 800c124:	2800      	cmp	r0, #0
 800c126:	f47f ae2f 	bne.w	800bd88 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e4>
 800c12a:	e62f      	b.n	800bd8c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x2e8>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c12c:	2200      	movs	r2, #0
 800c12e:	e5d0      	b.n	800bcd2 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x22e>
  output_dims.h = output_shape.Dims(1);
 800c130:	9a56      	ldr	r2, [sp, #344]	@ 0x158
 800c132:	922f      	str	r2, [sp, #188]	@ 0xbc
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c134:	9a57      	ldr	r2, [sp, #348]	@ 0x15c
 800c136:	e7b9      	b.n	800c0ac <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x608>
  input_dims.h = input_shape.Dims(1);
 800c138:	9950      	ldr	r1, [sp, #320]	@ 0x140
 800c13a:	912b      	str	r1, [sp, #172]	@ 0xac
 800c13c:	9951      	ldr	r1, [sp, #324]	@ 0x144
    TFLITE_DCHECK_LT(i, size_);
 800c13e:	e7aa      	b.n	800c096 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5f2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c140:	9955      	ldr	r1, [sp, #340]	@ 0x154
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c142:	68c9      	ldr	r1, [r1, #12]
 800c144:	4299      	cmp	r1, r3
 800c146:	d09e      	beq.n	800c086 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e2>
  TFLITE_DCHECK(context != nullptr);
 800c148:	f004 feb8 	bl	8010ebc <abort>
    *activation_min = 0;
 800c14c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800c160 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6bc>
    *activation_max = 6;
 800c150:	eef1 8a08 	vmov.f32	s17, #24	@ 0x40c00000  6.0
 800c154:	e63c      	b.n	800bdd0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x32c>
    *activation_max = std::numeric_limits<T>::max();
 800c156:	eddf 8a03 	vldr	s17, [pc, #12]	@ 800c164 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6c0>
    *activation_min = 0;
 800c15a:	ed9f 8a01 	vldr	s16, [pc, #4]	@ 800c160 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x6bc>
 800c15e:	e637      	b.n	800bdd0 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x32c>
 800c160:	00000000 	.word	0x00000000
 800c164:	7f7fffff 	.word	0x7f7fffff

0800c168 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 800c168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c16c:	ed2d 8b02 	vpush	{d8}
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 800c170:	e9d1 8504 	ldrd	r8, r5, [r1, #16]
TfLiteStatus AverageEval(TfLiteContext* context, TfLiteNode* node) {
 800c174:	b0e1      	sub	sp, #388	@ 0x184
 800c176:	2800      	cmp	r0, #0
 800c178:	f000 835e 	beq.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800c17c:	680b      	ldr	r3, [r1, #0]
 800c17e:	460f      	mov	r7, r1
 800c180:	6859      	ldr	r1, [r3, #4]
 800c182:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800c184:	4606      	mov	r6, r0
 800c186:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800c188:	687b      	ldr	r3, [r7, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800c18a:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800c18c:	6859      	ldr	r1, [r3, #4]
 800c18e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800c190:	4630      	mov	r0, r6
 800c192:	4798      	blx	r3
 800c194:	9005      	str	r0, [sp, #20]
  switch (input->type) {
 800c196:	7a20      	ldrb	r0, [r4, #8]
 800c198:	2803      	cmp	r0, #3
 800c19a:	f000 80a3 	beq.w	800c2e4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x17c>
 800c19e:	2809      	cmp	r0, #9
 800c1a0:	d025      	beq.n	800c1ee <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x86>
 800c1a2:	2801      	cmp	r0, #1
 800c1a4:	d00c      	beq.n	800c1c0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x58>
      TF_LITE_KERNEL_LOG(context, "Input type %s is not currently supported",
 800c1a6:	6974      	ldr	r4, [r6, #20]
 800c1a8:	f7f7 faae 	bl	8003708 <TfLiteTypeGetName>
 800c1ac:	4949      	ldr	r1, [pc, #292]	@ (800c2d4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x16c>)
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	47a0      	blx	r4
      return kTfLiteError;
 800c1b4:	2001      	movs	r0, #1
}
 800c1b6:	b061      	add	sp, #388	@ 0x184
 800c1b8:	ecbd 8b02 	vpop	{d8}
 800c1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  CalculateActivationRange(params->activation, &activation_min,
 800c1c0:	7d2b      	ldrb	r3, [r5, #20]
  if (activation == kTfLiteActRelu) {
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	f000 8332 	beq.w	800c82c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6c4>
  } else if (activation == kTfLiteActRelu6) {
 800c1c8:	2b03      	cmp	r3, #3
 800c1ca:	f000 81e1 	beq.w	800c590 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x428>
    *activation_max = 1;
 800c1ce:	eddf 8a42 	vldr	s17, [pc, #264]	@ 800c2d8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x170>
 800c1d2:	ed9f 8a42 	vldr	s16, [pc, #264]	@ 800c2dc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x174>
 800c1d6:	2b02      	cmp	r3, #2
 800c1d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1dc:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800c1e0:	bf08      	it	eq
 800c1e2:	eef0 8a47 	vmoveq.f32	s17, s14
 800c1e6:	bf08      	it	eq
 800c1e8:	eeb0 8a67 	vmoveq.f32	s16, s15
 800c1ec:	e1d4      	b.n	800c598 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x430>
    RuntimeShape input_shape = tflite::micro::GetTensorShape(input);
 800c1ee:	4621      	mov	r1, r4
 800c1f0:	a842      	add	r0, sp, #264	@ 0x108
 800c1f2:	f7fa fb47 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800c1f6:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 800c1f8:	2b04      	cmp	r3, #4
 800c1fa:	f040 831d 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
    RuntimeShape output_shape = tflite::micro::GetTensorShape(output);
 800c1fe:	9905      	ldr	r1, [sp, #20]
 800c200:	a848      	add	r0, sp, #288	@ 0x120
 800c202:	f7fa fb3f 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
    TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800c206:	9b48      	ldr	r3, [sp, #288]	@ 0x120
 800c208:	2b04      	cmp	r3, #4
 800c20a:	f040 8315 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
    TFLITE_DCHECK_LT(i, size_);
 800c20e:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 800c210:	2b03      	cmp	r3, #3
 800c212:	f340 8311 	ble.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c216:	2b05      	cmp	r3, #5
 800c218:	994c      	ldr	r1, [sp, #304]	@ 0x130
 800c21a:	f340 81af 	ble.w	800c57c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x414>
 800c21e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800c220:	68d3      	ldr	r3, [r2, #12]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c222:	4299      	cmp	r1, r3
 800c224:	f040 8308 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c228:	6851      	ldr	r1, [r2, #4]
    input_dims.h = input_shape.Dims(1);
 800c22a:	912b      	str	r1, [sp, #172]	@ 0xac
 800c22c:	6892      	ldr	r2, [r2, #8]
    input_dims.n = 1;
 800c22e:	2101      	movs	r1, #1
 800c230:	912a      	str	r1, [sp, #168]	@ 0xa8
    input_dims.c = depth;
 800c232:	e9cd 232c 	strd	r2, r3, [sp, #176]	@ 0xb0
    output_dims.c = depth;
 800c236:	9331      	str	r3, [sp, #196]	@ 0xc4
    pool_params.stride.w = params->stride_width;
 800c238:	686b      	ldr	r3, [r5, #4]
    output_dims.h = output_shape.Dims(1);
 800c23a:	9a4a      	ldr	r2, [sp, #296]	@ 0x128
    pool_params.stride.w = params->stride_width;
 800c23c:	934e      	str	r3, [sp, #312]	@ 0x138
 800c23e:	68ab      	ldr	r3, [r5, #8]
 800c240:	934f      	str	r3, [sp, #316]	@ 0x13c
    output_dims.h = output_shape.Dims(1);
 800c242:	922f      	str	r2, [sp, #188]	@ 0xbc
    output_dims.n = 1;
 800c244:	2301      	movs	r3, #1
    output_dims.w = output_shape.Dims(2);
 800c246:	9a4b      	ldr	r2, [sp, #300]	@ 0x12c
    output_dims.n = 1;
 800c248:	932e      	str	r3, [sp, #184]	@ 0xb8
    output_dims.w = output_shape.Dims(2);
 800c24a:	9230      	str	r2, [sp, #192]	@ 0xc0
    pool_params.padding.w = data.padding.width;
 800c24c:	f8d8 0000 	ldr.w	r0, [r8]
 800c250:	f8d8 2004 	ldr.w	r2, [r8, #4]
    if (data.buffer_idx > -1) {
 800c254:	f8d8 1010 	ldr.w	r1, [r8, #16]
    filter_dims.n = 1;
 800c258:	9332      	str	r3, [sp, #200]	@ 0xc8
    pool_params.padding.w = data.padding.width;
 800c25a:	e9cd 0250 	strd	r0, r2, [sp, #320]	@ 0x140
 800c25e:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800c262:	9252      	str	r2, [sp, #328]	@ 0x148
 800c264:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800c268:	9253      	str	r2, [sp, #332]	@ 0x14c
    filter_dims.w = params->filter_width;
 800c26a:	68ea      	ldr	r2, [r5, #12]
    filter_dims.c = 1;
 800c26c:	e9cd 2334 	strd	r2, r3, [sp, #208]	@ 0xd0
    filter_dims.h = params->filter_height;
 800c270:	692b      	ldr	r3, [r5, #16]
 800c272:	9333      	str	r3, [sp, #204]	@ 0xcc
    ctx.buf = nullptr;
 800c274:	2300      	movs	r3, #0
    if (data.buffer_idx > -1) {
 800c276:	4299      	cmp	r1, r3
    ctx.size = 0;
 800c278:	e9cd 3328 	strd	r3, r3, [sp, #160]	@ 0xa0
    if (data.buffer_idx > -1) {
 800c27c:	db03      	blt.n	800c286 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x11e>
      ctx.buf = context->GetScratchBuffer(context, data.buffer_idx);
 800c27e:	6c73      	ldr	r3, [r6, #68]	@ 0x44
 800c280:	4630      	mov	r0, r6
 800c282:	4798      	blx	r3
 800c284:	9028      	str	r0, [sp, #160]	@ 0xa0
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800c286:	9a05      	ldr	r2, [sp, #20]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800c288:	6823      	ldr	r3, [r4, #0]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800c28a:	b10a      	cbz	r2, 800c290 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x128>
 800c28c:	6812      	ldr	r2, [r2, #0]
 800c28e:	9205      	str	r2, [sp, #20]
    TFLITE_DCHECK_EQ(
 800c290:	9805      	ldr	r0, [sp, #20]
 800c292:	a92e      	add	r1, sp, #184	@ 0xb8
 800c294:	aa32      	add	r2, sp, #200	@ 0xc8
 800c296:	e9cd 1001 	strd	r1, r0, [sp, #4]
 800c29a:	9200      	str	r2, [sp, #0]
 800c29c:	a94e      	add	r1, sp, #312	@ 0x138
 800c29e:	aa2a      	add	r2, sp, #168	@ 0xa8
 800c2a0:	a828      	add	r0, sp, #160	@ 0xa0
 800c2a2:	f003 fb51 	bl	800f948 <arm_avgpool_s8>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	f040 82c6 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
    if (size_ > kMaxSmallSize) {
 800c2ac:	9b48      	ldr	r3, [sp, #288]	@ 0x120
 800c2ae:	2b05      	cmp	r3, #5
 800c2b0:	dd03      	ble.n	800c2ba <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x152>
      delete[] dims_pointer_;
 800c2b2:	9849      	ldr	r0, [sp, #292]	@ 0x124
 800c2b4:	b108      	cbz	r0, 800c2ba <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x152>
 800c2b6:	f004 fb2d 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800c2ba:	9b42      	ldr	r3, [sp, #264]	@ 0x108
 800c2bc:	2b05      	cmp	r3, #5
 800c2be:	dd03      	ble.n	800c2c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x160>
      delete[] dims_pointer_;
 800c2c0:	9843      	ldr	r0, [sp, #268]	@ 0x10c
 800c2c2:	b108      	cbz	r0, 800c2c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x160>
 800c2c4:	f004 fb26 	bl	8010914 <_ZdaPv>
  return kTfLiteOk;
 800c2c8:	2000      	movs	r0, #0
}
 800c2ca:	b061      	add	sp, #388	@ 0x184
 800c2cc:	ecbd 8b02 	vpop	{d8}
 800c2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d4:	080171a0 	.word	0x080171a0
 800c2d8:	7f7fffff 	.word	0x7f7fffff
 800c2dc:	ff7fffff 	.word	0xff7fffff
 800c2e0:	00000000 	.word	0x00000000
  op_params.stride_height = params->stride_height;
 800c2e4:	68ab      	ldr	r3, [r5, #8]
 800c2e6:	930d      	str	r3, [sp, #52]	@ 0x34
  op_params.stride_width = params->stride_width;
 800c2e8:	686b      	ldr	r3, [r5, #4]
 800c2ea:	4699      	mov	r9, r3
  op_params.filter_height = params->filter_height;
 800c2ec:	692b      	ldr	r3, [r5, #16]
 800c2ee:	9318      	str	r3, [sp, #96]	@ 0x60
  op_params.filter_width = params->filter_width;
 800c2f0:	68eb      	ldr	r3, [r5, #12]
 800c2f2:	9316      	str	r3, [sp, #88]	@ 0x58
  op_params.quantized_activation_min = data.activation_min;
 800c2f4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800c2f8:	9309      	str	r3, [sp, #36]	@ 0x24
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 800c2fa:	4621      	mov	r1, r4
  op_params.quantized_activation_max = data.activation_max;
 800c2fc:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800c300:	9308      	str	r3, [sp, #32]
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 800c302:	a854      	add	r0, sp, #336	@ 0x150
  op_params.padding_values.width = data.padding.width;
 800c304:	e9d8 5600 	ldrd	r5, r6, [r8]
    reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 800c308:	f7fa fabc 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800c30c:	6823      	ldr	r3, [r4, #0]
                               tflite::micro::GetTensorShape(output),
 800c30e:	9c05      	ldr	r4, [sp, #20]
 800c310:	930e      	str	r3, [sp, #56]	@ 0x38
 800c312:	4621      	mov	r1, r4
 800c314:	a85a      	add	r0, sp, #360	@ 0x168
 800c316:	f7fa fab5 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800c31a:	b114      	cbz	r4, 800c322 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x1ba>
 800c31c:	9b05      	ldr	r3, [sp, #20]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	9305      	str	r3, [sp, #20]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 800c322:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800c326:	4293      	cmp	r3, r2
 800c328:	f2c0 8286 	blt.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800c32c:	9854      	ldr	r0, [sp, #336]	@ 0x150
 800c32e:	2804      	cmp	r0, #4
 800c330:	f040 8282 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800c334:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
 800c336:	2b04      	cmp	r3, #4
 800c338:	f040 827e 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c33c:	9b55      	ldr	r3, [sp, #340]	@ 0x154
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c33e:	9a5b      	ldr	r2, [sp, #364]	@ 0x16c
 800c340:	429a      	cmp	r2, r3
 800c342:	f040 8279 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c346:	f8dd b160 	ldr.w	fp, [sp, #352]	@ 0x160
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c34a:	9a5e      	ldr	r2, [sp, #376]	@ 0x178
 800c34c:	455a      	cmp	r2, fp
 800c34e:	f040 8273 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c352:	9a56      	ldr	r2, [sp, #344]	@ 0x158
 800c354:	9210      	str	r2, [sp, #64]	@ 0x40
  for (int batch = 0; batch < batches; ++batch) {
 800c356:	2b00      	cmp	r3, #0
 800c358:	9a57      	ldr	r2, [sp, #348]	@ 0x15c
 800c35a:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c35c:	e9dd 175c 	ldrd	r1, r7, [sp, #368]	@ 0x170
 800c360:	ddb2      	ble.n	800c2c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x160>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c362:	2900      	cmp	r1, #0
  op_params.padding_values.height = data.padding.height;
 800c364:	b234      	sxth	r4, r6
  op_params.padding_values.width = data.padding.width;
 800c366:	fa0f fa85 	sxth.w	sl, r5
 800c36a:	f340 80ff 	ble.w	800c56c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x404>
  for (int batch = 0; batch < batches; ++batch) {
 800c36e:	2600      	movs	r6, #0
 800c370:	46ce      	mov	lr, r9
 800c372:	4608      	mov	r0, r1
 800c374:	46d9      	mov	r9, fp
 800c376:	4619      	mov	r1, r3
 800c378:	4265      	negs	r5, r4
 800c37a:	463b      	mov	r3, r7
 800c37c:	46b3      	mov	fp, r6
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c37e:	2600      	movs	r6, #0
 800c380:	e9cd 411b 	strd	r4, r1, [sp, #108]	@ 0x6c
 800c384:	9607      	str	r6, [sp, #28]
 800c386:	46ac      	mov	ip, r5
 800c388:	462e      	mov	r6, r5
 800c38a:	4622      	mov	r2, r4
 800c38c:	4651      	mov	r1, sl
 800c38e:	46c8      	mov	r8, r9
 800c390:	465d      	mov	r5, fp
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c392:	2b00      	cmp	r3, #0
 800c394:	f340 80cd 	ble.w	800c532 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3ca>
 800c398:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800c39a:	4414      	add	r4, r2
 800c39c:	4627      	mov	r7, r4
 800c39e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800c3a0:	42a7      	cmp	r7, r4
 800c3a2:	bfa8      	it	ge
 800c3a4:	4627      	movge	r7, r4
      if (__a < __b)
 800c3a6:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
 800c3aa:	9411      	str	r4, [sp, #68]	@ 0x44
 800c3ac:	e9cd 121d 	strd	r1, r2, [sp, #116]	@ 0x74
 800c3b0:	424c      	negs	r4, r1
 800c3b2:	9406      	str	r4, [sp, #24]
 800c3b4:	eb07 040c 	add.w	r4, r7, ip
 800c3b8:	970b      	str	r7, [sp, #44]	@ 0x2c
 800c3ba:	941a      	str	r4, [sp, #104]	@ 0x68
 800c3bc:	4647      	mov	r7, r8
 800c3be:	f04f 0a00 	mov.w	sl, #0
 800c3c2:	46a8      	mov	r8, r5
 800c3c4:	460c      	mov	r4, r1
 800c3c6:	4665      	mov	r5, ip
        for (int channel = 0; channel < depth; ++channel) {
 800c3c8:	2f00      	cmp	r7, #0
 800c3ca:	f340 80a3 	ble.w	800c514 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x3ac>
              std::min(params.filter_width, input_width - in_x_origin);
 800c3ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800c3d0:	9021      	str	r0, [sp, #132]	@ 0x84
 800c3d2:	1911      	adds	r1, r2, r4
 800c3d4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800c3d6:	970a      	str	r7, [sp, #40]	@ 0x28
 800c3d8:	4291      	cmp	r1, r2
 800c3da:	bfa8      	it	ge
 800c3dc:	4611      	movge	r1, r2
 800c3de:	ea24 79e4 	bic.w	r9, r4, r4, asr #31
 800c3e2:	e9cd e31f 	strd	lr, r3, [sp, #124]	@ 0x7c
 800c3e6:	eba1 0209 	sub.w	r2, r1, r9
 800c3ea:	46a4      	mov	ip, r4
 800c3ec:	910c      	str	r1, [sp, #48]	@ 0x30
        for (int channel = 0; channel < depth; ++channel) {
 800c3ee:	f04f 0b00 	mov.w	fp, #0
 800c3f2:	9219      	str	r2, [sp, #100]	@ 0x64
 800c3f4:	4634      	mov	r4, r6
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c3f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c3f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800c3fa:	4293      	cmp	r3, r2
 800c3fc:	f340 821b 	ble.w	800c836 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6ce>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800c400:	9b56      	ldr	r3, [sp, #344]	@ 0x158
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800c402:	9f57      	ldr	r7, [sp, #348]	@ 0x15c
 800c404:	9906      	ldr	r1, [sp, #24]
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800c406:	9314      	str	r3, [sp, #80]	@ 0x50
 800c408:	fb03 5308 	mla	r3, r3, r8, r5
 800c40c:	4413      	add	r3, r2
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800c40e:	9858      	ldr	r0, [sp, #352]	@ 0x160
 800c410:	9522      	str	r5, [sp, #136]	@ 0x88
 800c412:	fb07 1303 	mla	r3, r7, r3, r1
 800c416:	444b      	add	r3, r9
 800c418:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c41a:	fb00 b303 	mla	r3, r0, r3, fp
 800c41e:	eb01 0e03 	add.w	lr, r1, r3
  inline int32_t DimensionsCount() const { return size_; }
 800c422:	9954      	ldr	r1, [sp, #336]	@ 0x150
 800c424:	9112      	str	r1, [sp, #72]	@ 0x48
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800c426:	9955      	ldr	r1, [sp, #340]	@ 0x154
 800c428:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c42a:	fb00 f107 	mul.w	r1, r0, r7
          int32_t acc = 0;
 800c42e:	2300      	movs	r3, #0
 800c430:	9117      	str	r1, [sp, #92]	@ 0x5c
 800c432:	18a9      	adds	r1, r5, r2
 800c434:	4665      	mov	r5, ip
          int filter_count = 0;
 800c436:	461a      	mov	r2, r3
 800c438:	46d4      	mov	ip, sl
 800c43a:	46aa      	mov	sl, r5
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c43c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800c43e:	454d      	cmp	r5, r9
 800c440:	dd28      	ble.n	800c494 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x32c>
 800c442:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 800c444:	2d04      	cmp	r5, #4
 800c446:	f040 81f7 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
 800c44a:	4558      	cmp	r0, fp
 800c44c:	f340 81f4 	ble.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
 800c450:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c452:	428d      	cmp	r5, r1
 800c454:	f340 81f0 	ble.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
 800c458:	2900      	cmp	r1, #0
 800c45a:	f2c0 81ed 	blt.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
 800c45e:	9e19      	ldr	r6, [sp, #100]	@ 0x64
 800c460:	9d06      	ldr	r5, [sp, #24]
 800c462:	9123      	str	r1, [sp, #140]	@ 0x8c
 800c464:	4416      	add	r6, r2
 800c466:	9615      	str	r6, [sp, #84]	@ 0x54
 800c468:	444d      	add	r5, r9
 800c46a:	4676      	mov	r6, lr
 800c46c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c46e:	4588      	cmp	r8, r1
 800c470:	f280 81e2 	bge.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800c474:	2d00      	cmp	r5, #0
 800c476:	f2c0 81df 	blt.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
 800c47a:	42af      	cmp	r7, r5
 800c47c:	f340 81dc 	ble.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
              acc +=
 800c480:	7831      	ldrb	r1, [r6, #0]
 800c482:	440b      	add	r3, r1
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c484:	9915      	ldr	r1, [sp, #84]	@ 0x54
              filter_count++;
 800c486:	3201      	adds	r2, #1
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c488:	428a      	cmp	r2, r1
 800c48a:	f105 0501 	add.w	r5, r5, #1
 800c48e:	4406      	add	r6, r0
 800c490:	d1ec      	bne.n	800c46c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x304>
 800c492:	9923      	ldr	r1, [sp, #140]	@ 0x8c
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c494:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 800c496:	44ae      	add	lr, r5
 800c498:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 800c49a:	3101      	adds	r1, #1
 800c49c:	428d      	cmp	r5, r1
 800c49e:	d1cd      	bne.n	800c43c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x2d4>
          acc = (acc + filter_count / 2) / filter_count;
 800c4a0:	eb03 0362 	add.w	r3, r3, r2, asr #1
 800c4a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800c4a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4aa:	9808      	ldr	r0, [sp, #32]
 800c4ac:	9d22      	ldr	r5, [sp, #136]	@ 0x88
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	bfb8      	it	lt
 800c4b2:	4613      	movlt	r3, r2
 800c4b4:	4298      	cmp	r0, r3
 800c4b6:	bfa8      	it	ge
 800c4b8:	4618      	movge	r0, r3
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800c4ba:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
 800c4bc:	4651      	mov	r1, sl
 800c4be:	2b04      	cmp	r3, #4
 800c4c0:	46e2      	mov	sl, ip
 800c4c2:	468c      	mov	ip, r1
 800c4c4:	f040 81b8 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800c4c8:	9b5b      	ldr	r3, [sp, #364]	@ 0x16c
 800c4ca:	4598      	cmp	r8, r3
 800c4cc:	f280 81b4 	bge.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800c4d0:	9b5c      	ldr	r3, [sp, #368]	@ 0x170
 800c4d2:	9e07      	ldr	r6, [sp, #28]
 800c4d4:	42b3      	cmp	r3, r6
 800c4d6:	f340 81af 	ble.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800c4da:	995d      	ldr	r1, [sp, #372]	@ 0x174
 800c4dc:	4551      	cmp	r1, sl
 800c4de:	f340 81ab 	ble.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800c4e2:	9a5e      	ldr	r2, [sp, #376]	@ 0x178
 800c4e4:	455a      	cmp	r2, fp
 800c4e6:	f340 81a7 	ble.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800c4ea:	fb03 6308 	mla	r3, r3, r8, r6
 800c4ee:	fb01 a303 	mla	r3, r1, r3, sl
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 800c4f2:	9905      	ldr	r1, [sp, #20]
 800c4f4:	fb02 1303 	mla	r3, r2, r3, r1
 800c4f8:	f803 000b 	strb.w	r0, [r3, fp]
        for (int channel = 0; channel < depth; ++channel) {
 800c4fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c4fe:	f10b 0b01 	add.w	fp, fp, #1
 800c502:	459b      	cmp	fp, r3
 800c504:	f47f af77 	bne.w	800c3f6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x28e>
 800c508:	461f      	mov	r7, r3
 800c50a:	e9dd e31f 	ldrd	lr, r3, [sp, #124]	@ 0x7c
 800c50e:	9821      	ldr	r0, [sp, #132]	@ 0x84
 800c510:	4626      	mov	r6, r4
 800c512:	4664      	mov	r4, ip
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c514:	9a06      	ldr	r2, [sp, #24]
 800c516:	f10a 0a01 	add.w	sl, sl, #1
 800c51a:	4472      	add	r2, lr
 800c51c:	459a      	cmp	sl, r3
 800c51e:	9206      	str	r2, [sp, #24]
 800c520:	eba4 040e 	sub.w	r4, r4, lr
 800c524:	f47f af50 	bne.w	800c3c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x260>
 800c528:	e9dd 121d 	ldrd	r1, r2, [sp, #116]	@ 0x74
 800c52c:	46ac      	mov	ip, r5
 800c52e:	4645      	mov	r5, r8
 800c530:	46b8      	mov	r8, r7
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c532:	9c07      	ldr	r4, [sp, #28]
 800c534:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 800c536:	3401      	adds	r4, #1
 800c538:	4284      	cmp	r4, r0
 800c53a:	9407      	str	r4, [sp, #28]
 800c53c:	eba2 0207 	sub.w	r2, r2, r7
 800c540:	44bc      	add	ip, r7
 800c542:	f47f af26 	bne.w	800c392 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x22a>
  for (int batch = 0; batch < batches; ++batch) {
 800c546:	46ab      	mov	fp, r5
 800c548:	468a      	mov	sl, r1
 800c54a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 800c54c:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 800c54e:	f10b 0b01 	add.w	fp, fp, #1
 800c552:	4559      	cmp	r1, fp
 800c554:	46c1      	mov	r9, r8
 800c556:	4635      	mov	r5, r6
 800c558:	f47f af11 	bne.w	800c37e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x216>
    if (size_ > kMaxSmallSize) {
 800c55c:	9b5a      	ldr	r3, [sp, #360]	@ 0x168
 800c55e:	2b05      	cmp	r3, #5
 800c560:	dd03      	ble.n	800c56a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x402>
      delete[] dims_pointer_;
 800c562:	985b      	ldr	r0, [sp, #364]	@ 0x16c
 800c564:	b108      	cbz	r0, 800c56a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x402>
 800c566:	f004 f9d5 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800c56a:	9854      	ldr	r0, [sp, #336]	@ 0x150
 800c56c:	2805      	cmp	r0, #5
 800c56e:	f77f aeab 	ble.w	800c2c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x160>
      delete[] dims_pointer_;
 800c572:	9855      	ldr	r0, [sp, #340]	@ 0x154
 800c574:	2800      	cmp	r0, #0
 800c576:	f47f aea5 	bne.w	800c2c4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x15c>
 800c57a:	e6a5      	b.n	800c2c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x160>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c57c:	9b46      	ldr	r3, [sp, #280]	@ 0x118
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c57e:	428b      	cmp	r3, r1
 800c580:	f040 815a 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
    input_dims.h = input_shape.Dims(1);
 800c584:	9a44      	ldr	r2, [sp, #272]	@ 0x110
 800c586:	922b      	str	r2, [sp, #172]	@ 0xac
    input_dims.n = 1;
 800c588:	2201      	movs	r2, #1
 800c58a:	922a      	str	r2, [sp, #168]	@ 0xa8
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c58c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
    TFLITE_DCHECK_LT(i, size_);
 800c58e:	e650      	b.n	800c232 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0xca>
    *activation_min = 0;
 800c590:	ed1f 8aad 	vldr	s16, [pc, #-692]	@ 800c2e0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x178>
    *activation_max = 6;
 800c594:	eef1 8a08 	vmov.f32	s17, #24	@ 0x40c00000  6.0
  op_params.stride_width = params->stride_width;
 800c598:	686b      	ldr	r3, [r5, #4]
 800c59a:	9314      	str	r3, [sp, #80]	@ 0x50
  op_params.filter_height = params->filter_height;
 800c59c:	692b      	ldr	r3, [r5, #16]
 800c59e:	9315      	str	r3, [sp, #84]	@ 0x54
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 800c5a0:	4621      	mov	r1, r4
  op_params.filter_width = params->filter_width;
 800c5a2:	68eb      	ldr	r3, [r5, #12]
  op_params.padding_values.height = data.padding.height;
 800c5a4:	f9b8 7004 	ldrsh.w	r7, [r8, #4]
  op_params.filter_width = params->filter_width;
 800c5a8:	9316      	str	r3, [sp, #88]	@ 0x58
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 800c5aa:	a836      	add	r0, sp, #216	@ 0xd8
  op_params.stride_height = params->stride_height;
 800c5ac:	f8d5 b008 	ldr.w	fp, [r5, #8]
  op_params.padding_values.width = data.padding.width;
 800c5b0:	f9b8 8000 	ldrsh.w	r8, [r8]
  reference_ops::AveragePool(op_params, tflite::micro::GetTensorShape(input),
 800c5b4:	f7fa f966 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800c5b8:	6823      	ldr	r3, [r4, #0]
                             tflite::micro::GetTensorShape(output),
 800c5ba:	9c05      	ldr	r4, [sp, #20]
 800c5bc:	9317      	str	r3, [sp, #92]	@ 0x5c
 800c5be:	4621      	mov	r1, r4
 800c5c0:	a83c      	add	r0, sp, #240	@ 0xf0
 800c5c2:	f7fa f95f 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800c5c6:	b10c      	cbz	r4, 800c5cc <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x464>
 800c5c8:	6823      	ldr	r3, [r4, #0]
 800c5ca:	9305      	str	r3, [sp, #20]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 800c5cc:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 800c5ce:	2b04      	cmp	r3, #4
 800c5d0:	f040 8132 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 800c5d4:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 800c5d6:	2b04      	cmp	r3, #4
 800c5d8:	f040 812e 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c5dc:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 800c5de:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 800c5e0:	920d      	str	r2, [sp, #52]	@ 0x34
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c5e2:	4293      	cmp	r3, r2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c5e4:	9318      	str	r3, [sp, #96]	@ 0x60
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c5e6:	f040 8127 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c5ea:	9a3a      	ldr	r2, [sp, #232]	@ 0xe8
 800c5ec:	f8dd a100 	ldr.w	sl, [sp, #256]	@ 0x100
 800c5f0:	920b      	str	r2, [sp, #44]	@ 0x2c
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800c5f2:	4592      	cmp	sl, r2
 800c5f4:	f040 8120 	bne.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800c5f8:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 800c5fa:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 800c5fc:	920a      	str	r2, [sp, #40]	@ 0x28
  for (int batch = 0; batch < batches; ++batch) {
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 800c602:	9e3f      	ldr	r6, [sp, #252]	@ 0xfc
 800c604:	9109      	str	r1, [sp, #36]	@ 0x24
 800c606:	9208      	str	r2, [sp, #32]
 800c608:	f77f ae5e 	ble.w	800c2c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x160>
 800c60c:	fb06 f202 	mul.w	r2, r6, r2
 800c610:	fb0a fc02 	mul.w	ip, sl, r2
 800c614:	fb01 f20a 	mul.w	r2, r1, sl
 800c618:	0092      	lsls	r2, r2, #2
 800c61a:	2300      	movs	r3, #0
 800c61c:	921b      	str	r2, [sp, #108]	@ 0x6c
 800c61e:	fb06 fe0a 	mul.w	lr, r6, sl
 800c622:	ea4f 028a 	mov.w	r2, sl, lsl #2
 800c626:	920f      	str	r2, [sp, #60]	@ 0x3c
 800c628:	4619      	mov	r1, r3
 800c62a:	46f1      	mov	r9, lr
 800c62c:	461c      	mov	r4, r3
 800c62e:	960c      	str	r6, [sp, #48]	@ 0x30
 800c630:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c634:	9a08      	ldr	r2, [sp, #32]
 800c636:	2a00      	cmp	r2, #0
 800c638:	f340 80ef 	ble.w	800c81a <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6b2>
 800c63c:	427a      	negs	r2, r7
 800c63e:	9206      	str	r2, [sp, #24]
 800c640:	2200      	movs	r2, #0
 800c642:	9207      	str	r2, [sp, #28]
 800c644:	4626      	mov	r6, r4
 800c646:	46be      	mov	lr, r7
 800c648:	460d      	mov	r5, r1
 800c64a:	465a      	mov	r2, fp
 800c64c:	4664      	mov	r4, ip
 800c64e:	911e      	str	r1, [sp, #120]	@ 0x78
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c650:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c652:	2900      	cmp	r1, #0
 800c654:	f340 80d0 	ble.w	800c7f8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x690>
 800c658:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c65a:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
 800c65e:	4471      	add	r1, lr
 800c660:	468c      	mov	ip, r1
 800c662:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800c664:	9523      	str	r5, [sp, #140]	@ 0x8c
 800c666:	458c      	cmp	ip, r1
 800c668:	bfa8      	it	ge
 800c66a:	468c      	movge	ip, r1
 800c66c:	9906      	ldr	r1, [sp, #24]
 800c66e:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
 800c672:	ea2e 70ee 	bic.w	r0, lr, lr, asr #31
 800c676:	4419      	add	r1, r3
 800c678:	4401      	add	r1, r0
 800c67a:	901a      	str	r0, [sp, #104]	@ 0x68
 800c67c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c67e:	fb00 f001 	mul.w	r0, r0, r1
 800c682:	901c      	str	r0, [sp, #112]	@ 0x70
 800c684:	9906      	ldr	r1, [sp, #24]
 800c686:	980e      	ldr	r0, [sp, #56]	@ 0x38
 800c688:	e9cd 271f 	strd	r2, r7, [sp, #124]	@ 0x7c
 800c68c:	1841      	adds	r1, r0, r1
 800c68e:	911d      	str	r1, [sp, #116]	@ 0x74
 800c690:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c692:	e9cd 8921 	strd	r8, r9, [sp, #132]	@ 0x84
 800c696:	f1c8 0b00 	rsb	fp, r8, #0
 800c69a:	46ac      	mov	ip, r5
 800c69c:	46f0      	mov	r8, lr
 800c69e:	f04f 0a00 	mov.w	sl, #0
 800c6a2:	46a6      	mov	lr, r4
 800c6a4:	4618      	mov	r0, r3
        for (int channel = 0; channel < depth; ++channel) {
 800c6a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	f340 8091 	ble.w	800c7d0 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x668>
 800c6ae:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 800c6b0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800c6b2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 800c6b4:	ea21 75e1 	bic.w	r5, r1, r1, asr #31
 800c6b8:	445b      	add	r3, fp
 800c6ba:	442b      	add	r3, r5
 800c6bc:	fb04 2303 	mla	r3, r4, r3, r2
              std::min(params.filter_width, input_width - in_x_origin);
 800c6c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c6c2:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 800c6c4:	9513      	str	r5, [sp, #76]	@ 0x4c
 800c6c6:	440a      	add	r2, r1
 800c6c8:	42a2      	cmp	r2, r4
 800c6ca:	bfa8      	it	ge
 800c6cc:	4622      	movge	r2, r4
 800c6ce:	9210      	str	r2, [sp, #64]	@ 0x40
 800c6d0:	9a05      	ldr	r2, [sp, #20]
 800c6d2:	eb0b 0705 	add.w	r7, fp, r5
 800c6d6:	eb02 048c 	add.w	r4, r2, ip, lsl #2
 800c6da:	9711      	str	r7, [sp, #68]	@ 0x44
 800c6dc:	46f1      	mov	r9, lr
        for (int channel = 0; channel < depth; ++channel) {
 800c6de:	2200      	movs	r2, #0
 800c6e0:	4686      	mov	lr, r0
 800c6e2:	4667      	mov	r7, ip
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c6e4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800c6e6:	981a      	ldr	r0, [sp, #104]	@ 0x68
          float filter_count = 0;
 800c6e8:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 800c83c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d4>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c6ec:	4285      	cmp	r5, r0
          float total = 0.f;
 800c6ee:	eef0 6a47 	vmov.f32	s13, s14
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c6f2:	dd44      	ble.n	800c77e <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x616>
 800c6f4:	9d06      	ldr	r5, [sp, #24]
 800c6f6:	f8cd 8098 	str.w	r8, [sp, #152]	@ 0x98
 800c6fa:	e9cd 4a24 	strd	r4, sl, [sp, #144]	@ 0x90
 800c6fe:	4428      	add	r0, r5
 800c700:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800c702:	469c      	mov	ip, r3
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c704:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800c706:	42a5      	cmp	r5, r4
 800c708:	da2e      	bge.n	800c768 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x600>
 800c70a:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 800c70c:	42b4      	cmp	r4, r6
 800c70e:	f340 8093 	ble.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
 800c712:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c714:	4294      	cmp	r4, r2
 800c716:	f340 808f 	ble.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
 800c71a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c71c:	4284      	cmp	r4, r0
 800c71e:	f340 808b 	ble.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
 800c722:	2800      	cmp	r0, #0
 800c724:	f2c0 8088 	blt.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
 800c728:	9c11      	ldr	r4, [sp, #68]	@ 0x44
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800c72a:	2c00      	cmp	r4, #0
 800c72c:	46a2      	mov	sl, r4
 800c72e:	f2c0 8083 	blt.w	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
 800c732:	9419      	str	r4, [sp, #100]	@ 0x64
 800c734:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800c736:	9327      	str	r3, [sp, #156]	@ 0x9c
 800c738:	445c      	add	r4, fp
 800c73a:	9413      	str	r4, [sp, #76]	@ 0x4c
              filter_count++;
 800c73c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800c740:	46e0      	mov	r8, ip
 800c742:	4654      	mov	r4, sl
 800c744:	e000      	b.n	800c748 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5e0>
 800c746:	46a2      	mov	sl, r4
 800c748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c74a:	4553      	cmp	r3, sl
 800c74c:	dd74      	ble.n	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c74e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
              total +=
 800c750:	ed98 6a00 	vldr	s12, [r8]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c754:	4498      	add	r8, r3
 800c756:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c758:	3401      	adds	r4, #1
 800c75a:	42a3      	cmp	r3, r4
              total +=
 800c75c:	ee76 6a86 	vadd.f32	s13, s13, s12
              filter_count++;
 800c760:	ee37 7a27 	vadd.f32	s14, s14, s15
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 800c764:	d1ef      	bne.n	800c746 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x5de>
 800c766:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 800c768:	9c1b      	ldr	r4, [sp, #108]	@ 0x6c
 800c76a:	44a4      	add	ip, r4
 800c76c:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
 800c76e:	3001      	adds	r0, #1
 800c770:	4284      	cmp	r4, r0
 800c772:	d1c7      	bne.n	800c704 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x59c>
 800c774:	e9dd 4a24 	ldrd	r4, sl, [sp, #144]	@ 0x90
 800c778:	f8dd 8098 	ldr.w	r8, [sp, #152]	@ 0x98
 800c77c:	9513      	str	r5, [sp, #76]	@ 0x4c
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800c77e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800c780:	42b0      	cmp	r0, r6
          const float average = total / filter_count;
 800c782:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c786:	dd57      	ble.n	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800c788:	e9dd 5007 	ldrd	r5, r0, [sp, #28]
 800c78c:	42a8      	cmp	r0, r5
 800c78e:	dd53      	ble.n	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800c790:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800c792:	4550      	cmp	r0, sl
 800c794:	dd50      	ble.n	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800c796:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800c798:	4290      	cmp	r0, r2
 800c79a:	dd4d      	ble.n	800c838 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d0>
	return __b;
 800c79c:	eef4 7a48 	vcmp.f32	s15, s16
 800c7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7a4:	bf48      	it	mi
 800c7a6:	eef0 7a48 	vmovmi.f32	s15, s16
	return __b;
 800c7aa:	eef4 7a68 	vcmp.f32	s15, s17
        for (int channel = 0; channel < depth; ++channel) {
 800c7ae:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800c7b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b4:	f102 0201 	add.w	r2, r2, #1
 800c7b8:	bfc8      	it	gt
 800c7ba:	eef0 7a68 	vmovgt.f32	s15, s17
 800c7be:	4282      	cmp	r2, r0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 800c7c0:	ece4 7a01 	vstmia	r4!, {s15}
        for (int channel = 0; channel < depth; ++channel) {
 800c7c4:	f103 0304 	add.w	r3, r3, #4
 800c7c8:	d18c      	bne.n	800c6e4 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x57c>
 800c7ca:	4670      	mov	r0, lr
 800c7cc:	46bc      	mov	ip, r7
 800c7ce:	46ce      	mov	lr, r9
      for (int out_x = 0; out_x < output_width; ++out_x) {
 800c7d0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c7d2:	449c      	add	ip, r3
 800c7d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c7d6:	1ac9      	subs	r1, r1, r3
 800c7d8:	449b      	add	fp, r3
 800c7da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7dc:	f10a 0a01 	add.w	sl, sl, #1
 800c7e0:	459a      	cmp	sl, r3
 800c7e2:	f47f af60 	bne.w	800c6a6 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x53e>
 800c7e6:	e9dd 271f 	ldrd	r2, r7, [sp, #124]	@ 0x7c
 800c7ea:	e9dd 9522 	ldrd	r9, r5, [sp, #136]	@ 0x88
 800c7ee:	4674      	mov	r4, lr
 800c7f0:	46c6      	mov	lr, r8
 800c7f2:	f8dd 8084 	ldr.w	r8, [sp, #132]	@ 0x84
 800c7f6:	4603      	mov	r3, r0
    for (int out_y = 0; out_y < output_height; ++out_y) {
 800c7f8:	9806      	ldr	r0, [sp, #24]
 800c7fa:	9907      	ldr	r1, [sp, #28]
 800c7fc:	4410      	add	r0, r2
 800c7fe:	9006      	str	r0, [sp, #24]
 800c800:	9808      	ldr	r0, [sp, #32]
 800c802:	3101      	adds	r1, #1
 800c804:	4281      	cmp	r1, r0
 800c806:	9107      	str	r1, [sp, #28]
 800c808:	444d      	add	r5, r9
 800c80a:	ebae 0e02 	sub.w	lr, lr, r2
 800c80e:	f47f af1f 	bne.w	800c650 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x4e8>
 800c812:	991e      	ldr	r1, [sp, #120]	@ 0x78
 800c814:	46a4      	mov	ip, r4
 800c816:	4693      	mov	fp, r2
 800c818:	4634      	mov	r4, r6
  for (int batch = 0; batch < batches; ++batch) {
 800c81a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c81c:	4413      	add	r3, r2
 800c81e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c820:	3401      	adds	r4, #1
 800c822:	4294      	cmp	r4, r2
 800c824:	4461      	add	r1, ip
 800c826:	f47f af05 	bne.w	800c634 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x4cc>
 800c82a:	e54d      	b.n	800c2c8 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x160>
    *activation_max = std::numeric_limits<T>::max();
 800c82c:	eddf 8a04 	vldr	s17, [pc, #16]	@ 800c840 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d8>
    *activation_min = 0;
 800c830:	ed9f 8a02 	vldr	s16, [pc, #8]	@ 800c83c <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x6d4>
 800c834:	e6b0      	b.n	800c598 <_ZN6tflite3ops5micro7pooling11AverageEvalEP13TfLiteContextP10TfLiteNode+0x430>
          acc = (acc + filter_count / 2) / filter_count;
 800c836:	deff      	udf	#255	@ 0xff
  TFLITE_DCHECK(context != nullptr);
 800c838:	f004 fb40 	bl	8010ebc <abort>
 800c83c:	00000000 	.word	0x00000000
 800c840:	7f7fffff 	.word	0x7f7fffff

0800c844 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
}

TfLiteRegistration Register_MAX_POOL_2D() {
 800c844:	b510      	push	{r4, lr}
          /*prepare=*/pooling::MaxPrepare,
          /*invoke=*/pooling::MaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800c846:	4c06      	ldr	r4, [pc, #24]	@ (800c860 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x1c>)
TfLiteRegistration Register_MAX_POOL_2D() {
 800c848:	4686      	mov	lr, r0
          /*version=*/0};
 800c84a:	4684      	mov	ip, r0
 800c84c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c84e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c852:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800c856:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 800c85a:	4670      	mov	r0, lr
 800c85c:	bd10      	pop	{r4, pc}
 800c85e:	bf00      	nop
 800c860:	08013d20 	.word	0x08013d20

0800c864 <_ZN6tflite12_GLOBAL__N_111SoftmaxInitEP13TfLiteContextPKcj>:
  }
  return kTfLiteOk;
}

void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800c864:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c866:	b10b      	cbz	r3, 800c86c <_ZN6tflite12_GLOBAL__N_111SoftmaxInitEP13TfLiteContextPKcj+0x8>
  return context->AllocatePersistentBuffer(context, sizeof(SoftmaxParams));
 800c868:	2138      	movs	r1, #56	@ 0x38
 800c86a:	4718      	bx	r3
void* SoftmaxInit(TfLiteContext* context, const char* buffer, size_t length) {
 800c86c:	b510      	push	{r4, lr}
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800c86e:	f004 fb25 	bl	8010ebc <abort>
 800c872:	bf00      	nop

0800c874 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:
}

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800c874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 800c878:	680b      	ldr	r3, [r1, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 800c87a:	694f      	ldr	r7, [r1, #20]
 800c87c:	681b      	ldr	r3, [r3, #0]
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800c87e:	ed2d 8b02 	vpush	{d8}

  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800c882:	2b01      	cmp	r3, #1
TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 800c884:	b087      	sub	sp, #28
 800c886:	4605      	mov	r5, r0
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 800c888:	d011      	beq.n	800c8ae <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x3a>
 800c88a:	498e      	ldr	r1, [pc, #568]	@ (800cac4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x250>)
 800c88c:	4e8e      	ldr	r6, [pc, #568]	@ (800cac8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 800c88e:	2201      	movs	r2, #1
 800c890:	9203      	str	r2, [sp, #12]
 800c892:	6944      	ldr	r4, [r0, #20]
 800c894:	4a8d      	ldr	r2, [pc, #564]	@ (800cacc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800c896:	9302      	str	r3, [sp, #8]
 800c898:	e9cd 1600 	strd	r1, r6, [sp]
 800c89c:	234c      	movs	r3, #76	@ 0x4c
 800c89e:	498c      	ldr	r1, [pc, #560]	@ (800cad0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 800c8a0:	47a0      	blx	r4
 800c8a2:	2001      	movs	r0, #1
  TfLiteTensor* output = GetOutput(context, node, 0);

  TFLITE_DCHECK(node->user_data != nullptr);
  SoftmaxParams* data = static_cast<SoftmaxParams*>(node->user_data);
  return CalculateSoftmaxParams(context, input, output, params, data);
}
 800c8a4:	b007      	add	sp, #28
 800c8a6:	ecbd 8b02 	vpop	{d8}
 800c8aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 800c8ae:	684a      	ldr	r2, [r1, #4]
 800c8b0:	6816      	ldr	r6, [r2, #0]
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 800c8b2:	2e01      	cmp	r6, #1
 800c8b4:	460c      	mov	r4, r1
 800c8b6:	d00b      	beq.n	800c8d0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x5c>
 800c8b8:	6944      	ldr	r4, [r0, #20]
 800c8ba:	4983      	ldr	r1, [pc, #524]	@ (800cac8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x254>)
 800c8bc:	4a83      	ldr	r2, [pc, #524]	@ (800cacc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800c8be:	e9cd 6302 	strd	r6, r3, [sp, #8]
 800c8c2:	4b84      	ldr	r3, [pc, #528]	@ (800cad4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x260>)
 800c8c4:	e9cd 3100 	strd	r3, r1, [sp]
 800c8c8:	4981      	ldr	r1, [pc, #516]	@ (800cad0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 800c8ca:	234d      	movs	r3, #77	@ 0x4d
 800c8cc:	47a0      	blx	r4
 800c8ce:	e7e8      	b.n	800c8a2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  const TfLiteTensor* input = GetInput(context, node, 0);
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f7f7 fae5 	bl	8003ea0 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800c8d6:	6883      	ldr	r3, [r0, #8]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	2b00      	cmp	r3, #0
  const TfLiteTensor* input = GetInput(context, node, 0);
 800c8dc:	4680      	mov	r8, r0
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800c8de:	dd1c      	ble.n	800c91a <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa6>
  TfLiteTensor* output = GetOutput(context, node, 0);
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	4621      	mov	r1, r4
 800c8e4:	4628      	mov	r0, r5
 800c8e6:	f7f7 faf7 	bl	8003ed8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
  TFLITE_DCHECK(node->user_data != nullptr);
 800c8ea:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c8ee:	f1b9 0f00 	cmp.w	r9, #0
 800c8f2:	f000 80e5 	beq.w	800cac0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x24c>
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
 800c8f6:	f898 4000 	ldrb.w	r4, [r8]
 800c8fa:	2c03      	cmp	r4, #3
 800c8fc:	d030      	beq.n	800c960 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xec>
 800c8fe:	2c09      	cmp	r4, #9
 800c900:	d014      	beq.n	800c92c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xb8>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 800c902:	2c01      	cmp	r4, #1
 800c904:	d159      	bne.n	800c9ba <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x146>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 800c906:	7800      	ldrb	r0, [r0, #0]
 800c908:	2801      	cmp	r0, #1
 800c90a:	d16a      	bne.n	800c9e2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x16e>
    op_data->beta = static_cast<double>(params->beta);
 800c90c:	6838      	ldr	r0, [r7, #0]
 800c90e:	f7f3 fe25 	bl	800055c <__aeabi_f2d>
 800c912:	e9c9 0100 	strd	r0, r1, [r9]
  return kTfLiteOk;
 800c916:	2000      	movs	r0, #0
 800c918:	e7c4      	b.n	800c8a4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x30>
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 800c91a:	4b6f      	ldr	r3, [pc, #444]	@ (800cad8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x264>)
 800c91c:	696c      	ldr	r4, [r5, #20]
 800c91e:	4a6b      	ldr	r2, [pc, #428]	@ (800cacc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800c920:	9300      	str	r3, [sp, #0]
 800c922:	496e      	ldr	r1, [pc, #440]	@ (800cadc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 800c924:	234f      	movs	r3, #79	@ 0x4f
 800c926:	4628      	mov	r0, r5
 800c928:	47a0      	blx	r4
 800c92a:	e7ba      	b.n	800c8a2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
      if (output->type == kTfLiteInt16) {
 800c92c:	7803      	ldrb	r3, [r0, #0]
 800c92e:	2b07      	cmp	r3, #7
 800c930:	d06b      	beq.n	800ca0a <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x196>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 800c932:	2b09      	cmp	r3, #9
 800c934:	f040 80a1 	bne.w	800ca7a <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x206>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 800c938:	6903      	ldr	r3, [r0, #16]
 800c93a:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 800c93e:	f000 808a 	beq.w	800ca56 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1e2>
 800c942:	4a67      	ldr	r2, [pc, #412]	@ (800cae0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x26c>)
 800c944:	4867      	ldr	r0, [pc, #412]	@ (800cae4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800c946:	f06f 017f 	mvn.w	r1, #127	@ 0x7f
 800c94a:	9103      	str	r1, [sp, #12]
 800c94c:	696c      	ldr	r4, [r5, #20]
 800c94e:	4960      	ldr	r1, [pc, #384]	@ (800cad0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 800c950:	9000      	str	r0, [sp, #0]
 800c952:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800c956:	4628      	mov	r0, r5
 800c958:	4a5c      	ldr	r2, [pc, #368]	@ (800cacc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800c95a:	232c      	movs	r3, #44	@ 0x2c
 800c95c:	47a0      	blx	r4
 800c95e:	e7a0      	b.n	800c8a2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 800c960:	7803      	ldrb	r3, [r0, #0]
 800c962:	2b03      	cmp	r3, #3
 800c964:	d162      	bne.n	800ca2c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x1b8>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800c966:	6903      	ldr	r3, [r0, #16]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	f040 809b 	bne.w	800caa4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x230>
    tflite::PreprocessSoftmaxScaling(
 800c96e:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800c972:	f7f3 fdf3 	bl	800055c <__aeabi_f2d>
 800c976:	ec41 0b18 	vmov	d8, r0, r1
 800c97a:	6838      	ldr	r0, [r7, #0]
 800c97c:	f7f3 fdee 	bl	800055c <__aeabi_f2d>
 800c980:	eeb0 1a48 	vmov.f32	s2, s16
 800c984:	eef0 1a68 	vmov.f32	s3, s17
 800c988:	f109 0408 	add.w	r4, r9, #8
 800c98c:	ec41 0b10 	vmov	d0, r0, r1
 800c990:	aa05      	add	r2, sp, #20
 800c992:	4621      	mov	r1, r4
 800c994:	2005      	movs	r0, #5
 800c996:	f7f7 f9cb 	bl	8003d30 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
    op_data->input_left_shift = input_left_shift;
 800c99a:	9905      	ldr	r1, [sp, #20]
 800c99c:	f8c9 100c 	str.w	r1, [r9, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 800c9a0:	221f      	movs	r2, #31
 800c9a2:	2005      	movs	r0, #5
 800c9a4:	f7f7 fa3c 	bl	8003e20 <_ZN6tflite20CalculateInputRadiusEiii>
 800c9a8:	f7f3 fdc6 	bl	8000538 <__aeabi_i2d>
 800c9ac:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
    op_data->diff_min =
 800c9b0:	f7f4 f8dc 	bl	8000b6c <__aeabi_d2iz>
 800c9b4:	f8c9 0018 	str.w	r0, [r9, #24]
  } else {
 800c9b8:	e7ad      	b.n	800c916 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xa2>
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	696f      	ldr	r7, [r5, #20]
 800c9be:	f7f6 fea3 	bl	8003708 <TfLiteTypeGetName>
 800c9c2:	4604      	mov	r4, r0
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	f7f6 fe9f 	bl	8003708 <TfLiteTypeGetName>
 800c9ca:	4947      	ldr	r1, [pc, #284]	@ (800cae8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 800c9cc:	4b47      	ldr	r3, [pc, #284]	@ (800caec <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x278>)
 800c9ce:	4a3f      	ldr	r2, [pc, #252]	@ (800cacc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800c9d0:	e9cd 3100 	strd	r3, r1, [sp]
 800c9d4:	e9cd 4002 	strd	r4, r0, [sp, #8]
 800c9d8:	4945      	ldr	r1, [pc, #276]	@ (800caf0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 800c9da:	233d      	movs	r3, #61	@ 0x3d
 800c9dc:	4628      	mov	r0, r5
 800c9de:	47b8      	blx	r7
 800c9e0:	e75f      	b.n	800c8a2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 800c9e2:	696e      	ldr	r6, [r5, #20]
 800c9e4:	f7f6 fe90 	bl	8003708 <TfLiteTypeGetName>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	461c      	mov	r4, r3
 800c9ee:	f7f6 fe8b 	bl	8003708 <TfLiteTypeGetName>
 800c9f2:	493d      	ldr	r1, [pc, #244]	@ (800cae8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x274>)
 800c9f4:	4b3f      	ldr	r3, [pc, #252]	@ (800caf4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 800c9f6:	4a35      	ldr	r2, [pc, #212]	@ (800cacc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800c9f8:	e9cd 3100 	strd	r3, r1, [sp]
 800c9fc:	e9cd 4002 	strd	r4, r0, [sp, #8]
 800ca00:	493b      	ldr	r1, [pc, #236]	@ (800caf0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 800ca02:	233e      	movs	r3, #62	@ 0x3e
 800ca04:	4628      	mov	r0, r5
 800ca06:	47b0      	blx	r6
 800ca08:	e74b      	b.n	800c8a2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 800ca0a:	6903      	ldr	r3, [r0, #16]
 800ca0c:	4a3a      	ldr	r2, [pc, #232]	@ (800caf8 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x284>)
 800ca0e:	4293      	cmp	r3, r2
 800ca10:	d0ad      	beq.n	800c96e <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xfa>
 800ca12:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ca16:	4839      	ldr	r0, [pc, #228]	@ (800cafc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x288>)
 800ca18:	4932      	ldr	r1, [pc, #200]	@ (800cae4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800ca1a:	696c      	ldr	r4, [r5, #20]
 800ca1c:	4a2b      	ldr	r2, [pc, #172]	@ (800cacc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800ca1e:	e9cd 1000 	strd	r1, r0, [sp]
 800ca22:	2326      	movs	r3, #38	@ 0x26
 800ca24:	492a      	ldr	r1, [pc, #168]	@ (800cad0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 800ca26:	4628      	mov	r0, r5
 800ca28:	47a0      	blx	r4
 800ca2a:	e73a      	b.n	800c8a2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	696e      	ldr	r6, [r5, #20]
 800ca30:	f7f6 fe6a 	bl	8003708 <TfLiteTypeGetName>
 800ca34:	4603      	mov	r3, r0
 800ca36:	4620      	mov	r0, r4
 800ca38:	461c      	mov	r4, r3
 800ca3a:	f7f6 fe65 	bl	8003708 <TfLiteTypeGetName>
 800ca3e:	4930      	ldr	r1, [pc, #192]	@ (800cb00 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x28c>)
 800ca40:	4b2c      	ldr	r3, [pc, #176]	@ (800caf4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 800ca42:	4a22      	ldr	r2, [pc, #136]	@ (800cacc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800ca44:	e9cd 3100 	strd	r3, r1, [sp]
 800ca48:	e9cd 4002 	strd	r4, r0, [sp, #8]
 800ca4c:	4928      	ldr	r1, [pc, #160]	@ (800caf0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 800ca4e:	2321      	movs	r3, #33	@ 0x21
 800ca50:	4628      	mov	r0, r5
 800ca52:	47b0      	blx	r6
 800ca54:	e725      	b.n	800c8a2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 800ca56:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800cb04 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x290>
 800ca5a:	ed90 7a03 	vldr	s14, [r0, #12]
 800ca5e:	eeb4 7a67 	vcmp.f32	s14, s15
 800ca62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca66:	d082      	beq.n	800c96e <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xfa>
 800ca68:	4b27      	ldr	r3, [pc, #156]	@ (800cb08 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x294>)
 800ca6a:	696c      	ldr	r4, [r5, #20]
 800ca6c:	4a17      	ldr	r2, [pc, #92]	@ (800cacc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	491a      	ldr	r1, [pc, #104]	@ (800cadc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x268>)
 800ca72:	232d      	movs	r3, #45	@ 0x2d
 800ca74:	4628      	mov	r0, r5
 800ca76:	47a0      	blx	r4
 800ca78:	e713      	b.n	800c8a2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	696e      	ldr	r6, [r5, #20]
 800ca7e:	f7f6 fe43 	bl	8003708 <TfLiteTypeGetName>
 800ca82:	4603      	mov	r3, r0
 800ca84:	4620      	mov	r0, r4
 800ca86:	461c      	mov	r4, r3
 800ca88:	f7f6 fe3e 	bl	8003708 <TfLiteTypeGetName>
 800ca8c:	491f      	ldr	r1, [pc, #124]	@ (800cb0c <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x298>)
 800ca8e:	4b19      	ldr	r3, [pc, #100]	@ (800caf4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x280>)
 800ca90:	4a0e      	ldr	r2, [pc, #56]	@ (800cacc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800ca92:	e9cd 3100 	strd	r3, r1, [sp]
 800ca96:	e9cd 4002 	strd	r4, r0, [sp, #8]
 800ca9a:	4915      	ldr	r1, [pc, #84]	@ (800caf0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x27c>)
 800ca9c:	232b      	movs	r3, #43	@ 0x2b
 800ca9e:	4628      	mov	r0, r5
 800caa0:	47b0      	blx	r6
 800caa2:	e6fe      	b.n	800c8a2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 800caa4:	4a1a      	ldr	r2, [pc, #104]	@ (800cb10 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x29c>)
 800caa6:	480f      	ldr	r0, [pc, #60]	@ (800cae4 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x270>)
 800caa8:	2100      	movs	r1, #0
 800caaa:	9103      	str	r1, [sp, #12]
 800caac:	696c      	ldr	r4, [r5, #20]
 800caae:	4908      	ldr	r1, [pc, #32]	@ (800cad0 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x25c>)
 800cab0:	9000      	str	r0, [sp, #0]
 800cab2:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800cab6:	4628      	mov	r0, r5
 800cab8:	4a04      	ldr	r2, [pc, #16]	@ (800cacc <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x258>)
 800caba:	2322      	movs	r3, #34	@ 0x22
 800cabc:	47a0      	blx	r4
 800cabe:	e6f0      	b.n	800c8a2 <_ZN6tflite12_GLOBAL__N_114SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x2e>
  TFLITE_DCHECK(node->user_data != nullptr);
 800cac0:	f004 f9fc 	bl	8010ebc <abort>
 800cac4:	08017208 	.word	0x08017208
 800cac8:	08017230 	.word	0x08017230
 800cacc:	080171cc 	.word	0x080171cc
 800cad0:	08015314 	.word	0x08015314
 800cad4:	08016ecc 	.word	0x08016ecc
 800cad8:	08017218 	.word	0x08017218
 800cadc:	080152b4 	.word	0x080152b4
 800cae0:	08017268 	.word	0x08017268
 800cae4:	08017244 	.word	0x08017244
 800cae8:	08017294 	.word	0x08017294
 800caec:	080161a4 	.word	0x080161a4
 800caf0:	08016178 	.word	0x08016178
 800caf4:	08016194 	.word	0x08016194
 800caf8:	ffff8000 	.word	0xffff8000
 800cafc:	08017260 	.word	0x08017260
 800cb00:	08017234 	.word	0x08017234
 800cb04:	3b800000 	.word	0x3b800000
 800cb08:	08017270 	.word	0x08017270
 800cb0c:	080153f0 	.word	0x080153f0
 800cb10:	080172b0 	.word	0x080172b0

0800cb14 <_ZN6tflite16Register_SOFTMAXEv>:
  }
}

}  // namespace

TfLiteRegistration Register_SOFTMAX() {
 800cb14:	b510      	push	{r4, lr}
          /*prepare=*/SoftmaxPrepare,
          /*invoke=*/SoftmaxEval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800cb16:	4c06      	ldr	r4, [pc, #24]	@ (800cb30 <_ZN6tflite16Register_SOFTMAXEv+0x1c>)
TfLiteRegistration Register_SOFTMAX() {
 800cb18:	4686      	mov	lr, r0
          /*version=*/0};
 800cb1a:	4684      	mov	ip, r0
 800cb1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cb22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800cb26:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
 800cb2a:	4670      	mov	r0, lr
 800cb2c:	bd10      	pop	{r4, pc}
 800cb2e:	bf00      	nop
 800cb30:	08013d40 	.word	0x08013d40

0800cb34 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
}

// Quantized softmax with int8_t/uint8_t input and int8_t/uint8_t/int16_t
// output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
 800cb34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  inline int32_t DimensionsCount() const { return size_; }
 800cb38:	680c      	ldr	r4, [r1, #0]
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32_t input_beta_multiplier = params.input_multiplier;
  const int32_t input_beta_left_shift = params.input_left_shift;
  const int diff_min = params.diff_min;
 800cb3a:	f8d0 a018 	ldr.w	sl, [r0, #24]
inline void Softmax(const SoftmaxParams& params,
 800cb3e:	4691      	mov	r9, r2
  const int32_t input_beta_left_shift = params.input_left_shift;
 800cb40:	e9d0 6202 	ldrd	r6, r2, [r0, #8]
inline void Softmax(const SoftmaxParams& params,
 800cb44:	b08b      	sub	sp, #44	@ 0x2c

// A combination of MatchingFlatSize() and FlatSizeSkipDim().
inline int MatchingFlatSizeSkipDim(const RuntimeShape& shape, int skip_dim,
                                   const RuntimeShape& check_shape_0) {
  const int dims_count = shape.DimensionsCount();
  for (int i = 0; i < dims_count; ++i) {
 800cb46:	2c00      	cmp	r4, #0
  const int32_t input_beta_left_shift = params.input_left_shift;
 800cb48:	9200      	str	r2, [sp, #0]
 800cb4a:	f340 818b 	ble.w	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
 800cb4e:	2c05      	cmp	r4, #5
 800cb50:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800cb54:	f340 809e 	ble.w	800cc94 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x160>
 800cb58:	469e      	mov	lr, r3
 800cb5a:	684a      	ldr	r2, [r1, #4]
 800cb5c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb60:	f04f 0c00 	mov.w	ip, #0
 800cb64:	468b      	mov	fp, r1
 800cb66:	4698      	mov	r8, r3
    if (i != skip_dim) {
 800cb68:	4560      	cmp	r0, ip
 800cb6a:	d010      	beq.n	800cb8e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_LT(i, size_);
 800cb6c:	4567      	cmp	r7, ip
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cb6e:	f852 502c 	ldr.w	r5, [r2, ip, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
 800cb72:	ea4f 038c 	mov.w	r3, ip, lsl #2
 800cb76:	f340 8175 	ble.w	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cb7a:	2f05      	cmp	r7, #5
 800cb7c:	bfca      	itet	gt
 800cb7e:	f8d8 1004 	ldrgt.w	r1, [r8, #4]
 800cb82:	f85e 302c 	ldrle.w	r3, [lr, ip, lsl #2]
 800cb86:	58cb      	ldrgt	r3, [r1, r3]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800cb88:	42ab      	cmp	r3, r5
 800cb8a:	f040 816b 	bne.w	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
  for (int i = 0; i < dims_count; ++i) {
 800cb8e:	f10c 0c01 	add.w	ip, ip, #1
 800cb92:	4564      	cmp	r4, ip
 800cb94:	d1e8      	bne.n	800cb68 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x34>
 800cb96:	4643      	mov	r3, r8
 800cb98:	4659      	mov	r1, fp
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800cb9a:	4690      	mov	r8, r2
  int flat_size = 1;
 800cb9c:	f04f 0e01 	mov.w	lr, #1
  for (int i = 0; i < dims_count; ++i) {
 800cba0:	f04f 0c00 	mov.w	ip, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800cba4:	4560      	cmp	r0, ip
 800cba6:	f000 8151 	beq.w	800ce4c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x318>
 800cbaa:	f858 202c 	ldr.w	r2, [r8, ip, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 800cbae:	f10c 0c01 	add.w	ip, ip, #1
 800cbb2:	4564      	cmp	r4, ip
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800cbb4:	fb02 fe0e 	mul.w	lr, r2, lr
  for (int i = 0; i < dims_count; ++i) {
 800cbb8:	d1f4      	bne.n	800cba4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cbba:	2c05      	cmp	r4, #5
 800cbbc:	bfcb      	itete	gt
 800cbbe:	6849      	ldrgt	r1, [r1, #4]
 800cbc0:	eb01 0180 	addle.w	r1, r1, r0, lsl #2
 800cbc4:	f851 2020 	ldrgt.w	r2, [r1, r0, lsl #2]
 800cbc8:	684a      	ldrle	r2, [r1, #4]
    TFLITE_DCHECK_LT(i, size_);
 800cbca:	42b8      	cmp	r0, r7
 800cbcc:	f280 814a 	bge.w	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cbd0:	2f05      	cmp	r7, #5
 800cbd2:	f340 8141 	ble.w	800ce58 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x324>
 800cbd6:	685b      	ldr	r3, [r3, #4]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800cbd8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	f040 8141 	bne.w	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);

  for (int i = 0; i < outer_size; ++i) {
 800cbe2:	f1be 0f00 	cmp.w	lr, #0
 800cbe6:	f340 80a3 	ble.w	800cd30 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1fc>
 800cbea:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800cbec:	f8cd 900c 	str.w	r9, [sp, #12]
 800cbf0:	4648      	mov	r0, r9
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	4411      	add	r1, r2
 800cbf6:	9304      	str	r3, [sp, #16]
 800cbf8:	1887      	adds	r7, r0, r2
 800cbfa:	9307      	str	r3, [sp, #28]
  return a >> offset;
 800cbfc:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 800cc00:	9206      	str	r2, [sp, #24]
 800cc02:	4689      	mov	r9, r1
    InputT max_in_row = std::numeric_limits<InputT>::min();
    for (int c = 0; c < depth; ++c) {
 800cc04:	9b06      	ldr	r3, [sp, #24]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	f340 8082 	ble.w	800cd10 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1dc>
 800cc0c:	9b03      	ldr	r3, [sp, #12]
 800cc0e:	2400      	movs	r4, #0
      if (__a < __b)
 800cc10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc14:	4294      	cmp	r4, r2
 800cc16:	bf38      	it	cc
 800cc18:	4614      	movcc	r4, r2
 800cc1a:	429f      	cmp	r7, r3
 800cc1c:	d1f8      	bne.n	800cc10 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xdc>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
    for (int c = 0; c < depth; ++c) {
      int32_t input_diff =
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800cc1e:	9d03      	ldr	r5, [sp, #12]
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800cc20:	f8dd 8000 	ldr.w	r8, [sp]
 800cc24:	f04f 0b00 	mov.w	fp, #0
 800cc28:	e018      	b.n	800cc5c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x128>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800cc2a:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 800cc2e:	f142 0200 	adc.w	r2, r2, #0
 800cc32:	0fd8      	lsrs	r0, r3, #31
 800cc34:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
        const int32_t input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800cc38:	f7fc fada 	bl	80091f0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
  return a + b;
 800cc3c:	2800      	cmp	r0, #0
  return a & b;
 800cc3e:	f3c0 020b 	ubfx	r2, r0, #0, #12
  return a + b;
 800cc42:	f240 73ff 	movw	r3, #2047	@ 0x7ff
  return a >> offset;
 800cc46:	ea4f 3020 	mov.w	r0, r0, asr #12
  return a + b;
 800cc4a:	bfb8      	it	lt
 800cc4c:	f44f 6300 	movlt.w	r3, #2048	@ 0x800
 800cc50:	429a      	cmp	r2, r3
 800cc52:	bfc8      	it	gt
 800cc54:	3001      	addgt	r0, #1
 800cc56:	4483      	add	fp, r0
    for (int c = 0; c < depth; ++c) {
 800cc58:	42af      	cmp	r7, r5
 800cc5a:	d06c      	beq.n	800cd36 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800cc5c:	f815 3b01 	ldrb.w	r3, [r5], #1
      int32_t input_diff =
 800cc60:	1b1b      	subs	r3, r3, r4
      if (input_diff >= diff_min) {
 800cc62:	459a      	cmp	sl, r3
 800cc64:	dcf8      	bgt.n	800cc58 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x124>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800cc66:	fa03 f308 	lsl.w	r3, r3, r8
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800cc6a:	429e      	cmp	r6, r3
 800cc6c:	d033      	beq.n	800ccd6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1a2>
  std::int64_t ab_64 = a_64 * b_64;
 800cc6e:	fb83 3206 	smull	r3, r2, r3, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800cc72:	2a00      	cmp	r2, #0
 800cc74:	dad9      	bge.n	800cc2a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xf6>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800cc76:	4995      	ldr	r1, [pc, #596]	@ (800cecc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x398>)
 800cc78:	185b      	adds	r3, r3, r1
 800cc7a:	f162 0200 	sbc.w	r2, r2, #0
 800cc7e:	2a00      	cmp	r2, #0
 800cc80:	da04      	bge.n	800cc8c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x158>
 800cc82:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cc86:	185b      	adds	r3, r3, r1
 800cc88:	f142 0200 	adc.w	r2, r2, #0
 800cc8c:	0fd8      	lsrs	r0, r3, #31
 800cc8e:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800cc92:	e7d1      	b.n	800cc38 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
    TFLITE_DCHECK_LT(i, size_);
 800cc94:	681f      	ldr	r7, [r3, #0]
    if (i != skip_dim) {
 800cc96:	b1d8      	cbz	r0, 800ccd0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x19c>
    TFLITE_DCHECK_LT(i, size_);
 800cc98:	2f00      	cmp	r7, #0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cc9a:	684a      	ldr	r2, [r1, #4]
    TFLITE_DCHECK_LT(i, size_);
 800cc9c:	f340 80e2 	ble.w	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cca0:	2f05      	cmp	r7, #5
 800cca2:	685d      	ldr	r5, [r3, #4]
 800cca4:	f300 80e0 	bgt.w	800ce68 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x334>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800cca8:	4295      	cmp	r5, r2
 800ccaa:	f040 80db 	bne.w	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
    if (i != skip_dim) {
 800ccae:	2801      	cmp	r0, #1
 800ccb0:	d00e      	beq.n	800ccd0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x19c>
    TFLITE_DCHECK_LT(i, size_);
 800ccb2:	2f01      	cmp	r7, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ccb4:	688a      	ldr	r2, [r1, #8]
    TFLITE_DCHECK_LT(i, size_);
 800ccb6:	f000 80d5 	beq.w	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ccba:	2f05      	cmp	r7, #5
 800ccbc:	f340 80dc 	ble.w	800ce78 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x344>
 800ccc0:	685d      	ldr	r5, [r3, #4]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800ccc2:	686d      	ldr	r5, [r5, #4]
 800ccc4:	42aa      	cmp	r2, r5
 800ccc6:	f040 80cd 	bne.w	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
    if (i != skip_dim) {
 800ccca:	2802      	cmp	r0, #2
 800cccc:	f040 80f4 	bne.w	800ceb8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x384>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800ccd0:	f101 0804 	add.w	r8, r1, #4
  for (int i = 0; i < dims_count; ++i) {
 800ccd4:	e762      	b.n	800cb9c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x68>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800ccd6:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
 800ccda:	d1c8      	bne.n	800cc6e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x13a>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800ccdc:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800cce0:	e7aa      	b.n	800cc38 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800cce2:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 800cce6:	d163      	bne.n	800cdb0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  assert(exponent <= 31);
 800cce8:	f1b8 0f1f 	cmp.w	r8, #31
 800ccec:	f200 80e6 	bhi.w	800cebc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x388>
  return a + b;
 800ccf0:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ccf4:	9805      	ldr	r0, [sp, #20]
 800ccf6:	4293      	cmp	r3, r2
 800ccf8:	bfc8      	it	gt
 800ccfa:	3001      	addgt	r0, #1
      if (__b < __a)
 800ccfc:	28ff      	cmp	r0, #255	@ 0xff
 800ccfe:	bfa8      	it	ge
 800cd00:	20ff      	movge	r0, #255	@ 0xff

        const int32_t shifted_output =
            unsat_output +
            static_cast<int32_t>(std::numeric_limits<OutputT>::min());

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800cd02:	b2c0      	uxtb	r0, r0
 800cd04:	7028      	strb	r0, [r5, #0]
    for (int c = 0; c < depth; ++c) {
 800cd06:	3501      	adds	r5, #1
 800cd08:	42bd      	cmp	r5, r7
 800cd0a:	d137      	bne.n	800cd7c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x248>
 800cd0c:	46b9      	mov	r9, r7
 800cd0e:	9f08      	ldr	r7, [sp, #32]
  for (int i = 0; i < outer_size; ++i) {
 800cd10:	9b06      	ldr	r3, [sp, #24]
 800cd12:	9903      	ldr	r1, [sp, #12]
 800cd14:	9a07      	ldr	r2, [sp, #28]
 800cd16:	4419      	add	r1, r3
 800cd18:	9103      	str	r1, [sp, #12]
 800cd1a:	9904      	ldr	r1, [sp, #16]
 800cd1c:	4499      	add	r9, r3
 800cd1e:	4419      	add	r1, r3
 800cd20:	441f      	add	r7, r3
 800cd22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd24:	9104      	str	r1, [sp, #16]
 800cd26:	3201      	adds	r2, #1
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	9207      	str	r2, [sp, #28]
 800cd2c:	f47f af6a 	bne.w	800cc04 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd0>
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
      }
    }
  }
}
 800cd30:	b00b      	add	sp, #44	@ 0x2c
 800cd32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      input_val);
}

inline int32_t GetReciprocal(int32_t x, int x_integer_digits,
                             int* num_bits_over_unit) {
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 800cd36:	fabb f88b 	clz	r8, fp
  // This is the number of bits to the left of the binary point above 1.0.
  // Consider x=1.25.  In that case shifted_scale=0.8 and
  // no later adjustment will be needed.
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
  const int32_t shifted_sum_minus_one =
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 800cd3a:	fa0b f008 	lsl.w	r0, fp, r8
                           (static_cast<uint32_t>(1) << 31));

  gemmlowp::FixedPoint<int32_t, 0> shifted_scale =
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
 800cd3e:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800cd42:	f7f9 fdc5 	bl	80068d0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800cd46:	f1c8 0823 	rsb	r8, r8, #35	@ 0x23
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	fa03 fc08 	lsl.w	ip, r3, r8
 800cd50:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
  return a >> offset;
 800cd54:	fa4c f303 	asr.w	r3, ip, r3
 800cd58:	9301      	str	r3, [sp, #4]
 800cd5a:	9b03      	ldr	r3, [sp, #12]
 800cd5c:	9a04      	ldr	r2, [sp, #16]
 800cd5e:	9708      	str	r7, [sp, #32]
 800cd60:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800cd64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cd66:	f8cd c008 	str.w	ip, [sp, #8]
 800cd6a:	189d      	adds	r5, r3, r2
 800cd6c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800cd70:	fa43 f308 	asr.w	r3, r3, r8
 800cd74:	464f      	mov	r7, r9
 800cd76:	9305      	str	r3, [sp, #20]
 800cd78:	46a1      	mov	r9, r4
 800cd7a:	4604      	mov	r4, r0
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800cd7c:	f81b 0f01 	ldrb.w	r0, [fp, #1]!
      int32_t input_diff =
 800cd80:	eba0 0009 	sub.w	r0, r0, r9
      if (input_diff >= diff_min) {
 800cd84:	4582      	cmp	sl, r0
 800cd86:	dc34      	bgt.n	800cdf2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2be>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800cd88:	9b00      	ldr	r3, [sp, #0]
 800cd8a:	4098      	lsls	r0, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800cd8c:	4286      	cmp	r6, r0
 800cd8e:	d054      	beq.n	800ce3a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x306>
  std::int64_t ab_64 = a_64 * b_64;
 800cd90:	fb80 0c06 	smull	r0, ip, r0, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800cd94:	f1bc 0f00 	cmp.w	ip, #0
 800cd98:	db3f      	blt.n	800ce1a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e6>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800cd9a:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 800cd9e:	f14c 0c00 	adc.w	ip, ip, #0
 800cda2:	0fc0      	lsrs	r0, r0, #31
 800cda4:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800cda8:	f7fc fa22 	bl	80091f0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800cdac:	4284      	cmp	r4, r0
 800cdae:	d098      	beq.n	800cce2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1ae>
  std::int64_t ab_64 = a_64 * b_64;
 800cdb0:	fb84 0c00 	smull	r0, ip, r4, r0
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800cdb4:	f1bc 0f00 	cmp.w	ip, #0
 800cdb8:	db1f      	blt.n	800cdfa <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c6>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800cdba:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 800cdbe:	f14c 0c00 	adc.w	ip, ip, #0
 800cdc2:	0fc0      	lsrs	r0, r0, #31
 800cdc4:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
  assert(exponent <= 31);
 800cdc8:	f1b8 0f1f 	cmp.w	r8, #31
 800cdcc:	d876      	bhi.n	800cebc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x388>
  return a & b;
 800cdce:	9b02      	ldr	r3, [sp, #8]
 800cdd0:	ea03 0e00 	and.w	lr, r3, r0
  return a + b;
 800cdd4:	9b01      	ldr	r3, [sp, #4]
 800cdd6:	eb03 7cd0 	add.w	ip, r3, r0, lsr #31
  return a >> offset;
 800cdda:	fa40 f008 	asr.w	r0, r0, r8
  return a + b;
 800cdde:	45e6      	cmp	lr, ip
 800cde0:	bfc8      	it	gt
 800cde2:	3001      	addgt	r0, #1
 800cde4:	28ff      	cmp	r0, #255	@ 0xff
 800cde6:	dc2e      	bgt.n	800ce46 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x312>
      if (__a < __b)
 800cde8:	2800      	cmp	r0, #0
 800cdea:	bfb8      	it	lt
 800cdec:	2000      	movlt	r0, #0
 800cdee:	db89      	blt.n	800cd04 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d0>
 800cdf0:	e787      	b.n	800cd02 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1ce>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800cdf2:	f04f 0300 	mov.w	r3, #0
 800cdf6:	702b      	strb	r3, [r5, #0]
 800cdf8:	e785      	b.n	800cd06 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d2>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800cdfa:	4b34      	ldr	r3, [pc, #208]	@ (800cecc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x398>)
 800cdfc:	18c0      	adds	r0, r0, r3
 800cdfe:	f16c 0c00 	sbc.w	ip, ip, #0
 800ce02:	f1bc 0f00 	cmp.w	ip, #0
 800ce06:	da04      	bge.n	800ce12 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2de>
 800ce08:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ce0c:	18c0      	adds	r0, r0, r3
 800ce0e:	f14c 0c00 	adc.w	ip, ip, #0
 800ce12:	0fc0      	lsrs	r0, r0, #31
 800ce14:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800ce18:	e7d6      	b.n	800cdc8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x294>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800ce1a:	4b2c      	ldr	r3, [pc, #176]	@ (800cecc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x398>)
 800ce1c:	18c0      	adds	r0, r0, r3
 800ce1e:	f16c 0c00 	sbc.w	ip, ip, #0
 800ce22:	f1bc 0f00 	cmp.w	ip, #0
 800ce26:	da04      	bge.n	800ce32 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2fe>
 800ce28:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800ce2c:	18c0      	adds	r0, r0, r3
 800ce2e:	f14c 0c00 	adc.w	ip, ip, #0
 800ce32:	0fc0      	lsrs	r0, r0, #31
 800ce34:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800ce38:	e7b6      	b.n	800cda8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x274>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800ce3a:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
 800ce3e:	d1a7      	bne.n	800cd90 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x25c>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800ce40:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800ce44:	e7b0      	b.n	800cda8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x274>
 800ce46:	20ff      	movs	r0, #255	@ 0xff
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800ce48:	b2c0      	uxtb	r0, r0
 800ce4a:	e75b      	b.n	800cd04 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1d0>
 800ce4c:	f100 0c01 	add.w	ip, r0, #1
 800ce50:	4564      	cmp	r4, ip
 800ce52:	f47f aea7 	bne.w	800cba4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x70>
 800ce56:	e6b0      	b.n	800cbba <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x86>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ce58:	eb03 0380 	add.w	r3, r3, r0, lsl #2
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	4293      	cmp	r3, r2
 800ce60:	f43f aebf 	beq.w	800cbe2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xae>
    TFLITE_DCHECK_LT(i, size_);
 800ce64:	f004 f82a 	bl	8010ebc <abort>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800ce68:	682d      	ldr	r5, [r5, #0]
 800ce6a:	4295      	cmp	r5, r2
 800ce6c:	d1fa      	bne.n	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
    if (i != skip_dim) {
 800ce6e:	2801      	cmp	r0, #1
 800ce70:	f43f af2e 	beq.w	800ccd0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x19c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ce74:	688a      	ldr	r2, [r1, #8]
    TFLITE_DCHECK_LT(i, size_);
 800ce76:	e720      	b.n	800ccba <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x186>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800ce78:	689d      	ldr	r5, [r3, #8]
 800ce7a:	42aa      	cmp	r2, r5
 800ce7c:	d1f2      	bne.n	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
    if (i != skip_dim) {
 800ce7e:	2802      	cmp	r0, #2
 800ce80:	f43f af26 	beq.w	800ccd0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x19c>
    TFLITE_DCHECK_LT(i, size_);
 800ce84:	2f02      	cmp	r7, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ce86:	68ca      	ldr	r2, [r1, #12]
    TFLITE_DCHECK_LT(i, size_);
 800ce88:	ddec      	ble.n	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ce8a:	2f05      	cmp	r7, #5
 800ce8c:	bfca      	itet	gt
 800ce8e:	685d      	ldrgt	r5, [r3, #4]
 800ce90:	68dd      	ldrle	r5, [r3, #12]
 800ce92:	68ad      	ldrgt	r5, [r5, #8]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800ce94:	42aa      	cmp	r2, r5
 800ce96:	d1e5      	bne.n	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
    if (i != skip_dim) {
 800ce98:	2803      	cmp	r0, #3
 800ce9a:	f43f af19 	beq.w	800ccd0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x19c>
    TFLITE_DCHECK_LT(i, size_);
 800ce9e:	2f03      	cmp	r7, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cea0:	690a      	ldr	r2, [r1, #16]
    TFLITE_DCHECK_LT(i, size_);
 800cea2:	dddf      	ble.n	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cea4:	2f05      	cmp	r7, #5
 800cea6:	bfca      	itet	gt
 800cea8:	685d      	ldrgt	r5, [r3, #4]
 800ceaa:	691d      	ldrle	r5, [r3, #16]
 800ceac:	68ed      	ldrgt	r5, [r5, #12]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800ceae:	4295      	cmp	r5, r2
 800ceb0:	d1d8      	bne.n	800ce64 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x330>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800ceb2:	f101 0804 	add.w	r8, r1, #4
  for (int i = 0; i < dims_count; ++i) {
 800ceb6:	e671      	b.n	800cb9c <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x68>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800ceb8:	68ca      	ldr	r2, [r1, #12]
    TFLITE_DCHECK_LT(i, size_);
 800ceba:	e7e6      	b.n	800ce8a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x356>
  assert(exponent <= 31);
 800cebc:	4b04      	ldr	r3, [pc, #16]	@ (800ced0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x39c>)
 800cebe:	4a05      	ldr	r2, [pc, #20]	@ (800ced4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a0>)
 800cec0:	4805      	ldr	r0, [pc, #20]	@ (800ced8 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3a4>)
 800cec2:	f240 1167 	movw	r1, #359	@ 0x167
 800cec6:	f004 f801 	bl	8010ecc <__assert_func>
 800ceca:	bf00      	nop
 800cecc:	c0000001 	.word	0xc0000001
 800ced0:	080165c4 	.word	0x080165c4
 800ced4:	080165d4 	.word	0x080165d4
 800ced8:	08016630 	.word	0x08016630

0800cedc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 800cedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cee0:	469c      	mov	ip, r3
  inline int32_t DimensionsCount() const { return size_; }
 800cee2:	680b      	ldr	r3, [r1, #0]
  const int32_t input_beta_multiplier = params.input_multiplier;
 800cee4:	6884      	ldr	r4, [r0, #8]
  const int diff_min = params.diff_min;
 800cee6:	6985      	ldr	r5, [r0, #24]
inline void Softmax(const SoftmaxParams& params,
 800cee8:	b08b      	sub	sp, #44	@ 0x2c
 800ceea:	4690      	mov	r8, r2
  for (int i = 0; i < dims_count; ++i) {
 800ceec:	2b00      	cmp	r3, #0
  const int32_t input_beta_left_shift = params.input_left_shift;
 800ceee:	68c2      	ldr	r2, [r0, #12]
 800cef0:	9201      	str	r2, [sp, #4]
 800cef2:	f340 81a9 	ble.w	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
 800cef6:	2b05      	cmp	r3, #5
 800cef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 800cefc:	f340 80a6 	ble.w	800d04c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x170>
 800cf00:	46e2      	mov	sl, ip
 800cf02:	684f      	ldr	r7, [r1, #4]
 800cf04:	f85a 2b04 	ldr.w	r2, [sl], #4
 800cf08:	2600      	movs	r6, #0
 800cf0a:	46a3      	mov	fp, r4
 800cf0c:	469e      	mov	lr, r3
 800cf0e:	4689      	mov	r9, r1
    if (i != skip_dim) {
 800cf10:	42b0      	cmp	r0, r6
 800cf12:	d010      	beq.n	800cf36 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5a>
    TFLITE_DCHECK_LT(i, size_);
 800cf14:	42b2      	cmp	r2, r6
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cf16:	f857 3026 	ldr.w	r3, [r7, r6, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
 800cf1a:	ea4f 0186 	mov.w	r1, r6, lsl #2
 800cf1e:	f340 8193 	ble.w	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cf22:	2a05      	cmp	r2, #5
 800cf24:	bfca      	itet	gt
 800cf26:	f8dc 4004 	ldrgt.w	r4, [ip, #4]
 800cf2a:	f85a 1026 	ldrle.w	r1, [sl, r6, lsl #2]
 800cf2e:	5861      	ldrgt	r1, [r4, r1]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800cf30:	4299      	cmp	r1, r3
 800cf32:	f040 8189 	bne.w	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
  for (int i = 0; i < dims_count; ++i) {
 800cf36:	3601      	adds	r6, #1
 800cf38:	45b6      	cmp	lr, r6
 800cf3a:	d1e9      	bne.n	800cf10 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x34>
 800cf3c:	465c      	mov	r4, fp
 800cf3e:	4673      	mov	r3, lr
 800cf40:	4649      	mov	r1, r9
  int flat_size = 1;
 800cf42:	f04f 0e01 	mov.w	lr, #1
  for (int i = 0; i < dims_count; ++i) {
 800cf46:	2600      	movs	r6, #0
 800cf48:	4691      	mov	r9, r2
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800cf4a:	42b0      	cmp	r0, r6
 800cf4c:	f000 816f 	beq.w	800d22e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x352>
 800cf50:	f857 2026 	ldr.w	r2, [r7, r6, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 800cf54:	3601      	adds	r6, #1
 800cf56:	42b3      	cmp	r3, r6
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800cf58:	fb02 fe0e 	mul.w	lr, r2, lr
  for (int i = 0; i < dims_count; ++i) {
 800cf5c:	d1f5      	bne.n	800cf4a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x6e>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cf5e:	2b05      	cmp	r3, #5
 800cf60:	bfcb      	itete	gt
 800cf62:	684b      	ldrgt	r3, [r1, #4]
 800cf64:	eb01 0180 	addle.w	r1, r1, r0, lsl #2
 800cf68:	f853 3020 	ldrgt.w	r3, [r3, r0, lsl #2]
 800cf6c:	684b      	ldrle	r3, [r1, #4]
 800cf6e:	9305      	str	r3, [sp, #20]
    TFLITE_DCHECK_LT(i, size_);
 800cf70:	4548      	cmp	r0, r9
 800cf72:	464a      	mov	r2, r9
 800cf74:	f280 8168 	bge.w	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800cf78:	2a05      	cmp	r2, #5
 800cf7a:	f340 815d 	ble.w	800d238 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x35c>
 800cf7e:	f8dc 3004 	ldr.w	r3, [ip, #4]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800cf82:	9a05      	ldr	r2, [sp, #20]
 800cf84:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	f040 815d 	bne.w	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
  for (int i = 0; i < outer_size; ++i) {
 800cf8e:	f1be 0f00 	cmp.w	lr, #0
 800cf92:	f340 8097 	ble.w	800d0c4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1e8>
 800cf96:	9b05      	ldr	r3, [sp, #20]
 800cf98:	f8cd 8010 	str.w	r8, [sp, #16]
 800cf9c:	005a      	lsls	r2, r3, #1
 800cf9e:	9207      	str	r2, [sp, #28]
 800cfa0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800cfa2:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
 800cfa6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 800cfaa:	4498      	add	r8, r3
  for (int i = 0; i < outer_size; ++i) {
 800cfac:	2300      	movs	r3, #0
 800cfae:	9306      	str	r3, [sp, #24]
    for (int c = 0; c < depth; ++c) {
 800cfb0:	9b05      	ldr	r3, [sp, #20]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	dd78      	ble.n	800d0a8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1cc>
 800cfb6:	9b04      	ldr	r3, [sp, #16]
 800cfb8:	f06f 067f 	mvn.w	r6, #127	@ 0x7f
 800cfbc:	f913 2b01 	ldrsb.w	r2, [r3], #1
 800cfc0:	4296      	cmp	r6, r2
 800cfc2:	bfb8      	it	lt
 800cfc4:	4616      	movlt	r6, r2
 800cfc6:	4598      	cmp	r8, r3
 800cfc8:	d1f8      	bne.n	800cfbc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xe0>
  return a + b;
 800cfca:	f8cd 9008 	str.w	r9, [sp, #8]
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800cfce:	f8dd b010 	ldr.w	fp, [sp, #16]
 800cfd2:	46c1      	mov	r9, r8
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 800cfd4:	f04f 0a00 	mov.w	sl, #0
 800cfd8:	46b0      	mov	r8, r6
 800cfda:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 800cfde:	9e01      	ldr	r6, [sp, #4]
 800cfe0:	e018      	b.n	800d014 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x138>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800cfe2:	f113 4380 	adds.w	r3, r3, #1073741824	@ 0x40000000
 800cfe6:	f141 0100 	adc.w	r1, r1, #0
 800cfea:	0fd8      	lsrs	r0, r3, #31
 800cfec:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 800cff0:	f7fc f8fe 	bl	80091f0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
  return a + b;
 800cff4:	2800      	cmp	r0, #0
  return a & b;
 800cff6:	f3c0 010b 	ubfx	r1, r0, #0, #12
  return a + b;
 800cffa:	bfa8      	it	ge
 800cffc:	463b      	movge	r3, r7
  return a >> offset;
 800cffe:	ea4f 3020 	mov.w	r0, r0, asr #12
  return a + b;
 800d002:	bfb8      	it	lt
 800d004:	f44f 6300 	movlt.w	r3, #2048	@ 0x800
 800d008:	4299      	cmp	r1, r3
 800d00a:	bfc8      	it	gt
 800d00c:	3001      	addgt	r0, #1
 800d00e:	4482      	add	sl, r0
    for (int c = 0; c < depth; ++c) {
 800d010:	45d9      	cmp	r9, fp
 800d012:	d05a      	beq.n	800d0ca <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1ee>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800d014:	f91b 3b01 	ldrsb.w	r3, [fp], #1
      int32_t input_diff =
 800d018:	eba3 0308 	sub.w	r3, r3, r8
      if (input_diff >= diff_min) {
 800d01c:	429d      	cmp	r5, r3
 800d01e:	dcf7      	bgt.n	800d010 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x134>
 800d020:	40b3      	lsls	r3, r6
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800d022:	429c      	cmp	r4, r3
 800d024:	d035      	beq.n	800d092 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b6>
  std::int64_t ab_64 = a_64 * b_64;
 800d026:	fb83 3104 	smull	r3, r1, r3, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d02a:	2900      	cmp	r1, #0
 800d02c:	dad9      	bge.n	800cfe2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x106>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d02e:	4aa2      	ldr	r2, [pc, #648]	@ (800d2b8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3dc>)
 800d030:	189b      	adds	r3, r3, r2
 800d032:	f161 0100 	sbc.w	r1, r1, #0
 800d036:	2900      	cmp	r1, #0
 800d038:	da04      	bge.n	800d044 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x168>
 800d03a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800d03e:	181b      	adds	r3, r3, r0
 800d040:	f141 0100 	adc.w	r1, r1, #0
 800d044:	0fd8      	lsrs	r0, r3, #31
 800d046:	ea40 0041 	orr.w	r0, r0, r1, lsl #1
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800d04a:	e7d1      	b.n	800cff0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x114>
    TFLITE_DCHECK_LT(i, size_);
 800d04c:	f8dc 2000 	ldr.w	r2, [ip]
    if (i != skip_dim) {
 800d050:	b1e8      	cbz	r0, 800d08e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
    TFLITE_DCHECK_LT(i, size_);
 800d052:	2a00      	cmp	r2, #0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d054:	684e      	ldr	r6, [r1, #4]
    TFLITE_DCHECK_LT(i, size_);
 800d056:	f340 80f7 	ble.w	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d05a:	2a05      	cmp	r2, #5
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d05c:	f8dc 7004 	ldr.w	r7, [ip, #4]
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d060:	f300 80f4 	bgt.w	800d24c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x370>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d064:	42b7      	cmp	r7, r6
 800d066:	f040 80ef 	bne.w	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
    if (i != skip_dim) {
 800d06a:	2801      	cmp	r0, #1
 800d06c:	d00f      	beq.n	800d08e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
    TFLITE_DCHECK_LT(i, size_);
 800d06e:	2a01      	cmp	r2, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d070:	688e      	ldr	r6, [r1, #8]
    TFLITE_DCHECK_LT(i, size_);
 800d072:	f000 80e9 	beq.w	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d076:	2a05      	cmp	r2, #5
 800d078:	f340 80f0 	ble.w	800d25c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x380>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d07c:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800d080:	687f      	ldr	r7, [r7, #4]
 800d082:	42be      	cmp	r6, r7
 800d084:	f040 80e0 	bne.w	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
    if (i != skip_dim) {
 800d088:	2802      	cmp	r0, #2
 800d08a:	f040 810b 	bne.w	800d2a4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3c8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d08e:	1d0f      	adds	r7, r1, #4
  for (int i = 0; i < dims_count; ++i) {
 800d090:	e757      	b.n	800cf42 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x66>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800d092:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 800d096:	d1c6      	bne.n	800d026 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x14a>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800d098:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800d09c:	e7a8      	b.n	800cff0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x114>
 800d09e:	462b      	mov	r3, r5
 800d0a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d0a4:	464d      	mov	r5, r9
 800d0a6:	4699      	mov	r9, r3
  for (int i = 0; i < outer_size; ++i) {
 800d0a8:	9a07      	ldr	r2, [sp, #28]
 800d0aa:	9b06      	ldr	r3, [sp, #24]
 800d0ac:	4491      	add	r9, r2
 800d0ae:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800d0b2:	440a      	add	r2, r1
 800d0b4:	9204      	str	r2, [sp, #16]
 800d0b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d0b8:	3301      	adds	r3, #1
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	9306      	str	r3, [sp, #24]
 800d0be:	4488      	add	r8, r1
 800d0c0:	f47f af76 	bne.w	800cfb0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xd4>
}
 800d0c4:	b00b      	add	sp, #44	@ 0x2c
 800d0c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32_t>(x));
 800d0ca:	faba f78a 	clz	r7, sl
      static_cast<int32_t>((static_cast<uint32_t>(x) << headroom_plus_one) -
 800d0ce:	fa0a f007 	lsl.w	r0, sl, r7
      gemmlowp::one_over_one_plus_x_for_x_in_0_1(
 800d0d2:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800d0d6:	f7f9 fbfb 	bl	80068d0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 800d0da:	f1c7 0a1b 	rsb	sl, r7, #27
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800d0de:	f04f 0c01 	mov.w	ip, #1
 800d0e2:	fa0c fc0a 	lsl.w	ip, ip, sl
 800d0e6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
  return a >> offset;
 800d0ea:	ea4f 036c 	mov.w	r3, ip, asr #1
 800d0ee:	4646      	mov	r6, r8
 800d0f0:	46c8      	mov	r8, r9
 800d0f2:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800d0f6:	9302      	str	r3, [sp, #8]
 800d0f8:	9b04      	ldr	r3, [sp, #16]
 800d0fa:	f8cd 8020 	str.w	r8, [sp, #32]
 800d0fe:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800d102:	9b07      	ldr	r3, [sp, #28]
 800d104:	f8cd c00c 	str.w	ip, [sp, #12]
 800d108:	eba9 0703 	sub.w	r7, r9, r3
 800d10c:	464b      	mov	r3, r9
 800d10e:	46b0      	mov	r8, r6
 800d110:	46a9      	mov	r9, r5
 800d112:	4606      	mov	r6, r0
 800d114:	461d      	mov	r5, r3
 800d116:	e03a      	b.n	800d18e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2b2>
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 800d118:	9b01      	ldr	r3, [sp, #4]
 800d11a:	4098      	lsls	r0, r3
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800d11c:	4284      	cmp	r4, r0
 800d11e:	d07f      	beq.n	800d220 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x344>
  std::int64_t ab_64 = a_64 * b_64;
 800d120:	fb80 0c04 	smull	r0, ip, r0, r4
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d124:	f1bc 0f00 	cmp.w	ip, #0
 800d128:	db60      	blt.n	800d1ec <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x310>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d12a:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 800d12e:	f14c 0c00 	adc.w	ip, ip, #0
 800d132:	0fc0      	lsrs	r0, r0, #31
 800d134:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800d138:	f7fc f85a 	bl	80091f0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800d13c:	4286      	cmp	r6, r0
 800d13e:	d069      	beq.n	800d214 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x338>
  std::int64_t ab_64 = a_64 * b_64;
 800d140:	fb80 0c06 	smull	r0, ip, r0, r6
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800d144:	f1bc 0f00 	cmp.w	ip, #0
 800d148:	db2b      	blt.n	800d1a2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2c6>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d14a:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 800d14e:	f14c 0c00 	adc.w	ip, ip, #0
 800d152:	0fc0      	lsrs	r0, r0, #31
 800d154:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
  assert(exponent >= 0);
 800d158:	f1ba 0f00 	cmp.w	sl, #0
 800d15c:	f2c0 80a4 	blt.w	800d2a8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3cc>
  return a & b;
 800d160:	9b03      	ldr	r3, [sp, #12]
 800d162:	ea00 0e03 	and.w	lr, r0, r3
  return a + b;
 800d166:	9b02      	ldr	r3, [sp, #8]
 800d168:	eb03 7cd0 	add.w	ip, r3, r0, lsr #31
  return a >> offset;
 800d16c:	fa40 f00a 	asr.w	r0, r0, sl
  return a + b;
 800d170:	45e6      	cmp	lr, ip
 800d172:	bfc8      	it	gt
 800d174:	3001      	addgt	r0, #1
            unsat_output +
 800d176:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
      if (__b < __a)
 800d17a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d17e:	db30      	blt.n	800d1e2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x306>
 800d180:	f647 70ff 	movw	r0, #32767	@ 0x7fff
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 800d184:	b200      	sxth	r0, r0
 800d186:	8038      	strh	r0, [r7, #0]
    for (int c = 0; c < depth; ++c) {
 800d188:	3702      	adds	r7, #2
 800d18a:	42af      	cmp	r7, r5
 800d18c:	d087      	beq.n	800d09e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1c2>
          static_cast<int32_t>(input_data[i * depth + c]) - max_in_row;
 800d18e:	f91b 0f01 	ldrsb.w	r0, [fp, #1]!
      int32_t input_diff =
 800d192:	eba0 0008 	sub.w	r0, r0, r8
      if (input_diff >= diff_min) {
 800d196:	4581      	cmp	r9, r0
 800d198:	ddbe      	ble.n	800d118 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x23c>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 800d19a:	f248 0300 	movw	r3, #32768	@ 0x8000
 800d19e:	803b      	strh	r3, [r7, #0]
 800d1a0:	e7f2      	b.n	800d188 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2ac>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d1a2:	4b45      	ldr	r3, [pc, #276]	@ (800d2b8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3dc>)
 800d1a4:	18c0      	adds	r0, r0, r3
 800d1a6:	f16c 0c00 	sbc.w	ip, ip, #0
 800d1aa:	f1bc 0f00 	cmp.w	ip, #0
 800d1ae:	da05      	bge.n	800d1bc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2e0>
 800d1b0:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800d1b4:	eb10 000e 	adds.w	r0, r0, lr
 800d1b8:	f14c 0c00 	adc.w	ip, ip, #0
 800d1bc:	0fc0      	lsrs	r0, r0, #31
  assert(exponent >= 0);
 800d1be:	f1ba 0f00 	cmp.w	sl, #0
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d1c2:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
  assert(exponent >= 0);
 800d1c6:	db6f      	blt.n	800d2a8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3cc>
  return a & b;
 800d1c8:	9b03      	ldr	r3, [sp, #12]
 800d1ca:	ea00 0e03 	and.w	lr, r0, r3
  return a + b;
 800d1ce:	9b02      	ldr	r3, [sp, #8]
 800d1d0:	eb03 7cd0 	add.w	ip, r3, r0, lsr #31
  return a >> offset;
 800d1d4:	fa40 f00a 	asr.w	r0, r0, sl
  return a + b;
 800d1d8:	45e6      	cmp	lr, ip
 800d1da:	bfc8      	it	gt
 800d1dc:	3001      	addgt	r0, #1
            unsat_output +
 800d1de:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
      if (__a < __b)
 800d1e2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 800d1e6:	dacd      	bge.n	800d184 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2a8>
 800d1e8:	4834      	ldr	r0, [pc, #208]	@ (800d2bc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e0>)
 800d1ea:	e7cc      	b.n	800d186 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x2aa>
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800d1ec:	4b32      	ldr	r3, [pc, #200]	@ (800d2b8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3dc>)
 800d1ee:	18c0      	adds	r0, r0, r3
 800d1f0:	f16c 0c00 	sbc.w	ip, ip, #0
 800d1f4:	f1bc 0f00 	cmp.w	ip, #0
 800d1f8:	da05      	bge.n	800d206 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x32a>
 800d1fa:	f06f 4e00 	mvn.w	lr, #2147483648	@ 0x80000000
 800d1fe:	eb10 000e 	adds.w	r0, r0, lr
 800d202:	f14c 0c00 	adc.w	ip, ip, #0
 800d206:	0fc0      	lsrs	r0, r0, #31
 800d208:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 800d20c:	f7fb fff0 	bl	80091f0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800d210:	4286      	cmp	r6, r0
 800d212:	d195      	bne.n	800d140 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x264>
 800d214:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
 800d218:	d192      	bne.n	800d140 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x264>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800d21a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800d21e:	e79b      	b.n	800d158 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x27c>
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800d220:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 800d224:	f47f af7c 	bne.w	800d120 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x244>
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800d228:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 800d22c:	e784      	b.n	800d138 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x25c>
 800d22e:	1c46      	adds	r6, r0, #1
 800d230:	42b3      	cmp	r3, r6
 800d232:	f47f ae8a 	bne.w	800cf4a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x6e>
 800d236:	e692      	b.n	800cf5e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x82>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d238:	eb0c 0c80 	add.w	ip, ip, r0, lsl #2
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800d23c:	9a05      	ldr	r2, [sp, #20]
 800d23e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800d242:	4293      	cmp	r3, r2
 800d244:	f43f aea3 	beq.w	800cf8e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xb2>
    TFLITE_DCHECK_LT(i, size_);
 800d248:	f003 fe38 	bl	8010ebc <abort>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d24c:	683f      	ldr	r7, [r7, #0]
 800d24e:	42b7      	cmp	r7, r6
 800d250:	d1fa      	bne.n	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
    if (i != skip_dim) {
 800d252:	2801      	cmp	r0, #1
 800d254:	f43f af1b 	beq.w	800d08e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d258:	688e      	ldr	r6, [r1, #8]
    TFLITE_DCHECK_LT(i, size_);
 800d25a:	e70c      	b.n	800d076 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x19a>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d25c:	f8dc 7008 	ldr.w	r7, [ip, #8]
 800d260:	42be      	cmp	r6, r7
 800d262:	d1f1      	bne.n	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
    if (i != skip_dim) {
 800d264:	2802      	cmp	r0, #2
 800d266:	f43f af12 	beq.w	800d08e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
    TFLITE_DCHECK_LT(i, size_);
 800d26a:	2a02      	cmp	r2, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d26c:	68ce      	ldr	r6, [r1, #12]
    TFLITE_DCHECK_LT(i, size_);
 800d26e:	ddeb      	ble.n	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d270:	2a05      	cmp	r2, #5
 800d272:	bfca      	itet	gt
 800d274:	f8dc 7004 	ldrgt.w	r7, [ip, #4]
 800d278:	f8dc 700c 	ldrle.w	r7, [ip, #12]
 800d27c:	68bf      	ldrgt	r7, [r7, #8]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d27e:	42be      	cmp	r6, r7
 800d280:	d1e2      	bne.n	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
    if (i != skip_dim) {
 800d282:	2803      	cmp	r0, #3
 800d284:	f43f af03 	beq.w	800d08e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x1b2>
    TFLITE_DCHECK_LT(i, size_);
 800d288:	2a03      	cmp	r2, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d28a:	690e      	ldr	r6, [r1, #16]
    TFLITE_DCHECK_LT(i, size_);
 800d28c:	dddc      	ble.n	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d28e:	2a05      	cmp	r2, #5
 800d290:	bfca      	itet	gt
 800d292:	f8dc 7004 	ldrgt.w	r7, [ip, #4]
 800d296:	f8dc 7010 	ldrle.w	r7, [ip, #16]
 800d29a:	68ff      	ldrgt	r7, [r7, #12]
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d29c:	42b7      	cmp	r7, r6
 800d29e:	d1d3      	bne.n	800d248 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x36c>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d2a0:	1d0f      	adds	r7, r1, #4
  for (int i = 0; i < dims_count; ++i) {
 800d2a2:	e64e      	b.n	800cf42 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x66>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d2a4:	68ce      	ldr	r6, [r1, #12]
    TFLITE_DCHECK_LT(i, size_);
 800d2a6:	e7e3      	b.n	800d270 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x394>
  assert(exponent >= 0);
 800d2a8:	4b05      	ldr	r3, [pc, #20]	@ (800d2c0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e4>)
 800d2aa:	4a06      	ldr	r2, [pc, #24]	@ (800d2c4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3e8>)
 800d2ac:	4806      	ldr	r0, [pc, #24]	@ (800d2c8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x3ec>)
 800d2ae:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 800d2b2:	f003 fe0b 	bl	8010ecc <__assert_func>
 800d2b6:	bf00      	nop
 800d2b8:	c0000001 	.word	0xc0000001
 800d2bc:	ffff8000 	.word	0xffff8000
 800d2c0:	080172a4 	.word	0x080172a4
 800d2c4:	080165d4 	.word	0x080165d4
 800d2c8:	08016630 	.word	0x08016630

0800d2cc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:
TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 800d2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2d0:	ed2d 8b04 	vpush	{d8-d9}
 800d2d4:	b0a5      	sub	sp, #148	@ 0x94
 800d2d6:	2800      	cmp	r0, #0
 800d2d8:	d06c      	beq.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
  TFLITE_DCHECK(node != nullptr);
 800d2da:	460d      	mov	r5, r1
 800d2dc:	2900      	cmp	r1, #0
 800d2de:	d069      	beq.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800d2e0:	680a      	ldr	r2, [r1, #0]
 800d2e2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800d2e4:	6851      	ldr	r1, [r2, #4]
 800d2e6:	4606      	mov	r6, r0
 800d2e8:	4798      	blx	r3
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800d2ea:	686a      	ldr	r2, [r5, #4]
 800d2ec:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800d2ee:	6851      	ldr	r1, [r2, #4]
  return context->GetEvalTensor(context, node->inputs->data[index]);
 800d2f0:	4604      	mov	r4, r0
  return context->GetEvalTensor(context, node->outputs->data[index]);
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	4798      	blx	r3
  TFLITE_DCHECK(node->user_data != nullptr);
 800d2f6:	692b      	ldr	r3, [r5, #16]
 800d2f8:	9306      	str	r3, [sp, #24]
 800d2fa:	4605      	mov	r5, r0
 800d2fc:	9005      	str	r0, [sp, #20]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d058      	beq.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
  switch (input->type) {
 800d302:	7a20      	ldrb	r0, [r4, #8]
 800d304:	2803      	cmp	r0, #3
 800d306:	d011      	beq.n	800d32c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x60>
 800d308:	2809      	cmp	r0, #9
 800d30a:	d00f      	beq.n	800d32c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x60>
 800d30c:	2801      	cmp	r0, #1
 800d30e:	d053      	beq.n	800d3b8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xec>
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800d310:	6975      	ldr	r5, [r6, #20]
 800d312:	f7f6 f9f9 	bl	8003708 <TfLiteTypeGetName>
 800d316:	7a23      	ldrb	r3, [r4, #8]
 800d318:	4986      	ldr	r1, [pc, #536]	@ (800d534 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x268>)
 800d31a:	4602      	mov	r2, r0
 800d31c:	4630      	mov	r0, r6
 800d31e:	47a8      	blx	r5
      return kTfLiteError;
 800d320:	2001      	movs	r0, #1
}
 800d322:	b025      	add	sp, #148	@ 0x94
 800d324:	ecbd 8b04 	vpop	{d8-d9}
 800d328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  const auto input_shape = tflite::micro::GetTensorShape(input);
 800d32c:	a80c      	add	r0, sp, #48	@ 0x30
 800d32e:	4621      	mov	r1, r4
 800d330:	f7f9 faa8 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  const auto output_shape = tflite::micro::GetTensorShape(output);
 800d334:	9905      	ldr	r1, [sp, #20]
 800d336:	a812      	add	r0, sp, #72	@ 0x48
 800d338:	f7f9 faa4 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  if (input->type == kTfLiteUInt8) {
 800d33c:	7a23      	ldrb	r3, [r4, #8]
 800d33e:	2b03      	cmp	r3, #3
 800d340:	f000 80d9 	beq.w	800d4f6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x22a>
    if (output->type == kTfLiteInt16) {
 800d344:	9b05      	ldr	r3, [sp, #20]
 800d346:	7a1b      	ldrb	r3, [r3, #8]
 800d348:	2b07      	cmp	r3, #7
 800d34a:	f000 80a4 	beq.w	800d496 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ca>
  inline int32_t DimensionsCount() const { return size_; }
 800d34e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  for (int i = 0; i < dims_count; ++i) {
 800d350:	2a00      	cmp	r2, #0
      const int trailing_dim = input_shape.DimensionsCount() - 1;
 800d352:	f102 33ff 	add.w	r3, r2, #4294967295	@ 0xffffffff
 800d356:	dd2d      	ble.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    TFLITE_DCHECK_LT(i, size_);
 800d358:	9812      	ldr	r0, [sp, #72]	@ 0x48
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d35a:	f8dd c034 	ldr.w	ip, [sp, #52]	@ 0x34
 800d35e:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 800d362:	2805      	cmp	r0, #5
 800d364:	f300 80ec 	bgt.w	800d540 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x274>
 800d368:	2a05      	cmp	r2, #5
 800d36a:	f300 822b 	bgt.w	800d7c4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4f8>
    if (i != skip_dim) {
 800d36e:	2b00      	cmp	r3, #0
 800d370:	f000 80f2 	beq.w	800d558 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28c>
    TFLITE_DCHECK_LT(i, size_);
 800d374:	2800      	cmp	r0, #0
 800d376:	dd1d      	ble.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d378:	45e6      	cmp	lr, ip
 800d37a:	d11b      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d37c:	2b01      	cmp	r3, #1
 800d37e:	f000 80eb 	beq.w	800d558 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28c>
    TFLITE_DCHECK_LT(i, size_);
 800d382:	2801      	cmp	r0, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d384:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
    TFLITE_DCHECK_LT(i, size_);
 800d386:	d015      	beq.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d388:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800d38a:	428e      	cmp	r6, r1
 800d38c:	d112      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d38e:	2b02      	cmp	r3, #2
 800d390:	f000 80e2 	beq.w	800d558 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28c>
    TFLITE_DCHECK_LT(i, size_);
 800d394:	2802      	cmp	r0, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d396:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
    TFLITE_DCHECK_LT(i, size_);
 800d398:	d00c      	beq.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d39a:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800d39c:	428e      	cmp	r6, r1
 800d39e:	d109      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d3a0:	2b03      	cmp	r3, #3
 800d3a2:	f000 80d9 	beq.w	800d558 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28c>
    TFLITE_DCHECK_LT(i, size_);
 800d3a6:	2803      	cmp	r0, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d3a8:	9e10      	ldr	r6, [sp, #64]	@ 0x40
    TFLITE_DCHECK_LT(i, size_);
 800d3aa:	d003      	beq.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d3ac:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800d3ae:	428e      	cmp	r6, r1
 800d3b0:	f000 80d2 	beq.w	800d558 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28c>
  TFLITE_DCHECK(context != nullptr);
 800d3b4:	f003 fd82 	bl	8010ebc <abort>
  tflite::reference_ops::Softmax(op_data, tflite::micro::GetTensorShape(input),
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	a81e      	add	r0, sp, #120	@ 0x78
 800d3bc:	f7f9 fa62 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800d3c0:	6822      	ldr	r2, [r4, #0]
 800d3c2:	9207      	str	r2, [sp, #28]
                                 tflite::micro::GetTensorShape(output),
 800d3c4:	4629      	mov	r1, r5
 800d3c6:	a818      	add	r0, sp, #96	@ 0x60
 800d3c8:	f7f9 fa5c 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800d3cc:	b10d      	cbz	r5, 800d3d2 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x106>
 800d3ce:	682b      	ldr	r3, [r5, #0]
 800d3d0:	9305      	str	r3, [sp, #20]
  inline int32_t DimensionsCount() const { return size_; }
 800d3d2:	9e1e      	ldr	r6, [sp, #120]	@ 0x78
  for (int i = 0; i < dims_count; ++i) {
 800d3d4:	2e00      	cmp	r6, #0
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 800d3d6:	f106 33ff 	add.w	r3, r6, #4294967295	@ 0xffffffff
 800d3da:	ddeb      	ble.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    TFLITE_DCHECK_LT(i, size_);
 800d3dc:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d3e0:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 800d3e2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d3e4:	f1bc 0f05 	cmp.w	ip, #5
 800d3e8:	dc28      	bgt.n	800d43c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x170>
 800d3ea:	2e05      	cmp	r6, #5
 800d3ec:	f340 80e4 	ble.w	800d5b8 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2ec>
    TFLITE_DCHECK_LT(i, size_);
 800d3f0:	f1bc 0f00 	cmp.w	ip, #0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d3f4:	6822      	ldr	r2, [r4, #0]
    TFLITE_DCHECK_LT(i, size_);
 800d3f6:	dddd      	ble.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d3f8:	4290      	cmp	r0, r2
 800d3fa:	d1db      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    TFLITE_DCHECK_LT(i, size_);
 800d3fc:	f1bc 0f01 	cmp.w	ip, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d400:	6861      	ldr	r1, [r4, #4]
    TFLITE_DCHECK_LT(i, size_);
 800d402:	d0d7      	beq.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d404:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d406:	428a      	cmp	r2, r1
 800d408:	d1d4      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    TFLITE_DCHECK_LT(i, size_);
 800d40a:	f1bc 0f02 	cmp.w	ip, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d40e:	68a1      	ldr	r1, [r4, #8]
    TFLITE_DCHECK_LT(i, size_);
 800d410:	d0d0      	beq.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d412:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d414:	428a      	cmp	r2, r1
 800d416:	d1cd      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    TFLITE_DCHECK_LT(i, size_);
 800d418:	f1bc 0f03 	cmp.w	ip, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d41c:	68e1      	ldr	r1, [r4, #12]
    TFLITE_DCHECK_LT(i, size_);
 800d41e:	d0c9      	beq.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d420:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d422:	428a      	cmp	r2, r1
 800d424:	d1c6      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    TFLITE_DCHECK_LT(i, size_);
 800d426:	f1bc 0f05 	cmp.w	ip, #5
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d42a:	6921      	ldr	r1, [r4, #16]
    TFLITE_DCHECK_LT(i, size_);
 800d42c:	d1c2      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d42e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d430:	4291      	cmp	r1, r2
 800d432:	d1bf      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d434:	2b05      	cmp	r3, #5
 800d436:	d1bd      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d438:	46a6      	mov	lr, r4
  for (int i = 0; i < dims_count; ++i) {
 800d43a:	e0e8      	b.n	800d60e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x342>
 800d43c:	2e05      	cmp	r6, #5
 800d43e:	f340 817a 	ble.w	800d736 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x46a>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d442:	6821      	ldr	r1, [r4, #0]
 800d444:	6802      	ldr	r2, [r0, #0]
 800d446:	4291      	cmp	r1, r2
 800d448:	d1b4      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
 800d44a:	6861      	ldr	r1, [r4, #4]
 800d44c:	6842      	ldr	r2, [r0, #4]
 800d44e:	4291      	cmp	r1, r2
 800d450:	d1b0      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
 800d452:	68a1      	ldr	r1, [r4, #8]
 800d454:	6882      	ldr	r2, [r0, #8]
 800d456:	4291      	cmp	r1, r2
 800d458:	d1ac      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
 800d45a:	68e1      	ldr	r1, [r4, #12]
 800d45c:	68c2      	ldr	r2, [r0, #12]
 800d45e:	4291      	cmp	r1, r2
 800d460:	d1a8      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
 800d462:	6921      	ldr	r1, [r4, #16]
 800d464:	6902      	ldr	r2, [r0, #16]
 800d466:	4291      	cmp	r1, r2
 800d468:	d1a4      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d46a:	2b05      	cmp	r3, #5
 800d46c:	d0e4      	beq.n	800d438 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x16c>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d46e:	6961      	ldr	r1, [r4, #20]
 800d470:	6942      	ldr	r2, [r0, #20]
 800d472:	4291      	cmp	r1, r2
 800d474:	d19e      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
 800d476:	2106      	movs	r1, #6
    if (i != skip_dim) {
 800d478:	428b      	cmp	r3, r1
 800d47a:	d007      	beq.n	800d48c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1c0>
    TFLITE_DCHECK_LT(i, size_);
 800d47c:	458c      	cmp	ip, r1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d47e:	f854 2021 	ldr.w	r2, [r4, r1, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
 800d482:	dd97      	ble.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d484:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 800d488:	4295      	cmp	r5, r2
 800d48a:	d193      	bne.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
  for (int i = 0; i < dims_count; ++i) {
 800d48c:	3101      	adds	r1, #1
 800d48e:	428e      	cmp	r6, r1
 800d490:	d1f2      	bne.n	800d478 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1ac>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d492:	46a6      	mov	lr, r4
  for (int i = 0; i < dims_count; ++i) {
 800d494:	e0bb      	b.n	800d60e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x342>
          op_data, tflite::micro::GetTensorShape(input),
 800d496:	4621      	mov	r1, r4
 800d498:	a81e      	add	r0, sp, #120	@ 0x78
 800d49a:	f7f9 f9f3 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
          tflite::micro::GetTensorShape(output),
 800d49e:	9d05      	ldr	r5, [sp, #20]
  return reinterpret_cast<const T*>(tensor->data.raw);
 800d4a0:	6824      	ldr	r4, [r4, #0]
 800d4a2:	4629      	mov	r1, r5
 800d4a4:	a818      	add	r0, sp, #96	@ 0x60
 800d4a6:	f7f9 f9ed 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      tflite::reference_ops::Softmax(
 800d4aa:	682b      	ldr	r3, [r5, #0]
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	9806      	ldr	r0, [sp, #24]
 800d4b0:	ab18      	add	r3, sp, #96	@ 0x60
 800d4b2:	4622      	mov	r2, r4
 800d4b4:	a91e      	add	r1, sp, #120	@ 0x78
 800d4b6:	f7ff fd11 	bl	800cedc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
 800d4ba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800d4bc:	2b05      	cmp	r3, #5
 800d4be:	dc32      	bgt.n	800d526 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x25a>
 800d4c0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d4c2:	2b05      	cmp	r3, #5
 800d4c4:	dd03      	ble.n	800d4ce <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x202>
      delete[] dims_pointer_;
 800d4c6:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800d4c8:	b108      	cbz	r0, 800d4ce <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x202>
 800d4ca:	f003 fa23 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800d4ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d4d0:	2b05      	cmp	r3, #5
 800d4d2:	dd03      	ble.n	800d4dc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>
      delete[] dims_pointer_;
 800d4d4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800d4d6:	b108      	cbz	r0, 800d4dc <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x210>
 800d4d8:	f003 fa1c 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800d4dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4de:	2b05      	cmp	r3, #5
 800d4e0:	dd03      	ble.n	800d4ea <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x21e>
      delete[] dims_pointer_;
 800d4e2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800d4e4:	b108      	cbz	r0, 800d4ea <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x21e>
 800d4e6:	f003 fa15 	bl	8010914 <_ZdaPv>
      return kTfLiteOk;
 800d4ea:	2000      	movs	r0, #0
}
 800d4ec:	b025      	add	sp, #148	@ 0x94
 800d4ee:	ecbd 8b04 	vpop	{d8-d9}
 800d4f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        op_data, tflite::micro::GetTensorShape(input),
 800d4f6:	4621      	mov	r1, r4
 800d4f8:	a81e      	add	r0, sp, #120	@ 0x78
 800d4fa:	f7f9 f9c3 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
        tflite::micro::GetTensorShape(output),
 800d4fe:	9d05      	ldr	r5, [sp, #20]
 800d500:	6824      	ldr	r4, [r4, #0]
 800d502:	4629      	mov	r1, r5
 800d504:	a818      	add	r0, sp, #96	@ 0x60
 800d506:	f7f9 f9bd 	bl	8006884 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800d50a:	b10d      	cbz	r5, 800d510 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x244>
 800d50c:	682b      	ldr	r3, [r5, #0]
 800d50e:	9305      	str	r3, [sp, #20]
    tflite::reference_ops::Softmax(
 800d510:	9b05      	ldr	r3, [sp, #20]
 800d512:	9300      	str	r3, [sp, #0]
 800d514:	9806      	ldr	r0, [sp, #24]
 800d516:	ab18      	add	r3, sp, #96	@ 0x60
 800d518:	4622      	mov	r2, r4
 800d51a:	a91e      	add	r1, sp, #120	@ 0x78
 800d51c:	f7ff fb0a 	bl	800cb34 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
    if (size_ > kMaxSmallSize) {
 800d520:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800d522:	2b05      	cmp	r3, #5
 800d524:	ddcc      	ble.n	800d4c0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f4>
      delete[] dims_pointer_;
 800d526:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d528:	2800      	cmp	r0, #0
 800d52a:	d0c9      	beq.n	800d4c0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f4>
 800d52c:	f003 f9f2 	bl	8010914 <_ZdaPv>
 800d530:	e7c6      	b.n	800d4c0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x1f4>
 800d532:	bf00      	nop
 800d534:	08016f6c 	.word	0x08016f6c
 800d538:	ff7fffff 	.word	0xff7fffff
 800d53c:	00000000 	.word	0x00000000
 800d540:	2a05      	cmp	r2, #5
 800d542:	f300 8118 	bgt.w	800d776 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4aa>
    if (i != skip_dim) {
 800d546:	b13b      	cbz	r3, 800d558 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28c>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d548:	f8de 1000 	ldr.w	r1, [lr]
 800d54c:	458c      	cmp	ip, r1
 800d54e:	f47f af31 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d552:	2b01      	cmp	r3, #1
 800d554:	f040 818e 	bne.w	800d874 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x5a8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d558:	f10d 0834 	add.w	r8, sp, #52	@ 0x34
  int flat_size = 1;
 800d55c:	2101      	movs	r1, #1
  for (int i = 0; i < dims_count; ++i) {
 800d55e:	2700      	movs	r7, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800d560:	42bb      	cmp	r3, r7
 800d562:	f000 8179 	beq.w	800d858 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x58c>
 800d566:	f858 5027 	ldr.w	r5, [r8, r7, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 800d56a:	3701      	adds	r7, #1
 800d56c:	4297      	cmp	r7, r2
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800d56e:	fb05 f101 	mul.w	r1, r5, r1
  for (int i = 0; i < dims_count; ++i) {
 800d572:	d1f5      	bne.n	800d560 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x294>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d574:	2a05      	cmp	r2, #5
 800d576:	bfdb      	ittet	le
 800d578:	aa24      	addle	r2, sp, #144	@ 0x90
 800d57a:	eb02 0283 	addle.w	r2, r2, r3, lsl #2
 800d57e:	f85c 2023 	ldrgt.w	r2, [ip, r3, lsl #2]
 800d582:	f852 2c5c 	ldrle.w	r2, [r2, #-92]
    TFLITE_DCHECK_LT(i, size_);
 800d586:	4283      	cmp	r3, r0
 800d588:	f6bf af14 	bge.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d58c:	2805      	cmp	r0, #5
 800d58e:	f340 8168 	ble.w	800d862 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x596>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800d592:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 800d596:	4293      	cmp	r3, r2
 800d598:	f47f af0c 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      arm_softmax_s8(tflite::micro::GetTensorData<int8_t>(input), outer_size,
 800d59c:	9b05      	ldr	r3, [sp, #20]
 800d59e:	6820      	ldr	r0, [r4, #0]
 800d5a0:	9c06      	ldr	r4, [sp, #24]
 800d5a2:	681d      	ldr	r5, [r3, #0]
 800d5a4:	68a3      	ldr	r3, [r4, #8]
 800d5a6:	9502      	str	r5, [sp, #8]
 800d5a8:	4625      	mov	r5, r4
 800d5aa:	69a4      	ldr	r4, [r4, #24]
 800d5ac:	9401      	str	r4, [sp, #4]
 800d5ae:	68ec      	ldr	r4, [r5, #12]
 800d5b0:	9400      	str	r4, [sp, #0]
 800d5b2:	f002 fc6d 	bl	800fe90 <arm_softmax_s8>
 800d5b6:	e78a      	b.n	800d4ce <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x202>
    if (i != skip_dim) {
 800d5b8:	b33b      	cbz	r3, 800d60a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x33e>
    TFLITE_DCHECK_LT(i, size_);
 800d5ba:	f1bc 0f00 	cmp.w	ip, #0
 800d5be:	f77f aef9 	ble.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d5c2:	42a0      	cmp	r0, r4
 800d5c4:	f47f aef6 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d01e      	beq.n	800d60a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x33e>
    TFLITE_DCHECK_LT(i, size_);
 800d5cc:	f1bc 0f01 	cmp.w	ip, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d5d0:	9920      	ldr	r1, [sp, #128]	@ 0x80
    TFLITE_DCHECK_LT(i, size_);
 800d5d2:	f43f aeef 	beq.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d5d6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d5d8:	4291      	cmp	r1, r2
 800d5da:	f47f aeeb 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d5de:	2b02      	cmp	r3, #2
 800d5e0:	d013      	beq.n	800d60a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x33e>
    TFLITE_DCHECK_LT(i, size_);
 800d5e2:	f1bc 0f02 	cmp.w	ip, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d5e6:	9921      	ldr	r1, [sp, #132]	@ 0x84
    TFLITE_DCHECK_LT(i, size_);
 800d5e8:	f43f aee4 	beq.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d5ec:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d5ee:	4291      	cmp	r1, r2
 800d5f0:	f47f aee0 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d5f4:	2b03      	cmp	r3, #3
 800d5f6:	d008      	beq.n	800d60a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x33e>
    TFLITE_DCHECK_LT(i, size_);
 800d5f8:	f1bc 0f03 	cmp.w	ip, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d5fc:	9922      	ldr	r1, [sp, #136]	@ 0x88
    TFLITE_DCHECK_LT(i, size_);
 800d5fe:	f43f aed9 	beq.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d602:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d604:	428a      	cmp	r2, r1
 800d606:	f47f aed5 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d60a:	f10d 0e7c 	add.w	lr, sp, #124	@ 0x7c
  int flat_size = 1;
 800d60e:	2101      	movs	r1, #1
  for (int i = 0; i < dims_count; ++i) {
 800d610:	2700      	movs	r7, #0
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800d612:	42bb      	cmp	r3, r7
 800d614:	d07f      	beq.n	800d716 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x44a>
 800d616:	f85e 2027 	ldr.w	r2, [lr, r7, lsl #2]
  for (int i = 0; i < dims_count; ++i) {
 800d61a:	3701      	adds	r7, #1
 800d61c:	42be      	cmp	r6, r7
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800d61e:	fb02 f101 	mul.w	r1, r2, r1
  for (int i = 0; i < dims_count; ++i) {
 800d622:	d1f6      	bne.n	800d612 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x346>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d624:	2e05      	cmp	r6, #5
 800d626:	bfdb      	ittet	le
 800d628:	aa24      	addle	r2, sp, #144	@ 0x90
 800d62a:	eb02 0283 	addle.w	r2, r2, r3, lsl #2
 800d62e:	f854 a023 	ldrgt.w	sl, [r4, r3, lsl #2]
 800d632:	f852 ac14 	ldrle.w	sl, [r2, #-20]
    TFLITE_DCHECK_LT(i, size_);
 800d636:	4563      	cmp	r3, ip
 800d638:	f6bf aebc 	bge.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d63c:	f1bc 0f05 	cmp.w	ip, #5
 800d640:	dd6e      	ble.n	800d720 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x454>
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800d642:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800d646:	4553      	cmp	r3, sl
 800d648:	f47f aeb4 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
  for (int i = 0; i < outer_size; ++i) {
 800d64c:	2900      	cmp	r1, #0
 800d64e:	dd56      	ble.n	800d6fe <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x432>
 800d650:	ea4f 038a 	mov.w	r3, sl, lsl #2
 800d654:	9308      	str	r3, [sp, #32]
 800d656:	9b05      	ldr	r3, [sp, #20]
  for (int i = 0; i < dims_count; ++i) {
 800d658:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 800d65c:	eb03 058a 	add.w	r5, r3, sl, lsl #2
 800d660:	e9cd 1609 	strd	r1, r6, [sp, #36]	@ 0x24
 800d664:	9b07      	ldr	r3, [sp, #28]
 800d666:	f04f 0b00 	mov.w	fp, #0
 800d66a:	eb03 078a 	add.w	r7, r3, sl, lsl #2
 800d66e:	46d9      	mov	r9, fp
    for (int c = 0; c < depth; ++c) {
 800d670:	f1ba 0f00 	cmp.w	sl, #0
 800d674:	dd34      	ble.n	800d6e0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x414>
 800d676:	9b07      	ldr	r3, [sp, #28]
 800d678:	ed1f 8a51 	vldr	s16, [pc, #-324]	@ 800d538 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x26c>
 800d67c:	eb03 068b 	add.w	r6, r3, fp, lsl #2
 800d680:	ea4f 048b 	mov.w	r4, fp, lsl #2
 800d684:	4631      	mov	r1, r6
 800d686:	ecf1 7a01 	vldmia	r1!, {s15}
 800d68a:	eef4 7a48 	vcmp.f32	s15, s16
 800d68e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d692:	bfc8      	it	gt
 800d694:	eeb0 8a67 	vmovgt.f32	s16, s15
 800d698:	428f      	cmp	r7, r1
 800d69a:	d1f4      	bne.n	800d686 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3ba>
 800d69c:	9b05      	ldr	r3, [sp, #20]
    float sum = 0.f;
 800d69e:	ed5f 8a59 	vldr	s17, [pc, #-356]	@ 800d53c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x270>
 800d6a2:	441c      	add	r4, r3
                                   static_cast<float>(params.beta));
 800d6a4:	9b06      	ldr	r3, [sp, #24]
 800d6a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d6aa:	f7f3 fa87 	bl	8000bbc <__aeabi_d2f>
 800d6ae:	ee09 0a10 	vmov	s18, r0
 800d6b2:	46a0      	mov	r8, r4
      const float exp_c = std::exp((input_data[i * depth + c] - max) *
 800d6b4:	ecb6 0a01 	vldmia	r6!, {s0}
 800d6b8:	ee30 0a48 	vsub.f32	s0, s0, s16
  { return __builtin_expf(__x); }
 800d6bc:	ee20 0a09 	vmul.f32	s0, s0, s18
 800d6c0:	f003 f97a 	bl	80109b8 <expf>
    for (int c = 0; c < depth; ++c) {
 800d6c4:	42b7      	cmp	r7, r6
      sum += exp_c;
 800d6c6:	ee78 8a80 	vadd.f32	s17, s17, s0
      output_data[i * depth + c] = exp_c;
 800d6ca:	eca8 0a01 	vstmia	r8!, {s0}
    for (int c = 0; c < depth; ++c) {
 800d6ce:	d1f1      	bne.n	800d6b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3e8>
      output_data[i * depth + c] = output_data[i * depth + c] / sum;
 800d6d0:	ed94 7a00 	vldr	s14, [r4]
 800d6d4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800d6d8:	ece4 7a01 	vstmia	r4!, {s15}
    for (int c = 0; c < depth; ++c) {
 800d6dc:	42ac      	cmp	r4, r5
 800d6de:	d1f7      	bne.n	800d6d0 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x404>
  for (int i = 0; i < outer_size; ++i) {
 800d6e0:	9b08      	ldr	r3, [sp, #32]
 800d6e2:	441d      	add	r5, r3
 800d6e4:	441f      	add	r7, r3
 800d6e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6e8:	f109 0901 	add.w	r9, r9, #1
 800d6ec:	454b      	cmp	r3, r9
 800d6ee:	44d3      	add	fp, sl
 800d6f0:	dcbe      	bgt.n	800d670 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x3a4>
 800d6f2:	e9dd 6c0a 	ldrd	r6, ip, [sp, #40]	@ 0x28
    if (size_ > kMaxSmallSize) {
 800d6f6:	f1bc 0f05 	cmp.w	ip, #5
 800d6fa:	dd04      	ble.n	800d706 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x43a>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d6fc:	9819      	ldr	r0, [sp, #100]	@ 0x64
      delete[] dims_pointer_;
 800d6fe:	b110      	cbz	r0, 800d706 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x43a>
 800d700:	f003 f908 	bl	8010914 <_ZdaPv>
    if (size_ > kMaxSmallSize) {
 800d704:	9e1e      	ldr	r6, [sp, #120]	@ 0x78
 800d706:	2e05      	cmp	r6, #5
 800d708:	f77f aeef 	ble.w	800d4ea <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x21e>
      delete[] dims_pointer_;
 800d70c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 800d70e:	2800      	cmp	r0, #0
 800d710:	f47f aee9 	bne.w	800d4e6 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x21a>
 800d714:	e6e9      	b.n	800d4ea <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x21e>
  for (int i = 0; i < dims_count; ++i) {
 800d716:	1c5f      	adds	r7, r3, #1
 800d718:	42be      	cmp	r6, r7
 800d71a:	f47f af7a 	bne.w	800d612 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x346>
 800d71e:	e781      	b.n	800d624 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x358>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d720:	aa24      	add	r2, sp, #144	@ 0x90
 800d722:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800d726:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800d72a:	4553      	cmp	r3, sl
 800d72c:	f47f ae42 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
 800d730:	2900      	cmp	r1, #0
 800d732:	dc8d      	bgt.n	800d650 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x384>
 800d734:	e7e7      	b.n	800d706 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x43a>
    if (i != skip_dim) {
 800d736:	2b00      	cmp	r3, #0
 800d738:	f43f af67 	beq.w	800d60a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x33e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d73c:	6802      	ldr	r2, [r0, #0]
 800d73e:	4294      	cmp	r4, r2
 800d740:	f47f ae38 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d744:	2b01      	cmp	r3, #1
 800d746:	f43f af60 	beq.w	800d60a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x33e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d74a:	6841      	ldr	r1, [r0, #4]
 800d74c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d74e:	4291      	cmp	r1, r2
 800d750:	f47f ae30 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d754:	2b02      	cmp	r3, #2
 800d756:	f43f af58 	beq.w	800d60a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x33e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d75a:	6881      	ldr	r1, [r0, #8]
 800d75c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d75e:	4291      	cmp	r1, r2
 800d760:	f47f ae28 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d764:	2b03      	cmp	r3, #3
 800d766:	f43f af50 	beq.w	800d60a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x33e>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d76a:	9922      	ldr	r1, [sp, #136]	@ 0x88
 800d76c:	68c2      	ldr	r2, [r0, #12]
 800d76e:	4291      	cmp	r1, r2
 800d770:	f43f af4b 	beq.w	800d60a <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x33e>
 800d774:	e61e      	b.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
 800d776:	f8de 1000 	ldr.w	r1, [lr]
 800d77a:	f8dc 5000 	ldr.w	r5, [ip]
 800d77e:	428d      	cmp	r5, r1
 800d780:	f47f ae18 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
 800d784:	f8de 1004 	ldr.w	r1, [lr, #4]
 800d788:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800d78c:	428d      	cmp	r5, r1
 800d78e:	f47f ae11 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
 800d792:	f8de 1008 	ldr.w	r1, [lr, #8]
 800d796:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800d79a:	428d      	cmp	r5, r1
 800d79c:	f47f ae0a 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
 800d7a0:	f8de 100c 	ldr.w	r1, [lr, #12]
 800d7a4:	f8dc 500c 	ldr.w	r5, [ip, #12]
 800d7a8:	428d      	cmp	r5, r1
 800d7aa:	f47f ae03 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
 800d7ae:	f8de 1010 	ldr.w	r1, [lr, #16]
 800d7b2:	f8dc 5010 	ldr.w	r5, [ip, #16]
 800d7b6:	428d      	cmp	r5, r1
 800d7b8:	f47f adfc 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d7bc:	2b05      	cmp	r3, #5
 800d7be:	d132      	bne.n	800d826 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x55a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d7c0:	46e0      	mov	r8, ip
  for (int i = 0; i < dims_count; ++i) {
 800d7c2:	e6cb      	b.n	800d55c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x290>
    TFLITE_DCHECK_LT(i, size_);
 800d7c4:	2800      	cmp	r0, #0
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d7c6:	f8dc 1000 	ldr.w	r1, [ip]
    TFLITE_DCHECK_LT(i, size_);
 800d7ca:	f77f adf3 	ble.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d7ce:	458e      	cmp	lr, r1
 800d7d0:	f47f adf0 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    TFLITE_DCHECK_LT(i, size_);
 800d7d4:	2801      	cmp	r0, #1
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d7d6:	f8dc 6004 	ldr.w	r6, [ip, #4]
    TFLITE_DCHECK_LT(i, size_);
 800d7da:	f43f adeb 	beq.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d7de:	9914      	ldr	r1, [sp, #80]	@ 0x50
 800d7e0:	428e      	cmp	r6, r1
 800d7e2:	f47f ade7 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    TFLITE_DCHECK_LT(i, size_);
 800d7e6:	2802      	cmp	r0, #2
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d7e8:	f8dc 6008 	ldr.w	r6, [ip, #8]
    TFLITE_DCHECK_LT(i, size_);
 800d7ec:	f43f ade2 	beq.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d7f0:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800d7f2:	428e      	cmp	r6, r1
 800d7f4:	f47f adde 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    TFLITE_DCHECK_LT(i, size_);
 800d7f8:	2803      	cmp	r0, #3
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d7fa:	f8dc 600c 	ldr.w	r6, [ip, #12]
    TFLITE_DCHECK_LT(i, size_);
 800d7fe:	f43f add9 	beq.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d802:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800d804:	428e      	cmp	r6, r1
 800d806:	f47f add5 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    TFLITE_DCHECK_LT(i, size_);
 800d80a:	2805      	cmp	r0, #5
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d80c:	f8dc 6010 	ldr.w	r6, [ip, #16]
    TFLITE_DCHECK_LT(i, size_);
 800d810:	f47f add0 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d814:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800d816:	428e      	cmp	r6, r1
 800d818:	f47f adcc 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d81c:	2b05      	cmp	r3, #5
 800d81e:	f47f adc9 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d822:	46e0      	mov	r8, ip
  for (int i = 0; i < dims_count; ++i) {
 800d824:	e69a      	b.n	800d55c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x290>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d826:	f8dc 1014 	ldr.w	r1, [ip, #20]
 800d82a:	f8de 5014 	ldr.w	r5, [lr, #20]
 800d82e:	428d      	cmp	r5, r1
 800d830:	f47f adc0 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
 800d834:	2606      	movs	r6, #6
    if (i != skip_dim) {
 800d836:	42b3      	cmp	r3, r6
 800d838:	d009      	beq.n	800d84e <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x582>
    TFLITE_DCHECK_LT(i, size_);
 800d83a:	42b0      	cmp	r0, r6
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d83c:	f85c 1026 	ldr.w	r1, [ip, r6, lsl #2]
    TFLITE_DCHECK_LT(i, size_);
 800d840:	f77f adb8 	ble.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d844:	f85e 5026 	ldr.w	r5, [lr, r6, lsl #2]
 800d848:	428d      	cmp	r5, r1
 800d84a:	f47f adb3 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
  for (int i = 0; i < dims_count; ++i) {
 800d84e:	3601      	adds	r6, #1
 800d850:	42b2      	cmp	r2, r6
 800d852:	d1f0      	bne.n	800d836 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x56a>
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800d854:	46e0      	mov	r8, ip
  for (int i = 0; i < dims_count; ++i) {
 800d856:	e681      	b.n	800d55c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x290>
 800d858:	1c5f      	adds	r7, r3, #1
 800d85a:	42ba      	cmp	r2, r7
 800d85c:	f47f ae80 	bne.w	800d560 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x294>
 800d860:	e688      	b.n	800d574 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2a8>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800d862:	a824      	add	r0, sp, #144	@ 0x90
 800d864:	eb00 0383 	add.w	r3, r0, r3, lsl #2
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800d868:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d86c:	4293      	cmp	r3, r2
 800d86e:	f43f ae95 	beq.w	800d59c <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x2d0>
 800d872:	e59f      	b.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d874:	f8de 1004 	ldr.w	r1, [lr, #4]
 800d878:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800d87a:	428d      	cmp	r5, r1
 800d87c:	f47f ad9a 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d880:	2b02      	cmp	r3, #2
 800d882:	f43f ae69 	beq.w	800d558 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28c>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d886:	f8de 1008 	ldr.w	r1, [lr, #8]
 800d88a:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d88c:	428d      	cmp	r5, r1
 800d88e:	f47f ad91 	bne.w	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
    if (i != skip_dim) {
 800d892:	2b03      	cmp	r3, #3
 800d894:	f43f ae60 	beq.w	800d558 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28c>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 800d898:	f8de 100c 	ldr.w	r1, [lr, #12]
 800d89c:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800d89e:	428d      	cmp	r5, r1
 800d8a0:	f43f ae5a 	beq.w	800d558 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x28c>
 800d8a4:	e586      	b.n	800d3b4 <_ZN6tflite12_GLOBAL__N_111SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xe8>
 800d8a6:	bf00      	nop

0800d8a8 <_ZN6tflite19GreedyMemoryPlannerD1Ev>:
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
}

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
  // We don't own the scratch buffer, so don't deallocate anything.
}
 800d8a8:	4770      	bx	lr
 800d8aa:	bf00      	nop

0800d8ac <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 800d8ac:	6880      	ldr	r0, [r0, #8]
 800d8ae:	4770      	bx	lr

0800d8b0 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800d8b0:	b510      	push	{r4, lr}
}
 800d8b2:	212c      	movs	r1, #44	@ 0x2c
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800d8b4:	4604      	mov	r4, r0
}
 800d8b6:	f003 f82b 	bl	8010910 <_ZdlPvj>
 800d8ba:	4620      	mov	r0, r4
 800d8bc:	bd10      	pop	{r4, pc}
 800d8be:	bf00      	nop

0800d8c0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:
    int last_time_used) {
 800d8c0:	b538      	push	{r3, r4, r5, lr}
  if (buffer_count_ >= max_buffer_count_) {
 800d8c2:	6884      	ldr	r4, [r0, #8]
 800d8c4:	6845      	ldr	r5, [r0, #4]
 800d8c6:	42ac      	cmp	r4, r5
    int last_time_used) {
 800d8c8:	4684      	mov	ip, r0
  if (buffer_count_ >= max_buffer_count_) {
 800d8ca:	da13      	bge.n	800d8f4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x34>
  BufferRequirements* current = &requirements_[buffer_count_];
 800d8cc:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800d8d0:	0120      	lsls	r0, r4, #4
  current->size = size;
 800d8d2:	500a      	str	r2, [r1, r0]
  BufferRequirements* current = &requirements_[buffer_count_];
 800d8d4:	eb01 1204 	add.w	r2, r1, r4, lsl #4
  current->offline_offset = kOnlinePlannedBuffer;
 800d8d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
  current->first_time_used = first_time_used;
 800d8dc:	6093      	str	r3, [r2, #8]
  current->last_time_used = last_time_used;
 800d8de:	9b04      	ldr	r3, [sp, #16]
 800d8e0:	60d3      	str	r3, [r2, #12]
  ++buffer_count_;
 800d8e2:	3401      	adds	r4, #1
  need_to_calculate_offsets_ = true;
 800d8e4:	2301      	movs	r3, #1
  current->offline_offset = kOnlinePlannedBuffer;
 800d8e6:	6051      	str	r1, [r2, #4]
  return kTfLiteOk;
 800d8e8:	2000      	movs	r0, #0
  ++buffer_count_;
 800d8ea:	f8cc 4008 	str.w	r4, [ip, #8]
  need_to_calculate_offsets_ = true;
 800d8ee:	f88c 3028 	strb.w	r3, [ip, #40]	@ 0x28
}
 800d8f2:	bd38      	pop	{r3, r4, r5, pc}
 800d8f4:	4608      	mov	r0, r1
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 800d8f6:	462a      	mov	r2, r5
 800d8f8:	4902      	ldr	r1, [pc, #8]	@ (800d904 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x44>)
 800d8fa:	f7f5 ff11 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 800d8fe:	2001      	movs	r0, #1
}
 800d900:	bd38      	pop	{r3, r4, r5, pc}
 800d902:	bf00      	nop
 800d904:	080172b4 	.word	0x080172b4

0800d908 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:
GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 800d908:	b410      	push	{r4}
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 800d90a:	4c0f      	ldr	r4, [pc, #60]	@ (800d948 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0x40>)
 800d90c:	6004      	str	r4, [r0, #0]
 800d90e:	2400      	movs	r4, #0
 800d910:	6084      	str	r4, [r0, #8]
 800d912:	2401      	movs	r4, #1
 800d914:	f880 4028 	strb.w	r4, [r0, #40]	@ 0x28
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800d918:	f104 34cc 	add.w	r4, r4, #3435973836	@ 0xcccccccc
 800d91c:	fba4 4202 	umull	r4, r2, r4, r2
 800d920:	0952      	lsrs	r2, r2, #5
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800d922:	60c1      	str	r1, [r0, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 800d924:	eb01 1102 	add.w	r1, r1, r2, lsl #4
  next_free += sizeof(int) * max_buffer_count_;
 800d928:	eb01 0482 	add.w	r4, r1, r2, lsl #2
  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800d92c:	e9c0 1404 	strd	r1, r4, [r0, #16]
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800d930:	6042      	str	r2, [r0, #4]
  next_free += sizeof(int) * max_buffer_count_;
 800d932:	eb04 0482 	add.w	r4, r4, r2, lsl #2
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800d936:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800d93a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 800d93e:	6184      	str	r4, [r0, #24]
  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 800d940:	6242      	str	r2, [r0, #36]	@ 0x24
}
 800d942:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d946:	4770      	bx	lr
 800d948:	08017308 	.word	0x08017308

0800d94c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:
    int last_time_used, int offline_offset) {
 800d94c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800d950:	6804      	ldr	r4, [r0, #0]
 800d952:	f8df 9060 	ldr.w	r9, [pc, #96]	@ 800d9b4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x68>
 800d956:	68a7      	ldr	r7, [r4, #8]
  BufferRequirements* current = &requirements_[buffer_count_];
 800d958:	e9d0 4802 	ldrd	r4, r8, [r0, #8]
 800d95c:	454f      	cmp	r7, r9
    int last_time_used, int offline_offset) {
 800d95e:	b083      	sub	sp, #12
  BufferRequirements* current = &requirements_[buffer_count_];
 800d960:	eb08 1604 	add.w	r6, r8, r4, lsl #4
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800d964:	d116      	bne.n	800d994 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x48>
 800d966:	4692      	mov	sl, r2
  if (buffer_count_ >= max_buffer_count_) {
 800d968:	6842      	ldr	r2, [r0, #4]
 800d96a:	4294      	cmp	r4, r2
 800d96c:	da19      	bge.n	800d9a2 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x56>
 800d96e:	ea4f 1b04 	mov.w	fp, r4, lsl #4
  current->size = size;
 800d972:	461d      	mov	r5, r3
  current->last_time_used = last_time_used;
 800d974:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
  current->size = size;
 800d976:	f848 a00b 	str.w	sl, [r8, fp]
  ++buffer_count_;
 800d97a:	3401      	adds	r4, #1
  need_to_calculate_offsets_ = true;
 800d97c:	2301      	movs	r3, #1
  current->first_time_used = first_time_used;
 800d97e:	60b5      	str	r5, [r6, #8]
  current->last_time_used = last_time_used;
 800d980:	60f2      	str	r2, [r6, #12]
  ++buffer_count_;
 800d982:	6084      	str	r4, [r0, #8]
  need_to_calculate_offsets_ = true;
 800d984:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
  current->offline_offset = offline_offset;
 800d988:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d98a:	6073      	str	r3, [r6, #4]
  return kTfLiteOk;
 800d98c:	2000      	movs	r0, #0
}
 800d98e:	b003      	add	sp, #12
 800d990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800d994:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800d996:	9400      	str	r4, [sp, #0]
 800d998:	47b8      	blx	r7
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d0f4      	beq.n	800d988 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x3c>
    return kTfLiteError;
 800d99e:	2001      	movs	r0, #1
 800d9a0:	e7f5      	b.n	800d98e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x42>
 800d9a2:	468e      	mov	lr, r1
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 800d9a4:	4670      	mov	r0, lr
 800d9a6:	4902      	ldr	r1, [pc, #8]	@ (800d9b0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x64>)
 800d9a8:	f7f5 feba 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
    return kTfLiteError;
 800d9ac:	2001      	movs	r0, #1
 800d9ae:	e7ee      	b.n	800d98e <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x42>
 800d9b0:	080172b4 	.word	0x080172b4
 800d9b4:	0800d8c1 	.word	0x0800d8c1

0800d9b8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800d9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800d9bc:	f890 6028 	ldrb.w	r6, [r0, #40]	@ 0x28
void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800d9c0:	b083      	sub	sp, #12
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800d9c2:	2e00      	cmp	r6, #0
 800d9c4:	f000 80b1 	beq.w	800db2a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x172>
 800d9c8:	6885      	ldr	r5, [r0, #8]
 800d9ca:	2d00      	cmp	r5, #0
 800d9cc:	4684      	mov	ip, r0
 800d9ce:	f000 80ac 	beq.w	800db2a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x172>
    buffer_offsets_[buffer_id] = 0;
 800d9d2:	f8dc 1024 	ldr.w	r1, [ip, #36]	@ 0x24
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800d9d6:	f8dc 400c 	ldr.w	r4, [ip, #12]
    buffer_offsets_[buffer_id] = 0;
 800d9da:	9100      	str	r1, [sp, #0]
  need_to_calculate_offsets_ = false;
 800d9dc:	f04f 0000 	mov.w	r0, #0
                     &buffer_ids_sorted_[idx_from_head],
 800d9e0:	e9dc e204 	ldrd	lr, r2, [ip, #16]
  need_to_calculate_offsets_ = false;
 800d9e4:	f88c 0028 	strb.w	r0, [ip, #40]	@ 0x28
  for (int i = 0; i < buffer_count_; ++i) {
 800d9e8:	f340 80fc 	ble.w	800dbe4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x22c>
 800d9ec:	4623      	mov	r3, r4
 800d9ee:	f1a1 0804 	sub.w	r8, r1, #4
  int idx_from_head = 0;
 800d9f2:	4607      	mov	r7, r0
 800d9f4:	46a9      	mov	r9, r5
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 800d9f6:	e9d3 5100 	ldrd	r5, r1, [r3]
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800d9fa:	f1b1 3fff 	cmp.w	r1, #4294967295	@ 0xffffffff
 800d9fe:	f000 80d0 	beq.w	800dba2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1ea>
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 800da02:	f84e 5027 	str.w	r5, [lr, r7, lsl #2]
      buffer_ids_sorted_[idx_from_head] = i;
 800da06:	f842 0027 	str.w	r0, [r2, r7, lsl #2]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 800da0a:	6859      	ldr	r1, [r3, #4]
      buffer_offsets_[i] = -1;
 800da0c:	f848 1f04 	str.w	r1, [r8, #4]!
  for (int i = 0; i < buffer_count_; ++i) {
 800da10:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800da14:	3001      	adds	r0, #1
 800da16:	4281      	cmp	r1, r0
      idx_from_head++;
 800da18:	f107 0701 	add.w	r7, r7, #1
  for (int i = 0; i < buffer_count_; ++i) {
 800da1c:	f103 0310 	add.w	r3, r3, #16
 800da20:	dce9      	bgt.n	800d9f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3e>
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800da22:	eb0e 0e87 	add.w	lr, lr, r7, lsl #2
 800da26:	1bcd      	subs	r5, r1, r7
 800da28:	eb02 0787 	add.w	r7, r2, r7, lsl #2
    for (int i = 1; i < size; ++i) {
 800da2c:	2d01      	cmp	r5, #1
 800da2e:	dd1a      	ble.n	800da66 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xae>
 800da30:	f1ae 0304 	sub.w	r3, lr, #4
 800da34:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800da38:	46b1      	mov	r9, r6
 800da3a:	46a8      	mov	r8, r5
 800da3c:	4639      	mov	r1, r7
  for (int i = 0; i < buffer_count_; ++i) {
 800da3e:	4673      	mov	r3, lr
    any_swapped = false;
 800da40:	2600      	movs	r6, #0
      if (values[i - 1] < values[i]) {
 800da42:	6818      	ldr	r0, [r3, #0]
 800da44:	f853 5f04 	ldr.w	r5, [r3, #4]!
 800da48:	42a8      	cmp	r0, r5
 800da4a:	da06      	bge.n	800da5a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xa2>
        values[i] = value_temp;
 800da4c:	e943 5001 	strd	r5, r0, [r3, #-4]
        ids[i - 1] = ids[i];
 800da50:	e9d1 0500 	ldrd	r0, r5, [r1]
 800da54:	e9c1 5000 	strd	r5, r0, [r1]
        any_swapped = true;
 800da58:	464e      	mov	r6, r9
    for (int i = 1; i < size; ++i) {
 800da5a:	4598      	cmp	r8, r3
 800da5c:	f101 0104 	add.w	r1, r1, #4
 800da60:	d1ef      	bne.n	800da42 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x8a>
  do {
 800da62:	2e00      	cmp	r6, #0
 800da64:	d1ea      	bne.n	800da3c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x84>
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800da66:	f8dc 0018 	ldr.w	r0, [ip, #24]
  next_free_entry_ = 1;
 800da6a:	2101      	movs	r1, #1
 800da6c:	f8cc 101c 	str.w	r1, [ip, #28]
  first_entry_index_ = 0;
 800da70:	2300      	movs	r3, #0
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800da72:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
  first_entry_index_ = 0;
 800da76:	f8cc 3020 	str.w	r3, [ip, #32]
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800da7a:	6081      	str	r1, [r0, #8]
  int buffer_id = buffer_ids_sorted_[0];
 800da7c:	6811      	ldr	r1, [r2, #0]
  first_entry->requirements_index = buffer_id;
 800da7e:	6041      	str	r1, [r0, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800da80:	eb04 1501 	add.w	r5, r4, r1, lsl #4
 800da84:	686d      	ldr	r5, [r5, #4]
 800da86:	3501      	adds	r5, #1
 800da88:	f000 80a8 	beq.w	800dbdc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x224>
  first_entry->offset = buffer_offsets_[buffer_id];
 800da8c:	9b00      	ldr	r3, [sp, #0]
 800da8e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da92:	6003      	str	r3, [r0, #0]
  for (int i = 1; i < buffer_count_; ++i) {
 800da94:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800da98:	2b01      	cmp	r3, #1
 800da9a:	dd46      	ble.n	800db2a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x172>
 800da9c:	4693      	mov	fp, r2
 800da9e:	4681      	mov	r9, r0
 800daa0:	f04f 0e01 	mov.w	lr, #1
 800daa4:	e00b      	b.n	800dabe <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x106>
      first_entry->next_entry_index = first_entry_index_;
 800daa6:	f8dc 3020 	ldr.w	r3, [ip, #32]
 800daaa:	6093      	str	r3, [r2, #8]
      first_entry_index_ = new_entry_index;
 800daac:	4691      	mov	r9, r2
 800daae:	f8cc 6020 	str.w	r6, [ip, #32]
  for (int i = 1; i < buffer_count_; ++i) {
 800dab2:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800dab6:	f10e 0e01 	add.w	lr, lr, #1
 800daba:	4573      	cmp	r3, lr
 800dabc:	dd35      	ble.n	800db2a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x172>
    buffer_id = buffer_ids_sorted_[i];
 800dabe:	f85b 5f04 	ldr.w	r5, [fp, #4]!
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800dac2:	eb04 1305 	add.w	r3, r4, r5, lsl #4
 800dac6:	012a      	lsls	r2, r5, #4
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800dac8:	6859      	ldr	r1, [r3, #4]
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 800daca:	689f      	ldr	r7, [r3, #8]
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800dacc:	68de      	ldr	r6, [r3, #12]
    const int wanted_size = wanted_requirements->size;
 800dace:	f854 8002 	ldr.w	r8, [r4, r2]
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800dad2:	1c4b      	adds	r3, r1, #1
 800dad4:	d02c      	beq.n	800db30 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x178>
    buffer_offsets_[buffer_id] = candidate_offset;
 800dad6:	9b00      	ldr	r3, [sp, #0]
 800dad8:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800dadc:	f8dc 601c 	ldr.w	r6, [ip, #28]
 800dae0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    ++next_free_entry_;
 800dae4:	1c73      	adds	r3, r6, #1
    new_entry->offset = candidate_offset;
 800dae6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800daea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    new_entry->requirements_index = buffer_id;
 800daee:	6055      	str	r5, [r2, #4]
    ++next_free_entry_;
 800daf0:	f8cc 301c 	str.w	r3, [ip, #28]
    if (first_entry->offset > candidate_offset) {
 800daf4:	f8d9 3000 	ldr.w	r3, [r9]
 800daf8:	428b      	cmp	r3, r1
 800dafa:	dcd4      	bgt.n	800daa6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xee>
 800dafc:	464f      	mov	r7, r9
 800dafe:	e004      	b.n	800db0a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x152>
        if (next_entry->offset > candidate_offset) {
 800db00:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 800db04:	428d      	cmp	r5, r1
 800db06:	dc61      	bgt.n	800dbcc <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x214>
 800db08:	4647      	mov	r7, r8
        const int next_entry_index = current_entry->next_entry_index;
 800db0a:	68bb      	ldr	r3, [r7, #8]
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800db0c:	eb03 0543 	add.w	r5, r3, r3, lsl #1
        if (next_entry_index == -1) {
 800db10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800db14:	eb00 0885 	add.w	r8, r0, r5, lsl #2
        if (next_entry_index == -1) {
 800db18:	d1f2      	bne.n	800db00 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x148>
          current_entry->next_entry_index = new_entry_index;
 800db1a:	60be      	str	r6, [r7, #8]
          new_entry->next_entry_index = -1;
 800db1c:	6093      	str	r3, [r2, #8]
  for (int i = 1; i < buffer_count_; ++i) {
 800db1e:	f8dc 3008 	ldr.w	r3, [ip, #8]
 800db22:	f10e 0e01 	add.w	lr, lr, #1
 800db26:	4573      	cmp	r3, lr
 800db28:	dcc9      	bgt.n	800dabe <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x106>
}
 800db2a:	b003      	add	sp, #12
 800db2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800db30:	f8dc 3020 	ldr.w	r3, [ip, #32]
 800db34:	9501      	str	r5, [sp, #4]
 800db36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      ListEntry* prior_entry = nullptr;
 800db3a:	f04f 0a00 	mov.w	sl, #0
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800db3e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    int candidate_offset = 0;
 800db42:	4651      	mov	r1, sl
      &requirements_[entry->requirements_index];
 800db44:	685a      	ldr	r2, [r3, #4]
  const BufferRequirements* entry_requirements =
 800db46:	eb04 1202 	add.w	r2, r4, r2, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
 800db4a:	6895      	ldr	r5, [r2, #8]
 800db4c:	42ae      	cmp	r6, r5
 800db4e:	db20      	blt.n	800db92 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1da>
  if (first_time_used > entry_requirements->last_time_used) {
 800db50:	68d2      	ldr	r2, [r2, #12]
 800db52:	4297      	cmp	r7, r2
 800db54:	dc1d      	bgt.n	800db92 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1da>
        if (prior_entry) {
 800db56:	f1ba 0f00 	cmp.w	sl, #0
 800db5a:	d008      	beq.n	800db6e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b6>
          const int prior_entry_offset =
 800db5c:	e9da a200 	ldrd	sl, r2, [sl]
              prior_entry->offset + candidate_requirements->size;
 800db60:	0112      	lsls	r2, r2, #4
          const int prior_entry_offset =
 800db62:	58a2      	ldr	r2, [r4, r2]
 800db64:	4452      	add	r2, sl
 800db66:	4291      	cmp	r1, r2
 800db68:	bfb8      	it	lt
 800db6a:	4611      	movlt	r1, r2
        if (next_entry == nullptr) {
 800db6c:	b34b      	cbz	r3, 800dbc2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x20a>
        const int gap = next_entry->offset - candidate_offset;
 800db6e:	681a      	ldr	r2, [r3, #0]
 800db70:	1a52      	subs	r2, r2, r1
        if (gap >= wanted_size) {
 800db72:	4590      	cmp	r8, r2
 800db74:	dd25      	ble.n	800dbc2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x20a>
    if (start->next_entry_index == -1) {
 800db76:	689a      	ldr	r2, [r3, #8]
 800db78:	1c55      	adds	r5, r2, #1
 800db7a:	d024      	beq.n	800dbc6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x20e>
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 800db7c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800db80:	469a      	mov	sl, r3
 800db82:	eb00 0382 	add.w	r3, r0, r2, lsl #2
      &requirements_[entry->requirements_index];
 800db86:	685a      	ldr	r2, [r3, #4]
  const BufferRequirements* entry_requirements =
 800db88:	eb04 1202 	add.w	r2, r4, r2, lsl #4
  if (entry_requirements->first_time_used > last_time_used) {
 800db8c:	6895      	ldr	r5, [r2, #8]
 800db8e:	42ae      	cmp	r6, r5
 800db90:	dade      	bge.n	800db50 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x198>
    if (candidate_next_entry->next_entry_index == -1) {
 800db92:	689b      	ldr	r3, [r3, #8]
 800db94:	1c5a      	adds	r2, r3, #1
 800db96:	d01c      	beq.n	800dbd2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21a>
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800db98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    candidate_next_entry =
 800db9c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800dba0:	e7d0      	b.n	800db44 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x18c>
      idx_from_tail--;
 800dba2:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
  for (int i = 0; i < buffer_count_; ++i) {
 800dba6:	3310      	adds	r3, #16
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 800dba8:	f84e 5029 	str.w	r5, [lr, r9, lsl #2]
      buffer_ids_sorted_[idx_from_tail] = i;
 800dbac:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
      buffer_offsets_[i] = -1;
 800dbb0:	f848 1f04 	str.w	r1, [r8, #4]!
  for (int i = 0; i < buffer_count_; ++i) {
 800dbb4:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800dbb8:	3001      	adds	r0, #1
 800dbba:	4281      	cmp	r1, r0
 800dbbc:	f73f af1b 	bgt.w	800d9f6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3e>
 800dbc0:	e72f      	b.n	800da22 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x6a>
 800dbc2:	9d01      	ldr	r5, [sp, #4]
 800dbc4:	e787      	b.n	800dad6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x11e>
 800dbc6:	469a      	mov	sl, r3
      return nullptr;
 800dbc8:	2300      	movs	r3, #0
 800dbca:	e7c7      	b.n	800db5c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1a4>
          new_entry->next_entry_index = current_entry->next_entry_index;
 800dbcc:	6093      	str	r3, [r2, #8]
          current_entry->next_entry_index = new_entry_index;
 800dbce:	60be      	str	r6, [r7, #8]
          break;
 800dbd0:	e76f      	b.n	800dab2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xfa>
        if (prior_entry) {
 800dbd2:	f1ba 0f00 	cmp.w	sl, #0
 800dbd6:	d0f4      	beq.n	800dbc2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x20a>
      return nullptr;
 800dbd8:	2300      	movs	r3, #0
 800dbda:	e7bf      	b.n	800db5c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1a4>
    buffer_offsets_[buffer_id] = 0;
 800dbdc:	9d00      	ldr	r5, [sp, #0]
 800dbde:	f845 3021 	str.w	r3, [r5, r1, lsl #2]
 800dbe2:	e756      	b.n	800da92 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xda>
  for (int i = 0; i < buffer_count_; ++i) {
 800dbe4:	4617      	mov	r7, r2
 800dbe6:	e721      	b.n	800da2c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x74>

0800dbe8 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:
size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800dbe8:	b570      	push	{r4, r5, r6, lr}
 800dbea:	4605      	mov	r5, r0
  CalculateOffsetsIfNeeded();
 800dbec:	f7ff fee4 	bl	800d9b8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 800dbf0:	68a8      	ldr	r0, [r5, #8]
 800dbf2:	b1c8      	cbz	r0, 800dc28 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x40>
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 800dbf4:	6a2b      	ldr	r3, [r5, #32]
 800dbf6:	69ac      	ldr	r4, [r5, #24]
 800dbf8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  while (entry) {
 800dbfc:	eb14 0383 	adds.w	r3, r4, r3, lsl #2
 800dc00:	d013      	beq.n	800dc2a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x42>
        &requirements_[entry->requirements_index];
 800dc02:	68ee      	ldr	r6, [r5, #12]
  size_t max_size = 0;
 800dc04:	2000      	movs	r0, #0
 800dc06:	e002      	b.n	800dc0e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x26>
  while (entry) {
 800dc08:	eb14 0383 	adds.w	r3, r4, r3, lsl #2
 800dc0c:	d00c      	beq.n	800dc28 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x40>
    const size_t current_size = entry->offset + requirements->size;
 800dc0e:	e9d3 5200 	ldrd	r5, r2, [r3]
 800dc12:	0111      	lsls	r1, r2, #4
    if (entry->next_entry_index == -1) {
 800dc14:	689a      	ldr	r2, [r3, #8]
    const size_t current_size = entry->offset + requirements->size;
 800dc16:	5871      	ldr	r1, [r6, r1]
 800dc18:	4429      	add	r1, r5
 800dc1a:	4288      	cmp	r0, r1
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 800dc1c:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800dc20:	bf38      	it	cc
 800dc22:	4608      	movcc	r0, r1
    if (entry->next_entry_index == -1) {
 800dc24:	3201      	adds	r2, #1
 800dc26:	d1ef      	bne.n	800dc08 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x20>
}
 800dc28:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800dc2a:	4618      	mov	r0, r3
}
 800dc2c:	bd70      	pop	{r4, r5, r6, pc}
 800dc2e:	bf00      	nop

0800dc30 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 800dc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc32:	4614      	mov	r4, r2
 800dc34:	4605      	mov	r5, r0
 800dc36:	461e      	mov	r6, r3
 800dc38:	460f      	mov	r7, r1
  CalculateOffsetsIfNeeded();
 800dc3a:	f7ff febd 	bl	800d9b8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 800dc3e:	2c00      	cmp	r4, #0
 800dc40:	68ab      	ldr	r3, [r5, #8]
 800dc42:	db07      	blt.n	800dc54 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 800dc44:	42a3      	cmp	r3, r4
 800dc46:	dd05      	ble.n	800dc54 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
    TF_LITE_REPORT_ERROR(error_reporter,
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
  }
  *offset = buffer_offsets_[buffer_index];
 800dc48:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800dc4a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800dc4e:	6033      	str	r3, [r6, #0]
  return kTfLiteOk;
 800dc50:	2000      	movs	r0, #0
}
 800dc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TF_LITE_REPORT_ERROR(error_reporter,
 800dc54:	4903      	ldr	r1, [pc, #12]	@ (800dc64 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x34>)
 800dc56:	4622      	mov	r2, r4
 800dc58:	4638      	mov	r0, r7
 800dc5a:	f7f5 fd61 	bl	8003720 <_ZN6tflite13ErrorReporter6ReportEPKcz>
 800dc5e:	2001      	movs	r0, #1
}
 800dc60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc62:	bf00      	nop
 800dc64:	080172d4 	.word	0x080172d4

0800dc68 <arm_convolve_1_x_n_s8>:
                                 const q7_t *filter_data,
                                 const cmsis_nn_dims* bias_dims,
                                 const int32_t *bias_data,
                                 const cmsis_nn_dims* output_dims,
                                 q7_t *output_data)
{
 800dc68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc6c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800dc6e:	f8dd 901c 	ldr.w	r9, [sp, #28]
    (void)bias_dims;
    arm_status status = ARM_MATH_SUCCESS;
    if (output_dims->w % 4 != 0)
 800dc72:	68a5      	ldr	r5, [r4, #8]
{
 800dc74:	f8dd 8034 	ldr.w	r8, [sp, #52]	@ 0x34
    if (output_dims->w % 4 != 0)
 800dc78:	07ad      	lsls	r5, r5, #30
{
 800dc7a:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
 800dc7e:	e9dd ce0a 	ldrd	ip, lr, [sp, #40]	@ 0x28
    if (output_dims->w % 4 != 0)
 800dc82:	d10b      	bne.n	800dc9c <arm_convolve_1_x_n_s8+0x34>
        }
        output_data += (3 * output_ch);
    }

#else
    status = arm_convolve_s8(ctx,
 800dc84:	e9cd 480c 	strd	r4, r8, [sp, #48]	@ 0x30
 800dc88:	e9cd ce0a 	strd	ip, lr, [sp, #40]	@ 0x28
 800dc8c:	e9cd 6708 	strd	r6, r7, [sp, #32]
 800dc90:	f8cd 901c 	str.w	r9, [sp, #28]
#endif

out:
    /* Return to application */
    return status;
}
 800dc94:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    status = arm_convolve_s8(ctx,
 800dc98:	f000 b850 	b.w	800dd3c <arm_convolve_s8>
}
 800dc9c:	f06f 0002 	mvn.w	r0, #2
 800dca0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800dca4 <arm_convolve_1_x_n_s8_get_buffer_size>:

int32_t arm_convolve_1_x_n_s8_get_buffer_size(const cmsis_nn_dims* input_dims,
                                              const cmsis_nn_dims* filter_dims)
{
#if defined(ARM_MATH_DSP) && !defined(ARM_MATH_MVEI)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * sizeof(int16_t);
 800dca4:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 800dca8:	68c0      	ldr	r0, [r0, #12]
 800dcaa:	fb02 f000 	mul.w	r0, r2, r0
 800dcae:	fb03 f000 	mul.w	r0, r3, r0
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 800dcb2:	0080      	lsls	r0, r0, #2
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop

0800dcb8 <arm_convolve_1x1_s8_fast>:
                                    const cmsis_nn_dims *bias_dims,
                                    const int32_t *bias_data,
                                    const cmsis_nn_dims *output_dims,
                                    q7_t *output_data)
{
    if (input_dims->c % 4 != 0 ||
 800dcb8:	68d8      	ldr	r0, [r3, #12]
 800dcba:	f010 0f03 	tst.w	r0, #3
 800dcbe:	d138      	bne.n	800dd32 <arm_convolve_1x1_s8_fast+0x7a>
 800dcc0:	468c      	mov	ip, r1
 800dcc2:	6909      	ldr	r1, [r1, #16]
 800dcc4:	2900      	cmp	r1, #0
 800dcc6:	d134      	bne.n	800dd32 <arm_convolve_1x1_s8_fast+0x7a>
{
 800dcc8:	b510      	push	{r4, lr}
        conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 800dcca:	f8dc 4014 	ldr.w	r4, [ip, #20]
{
 800dcce:	b08a      	sub	sp, #40	@ 0x28
        conv_params->padding.w != 0 || conv_params->padding.h != 0 ||
 800dcd0:	bb64      	cbnz	r4, 800dd2c <arm_convolve_1x1_s8_fast+0x74>
 800dcd2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800dcd6:	2901      	cmp	r1, #1
 800dcd8:	d128      	bne.n	800dd2c <arm_convolve_1x1_s8_fast+0x74>
        conv_params->stride.w != 1 || conv_params->stride.h != 1)
 800dcda:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800dcde:	2901      	cmp	r1, #1
 800dce0:	d124      	bne.n	800dd2c <arm_convolve_1x1_s8_fast+0x74>

    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
    const int32_t rhs_rows = output_dims->c;
    const int32_t rhs_cols = input_dims->c;

    arm_nn_mat_mult_nt_t_s8(input_data,
 800dce2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800dce4:	9004      	str	r0, [sp, #16]
 800dce6:	68c9      	ldr	r1, [r1, #12]
 800dce8:	9103      	str	r1, [sp, #12]
    const int32_t lhs_rows = input_dims->w * input_dims->h * input_dims->n;
 800dcea:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	fb00 f101 	mul.w	r1, r0, r1
 800dcf4:	fb03 f101 	mul.w	r1, r3, r1
    arm_nn_mat_mult_nt_t_s8(input_data,
 800dcf8:	e9d2 3000 	ldrd	r3, r0, [r2]
 800dcfc:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800dd00:	9300      	str	r3, [sp, #0]
 800dd02:	f8dc 0024 	ldr.w	r0, [ip, #36]	@ 0x24
 800dd06:	9008      	str	r0, [sp, #32]
 800dd08:	f8dc 0020 	ldr.w	r0, [ip, #32]
 800dd0c:	9007      	str	r0, [sp, #28]
 800dd0e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 800dd12:	9006      	str	r0, [sp, #24]
 800dd14:	f8dc 0000 	ldr.w	r0, [ip]
 800dd18:	9005      	str	r0, [sp, #20]
 800dd1a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dd1c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800dd1e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800dd20:	980c      	ldr	r0, [sp, #48]	@ 0x30
 800dd22:	f000 fd61 	bl	800e7e8 <arm_nn_mat_mult_nt_t_s8>
                            conv_params->activation.max);

#endif

    /* Return to application */
    return ARM_MATH_SUCCESS;
 800dd26:	4620      	mov	r0, r4
}
 800dd28:	b00a      	add	sp, #40	@ 0x28
 800dd2a:	bd10      	pop	{r4, pc}
        return ARM_MATH_SIZE_MISMATCH;
 800dd2c:	f06f 0002 	mvn.w	r0, #2
 800dd30:	e7fa      	b.n	800dd28 <arm_convolve_1x1_s8_fast+0x70>
 800dd32:	f06f 0002 	mvn.w	r0, #2
}
 800dd36:	4770      	bx	lr

0800dd38 <arm_convolve_1x1_s8_fast_get_buffer_size>:

int32_t arm_convolve_1x1_s8_fast_get_buffer_size(const cmsis_nn_dims *input_dims)
{
    (void)input_dims;
    return 0;
}
 800dd38:	2000      	movs	r0, #0
 800dd3a:	4770      	bx	lr

0800dd3c <arm_convolve_s8>:
                           const q7_t *filter_data,
                           const cmsis_nn_dims* bias_dims,
                           const int32_t *bias_data,
                           const cmsis_nn_dims* output_dims,
                           q7_t *output_data)
{
 800dd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd40:	b0b1      	sub	sp, #196	@ 0xc4
 800dd42:	461f      	mov	r7, r3
 800dd44:	4613      	mov	r3, r2
    q15_t *buffer_a = (q15_t *)ctx->buf;
 800dd46:	6802      	ldr	r2, [r0, #0]
 800dd48:	9218      	str	r2, [sp, #96]	@ 0x60
{
 800dd4a:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800dd4c:	8838      	ldrh	r0, [r7, #0]
    const uint16_t input_ch      = input_dims->c;
    const uint16_t kernel_x      = filter_dims->w;
    const uint16_t kernel_y      = filter_dims->h;
    const uint16_t output_x      = output_dims->w;
    const uint16_t output_y      = output_dims->h;
    const uint16_t output_ch     = output_dims->c;
 800dd4e:	68d6      	ldr	r6, [r2, #12]
    const uint16_t input_ch      = input_dims->c;
 800dd50:	68fd      	ldr	r5, [r7, #12]
{
 800dd52:	9c3b      	ldr	r4, [sp, #236]	@ 0xec
 800dd54:	9023      	str	r0, [sp, #140]	@ 0x8c
    const uint16_t input_y       = input_dims->h;
 800dd56:	e9d7 9801 	ldrd	r9, r8, [r7, #4]
    const uint16_t output_y      = output_dims->h;
 800dd5a:	e9d2 7c01 	ldrd	r7, ip, [r2, #4]

    const uint16_t pad_x         = conv_params->padding.w;
 800dd5e:	690a      	ldr	r2, [r1, #16]
 800dd60:	9214      	str	r2, [sp, #80]	@ 0x50
    const uint16_t pad_y         = conv_params->padding.h;
 800dd62:	694a      	ldr	r2, [r1, #20]
 800dd64:	9226      	str	r2, [sp, #152]	@ 0x98
    const uint16_t stride_x      = conv_params->stride.w;
 800dd66:	688a      	ldr	r2, [r1, #8]
 800dd68:	9215      	str	r2, [sp, #84]	@ 0x54
    const uint16_t stride_y      = conv_params->stride.h;
 800dd6a:	68ca      	ldr	r2, [r1, #12]
 800dd6c:	9227      	str	r2, [sp, #156]	@ 0x9c

    const int32_t input_offset       = conv_params->input_offset;
    const int32_t out_offset         = conv_params->output_offset;
 800dd6e:	e9d1 e200 	ldrd	lr, r2, [r1]
 800dd72:	921a      	str	r2, [sp, #104]	@ 0x68
    const int32_t out_activation_min = conv_params->activation.min;
 800dd74:	6a0a      	ldr	r2, [r1, #32]
 800dd76:	921b      	str	r2, [sp, #108]	@ 0x6c
    const int32_t out_activation_max = conv_params->activation.max;
 800dd78:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 800dd7a:	921c      	str	r2, [sp, #112]	@ 0x70
    int32_t *output_mult             = quant_params->multiplier;
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	921d      	str	r2, [sp, #116]	@ 0x74
    const uint16_t kernel_y      = filter_dims->h;
 800dd80:	e9d4 4b01 	ldrd	r4, fp, [r4, #4]
    int32_t *output_shift            = quant_params->shift;
 800dd84:	685b      	ldr	r3, [r3, #4]

    int i_batch;
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800dd86:	9823      	ldr	r0, [sp, #140]	@ 0x8c
    int32_t *output_shift            = quant_params->shift;
 800dd88:	931e      	str	r3, [sp, #120]	@ 0x78
    const uint16_t output_ch     = output_dims->c;
 800dd8a:	fa1f fa86 	uxth.w	sl, r6
 800dd8e:	f8cd a084 	str.w	sl, [sp, #132]	@ 0x84
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800dd92:	2800      	cmp	r0, #0
 800dd94:	f000 817a 	beq.w	800e08c <arm_convolve_s8+0x350>
 800dd98:	b2a1      	uxth	r1, r4
 800dd9a:	fa1f f38b 	uxth.w	r3, fp

                /* Computation is filed for every 2 columns */
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
                {
                    out =
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800dd9e:	fb13 f301 	smulbb	r3, r3, r1
 800dda2:	b2aa      	uxth	r2, r5
 800dda4:	fb13 f202 	smulbb	r2, r3, r2
 800dda8:	fa1f f38b 	uxth.w	r3, fp
 800ddac:	9316      	str	r3, [sp, #88]	@ 0x58
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800ddae:	fa1f fb85 	uxth.w	fp, r5
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 800ddb2:	461d      	mov	r5, r3
 800ddb4:	fb03 f301 	mul.w	r3, r3, r1
 800ddb8:	fb0b f303 	mul.w	r3, fp, r3
 800ddbc:	912b      	str	r1, [sp, #172]	@ 0xac

                /* Point to the beginning of the im2col buffer where the input is available as a rearranged column */
                const q15_t *ip_as_col = buffer_a;

                /* 4 multiply and accumulates are done in one loop. */
                uint16_t col_count = (input_ch * kernel_y * kernel_x) >> 2;
 800ddbe:	f3c3 018f 	ubfx	r1, r3, #2, #16
 800ddc2:	b2b8      	uxth	r0, r7
 800ddc4:	9122      	str	r1, [sp, #136]	@ 0x88
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 800ddc6:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800ddc8:	9009      	str	r0, [sp, #36]	@ 0x24
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch, two_column_buf, input_ch, input_offset);
 800ddca:	fa0f f08e 	sxth.w	r0, lr
 800ddce:	900f      	str	r0, [sp, #60]	@ 0x3c
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 800ddd0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800ddd4:	fa1f f888 	uxth.w	r8, r8
 800ddd8:	9013      	str	r0, [sp, #76]	@ 0x4c
                    sum = __SMLAD(ker_a2, ip_b2, sum);

                    col_count--;
                }
                /* Handle left over mac */
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 800ddda:	f002 0003 	and.w	r0, r2, #3
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800ddde:	b292      	uxth	r2, r2
 800dde0:	fa1f f689 	uxth.w	r6, r9
 800dde4:	9220      	str	r2, [sp, #128]	@ 0x80
                }
            }
        }
#endif
        /* Advance to the next batch */
        input_data += (input_x * input_y * input_ch);
 800dde6:	fb08 f20b 	mul.w	r2, r8, fp
 800ddea:	fb06 f202 	mul.w	r2, r6, r2
 800ddee:	9229      	str	r2, [sp, #164]	@ 0xa4
        output_data += (output_x * output_y * output_ch);
 800ddf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ddf2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ddf4:	960e      	str	r6, [sp, #56]	@ 0x38
 800ddf6:	fa1f f78c 	uxth.w	r7, ip
 800ddfa:	4654      	mov	r4, sl
 800ddfc:	fb02 f207 	mul.w	r2, r2, r7
 800de00:	fb04 f202 	mul.w	r2, r4, r2
 800de04:	3b01      	subs	r3, #1
 800de06:	b29b      	uxth	r3, r3
 800de08:	922c      	str	r2, [sp, #176]	@ 0xb0
                    col_count--;
 800de0a:	1e42      	subs	r2, r0, #1
 800de0c:	3301      	adds	r3, #1
 800de0e:	b292      	uxth	r2, r2
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800de10:	ea4f 0a4b 	mov.w	sl, fp, lsl #1
                    col_count--;
 800de14:	9224      	str	r2, [sp, #144]	@ 0x90
 800de16:	009a      	lsls	r2, r3, #2
__STATIC_FORCEINLINE q31_t arm_nn_read_q15x2_ia(const q15_t **in_q15)
{
  q31_t val;

  memcpy(&val, *in_q15, 4);
  *in_q15 += 2;
 800de18:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800de1c:	922d      	str	r2, [sp, #180]	@ 0xb4
 800de1e:	9328      	str	r3, [sp, #160]	@ 0xa0
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800de20:	2200      	movs	r2, #0
 800de22:	fb05 f30a 	mul.w	r3, r5, sl
 800de26:	930d      	str	r3, [sp, #52]	@ 0x34
 800de28:	4616      	mov	r6, r2
 800de2a:	4653      	mov	r3, sl
 800de2c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de2e:	9712      	str	r7, [sp, #72]	@ 0x48
 800de30:	46da      	mov	sl, fp
                col_count = input_ch * kernel_y * kernel_x & 0x3;
 800de32:	902a      	str	r0, [sp, #168]	@ 0xa8
 800de34:	46c1      	mov	r9, r8
 800de36:	4621      	mov	r1, r4
 800de38:	469b      	mov	fp, r3
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 800de3a:	2a00      	cmp	r2, #0
 800de3c:	f000 8119 	beq.w	800e072 <arm_convolve_s8+0x336>
 800de40:	f8dd c100 	ldr.w	ip, [sp, #256]	@ 0x100
    q15_t *buffer_a = (q15_t *)ctx->buf;
 800de44:	9818      	ldr	r0, [sp, #96]	@ 0x60
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 800de46:	f8cd c064 	str.w	ip, [sp, #100]	@ 0x64
 800de4a:	f04f 0800 	mov.w	r8, #0
 800de4e:	962e      	str	r6, [sp, #184]	@ 0xb8
 800de50:	f8cd 807c 	str.w	r8, [sp, #124]	@ 0x7c
 800de54:	912f      	str	r1, [sp, #188]	@ 0xbc
 800de56:	9225      	str	r2, [sp, #148]	@ 0x94
 800de58:	9009      	str	r0, [sp, #36]	@ 0x24
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800de5a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d061      	beq.n	800df24 <arm_convolve_s8+0x1e8>
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 800de60:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 800de62:	f8bd 309c 	ldrh.w	r3, [sp, #156]	@ 0x9c
 800de66:	fb02 f303 	mul.w	r3, r2, r3
 800de6a:	f8bd 2098 	ldrh.w	r2, [sp, #152]	@ 0x98
 800de6e:	1a9f      	subs	r7, r3, r2
 800de70:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 800de72:	18fb      	adds	r3, r7, r3
 800de74:	930c      	str	r3, [sp, #48]	@ 0x30
 800de76:	fb09 f307 	mul.w	r3, r9, r7
 800de7a:	9317      	str	r3, [sp, #92]	@ 0x5c
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800de7c:	2500      	movs	r5, #0
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 800de7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800de80:	429f      	cmp	r7, r3
 800de82:	da46      	bge.n	800df12 <arm_convolve_s8+0x1d6>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800de84:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 800de88:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800de8c:	fb05 f202 	mul.w	r2, r5, r2
 800de90:	1ad2      	subs	r2, r2, r3
 800de92:	9b16      	ldr	r3, [sp, #88]	@ 0x58
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 800de94:	920b      	str	r2, [sp, #44]	@ 0x2c
 800de96:	e9cd 7510 	strd	r7, r5, [sp, #64]	@ 0x40
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800de9a:	189e      	adds	r6, r3, r2
 800de9c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800de9e:	930a      	str	r3, [sp, #40]	@ 0x28
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 800dea0:	46b8      	mov	r8, r7
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800dea2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800dea4:	42b3      	cmp	r3, r6
 800dea6:	da2a      	bge.n	800defe <arm_convolve_s8+0x1c2>
 800dea8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800deaa:	4542      	cmp	r2, r8
 800deac:	f240 80f2 	bls.w	800e094 <arm_convolve_s8+0x358>
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f2c0 80ff 	blt.w	800e0b4 <arm_convolve_s8+0x378>
 800deb6:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800deb8:	461c      	mov	r4, r3
 800deba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800debc:	18e7      	adds	r7, r4, r3
 800debe:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 800dec0:	fb0a 3707 	mla	r7, sl, r7, r3
 800dec4:	e006      	b.n	800ded4 <arm_convolve_s8+0x198>
 800dec6:	3401      	adds	r4, #1
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800dec8:	f003 ff90 	bl	8011dec <memset>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800decc:	42a6      	cmp	r6, r4
                        two_column_buf += input_ch;
 800dece:	445d      	add	r5, fp
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800ded0:	4457      	add	r7, sl
 800ded2:	dd10      	ble.n	800def6 <arm_convolve_s8+0x1ba>
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 800ded4:	45a1      	cmp	r9, r4
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800ded6:	4628      	mov	r0, r5
 800ded8:	465a      	mov	r2, fp
 800deda:	f04f 0100 	mov.w	r1, #0
                        if (i_ker_y < 0 || i_ker_y >= input_y || i_ker_x < 0 || i_ker_x >= input_x)
 800dede:	ddf2      	ble.n	800dec6 <arm_convolve_s8+0x18a>
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch, two_column_buf, input_ch, input_offset);
 800dee0:	4629      	mov	r1, r5
 800dee2:	4638      	mov	r0, r7
 800dee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dee6:	4652      	mov	r2, sl
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800dee8:	3401      	adds	r4, #1
                            arm_q7_to_q15_with_offset(input_data + (i_ker_y * input_x + i_ker_x) * input_ch, two_column_buf, input_ch, input_offset);
 800deea:	f001 fce7 	bl	800f8bc <arm_q7_to_q15_with_offset>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800deee:	42a6      	cmp	r6, r4
                        two_column_buf += input_ch;
 800def0:	445d      	add	r5, fp
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800def2:	4457      	add	r7, sl
 800def4:	dcee      	bgt.n	800ded4 <arm_convolve_s8+0x198>
                        two_column_buf += input_ch;
 800def6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800def8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800defa:	4413      	add	r3, r2
 800defc:	9309      	str	r3, [sp, #36]	@ 0x24
                for (i_ker_y = i_out_y * stride_y - pad_y; i_ker_y < i_out_y * stride_y - pad_y + kernel_y; i_ker_y++)
 800defe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800df00:	444b      	add	r3, r9
 800df02:	930a      	str	r3, [sp, #40]	@ 0x28
 800df04:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800df06:	f108 0801 	add.w	r8, r8, #1
 800df0a:	4598      	cmp	r8, r3
 800df0c:	d1c9      	bne.n	800dea2 <arm_convolve_s8+0x166>
 800df0e:	e9dd 7510 	ldrd	r7, r5, [sp, #64]	@ 0x40
                if (two_column_buf == buffer_a + 2 * input_ch * kernel_y * kernel_x)
 800df12:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800df14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df16:	4293      	cmp	r3, r2
 800df18:	f000 80e1 	beq.w	800e0de <arm_convolve_s8+0x3a2>
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800df1c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800df1e:	3501      	adds	r5, #1
 800df20:	429d      	cmp	r5, r3
 800df22:	dbac      	blt.n	800de7e <arm_convolve_s8+0x142>
        for (i_out_y = 0; i_out_y < output_y; i_out_y++)
 800df24:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800df26:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800df28:	3301      	adds	r3, #1
 800df2a:	4293      	cmp	r3, r2
 800df2c:	931f      	str	r3, [sp, #124]	@ 0x7c
 800df2e:	db94      	blt.n	800de5a <arm_convolve_s8+0x11e>
 800df30:	9809      	ldr	r0, [sp, #36]	@ 0x24
        if (two_column_buf != buffer_a)
 800df32:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800df34:	f8dd c064 	ldr.w	ip, [sp, #100]	@ 0x64
 800df38:	4283      	cmp	r3, r0
 800df3a:	e9dd 612e 	ldrd	r6, r1, [sp, #184]	@ 0xb8
 800df3e:	f000 8098 	beq.w	800e072 <arm_convolve_s8+0x336>
            for (i = 0; i < output_ch; i++)
 800df42:	2900      	cmp	r1, #0
 800df44:	f000 8095 	beq.w	800e072 <arm_convolve_s8+0x336>
 800df48:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800df4a:	f8dd e0f8 	ldr.w	lr, [sp, #248]	@ 0xf8
            const q7_t *ker_a = filter_data;
 800df4e:	9d3c      	ldr	r5, [sp, #240]	@ 0xf0
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_divide_by_power_of_two(const q31_t dividend, const q31_t exponent)
{
    q31_t result = 0;
    const q31_t remainder_mask = (1 << exponent) - 1;
 800df50:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800df54:	f1a3 0804 	sub.w	r8, r3, #4
 800df58:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800df5a:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 800df5e:	1f1f      	subs	r7, r3, #4
 800df60:	eb0c 0301 	add.w	r3, ip, r1
 800df64:	9309      	str	r3, [sp, #36]	@ 0x24
                    q7_t ker_a1 = *ker_a++;
 800df66:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800df68:	3301      	adds	r3, #1
 800df6a:	e9cd 3a0a 	strd	r3, sl, [sp, #40]	@ 0x28
 800df6e:	46b3      	mov	fp, r6
                if (bias_data)
 800df70:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 800df72:	b10b      	cbz	r3, 800df78 <arm_convolve_s8+0x23c>
                    sum = bias_data[i];
 800df74:	f8de 3000 	ldr.w	r3, [lr]
                while (col_count)
 800df78:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800df7a:	2800      	cmp	r0, #0
 800df7c:	f000 80d0 	beq.w	800e120 <arm_convolve_s8+0x3e4>
 800df80:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 800df82:	f8dd 9060 	ldr.w	r9, [sp, #96]	@ 0x60
 800df86:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 800df8a:	eb05 0a00 	add.w	sl, r5, r0
  memcpy(&val, *in_q7, 4);
 800df8e:	f855 4b04 	ldr.w	r4, [r5], #4
  op2 %= 32U;
  if (op2 == 0U)
  {
    return op1;
  }
  return (op1 >> op2) | (op1 << (32U - op2));
 800df92:	ea4f 2034 	mov.w	r0, r4, ror #8

__STATIC_FORCEINLINE uint32_t __SXTB16(uint32_t op1)
{
  uint32_t result;

  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800df96:	fa2f f080 	sxtb16	r0, r0
 800df9a:	fa2f f484 	sxtb16	r4, r4
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 800df9e:	b2a6      	uxth	r6, r4
  memcpy(&val, *in_q15, 4);
 800dfa0:	f8d9 c000 	ldr.w	ip, [r9]
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 800dfa4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16

__STATIC_FORCEINLINE uint32_t __SMLAD (uint32_t op1, uint32_t op2, uint32_t op3)
{
  uint32_t result;

  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800dfa8:	fb26 330c 	smlad	r3, r6, ip, r3
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 800dfac:	0c00      	lsrs	r0, r0, #16
 800dfae:	0400      	lsls	r0, r0, #16
 800dfb0:	ea40 4014 	orr.w	r0, r0, r4, lsr #16
  *in_q15 += 2;
 800dfb4:	f109 0908 	add.w	r9, r9, #8
  memcpy(&val, *in_q15, 4);
 800dfb8:	f859 4c04 	ldr.w	r4, [r9, #-4]
 800dfbc:	fb20 3304 	smlad	r3, r0, r4, r3
 800dfc0:	4555      	cmp	r5, sl
 800dfc2:	d1e4      	bne.n	800df8e <arm_convolve_s8+0x252>
  *in_q15 += 2;
 800dfc4:	f8dd c044 	ldr.w	ip, [sp, #68]	@ 0x44
 800dfc8:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
                while (col_count)
 800dfca:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 800dfcc:	2800      	cmp	r0, #0
 800dfce:	f000 80a5 	beq.w	800e11c <arm_convolve_s8+0x3e0>
                    sum += ker_a1 * ip_b1;
 800dfd2:	f99a 5000 	ldrsb.w	r5, [sl]
 800dfd6:	8826      	ldrh	r6, [r4, #0]
 800dfd8:	fb16 3305 	smlabb	r3, r6, r5, r3
                while (col_count)
 800dfdc:	9d24      	ldr	r5, [sp, #144]	@ 0x90
 800dfde:	b15d      	cbz	r5, 800dff8 <arm_convolve_s8+0x2bc>
                    sum += ker_a1 * ip_b1;
 800dfe0:	f99a 5001 	ldrsb.w	r5, [sl, #1]
 800dfe4:	8866      	ldrh	r6, [r4, #2]
                while (col_count)
 800dfe6:	2802      	cmp	r0, #2
                    sum += ker_a1 * ip_b1;
 800dfe8:	fb16 3305 	smlabb	r3, r6, r5, r3
                while (col_count)
 800dfec:	d004      	beq.n	800dff8 <arm_convolve_s8+0x2bc>
                    sum += ker_a1 * ip_b1;
 800dfee:	88a5      	ldrh	r5, [r4, #4]
 800dff0:	f99a 4002 	ldrsb.w	r4, [sl, #2]
 800dff4:	fb15 3304 	smlabb	r3, r5, r4, r3
                    q7_t ker_a1 = *ker_a++;
 800dff8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800dffa:	eb0a 0500 	add.w	r5, sl, r0
                sum = arm_nn_requantize(sum, output_mult[i], output_shift[i]);
 800dffe:	f857 4f04 	ldr.w	r4, [r7, #4]!
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e002:	f858 9f04 	ldr.w	r9, [r8, #4]!
 *
 */
__STATIC_FORCEINLINE q31_t arm_nn_requantize(const q31_t val, const q31_t multiplier, const q31_t shift)
{
  return arm_nn_divide_by_power_of_two(
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e006:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
  return arm_nn_divide_by_power_of_two(
 800e00a:	fa03 f606 	lsl.w	r6, r3, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e00e:	f04f 0a00 	mov.w	sl, #0
 800e012:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e016:	fbc6 3a09 	smlal	r3, sl, r6, r9
    result = (int32_t)(mult.long_long >> 31);
 800e01a:	0fdb      	lsrs	r3, r3, #31
  return arm_nn_divide_by_power_of_two(
 800e01c:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 800e01e:	ea43 034a 	orr.w	r3, r3, sl, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e022:	dc0e      	bgt.n	800e042 <arm_convolve_s8+0x306>
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e024:	2001      	movs	r0, #1
  return arm_nn_divide_by_power_of_two(
 800e026:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e028:	fa00 f604 	lsl.w	r6, r0, r4
 800e02c:	3e01      	subs	r6, #1
    int32_t remainder = remainder_mask & dividend;
 800e02e:	ea03 0906 	and.w	r9, r3, r6
    if (result < 0)
 800e032:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
 800e034:	fa46 f600 	asr.w	r6, r6, r0
        threshold++;
 800e038:	bf48      	it	mi
 800e03a:	1836      	addmi	r6, r6, r0
    if (remainder > threshold)
 800e03c:	45b1      	cmp	r9, r6
        result++;
 800e03e:	bfc8      	it	gt
 800e040:	3301      	addgt	r3, #1
                sum += out_offset;
 800e042:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800e044:	4403      	add	r3, r0
                sum = MAX(sum, out_activation_min);
 800e046:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800e048:	4283      	cmp	r3, r0
 800e04a:	bfb8      	it	lt
 800e04c:	4603      	movlt	r3, r0
                sum = MIN(sum, out_activation_max);
 800e04e:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800e050:	4283      	cmp	r3, r0
 800e052:	bfa8      	it	ge
 800e054:	4603      	movge	r3, r0
                *out++ = (q7_t)sum;
 800e056:	f80c 3b01 	strb.w	r3, [ip], #1
            for (i = 0; i < output_ch; i++)
 800e05a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e05c:	459c      	cmp	ip, r3
 800e05e:	f10e 0e04 	add.w	lr, lr, #4
 800e062:	d185      	bne.n	800df70 <arm_convolve_s8+0x234>
 800e064:	465e      	mov	r6, fp
 800e066:	f8dd a02c 	ldr.w	sl, [sp, #44]	@ 0x2c
 800e06a:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 800e06e:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
        input_data += (input_x * input_y * input_ch);
 800e072:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 800e074:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 800e076:	4403      	add	r3, r0
 800e078:	933a      	str	r3, [sp, #232]	@ 0xe8
        output_data += (output_x * output_y * output_ch);
 800e07a:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 800e07c:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 800e07e:	4403      	add	r3, r0
 800e080:	9340      	str	r3, [sp, #256]	@ 0x100
    for (i_batch = 0; i_batch < input_batches; i_batch++)
 800e082:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e084:	3601      	adds	r6, #1
 800e086:	429e      	cmp	r6, r3
 800e088:	f47f aed7 	bne.w	800de3a <arm_convolve_s8+0xfe>
    }

    /* Return to application */
    return ARM_MATH_SUCCESS;
}
 800e08c:	2000      	movs	r0, #0
 800e08e:	b031      	add	sp, #196	@ 0xc4
 800e090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e094:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e096:	461c      	mov	r4, r3
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800e098:	4628      	mov	r0, r5
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e09a:	3401      	adds	r4, #1
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800e09c:	465a      	mov	r2, fp
 800e09e:	2100      	movs	r1, #0
 800e0a0:	f003 fea4 	bl	8011dec <memset>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e0a4:	42b4      	cmp	r4, r6
                        two_column_buf += input_ch;
 800e0a6:	445d      	add	r5, fp
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e0a8:	d1f6      	bne.n	800e098 <arm_convolve_s8+0x35c>
                        two_column_buf += input_ch;
 800e0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e0ae:	4413      	add	r3, r2
 800e0b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0b2:	e724      	b.n	800defe <arm_convolve_s8+0x1c2>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e0b4:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800e0b6:	ea06 77e6 	and.w	r7, r6, r6, asr #31
 800e0ba:	461c      	mov	r4, r3
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800e0bc:	4628      	mov	r0, r5
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e0be:	3401      	adds	r4, #1
                            memset(two_column_buf, 0, sizeof(q15_t) * input_ch);
 800e0c0:	465a      	mov	r2, fp
 800e0c2:	2100      	movs	r1, #0
 800e0c4:	f003 fe92 	bl	8011dec <memset>
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e0c8:	42a7      	cmp	r7, r4
                        two_column_buf += input_ch;
 800e0ca:	445d      	add	r5, fp
                    for (i_ker_x = i_out_x * stride_x - pad_x; i_ker_x < i_out_x * stride_x - pad_x + kernel_x; i_ker_x++)
 800e0cc:	dcf6      	bgt.n	800e0bc <arm_convolve_s8+0x380>
 800e0ce:	42a6      	cmp	r6, r4
 800e0d0:	f73f aef3 	bgt.w	800deba <arm_convolve_s8+0x17e>
                        two_column_buf += input_ch;
 800e0d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e0d6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e0d8:	4413      	add	r3, r2
 800e0da:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0dc:	e70f      	b.n	800defe <arm_convolve_s8+0x1c2>
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800e0de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e0e0:	9306      	str	r3, [sp, #24]
 800e0e2:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 800e0e4:	9305      	str	r3, [sp, #20]
 800e0e6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800e0e8:	9304      	str	r3, [sp, #16]
 800e0ea:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800e0ec:	9301      	str	r3, [sp, #4]
 800e0ee:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e0f0:	9300      	str	r3, [sp, #0]
 800e0f2:	f9bd 3070 	ldrsh.w	r3, [sp, #112]	@ 0x70
 800e0f6:	9303      	str	r3, [sp, #12]
 800e0f8:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 800e0fc:	9302      	str	r3, [sp, #8]
 800e0fe:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e100:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e102:	9918      	ldr	r1, [sp, #96]	@ 0x60
 800e104:	983c      	ldr	r0, [sp, #240]	@ 0xf0
 800e106:	f000 f8a9 	bl	800e25c <arm_nn_mat_mult_kernel_s8_s16>
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800e10a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
                        arm_nn_mat_mult_kernel_s8_s16(filter_data,
 800e10c:	9019      	str	r0, [sp, #100]	@ 0x64
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800e10e:	3501      	adds	r5, #1
 800e110:	42ab      	cmp	r3, r5
    q15_t *buffer_a = (q15_t *)ctx->buf;
 800e112:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800e114:	9309      	str	r3, [sp, #36]	@ 0x24
            for (i_out_x = 0; i_out_x < output_x; i_out_x++)
 800e116:	f73f aeb2 	bgt.w	800de7e <arm_convolve_s8+0x142>
 800e11a:	e703      	b.n	800df24 <arm_convolve_s8+0x1e8>
                while (col_count)
 800e11c:	4655      	mov	r5, sl
 800e11e:	e76e      	b.n	800dffe <arm_convolve_s8+0x2c2>
                while (col_count)
 800e120:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 800e122:	46aa      	mov	sl, r5
 800e124:	e751      	b.n	800dfca <arm_convolve_s8+0x28e>
 800e126:	bf00      	nop

0800e128 <arm_convolve_s8_get_buffer_size>:

int32_t arm_convolve_s8_get_buffer_size(const cmsis_nn_dims* input_dims,
                                        const cmsis_nn_dims* filter_dims)
{
#if defined(ARM_MATH_DSP)
    return (2 * input_dims->c * filter_dims->w * filter_dims->h) * (int32_t)sizeof(int16_t);
 800e128:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 800e12c:	68c0      	ldr	r0, [r0, #12]
 800e12e:	fb02 f000 	mul.w	r0, r2, r0
 800e132:	fb03 f000 	mul.w	r0, r3, r0
#else
    (void)input_dims;
    (void)filter_dims;
    return 0;
#endif
}
 800e136:	0080      	lsls	r0, r0, #2
 800e138:	4770      	bx	lr
 800e13a:	bf00      	nop

0800e13c <arm_convolve_wrapper_s8>:
                                   const q7_t *filter_data,
                                   const cmsis_nn_dims* bias_dims,
                                   const int32_t *bias_data,
                                   const cmsis_nn_dims* output_dims,
                                   q7_t *output_data)
{
 800e13c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if ((conv_params->padding.w == 0) &&
 800e140:	690d      	ldr	r5, [r1, #16]
{
 800e142:	b083      	sub	sp, #12
 800e144:	e9dd 470c 	ldrd	r4, r7, [sp, #48]	@ 0x30
 800e148:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	@ 0x38
 800e14c:	e9dd 9610 	ldrd	r9, r6, [sp, #64]	@ 0x40
 800e150:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 800e154:	9000      	str	r0, [sp, #0]
 800e156:	468c      	mov	ip, r1
 800e158:	9201      	str	r2, [sp, #4]
 800e15a:	469e      	mov	lr, r3
    if ((conv_params->padding.w == 0) &&
 800e15c:	b90d      	cbnz	r5, 800e162 <arm_convolve_wrapper_s8+0x26>
 800e15e:	694d      	ldr	r5, [r1, #20]
 800e160:	b305      	cbz	r5, 800e1a4 <arm_convolve_wrapper_s8+0x68>
                                        bias_dims,
                                        bias_data,
                                        output_dims,
                                        output_data);
    }
    else if ((output_dims->h == 1) &&
 800e162:	6873      	ldr	r3, [r6, #4]
 800e164:	2b01      	cmp	r3, #1
 800e166:	d10d      	bne.n	800e184 <arm_convolve_wrapper_s8+0x48>
 800e168:	f8de 3004 	ldr.w	r3, [lr, #4]
 800e16c:	2b01      	cmp	r3, #1
 800e16e:	d109      	bne.n	800e184 <arm_convolve_wrapper_s8+0x48>
             (input_dims->h == 1) &&
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2b01      	cmp	r3, #1
 800e174:	d106      	bne.n	800e184 <arm_convolve_wrapper_s8+0x48>
             (filter_dims->h == 1) &&
 800e176:	68b3      	ldr	r3, [r6, #8]
 800e178:	079b      	lsls	r3, r3, #30
 800e17a:	d103      	bne.n	800e184 <arm_convolve_wrapper_s8+0x48>
             (output_dims->w % 4 == 0) &&
 800e17c:	f8de 3000 	ldr.w	r3, [lr]
 800e180:	2b01      	cmp	r3, #1
 800e182:	d02a      	beq.n	800e1da <arm_convolve_wrapper_s8+0x9e>
                                     output_dims,
                                     output_data);
    }
    else
    {
        return arm_convolve_s8(ctx,
 800e184:	9a01      	ldr	r2, [sp, #4]
 800e186:	9800      	ldr	r0, [sp, #0]
 800e188:	940c      	str	r4, [sp, #48]	@ 0x30
 800e18a:	4673      	mov	r3, lr
 800e18c:	4661      	mov	r1, ip
 800e18e:	e9cd 6811 	strd	r6, r8, [sp, #68]	@ 0x44
 800e192:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
 800e196:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	@ 0x34
                               bias_dims,
                               bias_data,
                               output_dims,
                               output_data);
    }
}
 800e19a:	b003      	add	sp, #12
 800e19c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_s8(ctx,
 800e1a0:	f7ff bdcc 	b.w	800dd3c <arm_convolve_s8>
        (conv_params->padding.h == 0) &&
 800e1a4:	68dd      	ldr	r5, [r3, #12]
 800e1a6:	07ad      	lsls	r5, r5, #30
 800e1a8:	d1db      	bne.n	800e162 <arm_convolve_wrapper_s8+0x26>
        (input_dims->c % 4 == 0) &&
 800e1aa:	688d      	ldr	r5, [r1, #8]
 800e1ac:	2d01      	cmp	r5, #1
 800e1ae:	d1d8      	bne.n	800e162 <arm_convolve_wrapper_s8+0x26>
        (conv_params->stride.w == 1) &&
 800e1b0:	68cd      	ldr	r5, [r1, #12]
 800e1b2:	2d01      	cmp	r5, #1
 800e1b4:	d1d5      	bne.n	800e162 <arm_convolve_wrapper_s8+0x26>
        (conv_params->stride.h == 1) &&
 800e1b6:	68bd      	ldr	r5, [r7, #8]
 800e1b8:	2d01      	cmp	r5, #1
 800e1ba:	d1d2      	bne.n	800e162 <arm_convolve_wrapper_s8+0x26>
        (filter_dims->w == 1) &&
 800e1bc:	687d      	ldr	r5, [r7, #4]
 800e1be:	2d01      	cmp	r5, #1
 800e1c0:	d1cf      	bne.n	800e162 <arm_convolve_wrapper_s8+0x26>
        return arm_convolve_1x1_s8_fast(ctx,
 800e1c2:	e9cd 6811 	strd	r6, r8, [sp, #68]	@ 0x44
 800e1c6:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
 800e1ca:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	@ 0x34
 800e1ce:	940c      	str	r4, [sp, #48]	@ 0x30
}
 800e1d0:	b003      	add	sp, #12
 800e1d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1x1_s8_fast(ctx,
 800e1d6:	f7ff bd6f 	b.w	800dcb8 <arm_convolve_1x1_s8_fast>
        return arm_convolve_1_x_n_s8(ctx,
 800e1da:	9a01      	ldr	r2, [sp, #4]
 800e1dc:	9800      	ldr	r0, [sp, #0]
 800e1de:	940c      	str	r4, [sp, #48]	@ 0x30
 800e1e0:	4673      	mov	r3, lr
 800e1e2:	4661      	mov	r1, ip
 800e1e4:	e9cd 6811 	strd	r6, r8, [sp, #68]	@ 0x44
 800e1e8:	e9cd a90f 	strd	sl, r9, [sp, #60]	@ 0x3c
 800e1ec:	e9cd 7b0d 	strd	r7, fp, [sp, #52]	@ 0x34
}
 800e1f0:	b003      	add	sp, #12
 800e1f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return arm_convolve_1_x_n_s8(ctx,
 800e1f6:	f7ff bd37 	b.w	800dc68 <arm_convolve_1_x_n_s8>
 800e1fa:	bf00      	nop

0800e1fc <arm_convolve_wrapper_s8_get_buffer_size>:

int32_t arm_convolve_wrapper_s8_get_buffer_size(const cmsis_nn_conv_params* conv_params,
                                                const cmsis_nn_dims* input_dims,
                                                const cmsis_nn_dims* filter_dims,
                                                const cmsis_nn_dims* output_dims)
{
 800e1fc:	4684      	mov	ip, r0
 800e1fe:	4608      	mov	r0, r1
 800e200:	4611      	mov	r1, r2
    if ((conv_params->padding.w == 0) &&
 800e202:	f8dc 2010 	ldr.w	r2, [ip, #16]
 800e206:	b912      	cbnz	r2, 800e20e <arm_convolve_wrapper_s8_get_buffer_size+0x12>
 800e208:	f8dc 2014 	ldr.w	r2, [ip, #20]
 800e20c:	b182      	cbz	r2, 800e230 <arm_convolve_wrapper_s8_get_buffer_size+0x34>
        (filter_dims->w == 1) &&
        (filter_dims->h == 1))
    {
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
    }
    else if ((output_dims->h == 1) &&
 800e20e:	685a      	ldr	r2, [r3, #4]
 800e210:	2a01      	cmp	r2, #1
 800e212:	d10b      	bne.n	800e22c <arm_convolve_wrapper_s8_get_buffer_size+0x30>
 800e214:	6842      	ldr	r2, [r0, #4]
 800e216:	2a01      	cmp	r2, #1
 800e218:	d108      	bne.n	800e22c <arm_convolve_wrapper_s8_get_buffer_size+0x30>
             (input_dims->h == 1) &&
 800e21a:	684a      	ldr	r2, [r1, #4]
 800e21c:	2a01      	cmp	r2, #1
 800e21e:	d105      	bne.n	800e22c <arm_convolve_wrapper_s8_get_buffer_size+0x30>
             (filter_dims->h == 1) &&
 800e220:	689b      	ldr	r3, [r3, #8]
 800e222:	079b      	lsls	r3, r3, #30
 800e224:	d102      	bne.n	800e22c <arm_convolve_wrapper_s8_get_buffer_size+0x30>
             (output_dims->w % 4 == 0) &&
 800e226:	6803      	ldr	r3, [r0, #0]
 800e228:	2b01      	cmp	r3, #1
 800e22a:	d014      	beq.n	800e256 <arm_convolve_wrapper_s8_get_buffer_size+0x5a>
    {
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
    }
    else
    {
        return arm_convolve_s8_get_buffer_size(input_dims, filter_dims);
 800e22c:	f7ff bf7c 	b.w	800e128 <arm_convolve_s8_get_buffer_size>
        (conv_params->padding.h == 0) &&
 800e230:	68c2      	ldr	r2, [r0, #12]
 800e232:	0792      	lsls	r2, r2, #30
 800e234:	d1eb      	bne.n	800e20e <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        (input_dims->c % 4 == 0) &&
 800e236:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800e23a:	2a01      	cmp	r2, #1
 800e23c:	d1e7      	bne.n	800e20e <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        (conv_params->stride.w == 1) &&
 800e23e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800e242:	2a01      	cmp	r2, #1
 800e244:	d1e3      	bne.n	800e20e <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        (conv_params->stride.h == 1) &&
 800e246:	688a      	ldr	r2, [r1, #8]
 800e248:	2a01      	cmp	r2, #1
 800e24a:	d1e0      	bne.n	800e20e <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        (filter_dims->w == 1) &&
 800e24c:	684a      	ldr	r2, [r1, #4]
 800e24e:	2a01      	cmp	r2, #1
 800e250:	d1dd      	bne.n	800e20e <arm_convolve_wrapper_s8_get_buffer_size+0x12>
        return arm_convolve_1x1_s8_fast_get_buffer_size(input_dims);
 800e252:	f7ff bd71 	b.w	800dd38 <arm_convolve_1x1_s8_fast_get_buffer_size>
        return arm_convolve_1_x_n_s8_get_buffer_size(input_dims, filter_dims);
 800e256:	f7ff bd25 	b.w	800dca4 <arm_convolve_1_x_n_s8_get_buffer_size>
 800e25a:	bf00      	nop

0800e25c <arm_nn_mat_mult_kernel_s8_s16>:
                                    const int16_t activation_min,
                                    const int16_t activation_max,
                                    const uint16_t num_col_a,
                                    const int32_t *const output_bias,
                                    q7_t *out_0)
{
 800e25c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e260:	b09b      	sub	sp, #108	@ 0x6c
 800e262:	4699      	mov	r9, r3
 800e264:	f8dd 80a8 	ldr.w	r8, [sp, #168]	@ 0xa8
 800e268:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	@ 0x98
 800e26c:	f8bd 50a0 	ldrh.w	r5, [sp, #160]	@ 0xa0
 800e270:	910e      	str	r1, [sp, #56]	@ 0x38
 800e272:	460f      	mov	r7, r1
 800e274:	9303      	str	r3, [sp, #12]

    return out_1;

#elif defined(ARM_MATH_DSP)
    /* set up the second output pointers */
    q7_t *out_1 = out_0 + output_ch;
 800e276:	eb08 0602 	add.w	r6, r8, r2
{
 800e27a:	f9bd 309c 	ldrsh.w	r3, [sp, #156]	@ 0x9c
 800e27e:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 800e280:	9304      	str	r3, [sp, #16]
    const int32_t *bias = output_bias;

    uint16_t row_count = output_ch / 2;
    const q7_t *ip_a0 = input_a;
    /* this loop over rows in A */
    while (row_count)
 800e282:	0851      	lsrs	r1, r2, #1
{
 800e284:	4696      	mov	lr, r2
 800e286:	4683      	mov	fp, r0
 800e288:	9507      	str	r5, [sp, #28]
    q7_t *out_1 = out_0 + output_ch;
 800e28a:	9616      	str	r6, [sp, #88]	@ 0x58
    while (row_count)
 800e28c:	f000 81ac 	beq.w	800e5e8 <arm_nn_mat_mult_kernel_s8_s16+0x38c>
            ch_1_out_0 = __SMLAD(a12, b0, ch_1_out_0);
            ch_1_out_1 = __SMLAD(a12, b1, ch_1_out_1);

            col_count--;
        } /* while over col_count */
        col_count = num_col_a & 0x3;
 800e290:	f005 0003 	and.w	r0, r5, #3
 800e294:	900d      	str	r0, [sp, #52]	@ 0x34

            ch_0_out_0 += a0 * b0;
            ch_0_out_1 += a0 * b1;
            ch_1_out_0 += a1 * b0;
            ch_1_out_1 += a1 * b1;
            col_count--;
 800e296:	3801      	subs	r0, #1
 800e298:	1e4a      	subs	r2, r1, #1
 800e29a:	b280      	uxth	r0, r0
 800e29c:	9014      	str	r0, [sp, #80]	@ 0x50
 800e29e:	b292      	uxth	r2, r2
 800e2a0:	f104 0010 	add.w	r0, r4, #16
        uint16_t col_count = num_col_a / 4;
 800e2a4:	08ab      	lsrs	r3, r5, #2
 800e2a6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 800e2aa:	3602      	adds	r6, #2
 800e2ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e2ae:	9210      	str	r2, [sp, #64]	@ 0x40
 800e2b0:	3b01      	subs	r3, #1
 800e2b2:	f108 0202 	add.w	r2, r8, #2
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	9205      	str	r2, [sp, #20]
 800e2ba:	9606      	str	r6, [sp, #24]
  *in_q15 += 2;
 800e2bc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e2be:	9e24      	ldr	r6, [sp, #144]	@ 0x90
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e2c0:	9117      	str	r1, [sp, #92]	@ 0x5c
 800e2c2:	3301      	adds	r3, #1
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e2c4:	eb07 0545 	add.w	r5, r7, r5, lsl #1
  *in_q15 += 2;
 800e2c8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e2cc:	9511      	str	r5, [sp, #68]	@ 0x44
 800e2ce:	f106 0008 	add.w	r0, r6, #8
 800e2d2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800e2d6:	009e      	lsls	r6, r3, #2
            q7_t a0 = *ip_a0++;
 800e2d8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e2da:	9608      	str	r6, [sp, #32]
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e2dc:	e9cd e918 	strd	lr, r9, [sp, #96]	@ 0x60
 800e2e0:	f104 0a08 	add.w	sl, r4, #8
 800e2e4:	f109 0708 	add.w	r7, r9, #8
 800e2e8:	3301      	adds	r3, #1
  *in_q15 += 2;
 800e2ea:	9513      	str	r5, [sp, #76]	@ 0x4c
 800e2ec:	9212      	str	r2, [sp, #72]	@ 0x48
 800e2ee:	9315      	str	r3, [sp, #84]	@ 0x54
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e2f0:	4639      	mov	r1, r7
 800e2f2:	4654      	mov	r4, sl
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 800e2f4:	9b07      	ldr	r3, [sp, #28]
 800e2f6:	eb0b 0203 	add.w	r2, fp, r3
        while (col_count)
 800e2fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
        q31_t ch_1_out_0 = *bias;
 800e2fc:	e954 6502 	ldrd	r6, r5, [r4, #-8]
        while (col_count)
 800e300:	2b00      	cmp	r3, #0
 800e302:	f000 822b 	beq.w	800e75c <arm_nn_mat_mult_kernel_s8_s16+0x500>
 800e306:	9b08      	ldr	r3, [sp, #32]
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e308:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
        const q15_t *ip_b0 = input_b;
 800e30c:	f8dd e038 	ldr.w	lr, [sp, #56]	@ 0x38
        const q7_t *ip_a1 = ip_a0 + num_col_a;
 800e310:	9201      	str	r2, [sp, #4]
 800e312:	e9cd 4209 	strd	r4, r2, [sp, #36]	@ 0x24
 800e316:	e9cd 010b 	strd	r0, r1, [sp, #44]	@ 0x2c
 800e31a:	445b      	add	r3, fp
 800e31c:	9302      	str	r3, [sp, #8]
        q31_t ch_1_out_1 = *bias++;
 800e31e:	46aa      	mov	sl, r5
        q31_t ch_0_out_1 = *bias++;
 800e320:	4637      	mov	r7, r6
  memcpy(&val, *in_q7, 4);
 800e322:	f85b 2b04 	ldr.w	r2, [fp], #4
  memcpy(&val, *in_q15, 4);
 800e326:	f8de 9000 	ldr.w	r9, [lr]
 800e32a:	f8d8 c000 	ldr.w	ip, [r8]
  return (op1 >> op2) | (op1 << (32U - op2));
 800e32e:	ea4f 2132 	mov.w	r1, r2, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e332:	fa2f f181 	sxtb16	r1, r1
 800e336:	fa2f f282 	sxtb16	r2, r2
  memcpy(&val, *in_q7, 4);
 800e33a:	9801      	ldr	r0, [sp, #4]
 800e33c:	f850 3b04 	ldr.w	r3, [r0], #4
 800e340:	9001      	str	r0, [sp, #4]
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 800e342:	0c08      	lsrs	r0, r1, #16
 800e344:	0400      	lsls	r0, r0, #16
 800e346:	ea40 4012 	orr.w	r0, r0, r2, lsr #16
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 800e34a:	b292      	uxth	r2, r2
 800e34c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  return (op1 >> op2) | (op1 << (32U - op2));
 800e350:	ea4f 2433 	mov.w	r4, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e354:	fa2f f484 	sxtb16	r4, r4
 800e358:	fa2f f383 	sxtb16	r3, r3
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 800e35c:	0c21      	lsrs	r1, r4, #16
 800e35e:	0409      	lsls	r1, r1, #16
 800e360:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 800e364:	b29b      	uxth	r3, r3
 800e366:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e36a:	fb22 6609 	smlad	r6, r2, r9, r6
 800e36e:	fb22 770c 	smlad	r7, r2, ip, r7
 800e372:	fb23 5509 	smlad	r5, r3, r9, r5
 800e376:	fb23 a30c 	smlad	r3, r3, ip, sl
  memcpy(&val, *in_q15, 4);
 800e37a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800e37e:	f8d8 a004 	ldr.w	sl, [r8, #4]
  *in_q15 += 2;
 800e382:	f10e 0e08 	add.w	lr, lr, #8
 800e386:	f108 0808 	add.w	r8, r8, #8
 800e38a:	fb20 6602 	smlad	r6, r0, r2, r6
 800e38e:	fb20 770a 	smlad	r7, r0, sl, r7
 800e392:	fb21 5502 	smlad	r5, r1, r2, r5
 800e396:	fb21 3a0a 	smlad	sl, r1, sl, r3
        while (col_count)
 800e39a:	9b02      	ldr	r3, [sp, #8]
 800e39c:	455b      	cmp	r3, fp
 800e39e:	d1c0      	bne.n	800e322 <arm_nn_mat_mult_kernel_s8_s16+0xc6>
  *in_q7 += 4;
 800e3a0:	e9dd 4209 	ldrd	r4, r2, [sp, #36]	@ 0x24
 800e3a4:	9b08      	ldr	r3, [sp, #32]
 800e3a6:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	@ 0x2c
  *in_q15 += 2;
 800e3aa:	e9dd cb12 	ldrd	ip, fp, [sp, #72]	@ 0x48
  *in_q7 += 4;
 800e3ae:	441a      	add	r2, r3
        while (col_count)
 800e3b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d03b      	beq.n	800e42e <arm_nn_mat_mult_kernel_s8_s16+0x1d2>
            q7_t a0 = *ip_a0++;
 800e3b6:	9b02      	ldr	r3, [sp, #8]
            q15_t b0 = *ip_b0++;
 800e3b8:	f9bc 8000 	ldrsh.w	r8, [ip]
            q7_t a0 = *ip_a0++;
 800e3bc:	f993 9000 	ldrsb.w	r9, [r3]
            q7_t a1 = *ip_a1++;
 800e3c0:	f992 e000 	ldrsb.w	lr, [r2]
        while (col_count)
 800e3c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
            ch_0_out_0 += a0 * b0;
 800e3c6:	fb08 6609 	mla	r6, r8, r9, r6
            ch_1_out_0 += a1 * b0;
 800e3ca:	fb08 550e 	mla	r5, r8, lr, r5
            q15_t b1 = *ip_b1++;
 800e3ce:	f9bb 8000 	ldrsh.w	r8, [fp]
            ch_0_out_1 += a0 * b1;
 800e3d2:	fb08 7709 	mla	r7, r8, r9, r7
            ch_1_out_1 += a1 * b1;
 800e3d6:	fb08 aa0e 	mla	sl, r8, lr, sl
        while (col_count)
 800e3da:	b323      	cbz	r3, 800e426 <arm_nn_mat_mult_kernel_s8_s16+0x1ca>
            q7_t a0 = *ip_a0++;
 800e3dc:	9b02      	ldr	r3, [sp, #8]
            q15_t b0 = *ip_b0++;
 800e3de:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
            q7_t a0 = *ip_a0++;
 800e3e2:	f993 9001 	ldrsb.w	r9, [r3, #1]
            q7_t a1 = *ip_a1++;
 800e3e6:	f992 e001 	ldrsb.w	lr, [r2, #1]
        while (col_count)
 800e3ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
            ch_0_out_0 += a0 * b0;
 800e3ec:	fb08 6609 	mla	r6, r8, r9, r6
            ch_1_out_0 += a1 * b0;
 800e3f0:	fb08 550e 	mla	r5, r8, lr, r5
            q15_t b1 = *ip_b1++;
 800e3f4:	f9bb 8002 	ldrsh.w	r8, [fp, #2]
        while (col_count)
 800e3f8:	2b02      	cmp	r3, #2
            ch_0_out_1 += a0 * b1;
 800e3fa:	fb08 7709 	mla	r7, r8, r9, r7
            ch_1_out_1 += a1 * b1;
 800e3fe:	fb08 aa0e 	mla	sl, r8, lr, sl
        while (col_count)
 800e402:	d010      	beq.n	800e426 <arm_nn_mat_mult_kernel_s8_s16+0x1ca>
            q7_t a1 = *ip_a1++;
 800e404:	f992 2002 	ldrsb.w	r2, [r2, #2]
            q15_t b0 = *ip_b0++;
 800e408:	f9bc c004 	ldrsh.w	ip, [ip, #4]
            q15_t b1 = *ip_b1++;
 800e40c:	f9bb 3004 	ldrsh.w	r3, [fp, #4]
            ch_1_out_0 += a1 * b0;
 800e410:	fb0c 5502 	mla	r5, ip, r2, r5
            ch_1_out_1 += a1 * b1;
 800e414:	fb03 aa02 	mla	sl, r3, r2, sl
            q7_t a0 = *ip_a0++;
 800e418:	9a02      	ldr	r2, [sp, #8]
 800e41a:	f992 2002 	ldrsb.w	r2, [r2, #2]
            ch_0_out_0 += a0 * b0;
 800e41e:	fb0c 6602 	mla	r6, ip, r2, r6
            ch_0_out_1 += a0 * b1;
 800e422:	fb03 7702 	mla	r7, r3, r2, r7
            q7_t a0 = *ip_a0++;
 800e426:	9b02      	ldr	r3, [sp, #8]
 800e428:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e42a:	4413      	add	r3, r2
 800e42c:	9302      	str	r3, [sp, #8]
        } /* while over col_count */

        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 800e42e:	f851 3c08 	ldr.w	r3, [r1, #-8]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e432:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
  return arm_nn_divide_by_power_of_two(
 800e436:	4096      	lsls	r6, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e438:	f850 2c08 	ldr.w	r2, [r0, #-8]
 800e43c:	f04f 4c80 	mov.w	ip, #1073741824	@ 0x40000000
 800e440:	f04f 0e00 	mov.w	lr, #0
 800e444:	fbc6 ce02 	smlal	ip, lr, r6, r2
 800e448:	4662      	mov	r2, ip
    result = (int32_t)(mult.long_long >> 31);
 800e44a:	0fd2      	lsrs	r2, r2, #31
  return arm_nn_divide_by_power_of_two(
 800e44c:	2b00      	cmp	r3, #0
    result = (int32_t)(mult.long_long >> 31);
 800e44e:	ea42 024e 	orr.w	r2, r2, lr, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e452:	dc10      	bgt.n	800e476 <arm_nn_mat_mult_kernel_s8_s16+0x21a>
 800e454:	f1c3 0c00 	rsb	ip, r3, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e458:	2301      	movs	r3, #1
 800e45a:	fa03 f30c 	lsl.w	r3, r3, ip
 800e45e:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800e460:	ea02 0603 	and.w	r6, r2, r3
    if (result < 0)
 800e464:	fa52 f20c 	asrs.w	r2, r2, ip
    q31_t threshold = remainder_mask >> 1;
 800e468:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800e46c:	bf48      	it	mi
 800e46e:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800e470:	429e      	cmp	r6, r3
        result++;
 800e472:	bfc8      	it	gt
 800e474:	3201      	addgt	r2, #1
        ch_0_out_0 += out_offset;
 800e476:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800e478:	441a      	add	r2, r3
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 800e47a:	9b03      	ldr	r3, [sp, #12]
 800e47c:	429a      	cmp	r2, r3
 800e47e:	bfb8      	it	lt
 800e480:	461a      	movlt	r2, r3
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800e482:	9b04      	ldr	r3, [sp, #16]
 800e484:	429a      	cmp	r2, r3
 800e486:	bfa8      	it	ge
 800e488:	461a      	movge	r2, r3
        *out_0++ = (q7_t)ch_0_out_0;
 800e48a:	9b05      	ldr	r3, [sp, #20]
 800e48c:	f803 2c02 	strb.w	r2, [r3, #-2]

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 800e490:	f851 6c08 	ldr.w	r6, [r1, #-8]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e494:	f850 3c08 	ldr.w	r3, [r0, #-8]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e498:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
  return arm_nn_divide_by_power_of_two(
 800e49c:	4097      	lsls	r7, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e49e:	f04f 0c00 	mov.w	ip, #0
 800e4a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800e4a6:	fbc7 2c03 	smlal	r2, ip, r7, r3
    result = (int32_t)(mult.long_long >> 31);
 800e4aa:	0fd2      	lsrs	r2, r2, #31
  return arm_nn_divide_by_power_of_two(
 800e4ac:	2e00      	cmp	r6, #0
    result = (int32_t)(mult.long_long >> 31);
 800e4ae:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e4b2:	dc0d      	bgt.n	800e4d0 <arm_nn_mat_mult_kernel_s8_s16+0x274>
 800e4b4:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	40b3      	lsls	r3, r6
 800e4ba:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800e4bc:	ea02 0703 	and.w	r7, r2, r3
    if (result < 0)
 800e4c0:	4132      	asrs	r2, r6
    q31_t threshold = remainder_mask >> 1;
 800e4c2:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800e4c6:	bf48      	it	mi
 800e4c8:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800e4ca:	429f      	cmp	r7, r3
        result++;
 800e4cc:	bfc8      	it	gt
 800e4ce:	3201      	addgt	r2, #1
        ch_0_out_1 += out_offset;
 800e4d0:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800e4d2:	441a      	add	r2, r3
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 800e4d4:	9b03      	ldr	r3, [sp, #12]
 800e4d6:	429a      	cmp	r2, r3
 800e4d8:	bfb8      	it	lt
 800e4da:	461a      	movlt	r2, r3
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 800e4dc:	9b04      	ldr	r3, [sp, #16]
 800e4de:	429a      	cmp	r2, r3
 800e4e0:	bfa8      	it	ge
 800e4e2:	461a      	movge	r2, r3
        *out_1++ = (q7_t)ch_0_out_1;
 800e4e4:	9b06      	ldr	r3, [sp, #24]
 800e4e6:	f803 2c02 	strb.w	r2, [r3, #-2]
        out_mult++;
        out_shift++;

        ch_1_out_0 = arm_nn_requantize(ch_1_out_0, *out_mult, *out_shift);
 800e4ea:	f851 6c04 	ldr.w	r6, [r1, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e4ee:	f850 3c04 	ldr.w	r3, [r0, #-4]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e4f2:	ea26 72e6 	bic.w	r2, r6, r6, asr #31
  return arm_nn_divide_by_power_of_two(
 800e4f6:	4095      	lsls	r5, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e4f8:	2700      	movs	r7, #0
 800e4fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800e4fe:	fbc5 2703 	smlal	r2, r7, r5, r3
    result = (int32_t)(mult.long_long >> 31);
 800e502:	0fd2      	lsrs	r2, r2, #31
  return arm_nn_divide_by_power_of_two(
 800e504:	2e00      	cmp	r6, #0
    result = (int32_t)(mult.long_long >> 31);
 800e506:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e50a:	dc0d      	bgt.n	800e528 <arm_nn_mat_mult_kernel_s8_s16+0x2cc>
 800e50c:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e50e:	2301      	movs	r3, #1
 800e510:	40b3      	lsls	r3, r6
 800e512:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800e514:	ea02 0503 	and.w	r5, r2, r3
    if (result < 0)
 800e518:	4132      	asrs	r2, r6
    q31_t threshold = remainder_mask >> 1;
 800e51a:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800e51e:	bf48      	it	mi
 800e520:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800e522:	429d      	cmp	r5, r3
        result++;
 800e524:	bfc8      	it	gt
 800e526:	3201      	addgt	r2, #1
        ch_1_out_0 += out_offset;
 800e528:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800e52a:	441a      	add	r2, r3
        ch_1_out_0 = MAX(ch_1_out_0, activation_min);
 800e52c:	9b03      	ldr	r3, [sp, #12]
 800e52e:	429a      	cmp	r2, r3
 800e530:	bfb8      	it	lt
 800e532:	461a      	movlt	r2, r3
        ch_1_out_0 = MIN(ch_1_out_0, activation_max);
 800e534:	9b04      	ldr	r3, [sp, #16]
 800e536:	429a      	cmp	r2, r3
 800e538:	bfa8      	it	ge
 800e53a:	461a      	movge	r2, r3
        *out_0++ = (q7_t)ch_1_out_0;
 800e53c:	9b05      	ldr	r3, [sp, #20]
 800e53e:	f803 2c01 	strb.w	r2, [r3, #-1]

        ch_1_out_1 = arm_nn_requantize(ch_1_out_1, *out_mult, *out_shift);
 800e542:	f851 5c04 	ldr.w	r5, [r1, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e546:	f850 3c04 	ldr.w	r3, [r0, #-4]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e54a:	ea25 76e5 	bic.w	r6, r5, r5, asr #31
  return arm_nn_divide_by_power_of_two(
 800e54e:	fa0a f606 	lsl.w	r6, sl, r6
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e552:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800e556:	2700      	movs	r7, #0
 800e558:	fbc6 2703 	smlal	r2, r7, r6, r3
    result = (int32_t)(mult.long_long >> 31);
 800e55c:	0fd2      	lsrs	r2, r2, #31
  return arm_nn_divide_by_power_of_two(
 800e55e:	2d00      	cmp	r5, #0
    result = (int32_t)(mult.long_long >> 31);
 800e560:	ea42 0247 	orr.w	r2, r2, r7, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e564:	dc0d      	bgt.n	800e582 <arm_nn_mat_mult_kernel_s8_s16+0x326>
 800e566:	426d      	negs	r5, r5
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e568:	2301      	movs	r3, #1
 800e56a:	40ab      	lsls	r3, r5
 800e56c:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800e56e:	ea02 0603 	and.w	r6, r2, r3
    if (result < 0)
 800e572:	412a      	asrs	r2, r5
    q31_t threshold = remainder_mask >> 1;
 800e574:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800e578:	bf48      	it	mi
 800e57a:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800e57c:	429e      	cmp	r6, r3
        result++;
 800e57e:	bfc8      	it	gt
 800e580:	3201      	addgt	r2, #1
        ch_1_out_1 += out_offset;
 800e582:	9b25      	ldr	r3, [sp, #148]	@ 0x94
        *out_1++ = (q7_t)ch_1_out_1;
        out_mult++;
        out_shift++;

        /* skip row */
        ip_a0 += num_col_a;
 800e584:	9d07      	ldr	r5, [sp, #28]
        ch_1_out_1 += out_offset;
 800e586:	441a      	add	r2, r3
        ch_1_out_1 = MAX(ch_1_out_1, activation_min);
 800e588:	9b03      	ldr	r3, [sp, #12]
 800e58a:	429a      	cmp	r2, r3
 800e58c:	bfb8      	it	lt
 800e58e:	461a      	movlt	r2, r3
        ch_1_out_1 = MIN(ch_1_out_1, activation_max);
 800e590:	9b04      	ldr	r3, [sp, #16]
 800e592:	429a      	cmp	r2, r3
 800e594:	bfa8      	it	ge
 800e596:	461a      	movge	r2, r3
        *out_1++ = (q7_t)ch_1_out_1;
 800e598:	9b06      	ldr	r3, [sp, #24]
 800e59a:	f803 2c01 	strb.w	r2, [r3, #-1]
        ip_a0 += num_col_a;
 800e59e:	9a02      	ldr	r2, [sp, #8]
    while (row_count)
 800e5a0:	3302      	adds	r3, #2
        ip_a0 += num_col_a;
 800e5a2:	442a      	add	r2, r5
 800e5a4:	4693      	mov	fp, r2
    while (row_count)
 800e5a6:	9306      	str	r3, [sp, #24]
 800e5a8:	9a05      	ldr	r2, [sp, #20]
 800e5aa:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e5ac:	3408      	adds	r4, #8
 800e5ae:	3202      	adds	r2, #2
 800e5b0:	429c      	cmp	r4, r3
 800e5b2:	9205      	str	r2, [sp, #20]
 800e5b4:	f100 0008 	add.w	r0, r0, #8
 800e5b8:	f101 0108 	add.w	r1, r1, #8
 800e5bc:	f47f ae9a 	bne.w	800e2f4 <arm_nn_mat_mult_kernel_s8_s16+0x98>
        q31_t ch_1_out_1 = *bias++;
 800e5c0:	e9dd 1e17 	ldrd	r1, lr, [sp, #92]	@ 0x5c
        *out_1++ = (q7_t)ch_1_out_1;
 800e5c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
        q31_t ch_1_out_1 = *bias++;
 800e5c6:	f8dd 9064 	ldr.w	r9, [sp, #100]	@ 0x64
        *out_1++ = (q7_t)ch_1_out_1;
 800e5ca:	eb03 0341 	add.w	r3, r3, r1, lsl #1
        q31_t ch_1_out_1 = *bias++;
 800e5ce:	e9dd 4829 	ldrd	r4, r8, [sp, #164]	@ 0xa4
        *out_1++ = (q7_t)ch_1_out_1;
 800e5d2:	9316      	str	r3, [sp, #88]	@ 0x58
        out_mult++;
 800e5d4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800e5d6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
        q31_t ch_1_out_1 = *bias++;
 800e5da:	eb04 04c1 	add.w	r4, r4, r1, lsl #3
        *out_0++ = (q7_t)ch_1_out_0;
 800e5de:	eb08 0841 	add.w	r8, r8, r1, lsl #1
        out_mult++;
 800e5e2:	9324      	str	r3, [sp, #144]	@ 0x90
        out_shift++;
 800e5e4:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
        row_count--;
    }

    /* compute the last odd numbered row if any */
    if (output_ch & 0x1)
 800e5e8:	f01e 0f01 	tst.w	lr, #1
 800e5ec:	f000 80b1 	beq.w	800e752 <arm_nn_mat_mult_kernel_s8_s16+0x4f6>
    {
        /* setup pointers for B */
        const q15_t *ip_b0 = input_b;
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e5f0:	9b07      	ldr	r3, [sp, #28]
 800e5f2:	9d0e      	ldr	r5, [sp, #56]	@ 0x38

        /* load the bias */
        q31_t ch_0_out_0 = *bias;
 800e5f4:	6820      	ldr	r0, [r4, #0]
        q31_t ch_0_out_1 = *bias++;

        uint16_t col_count = num_col_a >> 2;
        while (col_count)
 800e5f6:	089a      	lsrs	r2, r3, #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e5f8:	eb05 0443 	add.w	r4, r5, r3, lsl #1
        while (col_count)
 800e5fc:	f000 80b7 	beq.w	800e76e <arm_nn_mat_mult_kernel_s8_s16+0x512>
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 800e600:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800e774 <arm_nn_mat_mult_kernel_s8_s16+0x518>
        q31_t ch_0_out_1 = *bias++;
 800e604:	9201      	str	r2, [sp, #4]
 800e606:	eb0b 0782 	add.w	r7, fp, r2, lsl #2
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e60a:	4626      	mov	r6, r4
        q31_t ch_0_out_1 = *bias++;
 800e60c:	4601      	mov	r1, r0
  memcpy(&val, *in_q7, 4);
 800e60e:	f85b 3b04 	ldr.w	r3, [fp], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 800e612:	ea4f 2a33 	mov.w	sl, r3, ror #8
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e616:	fa2f fa8a 	sxtb16	sl, sl
 800e61a:	fa2f f383 	sxtb16	r3, r3
  *out2 = (int32_t) (__PKHTB (inAbuf1, inAbuf2, 16));
 800e61e:	ea0a 020c 	and.w	r2, sl, ip
 800e622:	ea42 4213 	orr.w	r2, r2, r3, lsr #16
  *out1 = (int32_t) (__PKHBT (inAbuf2, inAbuf1, 16));
 800e626:	b29b      	uxth	r3, r3
 800e628:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
  memcpy(&val, *in_q15, 4);
 800e62c:	f8d5 a000 	ldr.w	sl, [r5]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e630:	fb23 0a0a 	smlad	sl, r3, sl, r0
 800e634:	6830      	ldr	r0, [r6, #0]
 800e636:	fb23 1300 	smlad	r3, r3, r0, r1
 800e63a:	6868      	ldr	r0, [r5, #4]
 800e63c:	6871      	ldr	r1, [r6, #4]
  *in_q15 += 2;
 800e63e:	3508      	adds	r5, #8
 800e640:	3608      	adds	r6, #8
 800e642:	fb22 a000 	smlad	r0, r2, r0, sl
 800e646:	fb22 3101 	smlad	r1, r2, r1, r3
        while (col_count)
 800e64a:	45bb      	cmp	fp, r7
 800e64c:	d1df      	bne.n	800e60e <arm_nn_mat_mult_kernel_s8_s16+0x3b2>
 800e64e:	9a01      	ldr	r2, [sp, #4]
 800e650:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e656:	eb04 04c2 	add.w	r4, r4, r2, lsl #3
 800e65a:	930e      	str	r3, [sp, #56]	@ 0x38
            ch_0_out_1 = __SMLAD(a02, b1, ch_0_out_1);

            col_count--;
        }
        col_count = num_col_a & 0x3;
        while (col_count)
 800e65c:	9b07      	ldr	r3, [sp, #28]
 800e65e:	f013 0203 	ands.w	r2, r3, #3
 800e662:	d01c      	beq.n	800e69e <arm_nn_mat_mult_kernel_s8_s16+0x442>
        {
            q7_t a0 = *ip_a0++;
            q15_t b0 = *ip_b0++;
            q15_t b1 = *ip_b1++;

            ch_0_out_0 += a0 * b0;
 800e664:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
            q7_t a0 = *ip_a0++;
 800e666:	f997 3000 	ldrsb.w	r3, [r7]
            ch_0_out_0 += a0 * b0;
 800e66a:	8835      	ldrh	r5, [r6, #0]
 800e66c:	fb15 0003 	smlabb	r0, r5, r3, r0
            ch_0_out_1 += a0 * b1;
 800e670:	8825      	ldrh	r5, [r4, #0]
        while (col_count)
 800e672:	2a01      	cmp	r2, #1
            ch_0_out_1 += a0 * b1;
 800e674:	fb15 1103 	smlabb	r1, r5, r3, r1
        while (col_count)
 800e678:	d011      	beq.n	800e69e <arm_nn_mat_mult_kernel_s8_s16+0x442>
            q7_t a0 = *ip_a0++;
 800e67a:	f997 3001 	ldrsb.w	r3, [r7, #1]
            ch_0_out_0 += a0 * b0;
 800e67e:	8875      	ldrh	r5, [r6, #2]
 800e680:	fb15 0003 	smlabb	r0, r5, r3, r0
            ch_0_out_1 += a0 * b1;
 800e684:	8865      	ldrh	r5, [r4, #2]
        while (col_count)
 800e686:	2a02      	cmp	r2, #2
            ch_0_out_1 += a0 * b1;
 800e688:	fb15 1103 	smlabb	r1, r5, r3, r1
        while (col_count)
 800e68c:	d007      	beq.n	800e69e <arm_nn_mat_mult_kernel_s8_s16+0x442>
            q7_t a0 = *ip_a0++;
 800e68e:	f997 3002 	ldrsb.w	r3, [r7, #2]
            ch_0_out_0 += a0 * b0;
 800e692:	88b2      	ldrh	r2, [r6, #4]
 800e694:	fb12 0003 	smlabb	r0, r2, r3, r0
            ch_0_out_1 += a0 * b1;
 800e698:	88a2      	ldrh	r2, [r4, #4]
 800e69a:	fb12 1103 	smlabb	r1, r2, r3, r1
            col_count--;
        }
        ch_0_out_0 = arm_nn_requantize(ch_0_out_0, *out_mult, *out_shift);
 800e69e:	f8d9 4000 	ldr.w	r4, [r9]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e6a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e6a4:	ea24 72e4 	bic.w	r2, r4, r4, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e6a8:	681b      	ldr	r3, [r3, #0]
  return arm_nn_divide_by_power_of_two(
 800e6aa:	4090      	lsls	r0, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e6ac:	2500      	movs	r5, #0
 800e6ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800e6b2:	fbc0 2503 	smlal	r2, r5, r0, r3
    result = (int32_t)(mult.long_long >> 31);
 800e6b6:	0fd3      	lsrs	r3, r2, #31
  return arm_nn_divide_by_power_of_two(
 800e6b8:	2c00      	cmp	r4, #0
    result = (int32_t)(mult.long_long >> 31);
 800e6ba:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e6be:	dc0d      	bgt.n	800e6dc <arm_nn_mat_mult_kernel_s8_s16+0x480>
 800e6c0:	4264      	negs	r4, r4
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e6c2:	2201      	movs	r2, #1
 800e6c4:	40a2      	lsls	r2, r4
 800e6c6:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 800e6c8:	ea03 0002 	and.w	r0, r3, r2
    if (result < 0)
 800e6cc:	4123      	asrs	r3, r4
    q31_t threshold = remainder_mask >> 1;
 800e6ce:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 800e6d2:	bf48      	it	mi
 800e6d4:	3201      	addmi	r2, #1
    if (remainder > threshold)
 800e6d6:	4290      	cmp	r0, r2
        result++;
 800e6d8:	bfc8      	it	gt
 800e6da:	3301      	addgt	r3, #1
        ch_0_out_0 += out_offset;
 800e6dc:	9a25      	ldr	r2, [sp, #148]	@ 0x94
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800e6de:	9804      	ldr	r0, [sp, #16]
        ch_0_out_0 += out_offset;
 800e6e0:	4413      	add	r3, r2
        ch_0_out_0 = MAX(ch_0_out_0, activation_min);
 800e6e2:	9a03      	ldr	r2, [sp, #12]
 800e6e4:	4293      	cmp	r3, r2
 800e6e6:	bfb8      	it	lt
 800e6e8:	4613      	movlt	r3, r2
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800e6ea:	4283      	cmp	r3, r0
        *out_0++ = (q7_t)ch_0_out_0;
 800e6ec:	4642      	mov	r2, r8
        ch_0_out_0 = MIN(ch_0_out_0, activation_max);
 800e6ee:	bfa8      	it	ge
 800e6f0:	4603      	movge	r3, r0
        *out_0++ = (q7_t)ch_0_out_0;
 800e6f2:	f802 3b01 	strb.w	r3, [r2], #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e6f6:	9b24      	ldr	r3, [sp, #144]	@ 0x90

        ch_0_out_1 = arm_nn_requantize(ch_0_out_1, *out_mult, *out_shift);
 800e6f8:	f8d9 0000 	ldr.w	r0, [r9]
 800e6fc:	681d      	ldr	r5, [r3, #0]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800e6fe:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
  return arm_nn_divide_by_power_of_two(
 800e702:	4099      	lsls	r1, r3
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800e704:	2400      	movs	r4, #0
 800e706:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e70a:	fbc1 3405 	smlal	r3, r4, r1, r5
    result = (int32_t)(mult.long_long >> 31);
 800e70e:	0fdb      	lsrs	r3, r3, #31
  return arm_nn_divide_by_power_of_two(
 800e710:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 800e712:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
  return arm_nn_divide_by_power_of_two(
 800e716:	dc0d      	bgt.n	800e734 <arm_nn_mat_mult_kernel_s8_s16+0x4d8>
 800e718:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 800e71a:	2101      	movs	r1, #1
 800e71c:	4081      	lsls	r1, r0
 800e71e:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 800e720:	ea03 0401 	and.w	r4, r3, r1
    if (result < 0)
 800e724:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
 800e726:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 800e72a:	bf48      	it	mi
 800e72c:	3101      	addmi	r1, #1
    if (remainder > threshold)
 800e72e:	428c      	cmp	r4, r1
        result++;
 800e730:	bfc8      	it	gt
 800e732:	3301      	addgt	r3, #1
        ch_0_out_1 += out_offset;
 800e734:	9925      	ldr	r1, [sp, #148]	@ 0x94
 800e736:	440b      	add	r3, r1
        ch_0_out_1 = MAX(ch_0_out_1, activation_min);
 800e738:	9903      	ldr	r1, [sp, #12]
 800e73a:	4299      	cmp	r1, r3
 800e73c:	bfb8      	it	lt
 800e73e:	4619      	movlt	r1, r3
 800e740:	460b      	mov	r3, r1
        ch_0_out_1 = MIN(ch_0_out_1, activation_max);
 800e742:	9904      	ldr	r1, [sp, #16]
 800e744:	4299      	cmp	r1, r3
 800e746:	bfa8      	it	ge
 800e748:	4619      	movge	r1, r3
 800e74a:	460b      	mov	r3, r1
        *out_1++ = (q7_t)ch_0_out_1;
 800e74c:	9916      	ldr	r1, [sp, #88]	@ 0x58
        *out_0++ = (q7_t)ch_0_out_0;
 800e74e:	4690      	mov	r8, r2
        *out_1++ = (q7_t)ch_0_out_1;
 800e750:	700b      	strb	r3, [r1, #0]
    (void)output_bias;
    (void)out_0;
    /* To be completed */
    return NULL;
#endif
}
 800e752:	eb08 000e 	add.w	r0, r8, lr
 800e756:	b01b      	add	sp, #108	@ 0x6c
 800e758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        while (col_count)
 800e75c:	f8cd b008 	str.w	fp, [sp, #8]
        const q15_t *ip_b0 = input_b;
 800e760:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
        const q15_t *ip_b1 = ip_b0 + num_col_a;
 800e764:	f8dd b044 	ldr.w	fp, [sp, #68]	@ 0x44
        q31_t ch_1_out_1 = *bias++;
 800e768:	46aa      	mov	sl, r5
        q31_t ch_0_out_1 = *bias++;
 800e76a:	4637      	mov	r7, r6
 800e76c:	e620      	b.n	800e3b0 <arm_nn_mat_mult_kernel_s8_s16+0x154>
        while (col_count)
 800e76e:	465f      	mov	r7, fp
        q31_t ch_0_out_1 = *bias++;
 800e770:	4601      	mov	r1, r0
 800e772:	e773      	b.n	800e65c <arm_nn_mat_mult_kernel_s8_s16+0x400>
 800e774:	ffff0000 	.word	0xffff0000

0800e778 <arm_fully_connected_s8>:
                       const q7_t *kernel,
                       const cmsis_nn_dims *bias_dims,
                       const int32_t *bias,
                       const cmsis_nn_dims *output_dims,
                       q7_t *output)
{
 800e778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    (void)bias_dims;
    (void)ctx;
    int32_t batch_cnt = input_dims->n;
 800e77c:	681d      	ldr	r5, [r3, #0]
{
 800e77e:	b08b      	sub	sp, #44	@ 0x2c
 800e780:	e9dd 6914 	ldrd	r6, r9, [sp, #80]	@ 0x50
 800e784:	e9dd b818 	ldrd	fp, r8, [sp, #96]	@ 0x60

    while (batch_cnt)
 800e788:	b33d      	cbz	r5, 800e7da <arm_fully_connected_s8+0x62>
 800e78a:	460c      	mov	r4, r1
 800e78c:	4617      	mov	r7, r2
                                 fc_params->filter_offset,
                                 fc_params->output_offset,
                                 quant_params->multiplier,
                                 quant_params->shift,
                                 filter_dims->n, /* col_dim or accum_depth */
                                 output_dims->c, /* row_dim or output_depth */
 800e78e:	46c2      	mov	sl, r8
 800e790:	f8d8 200c 	ldr.w	r2, [r8, #12]
                                 filter_dims->n, /* col_dim or accum_depth */
 800e794:	f8d9 1000 	ldr.w	r1, [r9]
                                 output_dims->c, /* row_dim or output_depth */
 800e798:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
        arm_nn_vec_mat_mult_t_s8(input,
 800e79c:	e9d4 e003 	ldrd	lr, r0, [r4, #12]
 800e7a0:	9206      	str	r2, [sp, #24]
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	9105      	str	r1, [sp, #20]
 800e7a6:	9008      	str	r0, [sp, #32]
 800e7a8:	683b      	ldr	r3, [r7, #0]
 800e7aa:	68a0      	ldr	r0, [r4, #8]
 800e7ac:	f8cd e01c 	str.w	lr, [sp, #28]
 800e7b0:	9204      	str	r2, [sp, #16]
 800e7b2:	e9d4 2100 	ldrd	r2, r1, [r4]
 800e7b6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e7ba:	e9cd 2100 	strd	r2, r1, [sp]
 800e7be:	4643      	mov	r3, r8
 800e7c0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800e7c2:	4630      	mov	r0, r6
 800e7c4:	465a      	mov	r2, fp
 800e7c6:	f000 fca5 	bl	800f114 <arm_nn_vec_mat_mult_t_s8>
                                 fc_params->activation.min,
                                 fc_params->activation.max);
        input += filter_dims->n;
 800e7ca:	f8d9 1000 	ldr.w	r1, [r9]
        output += output_dims->c;
 800e7ce:	f8da 200c 	ldr.w	r2, [sl, #12]
    while (batch_cnt)
 800e7d2:	3d01      	subs	r5, #1
        input += filter_dims->n;
 800e7d4:	440e      	add	r6, r1
        output += output_dims->c;
 800e7d6:	4490      	add	r8, r2
    while (batch_cnt)
 800e7d8:	d1e0      	bne.n	800e79c <arm_fully_connected_s8+0x24>
        batch_cnt--;
    }
    return (ARM_MATH_SUCCESS);
}
 800e7da:	2000      	movs	r0, #0
 800e7dc:	b00b      	add	sp, #44	@ 0x2c
 800e7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e2:	bf00      	nop

0800e7e4 <arm_fully_connected_s8_get_buffer_size>:

int32_t arm_fully_connected_s8_get_buffer_size(const cmsis_nn_dims *filter_dims)
{
    (void)filter_dims;
    return 0;
}
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	4770      	bx	lr

0800e7e8 <arm_nn_mat_mult_nt_t_s8>:
                                   const int32_t rhs_cols,
                                   const int32_t lhs_offset,
                                   const int32_t dst_offset,
                                   const int32_t activation_min,
                                   const int32_t activation_max)
{
 800e7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ec:	b09f      	sub	sp, #124	@ 0x7c
 800e7ee:	e9cd 211a 	strd	r2, r1, [sp, #104]	@ 0x68
 800e7f2:	9f2b      	ldr	r7, [sp, #172]	@ 0xac
 800e7f4:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
 800e7f6:	f8dd a0b0 	ldr.w	sl, [sp, #176]	@ 0xb0
 800e7fa:	9313      	str	r3, [sp, #76]	@ 0x4c
#if defined(ARM_MATH_DSP)
    const int32_t off0 = rhs_cols - 4;

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800e7fc:	1e7d      	subs	r5, r7, #1
 800e7fe:	2f01      	cmp	r7, #1
{
 800e800:	468e      	mov	lr, r1
 800e802:	4684      	mov	ip, r0
 800e804:	e9dd 1829 	ldrd	r1, r8, [sp, #164]	@ 0xa4
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800e808:	9517      	str	r5, [sp, #92]	@ 0x5c
 800e80a:	f340 81fa 	ble.w	800ec02 <arm_nn_mat_mult_nt_t_s8+0x41a>
 800e80e:	461e      	mov	r6, r3
 800e810:	f1aa 0310 	sub.w	r3, sl, #16
        {
            lhs_offset_contribution0 += bias[rhs_rows_idx];
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
        }

        int32_t lhs_rows_idx = lhs_rows >> 1;
 800e814:	ea4f 0068 	mov.w	r0, r8, asr #1
 800e818:	f023 030f 	bic.w	r3, r3, #15
 800e81c:	f103 0510 	add.w	r5, r3, #16
 800e820:	fb07 f300 	mul.w	r3, r7, r0
 800e824:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 800e828:	9318      	str	r3, [sp, #96]	@ 0x60
 800e82a:	1c7b      	adds	r3, r7, #1
 800e82c:	18f3      	adds	r3, r6, r3
 800e82e:	9015      	str	r0, [sp, #84]	@ 0x54
 800e830:	9507      	str	r5, [sp, #28]
 800e832:	4670      	mov	r0, lr
 800e834:	f10a 35ff 	add.w	r5, sl, #4294967295	@ 0xffffffff
 800e838:	9319      	str	r3, [sp, #100]	@ 0x64
 800e83a:	f06f 0303 	mvn.w	r3, #3
 800e83e:	eba3 030a 	sub.w	r3, r3, sl
 800e842:	1946      	adds	r6, r0, r5
 800e844:	950e      	str	r5, [sp, #56]	@ 0x38
 800e846:	1d25      	adds	r5, r4, #4
 800e848:	931c      	str	r3, [sp, #112]	@ 0x70
 800e84a:	9504      	str	r5, [sp, #16]
 800e84c:	f008 0301 	and.w	r3, r8, #1
 800e850:	1d0d      	adds	r5, r1, #4
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800e852:	f04f 0900 	mov.w	r9, #0
 800e856:	9316      	str	r3, [sp, #88]	@ 0x58
 800e858:	9503      	str	r5, [sp, #12]

            dst_ptr[0] = (q7_t)res00;
            dst_ptr[1] = (q7_t)res01;
        }

        rhs += 2 * rhs_cols;
 800e85a:	ea4f 034a 	mov.w	r3, sl, lsl #1
 800e85e:	007d      	lsls	r5, r7, #1
 800e860:	e9cd e50b 	strd	lr, r5, [sp, #44]	@ 0x2c
 800e864:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 800e868:	931d      	str	r3, [sp, #116]	@ 0x74
 800e86a:	46ce      	mov	lr, r9
 800e86c:	4635      	mov	r5, r6
 800e86e:	4694      	mov	ip, r2
 800e870:	4698      	mov	r8, r3
 800e872:	46d3      	mov	fp, sl
 800e874:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
        for (int32_t x = 0; x < rhs_cols; ++x)
 800e876:	f1bb 0f00 	cmp.w	fp, #0
 800e87a:	4473      	add	r3, lr
 800e87c:	9305      	str	r3, [sp, #20]
 800e87e:	f340 843d 	ble.w	800f0fc <arm_nn_mat_mult_nt_t_s8+0x914>
 800e882:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
        q31_t lhs_offset_contribution1 = 0;
 800e884:	2200      	movs	r2, #0
 800e886:	3b01      	subs	r3, #1
        for (int32_t x = 0; x < rhs_cols; ++x)
 800e888:	4628      	mov	r0, r5
        q31_t lhs_offset_contribution0 = 0;
 800e88a:	4611      	mov	r1, r2
            lhs_offset_contribution0 += rhs[x];
 800e88c:	f913 4f01 	ldrsb.w	r4, [r3, #1]!
 800e890:	4421      	add	r1, r4
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 800e892:	f910 4f01 	ldrsb.w	r4, [r0, #1]!
        for (int32_t x = 0; x < rhs_cols; ++x)
 800e896:	429d      	cmp	r5, r3
            lhs_offset_contribution1 += rhs[x + rhs_cols];
 800e898:	4422      	add	r2, r4
        for (int32_t x = 0; x < rhs_cols; ++x)
 800e89a:	d1f7      	bne.n	800e88c <arm_nn_mat_mult_nt_t_s8+0xa4>
        lhs_offset_contribution0 *= lhs_offset;
 800e89c:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800e89e:	fb01 f303 	mul.w	r3, r1, r3
 800e8a2:	9309      	str	r3, [sp, #36]	@ 0x24
        lhs_offset_contribution1 *= lhs_offset;
 800e8a4:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800e8a6:	fb02 f303 	mul.w	r3, r2, r3
 800e8aa:	930a      	str	r3, [sp, #40]	@ 0x28
        if (bias)
 800e8ac:	f1bc 0f00 	cmp.w	ip, #0
 800e8b0:	d00b      	beq.n	800e8ca <arm_nn_mat_mult_nt_t_s8+0xe2>
            lhs_offset_contribution1 += bias[rhs_rows_idx + 1];
 800e8b2:	f10c 0304 	add.w	r3, ip, #4
 800e8b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e8b8:	f853 302e 	ldr.w	r3, [r3, lr, lsl #2]
 800e8bc:	441a      	add	r2, r3
 800e8be:	920a      	str	r2, [sp, #40]	@ 0x28
            lhs_offset_contribution0 += bias[rhs_rows_idx];
 800e8c0:	f85c 302e 	ldr.w	r3, [ip, lr, lsl #2]
 800e8c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8c6:	441a      	add	r2, r3
 800e8c8:	9209      	str	r2, [sp, #36]	@ 0x24
        while (lhs_rows_idx)
 800e8ca:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	f000 8413 	beq.w	800f0f8 <arm_nn_mat_mult_nt_t_s8+0x910>
 800e8d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
  *in_q7 += 4;
 800e8d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e8d6:	9807      	ldr	r0, [sp, #28]
        int32_t lhs_rows_idx = lhs_rows >> 1;
 800e8d8:	9306      	str	r3, [sp, #24]
 800e8da:	e9cd 8e0f 	strd	r8, lr, [sp, #60]	@ 0x3c
 800e8de:	f10b 0304 	add.w	r3, fp, #4
 800e8e2:	4472      	add	r2, lr
 800e8e4:	4401      	add	r1, r0
 800e8e6:	9300      	str	r3, [sp, #0]
        const q7_t *lhs_ptr = &lhs[0];
 800e8e8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800e8ea:	910d      	str	r1, [sp, #52]	@ 0x34
 800e8ec:	f10b 0308 	add.w	r3, fp, #8
 800e8f0:	9301      	str	r3, [sp, #4]
 800e8f2:	f1ab 0a04 	sub.w	sl, fp, #4
 800e8f6:	9511      	str	r5, [sp, #68]	@ 0x44
 800e8f8:	4691      	mov	r9, r2
 800e8fa:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800e8fe:	f1bb 0f0f 	cmp.w	fp, #15
 800e902:	f340 8210 	ble.w	800ed26 <arm_nn_mat_mult_nt_t_s8+0x53e>
 800e906:	9b07      	ldr	r3, [sp, #28]
            q31_t res10 = lhs_offset_contribution0;
 800e908:	9d09      	ldr	r5, [sp, #36]	@ 0x24
            q31_t res00 = lhs_offset_contribution0;
 800e90a:	f8cd 9020 	str.w	r9, [sp, #32]
 800e90e:	18f3      	adds	r3, r6, r3
 800e910:	9302      	str	r3, [sp, #8]
            q31_t res11 = lhs_offset_contribution1;
 800e912:	e9dd 370a 	ldrd	r3, r7, [sp, #40]	@ 0x28
            q31_t res10 = lhs_offset_contribution0;
 800e916:	462a      	mov	r2, r5
            q31_t res11 = lhs_offset_contribution1;
 800e918:	4619      	mov	r1, r3
  memcpy(&val, *in_q7, 4);
 800e91a:	6838      	ldr	r0, [r7, #0]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e91c:	fa2f fe80 	sxtb16	lr, r0
 800e920:	f8d6 c000 	ldr.w	ip, [r6]
 800e924:	fa2f f88c 	sxtb16	r8, ip
  memcpy(&val, in_q7, 4);
 800e928:	f857 400b 	ldr.w	r4, [r7, fp]
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800e92c:	fa2f f090 	sxtb16	r0, r0, ror #8
 800e930:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e934:	fb28 550e 	smlad	r5, r8, lr, r5
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e938:	fa2f f984 	sxtb16	r9, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e93c:	fb2c 5500 	smlad	r5, ip, r0, r5
 800e940:	fa2f f494 	sxtb16	r4, r4, ror #8
 800e944:	fb28 3809 	smlad	r8, r8, r9, r3
 800e948:	fb2c 8c04 	smlad	ip, ip, r4, r8
 800e94c:	f856 300b 	ldr.w	r3, [r6, fp]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e950:	fa2f f883 	sxtb16	r8, r3
 800e954:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e958:	fb28 2e0e 	smlad	lr, r8, lr, r2
 800e95c:	fb28 1809 	smlad	r8, r8, r9, r1
 800e960:	fb23 ee00 	smlad	lr, r3, r0, lr
  memcpy(&val, *in_q7, 4);
 800e964:	6878      	ldr	r0, [r7, #4]
 800e966:	fb23 8104 	smlad	r1, r3, r4, r8
  memcpy(&val, in_q7, 4);
 800e96a:	9b00      	ldr	r3, [sp, #0]
 800e96c:	59db      	ldr	r3, [r3, r7]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e96e:	fa2f f480 	sxtb16	r4, r0
  memcpy(&val, *in_q7, 4);
 800e972:	6872      	ldr	r2, [r6, #4]
 800e974:	fa2f f882 	sxtb16	r8, r2
 800e978:	fa2f f090 	sxtb16	r0, r0, ror #8
 800e97c:	fa2f f292 	sxtb16	r2, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e980:	fb28 5504 	smlad	r5, r8, r4, r5
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e984:	fa2f f983 	sxtb16	r9, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e988:	fb22 5500 	smlad	r5, r2, r0, r5
 800e98c:	fa2f f393 	sxtb16	r3, r3, ror #8
 800e990:	fb28 c809 	smlad	r8, r8, r9, ip
 800e994:	fb22 8c03 	smlad	ip, r2, r3, r8
  memcpy(&val, in_q7, 4);
 800e998:	9a00      	ldr	r2, [sp, #0]
 800e99a:	5992      	ldr	r2, [r2, r6]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e99c:	fa2f f882 	sxtb16	r8, r2
 800e9a0:	fa2f f292 	sxtb16	r2, r2, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e9a4:	fb28 e404 	smlad	r4, r8, r4, lr
 800e9a8:	fb28 1809 	smlad	r8, r8, r9, r1
 800e9ac:	fb22 4400 	smlad	r4, r2, r0, r4
  memcpy(&val, *in_q7, 4);
 800e9b0:	68b9      	ldr	r1, [r7, #8]
 800e9b2:	fb22 8203 	smlad	r2, r2, r3, r8
  memcpy(&val, in_q7, 4);
 800e9b6:	9b01      	ldr	r3, [sp, #4]
 800e9b8:	59db      	ldr	r3, [r3, r7]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e9ba:	fa2f f881 	sxtb16	r8, r1
  memcpy(&val, *in_q7, 4);
 800e9be:	68b0      	ldr	r0, [r6, #8]
 800e9c0:	fa2f fe80 	sxtb16	lr, r0
 800e9c4:	fa2f f191 	sxtb16	r1, r1, ror #8
 800e9c8:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e9cc:	fb2e 5508 	smlad	r5, lr, r8, r5
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e9d0:	fa2f f983 	sxtb16	r9, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e9d4:	fb20 5501 	smlad	r5, r0, r1, r5
 800e9d8:	fa2f f393 	sxtb16	r3, r3, ror #8
 800e9dc:	fb2e ce09 	smlad	lr, lr, r9, ip
 800e9e0:	fb20 ee03 	smlad	lr, r0, r3, lr
  memcpy(&val, in_q7, 4);
 800e9e4:	9801      	ldr	r0, [sp, #4]
 800e9e6:	5980      	ldr	r0, [r0, r6]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800e9e8:	fa2f fc80 	sxtb16	ip, r0
 800e9ec:	fa2f f090 	sxtb16	r0, r0, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800e9f0:	fb2c 4808 	smlad	r8, ip, r8, r4
 800e9f4:	fb2c 2409 	smlad	r4, ip, r9, r2
 800e9f8:	fb20 8c01 	smlad	ip, r0, r1, r8
  memcpy(&val, *in_q7, 4);
 800e9fc:	68fa      	ldr	r2, [r7, #12]
  *in_q7 += 4;
 800e9fe:	3710      	adds	r7, #16
 800ea00:	fb20 4003 	smlad	r0, r0, r3, r4
  memcpy(&val, in_q7, 4);
 800ea04:	f857 400a 	ldr.w	r4, [r7, sl]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ea08:	fa2f f882 	sxtb16	r8, r2
  memcpy(&val, *in_q7, 4);
 800ea0c:	68f3      	ldr	r3, [r6, #12]
  *in_q7 += 4;
 800ea0e:	3610      	adds	r6, #16
 800ea10:	fa2f f183 	sxtb16	r1, r3
 800ea14:	fa2f f292 	sxtb16	r2, r2, ror #8
 800ea18:	fa2f f393 	sxtb16	r3, r3, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ea1c:	fb21 5508 	smlad	r5, r1, r8, r5
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ea20:	fa2f f984 	sxtb16	r9, r4
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ea24:	fb23 5502 	smlad	r5, r3, r2, r5
 800ea28:	fa2f f494 	sxtb16	r4, r4, ror #8
 800ea2c:	fb21 e109 	smlad	r1, r1, r9, lr
 800ea30:	fb23 1304 	smlad	r3, r3, r4, r1
  memcpy(&val, in_q7, 4);
 800ea34:	f856 100a 	ldr.w	r1, [r6, sl]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ea38:	fa2f fe81 	sxtb16	lr, r1
 800ea3c:	fa2f f191 	sxtb16	r1, r1, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ea40:	fb2e c808 	smlad	r8, lr, r8, ip
 800ea44:	fb2e 0e09 	smlad	lr, lr, r9, r0
 800ea48:	fb21 8202 	smlad	r2, r1, r2, r8
 800ea4c:	fb21 e104 	smlad	r1, r1, r4, lr
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800ea50:	9802      	ldr	r0, [sp, #8]
 800ea52:	4286      	cmp	r6, r0
 800ea54:	f47f af61 	bne.w	800e91a <arm_nn_mat_mult_nt_t_s8+0x132>
  *in_q7 += 4;
 800ea58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea5c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800ea5e:	9f07      	ldr	r7, [sp, #28]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ea60:	45bb      	cmp	fp, r7
 800ea62:	dd1e      	ble.n	800eaa2 <arm_nn_mat_mult_nt_t_s8+0x2ba>
 800ea64:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800ea66:	eb00 0e04 	add.w	lr, r0, r4
 800ea6a:	9c02      	ldr	r4, [sp, #8]
 800ea6c:	3801      	subs	r0, #1
 800ea6e:	ebae 0e07 	sub.w	lr, lr, r7
 800ea72:	3c01      	subs	r4, #1
                q7_t rhs_value0 = rhs_ptr[0];
 800ea74:	f910 8f01 	ldrsb.w	r8, [r0, #1]!
                q7_t lhs_value  = lhs_ptr[0];
 800ea78:	f914 6f01 	ldrsb.w	r6, [r4, #1]!
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 800ea7c:	f910 c00b 	ldrsb.w	ip, [r0, fp]
                res00 += lhs_value * rhs_value0;
 800ea80:	fb06 5508 	mla	r5, r6, r8, r5
                res01 += lhs_value * rhs_value1;
 800ea84:	fb06 330c 	mla	r3, r6, ip, r3
                lhs_value  = lhs_ptr[rhs_cols];
 800ea88:	f914 600b 	ldrsb.w	r6, [r4, fp]
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ea8c:	4586      	cmp	lr, r0
                res10 += lhs_value * rhs_value0;
 800ea8e:	fb08 2206 	mla	r2, r8, r6, r2
                res11 += lhs_value * rhs_value1;
 800ea92:	fb0c 1106 	mla	r1, ip, r6, r1
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ea96:	d1ed      	bne.n	800ea74 <arm_nn_mat_mult_nt_t_s8+0x28c>
                ++lhs_ptr;
 800ea98:	9802      	ldr	r0, [sp, #8]
 800ea9a:	ebab 0707 	sub.w	r7, fp, r7
 800ea9e:	4438      	add	r0, r7
 800eaa0:	9002      	str	r0, [sp, #8]
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx],     dst_shifts[rhs_rows_idx]);
 800eaa2:	9803      	ldr	r0, [sp, #12]
 800eaa4:	f850 6c04 	ldr.w	r6, [r0, #-4]
 800eaa8:	9804      	ldr	r0, [sp, #16]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800eaaa:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
 800eaae:	f850 7c04 	ldr.w	r7, [r0, #-4]
  return arm_nn_divide_by_power_of_two(
 800eab2:	40a5      	lsls	r5, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800eab4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800eab8:	f04f 0c00 	mov.w	ip, #0
 800eabc:	fbc5 0c07 	smlal	r0, ip, r5, r7
  return arm_nn_divide_by_power_of_two(
 800eac0:	fa02 f404 	lsl.w	r4, r2, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800eac4:	2500      	movs	r5, #0
 800eac6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800eaca:	fbc7 2504 	smlal	r2, r5, r7, r4
    result = (int32_t)(mult.long_long >> 31);
 800eace:	0fc0      	lsrs	r0, r0, #31
 800ead0:	0fd2      	lsrs	r2, r2, #31
  return arm_nn_divide_by_power_of_two(
 800ead2:	2e00      	cmp	r6, #0
    result = (int32_t)(mult.long_long >> 31);
 800ead4:	ea40 004c 	orr.w	r0, r0, ip, lsl #1
 800ead8:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
  return arm_nn_divide_by_power_of_two(
 800eadc:	f340 810d 	ble.w	800ecfa <arm_nn_mat_mult_nt_t_s8+0x512>
 800eae0:	f04f 0e00 	mov.w	lr, #0
    q31_t threshold = remainder_mask >> 1;
 800eae4:	4675      	mov	r5, lr
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 800eae6:	9c03      	ldr	r4, [sp, #12]
 800eae8:	6826      	ldr	r6, [r4, #0]
 800eaea:	9c04      	ldr	r4, [sp, #16]
 800eaec:	f8d4 8000 	ldr.w	r8, [r4]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800eaf0:	ea26 74e6 	bic.w	r4, r6, r6, asr #31
  return arm_nn_divide_by_power_of_two(
 800eaf4:	40a3      	lsls	r3, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800eaf6:	2700      	movs	r7, #0
  return arm_nn_divide_by_power_of_two(
 800eaf8:	fa01 f404 	lsl.w	r4, r1, r4
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800eafc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800eb00:	fbc3 1708 	smlal	r1, r7, r3, r8
 800eb04:	f04f 0c00 	mov.w	ip, #0
 800eb08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800eb0c:	fbc8 3c04 	smlal	r3, ip, r8, r4
    result = (int32_t)(mult.long_long >> 31);
 800eb10:	0fc9      	lsrs	r1, r1, #31
 800eb12:	0fdb      	lsrs	r3, r3, #31
  return arm_nn_divide_by_power_of_two(
 800eb14:	2e00      	cmp	r6, #0
    result = (int32_t)(mult.long_long >> 31);
 800eb16:	ea41 0147 	orr.w	r1, r1, r7, lsl #1
 800eb1a:	ea43 034c 	orr.w	r3, r3, ip, lsl #1
  return arm_nn_divide_by_power_of_two(
 800eb1e:	f340 80d7 	ble.w	800ecd0 <arm_nn_mat_mult_nt_t_s8+0x4e8>
 800eb22:	2700      	movs	r7, #0
    q31_t threshold = remainder_mask >> 1;
 800eb24:	463c      	mov	r4, r7
    if (result < 0)
 800eb26:	2a00      	cmp	r2, #0
        threshold++;
 800eb28:	bfb8      	it	lt
 800eb2a:	3501      	addlt	r5, #1
    if (remainder > threshold)
 800eb2c:	4575      	cmp	r5, lr
        result++;
 800eb2e:	bfb8      	it	lt
 800eb30:	3201      	addlt	r2, #1
    if (result < 0)
 800eb32:	2b00      	cmp	r3, #0
        threshold++;
 800eb34:	bfb8      	it	lt
 800eb36:	3401      	addlt	r4, #1
    if (remainder > threshold)
 800eb38:	42bc      	cmp	r4, r7
            res00 += dst_offset;
 800eb3a:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
            lhs_ptr += rhs_cols;
 800eb3c:	9e02      	ldr	r6, [sp, #8]
        result++;
 800eb3e:	bfb8      	it	lt
 800eb40:	3301      	addlt	r3, #1
            res00 += dst_offset;
 800eb42:	4420      	add	r0, r4
            res01 += dst_offset;
 800eb44:	4421      	add	r1, r4
            res10 += dst_offset;
 800eb46:	4422      	add	r2, r4
            res11 += dst_offset;
 800eb48:	4423      	add	r3, r4
            res00 = MAX(res00, activation_min);
 800eb4a:	9c2f      	ldr	r4, [sp, #188]	@ 0xbc
 800eb4c:	42a0      	cmp	r0, r4
 800eb4e:	bfb8      	it	lt
 800eb50:	4620      	movlt	r0, r4
            res01 = MAX(res01, activation_min);
 800eb52:	42a1      	cmp	r1, r4
 800eb54:	bfb8      	it	lt
 800eb56:	4621      	movlt	r1, r4
            res10 = MAX(res10, activation_min);
 800eb58:	42a2      	cmp	r2, r4
 800eb5a:	bfb8      	it	lt
 800eb5c:	4622      	movlt	r2, r4
            res11 = MAX(res11, activation_min);
 800eb5e:	42a3      	cmp	r3, r4
 800eb60:	bfb8      	it	lt
 800eb62:	4623      	movlt	r3, r4
            res00 = MIN(res00, activation_max);
 800eb64:	9c30      	ldr	r4, [sp, #192]	@ 0xc0
 800eb66:	42a0      	cmp	r0, r4
 800eb68:	bfa8      	it	ge
 800eb6a:	4620      	movge	r0, r4
            dst_ptr[0] = (q7_t)res00;
 800eb6c:	9c05      	ldr	r4, [sp, #20]
 800eb6e:	7020      	strb	r0, [r4, #0]
            res01 = MIN(res01, activation_max);
 800eb70:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 800eb72:	4281      	cmp	r1, r0
 800eb74:	bfa8      	it	ge
 800eb76:	4601      	movge	r1, r0
            dst_ptr[1] = (q7_t)res01;
 800eb78:	7061      	strb	r1, [r4, #1]
            res10 = MIN(res10, activation_max);
 800eb7a:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 800eb7c:	428a      	cmp	r2, r1
 800eb7e:	bfa8      	it	ge
 800eb80:	460a      	movge	r2, r1
            res11 = MIN(res11, activation_max);
 800eb82:	428b      	cmp	r3, r1
 800eb84:	bfa8      	it	ge
 800eb86:	460b      	movge	r3, r1
            dst_ptr[1] = (q7_t)res11;
 800eb88:	f889 3000 	strb.w	r3, [r9]
 800eb8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
            dst_ptr[0] = (q7_t)res10;
 800eb8e:	f809 2c01 	strb.w	r2, [r9, #-1]
            dst_ptr += rhs_rows;
 800eb92:	18e2      	adds	r2, r4, r3
        while (lhs_rows_idx)
 800eb94:	4499      	add	r9, r3
 800eb96:	9b06      	ldr	r3, [sp, #24]
 800eb98:	9205      	str	r2, [sp, #20]
 800eb9a:	3b01      	subs	r3, #1
            lhs_ptr += rhs_cols;
 800eb9c:	445e      	add	r6, fp
        while (lhs_rows_idx)
 800eb9e:	9306      	str	r3, [sp, #24]
 800eba0:	f47f aead 	bne.w	800e8fe <arm_nn_mat_mult_nt_t_s8+0x116>
            dst_ptr += rhs_rows;
 800eba4:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 800eba8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 800ebaa:	e9dd 5c11 	ldrd	r5, ip, [sp, #68]	@ 0x44
 800ebae:	4473      	add	r3, lr
 800ebb0:	9305      	str	r3, [sp, #20]
        if (lhs_rows % 2)
 800ebb2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	f040 80be 	bne.w	800ed36 <arm_nn_mat_mult_nt_t_s8+0x54e>
        rhs += 2 * rhs_cols;
 800ebba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebbc:	4443      	add	r3, r8
 800ebbe:	930b      	str	r3, [sp, #44]	@ 0x2c
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800ebc0:	9b04      	ldr	r3, [sp, #16]
 800ebc2:	3308      	adds	r3, #8
 800ebc4:	9304      	str	r3, [sp, #16]
 800ebc6:	9b03      	ldr	r3, [sp, #12]
 800ebc8:	3308      	adds	r3, #8
 800ebca:	9303      	str	r3, [sp, #12]
 800ebcc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ebce:	f10e 0e02 	add.w	lr, lr, #2
 800ebd2:	459e      	cmp	lr, r3
 800ebd4:	4445      	add	r5, r8
 800ebd6:	f6ff ae4d 	blt.w	800e874 <arm_nn_mat_mult_nt_t_s8+0x8c>
 800ebda:	e9dd 872a 	ldrd	r8, r7, [sp, #168]	@ 0xa8
        rhs += 2 * rhs_cols;
 800ebde:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800ebe0:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 800ebe2:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 800ebe6:	1ebb      	subs	r3, r7, #2
 800ebe8:	085b      	lsrs	r3, r3, #1
 800ebea:	fb03 2202 	mla	r2, r3, r2, r2
 800ebee:	4410      	add	r0, r2
        dst += 2;
 800ebf0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
        rhs += 2 * rhs_cols;
 800ebf2:	901b      	str	r0, [sp, #108]	@ 0x6c
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	e9dd 4128 	ldrd	r4, r1, [sp, #160]	@ 0xa0
        dst += 2;
 800ebfa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800ebfe:	46da      	mov	sl, fp
 800ec00:	9313      	str	r3, [sp, #76]	@ 0x4c
    }

    if (rhs_rows % 2)
 800ec02:	07fb      	lsls	r3, r7, #31
 800ec04:	d560      	bpl.n	800ecc8 <arm_nn_mat_mult_nt_t_s8+0x4e0>
    {
        const q7_t *lhs_ptr = &lhs[0];
        q7_t *dst_ptr = &dst[0];

        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 800ec06:	f1b8 0f00 	cmp.w	r8, #0
 800ec0a:	dd5d      	ble.n	800ecc8 <arm_nn_mat_mult_nt_t_s8+0x4e0>
        {
            const q7_t *rhs_ptr = &rhs[0];
            q31_t res00 = 0;
            if (bias)
            {
                res00 = bias[rhs_rows - 1];
 800ec0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ec0e:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 800ec10:	9e2d      	ldr	r6, [sp, #180]	@ 0xb4
 800ec12:	f8cd 80a8 	str.w	r8, [sp, #168]	@ 0xa8
 800ec16:	f107 4380 	add.w	r3, r7, #1073741824	@ 0x40000000
 800ec1a:	3b01      	subs	r3, #1
                ++rhs_ptr;
                ++lhs_ptr;
            }

            // Quantize down
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 800ec1c:	eb01 0983 	add.w	r9, r1, r3, lsl #2
 800ec20:	eb04 0483 	add.w	r4, r4, r3, lsl #2
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 800ec24:	2000      	movs	r0, #0
                res00 = bias[rhs_rows - 1];
 800ec26:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ec2a:	9301      	str	r3, [sp, #4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ec2c:	f04f 4e80 	mov.w	lr, #1073741824	@ 0x40000000
 800ec30:	4683      	mov	fp, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ec32:	f8cd 9000 	str.w	r9, [sp]
            if (bias)
 800ec36:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	f000 8264 	beq.w	800f106 <arm_nn_mat_mult_nt_t_s8+0x91e>
                res00 = bias[rhs_rows - 1];
 800ec3e:	9b01      	ldr	r3, [sp, #4]
 800ec40:	681a      	ldr	r2, [r3, #0]
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ec42:	f1ba 0f00 	cmp.w	sl, #0
 800ec46:	dd0c      	ble.n	800ec62 <arm_nn_mat_mult_nt_t_s8+0x47a>
 800ec48:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800ec4a:	eb0c 080a 	add.w	r8, ip, sl
 800ec4e:	1e59      	subs	r1, r3, #1
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800ec50:	f91c 3b01 	ldrsb.w	r3, [ip], #1
                q31_t rhs_value = rhs_ptr[0];
 800ec54:	f911 9f01 	ldrsb.w	r9, [r1, #1]!
                q31_t lhs_value = lhs_ptr[0] + lhs_offset;
 800ec58:	4433      	add	r3, r6
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ec5a:	45c4      	cmp	ip, r8
                res00 += lhs_value * rhs_value;
 800ec5c:	fb09 2203 	mla	r2, r9, r3, r2
            for (int32_t rhs_cols_idx = 0; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ec60:	d1f6      	bne.n	800ec50 <arm_nn_mat_mult_nt_t_s8+0x468>
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows - 1], dst_shifts[rhs_rows - 1]);
 800ec62:	9b00      	ldr	r3, [sp, #0]
 800ec64:	f8d3 8000 	ldr.w	r8, [r3]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ec68:	6823      	ldr	r3, [r4, #0]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800ec6a:	ea28 71e8 	bic.w	r1, r8, r8, asr #31
  return arm_nn_divide_by_power_of_two(
 800ec6e:	fa02 f101 	lsl.w	r1, r2, r1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800ec72:	46d9      	mov	r9, fp
 800ec74:	4672      	mov	r2, lr
 800ec76:	fbc1 2903 	smlal	r2, r9, r1, r3
    result = (int32_t)(mult.long_long >> 31);
 800ec7a:	0fd3      	lsrs	r3, r2, #31
  return arm_nn_divide_by_power_of_two(
 800ec7c:	f1b8 0f00 	cmp.w	r8, #0
    result = (int32_t)(mult.long_long >> 31);
 800ec80:	ea43 0349 	orr.w	r3, r3, r9, lsl #1
  return arm_nn_divide_by_power_of_two(
 800ec84:	dc10      	bgt.n	800eca8 <arm_nn_mat_mult_nt_t_s8+0x4c0>
 800ec86:	f1c8 0800 	rsb	r8, r8, #0
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ec8a:	2201      	movs	r2, #1
 800ec8c:	fa02 f208 	lsl.w	r2, r2, r8
 800ec90:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 800ec92:	ea03 0102 	and.w	r1, r3, r2
    if (result < 0)
 800ec96:	fa53 f308 	asrs.w	r3, r3, r8
    q31_t threshold = remainder_mask >> 1;
 800ec9a:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 800ec9e:	bf48      	it	mi
 800eca0:	3201      	addmi	r2, #1
    if (remainder > threshold)
 800eca2:	4291      	cmp	r1, r2
        result++;
 800eca4:	bfc8      	it	gt
 800eca6:	3301      	addgt	r3, #1

            // Add offset
            res00 += dst_offset;
 800eca8:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
 800ecaa:	4413      	add	r3, r2

            // Clamp the result
            res00 = MAX(res00, activation_min);
 800ecac:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	bfb8      	it	lt
 800ecb2:	4613      	movlt	r3, r2
            res00 = MIN(res00, activation_max);
 800ecb4:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800ecb6:	4293      	cmp	r3, r2
 800ecb8:	bfa8      	it	ge
 800ecba:	4613      	movge	r3, r2

            dst_ptr[0] = (q7_t)res00;
 800ecbc:	702b      	strb	r3, [r5, #0]
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 800ecbe:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 800ecc0:	3001      	adds	r0, #1
 800ecc2:	4283      	cmp	r3, r0
            dst_ptr += rhs_rows;
 800ecc4:	443d      	add	r5, r7
        for (int32_t lhs_rows_idx = 0; lhs_rows_idx < lhs_rows; ++lhs_rows_idx)
 800ecc6:	d1b6      	bne.n	800ec36 <arm_nn_mat_mult_nt_t_s8+0x44e>
            dst_ptr += rhs_rows;
        }
    }
#endif
    return ARM_MATH_SUCCESS;
}
 800ecc8:	2000      	movs	r0, #0
 800ecca:	b01f      	add	sp, #124	@ 0x7c
 800eccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return arm_nn_divide_by_power_of_two(
 800ecd0:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ecd2:	2401      	movs	r4, #1
 800ecd4:	40b4      	lsls	r4, r6
 800ecd6:	3c01      	subs	r4, #1
    int32_t remainder = remainder_mask & dividend;
 800ecd8:	ea01 0c04 	and.w	ip, r1, r4
 800ecdc:	ea04 0703 	and.w	r7, r4, r3
    if (result < 0)
 800ece0:	4131      	asrs	r1, r6
    q31_t threshold = remainder_mask >> 1;
 800ece2:	ea4f 0464 	mov.w	r4, r4, asr #1
    result = dividend >> exponent;
 800ece6:	fa43 f306 	asr.w	r3, r3, r6
        threshold++;
 800ecea:	bf4c      	ite	mi
 800ecec:	1c66      	addmi	r6, r4, #1
    q31_t threshold = remainder_mask >> 1;
 800ecee:	4626      	movpl	r6, r4
    if (remainder > threshold)
 800ecf0:	45b4      	cmp	ip, r6
 800ecf2:	f77f af18 	ble.w	800eb26 <arm_nn_mat_mult_nt_t_s8+0x33e>
        result++;
 800ecf6:	3101      	adds	r1, #1
 800ecf8:	e715      	b.n	800eb26 <arm_nn_mat_mult_nt_t_s8+0x33e>
  return arm_nn_divide_by_power_of_two(
 800ecfa:	4276      	negs	r6, r6
    const q31_t remainder_mask = (1 << exponent) - 1;
 800ecfc:	2401      	movs	r4, #1
 800ecfe:	fa04 f506 	lsl.w	r5, r4, r6
 800ed02:	3d01      	subs	r5, #1
    int32_t remainder = remainder_mask & dividend;
 800ed04:	ea00 0405 	and.w	r4, r0, r5
 800ed08:	ea05 0e02 	and.w	lr, r5, r2
    if (result < 0)
 800ed0c:	4130      	asrs	r0, r6
    q31_t threshold = remainder_mask >> 1;
 800ed0e:	ea4f 0565 	mov.w	r5, r5, asr #1
    result = dividend >> exponent;
 800ed12:	fa42 f206 	asr.w	r2, r2, r6
        threshold++;
 800ed16:	bf4c      	ite	mi
 800ed18:	1c6e      	addmi	r6, r5, #1
    q31_t threshold = remainder_mask >> 1;
 800ed1a:	462e      	movpl	r6, r5
    if (remainder > threshold)
 800ed1c:	42b4      	cmp	r4, r6
 800ed1e:	f77f aee2 	ble.w	800eae6 <arm_nn_mat_mult_nt_t_s8+0x2fe>
        result++;
 800ed22:	3001      	adds	r0, #1
 800ed24:	e6df      	b.n	800eae6 <arm_nn_mat_mult_nt_t_s8+0x2fe>
            q31_t res11 = lhs_offset_contribution1;
 800ed26:	e9dd 300a 	ldrd	r3, r0, [sp, #40]	@ 0x28
            q31_t res10 = lhs_offset_contribution0;
 800ed2a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800ed2c:	9602      	str	r6, [sp, #8]
            q31_t res11 = lhs_offset_contribution1;
 800ed2e:	4619      	mov	r1, r3
            q31_t res10 = lhs_offset_contribution0;
 800ed30:	462a      	mov	r2, r5
            int32_t rhs_cols_idx = 0;
 800ed32:	2700      	movs	r7, #0
 800ed34:	e694      	b.n	800ea60 <arm_nn_mat_mult_nt_t_s8+0x278>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800ed36:	f1bb 0f0f 	cmp.w	fp, #15
 800ed3a:	f340 81e6 	ble.w	800f10a <arm_nn_mat_mult_nt_t_s8+0x922>
 800ed3e:	9a07      	ldr	r2, [sp, #28]
 800ed40:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 800ed42:	f8cd 8000 	str.w	r8, [sp]
 800ed46:	eb06 0902 	add.w	r9, r6, r2
 800ed4a:	e9cd e501 	strd	lr, r5, [sp, #4]
 800ed4e:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800ed52:	1d6b      	adds	r3, r5, #5
 800ed54:	f8cd c018 	str.w	ip, [sp, #24]
  memcpy(&val, *in_q7, 4);
 800ed58:	f857 e003 	ldr.w	lr, [r7, r3]
  memcpy(&val, in_q7, 4);
 800ed5c:	f853 4c04 	ldr.w	r4, [r3, #-4]
  memcpy(&val, *in_q7, 4);
 800ed60:	6830      	ldr	r0, [r6, #0]
 800ed62:	18fd      	adds	r5, r7, r3
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ed64:	fa2f fa8e 	sxtb16	sl, lr
 800ed68:	fa2f fc80 	sxtb16	ip, r0
 800ed6c:	fa2f f884 	sxtb16	r8, r4
	__ASM volatile ("sxtb16 %0, %1, ROR %2" : "=r" (result) : "r" (op1), "i" (rotate) );
 800ed70:	fa2f fe9e 	sxtb16	lr, lr, ror #8
 800ed74:	fa2f f090 	sxtb16	r0, r0, ror #8
 800ed78:	fa2f f494 	sxtb16	r4, r4, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ed7c:	fb2c 1a0a 	smlad	sl, ip, sl, r1
 800ed80:	fb20 a10e 	smlad	r1, r0, lr, sl
 800ed84:	fb2c 2c08 	smlad	ip, ip, r8, r2
 800ed88:	fb20 c004 	smlad	r0, r0, r4, ip
 800ed8c:	686c      	ldr	r4, [r5, #4]
  memcpy(&val, in_q7, 4);
 800ed8e:	f8d3 c000 	ldr.w	ip, [r3]
  memcpy(&val, *in_q7, 4);
 800ed92:	6872      	ldr	r2, [r6, #4]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800ed94:	fa2f fa84 	sxtb16	sl, r4
 800ed98:	fa2f fe82 	sxtb16	lr, r2
 800ed9c:	fa2f f88c 	sxtb16	r8, ip
 800eda0:	fa2f f494 	sxtb16	r4, r4, ror #8
 800eda4:	fa2f f292 	sxtb16	r2, r2, ror #8
 800eda8:	fa2f fc9c 	sxtb16	ip, ip, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800edac:	fb2e 1a0a 	smlad	sl, lr, sl, r1
 800edb0:	fb22 a404 	smlad	r4, r2, r4, sl
 800edb4:	fb2e 0e08 	smlad	lr, lr, r8, r0
 800edb8:	fb22 e20c 	smlad	r2, r2, ip, lr
 800edbc:	f8d5 8008 	ldr.w	r8, [r5, #8]
  memcpy(&val, in_q7, 4);
 800edc0:	f8d3 e004 	ldr.w	lr, [r3, #4]
  memcpy(&val, *in_q7, 4);
 800edc4:	f8d6 c008 	ldr.w	ip, [r6, #8]
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800edc8:	fa2f f088 	sxtb16	r0, r8
 800edcc:	fa2f f18c 	sxtb16	r1, ip
 800edd0:	fa2f fa8e 	sxtb16	sl, lr
 800edd4:	fa2f f898 	sxtb16	r8, r8, ror #8
 800edd8:	fa2f fc9c 	sxtb16	ip, ip, ror #8
 800eddc:	fa2f fe9e 	sxtb16	lr, lr, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ede0:	fb21 4000 	smlad	r0, r1, r0, r4
 800ede4:	fb2c 0008 	smlad	r0, ip, r8, r0
 800ede8:	fb21 210a 	smlad	r1, r1, sl, r2
 800edec:	fb2c 140e 	smlad	r4, ip, lr, r1
 800edf0:	68e9      	ldr	r1, [r5, #12]
 800edf2:	68f2      	ldr	r2, [r6, #12]
  memcpy(&val, in_q7, 4);
 800edf4:	689d      	ldr	r5, [r3, #8]
  *in_q7 += 4;
 800edf6:	3610      	adds	r6, #16
  __ASM volatile ("sxtb16 %0, %1" : "=r" (result) : "r" (op1));
 800edf8:	fa2f f881 	sxtb16	r8, r1
 800edfc:	fa2f fc82 	sxtb16	ip, r2
 800ee00:	fa2f fe85 	sxtb16	lr, r5
 800ee04:	fa2f f191 	sxtb16	r1, r1, ror #8
 800ee08:	fa2f f292 	sxtb16	r2, r2, ror #8
 800ee0c:	fa2f f595 	sxtb16	r5, r5, ror #8
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800ee10:	fb2c 0808 	smlad	r8, ip, r8, r0
 800ee14:	fb22 8101 	smlad	r1, r2, r1, r8
 800ee18:	fb2c 4c0e 	smlad	ip, ip, lr, r4
 800ee1c:	fb22 c205 	smlad	r2, r2, r5, ip
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800ee20:	454e      	cmp	r6, r9
 800ee22:	f103 0310 	add.w	r3, r3, #16
 800ee26:	d197      	bne.n	800ed58 <arm_nn_mat_mult_nt_t_s8+0x570>
 800ee28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ee2a:	9807      	ldr	r0, [sp, #28]
 800ee2c:	f8dd 8000 	ldr.w	r8, [sp]
 800ee30:	f8dd c018 	ldr.w	ip, [sp, #24]
 800ee34:	e9dd e501 	ldrd	lr, r5, [sp, #4]
 800ee38:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 800ee3c:	1819      	adds	r1, r3, r0
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ee3e:	4583      	cmp	fp, r0
 800ee40:	f340 80ff 	ble.w	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800ee44:	f999 3000 	ldrsb.w	r3, [r9]
                res00 += lhs_value * rhs_value0;
 800ee48:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800ee4a:	f991 2000 	ldrsb.w	r2, [r1]
 800ee4e:	fb13 4602 	smlabb	r6, r3, r2, r4
                res01 += lhs_value * rhs_value1;
 800ee52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ee54:	f911 200b 	ldrsb.w	r2, [r1, fp]
                res00 += lhs_value * rhs_value0;
 800ee58:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800ee5a:	fb13 4702 	smlabb	r7, r3, r2, r4
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ee5e:	1c43      	adds	r3, r0, #1
 800ee60:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800ee62:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ee64:	f340 80ed 	ble.w	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800ee68:	f999 3001 	ldrsb.w	r3, [r9, #1]
                res00 += lhs_value * rhs_value0;
 800ee6c:	f991 2001 	ldrsb.w	r2, [r1, #1]
                q7_t rhs_value1 = rhs_ptr[rhs_cols];
 800ee70:	eb01 040b 	add.w	r4, r1, fp
                res00 += lhs_value * rhs_value0;
 800ee74:	fb13 6602 	smlabb	r6, r3, r2, r6
                res01 += lhs_value * rhs_value1;
 800ee78:	f994 2001 	ldrsb.w	r2, [r4, #1]
                res00 += lhs_value * rhs_value0;
 800ee7c:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800ee7e:	fb13 7702 	smlabb	r7, r3, r2, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ee82:	1c83      	adds	r3, r0, #2
 800ee84:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800ee86:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ee88:	f340 80db 	ble.w	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800ee8c:	f999 3002 	ldrsb.w	r3, [r9, #2]
                res00 += lhs_value * rhs_value0;
 800ee90:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800ee94:	fb12 6603 	smlabb	r6, r2, r3, r6
                res01 += lhs_value * rhs_value1;
 800ee98:	f994 2002 	ldrsb.w	r2, [r4, #2]
                res00 += lhs_value * rhs_value0;
 800ee9c:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800ee9e:	fb12 7703 	smlabb	r7, r2, r3, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800eea2:	1cc3      	adds	r3, r0, #3
 800eea4:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800eea6:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800eea8:	f340 80cb 	ble.w	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800eeac:	f999 3003 	ldrsb.w	r3, [r9, #3]
                res00 += lhs_value * rhs_value0;
 800eeb0:	f991 2003 	ldrsb.w	r2, [r1, #3]
 800eeb4:	fb12 6603 	smlabb	r6, r2, r3, r6
                res01 += lhs_value * rhs_value1;
 800eeb8:	f994 2003 	ldrsb.w	r2, [r4, #3]
                res00 += lhs_value * rhs_value0;
 800eebc:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800eebe:	fb12 7703 	smlabb	r7, r2, r3, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800eec2:	1d03      	adds	r3, r0, #4
 800eec4:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800eec6:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800eec8:	f340 80bb 	ble.w	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800eecc:	f999 3004 	ldrsb.w	r3, [r9, #4]
                res00 += lhs_value * rhs_value0;
 800eed0:	f991 2004 	ldrsb.w	r2, [r1, #4]
 800eed4:	fb12 6603 	smlabb	r6, r2, r3, r6
                res01 += lhs_value * rhs_value1;
 800eed8:	f994 2004 	ldrsb.w	r2, [r4, #4]
                res00 += lhs_value * rhs_value0;
 800eedc:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800eede:	fb12 7703 	smlabb	r7, r2, r3, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800eee2:	1d43      	adds	r3, r0, #5
 800eee4:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800eee6:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800eee8:	f340 80ab 	ble.w	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800eeec:	f999 3005 	ldrsb.w	r3, [r9, #5]
                res00 += lhs_value * rhs_value0;
 800eef0:	f991 2005 	ldrsb.w	r2, [r1, #5]
 800eef4:	fb12 6603 	smlabb	r6, r2, r3, r6
                res01 += lhs_value * rhs_value1;
 800eef8:	f994 2005 	ldrsb.w	r2, [r4, #5]
                res00 += lhs_value * rhs_value0;
 800eefc:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800eefe:	fb12 7703 	smlabb	r7, r2, r3, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ef02:	1d83      	adds	r3, r0, #6
 800ef04:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800ef06:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ef08:	f340 809b 	ble.w	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800ef0c:	f999 3006 	ldrsb.w	r3, [r9, #6]
                res00 += lhs_value * rhs_value0;
 800ef10:	f991 2006 	ldrsb.w	r2, [r1, #6]
 800ef14:	fb12 6603 	smlabb	r6, r2, r3, r6
                res01 += lhs_value * rhs_value1;
 800ef18:	f994 2006 	ldrsb.w	r2, [r4, #6]
                res00 += lhs_value * rhs_value0;
 800ef1c:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800ef1e:	fb12 7703 	smlabb	r7, r2, r3, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ef22:	1dc3      	adds	r3, r0, #7
 800ef24:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800ef26:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ef28:	f340 808b 	ble.w	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800ef2c:	f999 3007 	ldrsb.w	r3, [r9, #7]
                res00 += lhs_value * rhs_value0;
 800ef30:	f991 2007 	ldrsb.w	r2, [r1, #7]
 800ef34:	fb12 6603 	smlabb	r6, r2, r3, r6
                res01 += lhs_value * rhs_value1;
 800ef38:	f994 2007 	ldrsb.w	r2, [r4, #7]
                res00 += lhs_value * rhs_value0;
 800ef3c:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800ef3e:	fb12 7703 	smlabb	r7, r2, r3, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ef42:	f100 0308 	add.w	r3, r0, #8
 800ef46:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800ef48:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ef4a:	dd7a      	ble.n	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800ef4c:	f999 3008 	ldrsb.w	r3, [r9, #8]
                res00 += lhs_value * rhs_value0;
 800ef50:	f991 2008 	ldrsb.w	r2, [r1, #8]
 800ef54:	fb12 6603 	smlabb	r6, r2, r3, r6
                res01 += lhs_value * rhs_value1;
 800ef58:	f994 2008 	ldrsb.w	r2, [r4, #8]
                res00 += lhs_value * rhs_value0;
 800ef5c:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800ef5e:	fb12 7703 	smlabb	r7, r2, r3, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ef62:	f100 0309 	add.w	r3, r0, #9
 800ef66:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800ef68:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ef6a:	dd6a      	ble.n	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800ef6c:	f999 3009 	ldrsb.w	r3, [r9, #9]
                res00 += lhs_value * rhs_value0;
 800ef70:	f991 2009 	ldrsb.w	r2, [r1, #9]
 800ef74:	fb12 6603 	smlabb	r6, r2, r3, r6
                res01 += lhs_value * rhs_value1;
 800ef78:	f994 2009 	ldrsb.w	r2, [r4, #9]
                res00 += lhs_value * rhs_value0;
 800ef7c:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800ef7e:	fb12 7703 	smlabb	r7, r2, r3, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ef82:	f100 030a 	add.w	r3, r0, #10
 800ef86:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800ef88:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800ef8a:	dd5a      	ble.n	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800ef8c:	f999 300a 	ldrsb.w	r3, [r9, #10]
                res00 += lhs_value * rhs_value0;
 800ef90:	f991 200a 	ldrsb.w	r2, [r1, #10]
 800ef94:	fb12 6603 	smlabb	r6, r2, r3, r6
                res01 += lhs_value * rhs_value1;
 800ef98:	f994 200a 	ldrsb.w	r2, [r4, #10]
                res00 += lhs_value * rhs_value0;
 800ef9c:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800ef9e:	fb12 7703 	smlabb	r7, r2, r3, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800efa2:	f100 030b 	add.w	r3, r0, #11
 800efa6:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800efa8:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800efaa:	dd4a      	ble.n	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800efac:	f999 300b 	ldrsb.w	r3, [r9, #11]
                res00 += lhs_value * rhs_value0;
 800efb0:	f991 200b 	ldrsb.w	r2, [r1, #11]
 800efb4:	fb12 6603 	smlabb	r6, r2, r3, r6
                res01 += lhs_value * rhs_value1;
 800efb8:	f994 200b 	ldrsb.w	r2, [r4, #11]
                res00 += lhs_value * rhs_value0;
 800efbc:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800efbe:	fb12 7703 	smlabb	r7, r2, r3, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800efc2:	f100 030c 	add.w	r3, r0, #12
 800efc6:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800efc8:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800efca:	dd3a      	ble.n	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800efcc:	f999 300c 	ldrsb.w	r3, [r9, #12]
                res00 += lhs_value * rhs_value0;
 800efd0:	f991 200c 	ldrsb.w	r2, [r1, #12]
 800efd4:	fb12 6603 	smlabb	r6, r2, r3, r6
                res01 += lhs_value * rhs_value1;
 800efd8:	f994 200c 	ldrsb.w	r2, [r4, #12]
                res00 += lhs_value * rhs_value0;
 800efdc:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800efde:	fb12 7703 	smlabb	r7, r2, r3, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800efe2:	f100 030d 	add.w	r3, r0, #13
 800efe6:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800efe8:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800efea:	dd2a      	ble.n	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800efec:	f999 300d 	ldrsb.w	r3, [r9, #13]
                res00 += lhs_value * rhs_value0;
 800eff0:	f991 200d 	ldrsb.w	r2, [r1, #13]
 800eff4:	fb12 6603 	smlabb	r6, r2, r3, r6
                res01 += lhs_value * rhs_value1;
 800eff8:	f994 200d 	ldrsb.w	r2, [r4, #13]
                res00 += lhs_value * rhs_value0;
 800effc:	9609      	str	r6, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800effe:	fb12 7703 	smlabb	r7, r2, r3, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f002:	f100 030e 	add.w	r3, r0, #14
 800f006:	459b      	cmp	fp, r3
                res01 += lhs_value * rhs_value1;
 800f008:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f00a:	dd1a      	ble.n	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800f00c:	f999 300e 	ldrsb.w	r3, [r9, #14]
                res00 += lhs_value * rhs_value0;
 800f010:	f991 200e 	ldrsb.w	r2, [r1, #14]
 800f014:	fb12 6603 	smlabb	r6, r2, r3, r6
                res01 += lhs_value * rhs_value1;
 800f018:	f994 200e 	ldrsb.w	r2, [r4, #14]
                res00 += lhs_value * rhs_value0;
 800f01c:	9609      	str	r6, [sp, #36]	@ 0x24
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f01e:	300f      	adds	r0, #15
                res01 += lhs_value * rhs_value1;
 800f020:	fb12 7703 	smlabb	r7, r2, r3, r7
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f024:	4583      	cmp	fp, r0
                res01 += lhs_value * rhs_value1;
 800f026:	970a      	str	r7, [sp, #40]	@ 0x28
            for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f028:	dd0b      	ble.n	800f042 <arm_nn_mat_mult_nt_t_s8+0x85a>
                q7_t lhs_value  = lhs_ptr[0];
 800f02a:	f999 300f 	ldrsb.w	r3, [r9, #15]
                res00 += lhs_value * rhs_value0;
 800f02e:	f991 200f 	ldrsb.w	r2, [r1, #15]
 800f032:	fb13 6202 	smlabb	r2, r3, r2, r6
 800f036:	9209      	str	r2, [sp, #36]	@ 0x24
                res01 += lhs_value * rhs_value1;
 800f038:	f994 200f 	ldrsb.w	r2, [r4, #15]
 800f03c:	fb13 7302 	smlabb	r3, r3, r2, r7
 800f040:	930a      	str	r3, [sp, #40]	@ 0x28
            res00 = arm_nn_requantize(res00, dst_multipliers[rhs_rows_idx],     dst_shifts[rhs_rows_idx]);
 800f042:	9b03      	ldr	r3, [sp, #12]
  return arm_nn_divide_by_power_of_two(
 800f044:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f046:	f853 1c04 	ldr.w	r1, [r3, #-4]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f04a:	9b04      	ldr	r3, [sp, #16]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f04c:	ea21 72e1 	bic.w	r2, r1, r1, asr #31
  return arm_nn_divide_by_power_of_two(
 800f050:	4090      	lsls	r0, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f052:	f853 3c04 	ldr.w	r3, [r3, #-4]
  return arm_nn_divide_by_power_of_two(
 800f056:	4602      	mov	r2, r0
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f058:	2400      	movs	r4, #0
 800f05a:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800f05e:	fbc2 0403 	smlal	r0, r4, r2, r3
    result = (int32_t)(mult.long_long >> 31);
 800f062:	0fc0      	lsrs	r0, r0, #31
  return arm_nn_divide_by_power_of_two(
 800f064:	2900      	cmp	r1, #0
    result = (int32_t)(mult.long_long >> 31);
 800f066:	ea40 0644 	orr.w	r6, r0, r4, lsl #1
  return arm_nn_divide_by_power_of_two(
 800f06a:	dc0d      	bgt.n	800f088 <arm_nn_mat_mult_nt_t_s8+0x8a0>
 800f06c:	4249      	negs	r1, r1
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f06e:	2301      	movs	r3, #1
 800f070:	408b      	lsls	r3, r1
 800f072:	3b01      	subs	r3, #1
    int32_t remainder = remainder_mask & dividend;
 800f074:	ea06 0203 	and.w	r2, r6, r3
    if (result < 0)
 800f078:	410e      	asrs	r6, r1
    q31_t threshold = remainder_mask >> 1;
 800f07a:	ea4f 0363 	mov.w	r3, r3, asr #1
        threshold++;
 800f07e:	bf48      	it	mi
 800f080:	3301      	addmi	r3, #1
    if (remainder > threshold)
 800f082:	429a      	cmp	r2, r3
        result++;
 800f084:	bfc8      	it	gt
 800f086:	3601      	addgt	r6, #1
            res01 = arm_nn_requantize(res01, dst_multipliers[rhs_rows_idx + 1], dst_shifts[rhs_rows_idx + 1]);
 800f088:	9b03      	ldr	r3, [sp, #12]
  return arm_nn_divide_by_power_of_two(
 800f08a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f08c:	6818      	ldr	r0, [r3, #0]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f08e:	9b04      	ldr	r3, [sp, #16]
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f090:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f094:	681b      	ldr	r3, [r3, #0]
  return arm_nn_divide_by_power_of_two(
 800f096:	408a      	lsls	r2, r1
 800f098:	4611      	mov	r1, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f09a:	2400      	movs	r4, #0
 800f09c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800f0a0:	fbc1 2403 	smlal	r2, r4, r1, r3
    result = (int32_t)(mult.long_long >> 31);
 800f0a4:	0fd3      	lsrs	r3, r2, #31
  return arm_nn_divide_by_power_of_two(
 800f0a6:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 800f0a8:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
  return arm_nn_divide_by_power_of_two(
 800f0ac:	dc0d      	bgt.n	800f0ca <arm_nn_mat_mult_nt_t_s8+0x8e2>
 800f0ae:	4240      	negs	r0, r0
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f0b0:	2201      	movs	r2, #1
 800f0b2:	4082      	lsls	r2, r0
 800f0b4:	3a01      	subs	r2, #1
    int32_t remainder = remainder_mask & dividend;
 800f0b6:	ea03 0102 	and.w	r1, r3, r2
    if (result < 0)
 800f0ba:	4103      	asrs	r3, r0
    q31_t threshold = remainder_mask >> 1;
 800f0bc:	ea4f 0262 	mov.w	r2, r2, asr #1
        threshold++;
 800f0c0:	bf48      	it	mi
 800f0c2:	3201      	addmi	r2, #1
    if (remainder > threshold)
 800f0c4:	4291      	cmp	r1, r2
        result++;
 800f0c6:	bfc8      	it	gt
 800f0c8:	3301      	addgt	r3, #1
            res01 += dst_offset;
 800f0ca:	992e      	ldr	r1, [sp, #184]	@ 0xb8
            res00 += dst_offset;
 800f0cc:	9a2e      	ldr	r2, [sp, #184]	@ 0xb8
            res01 += dst_offset;
 800f0ce:	440b      	add	r3, r1
            res00 = MAX(res00, activation_min);
 800f0d0:	992f      	ldr	r1, [sp, #188]	@ 0xbc
            res00 += dst_offset;
 800f0d2:	4432      	add	r2, r6
            res00 = MAX(res00, activation_min);
 800f0d4:	428a      	cmp	r2, r1
 800f0d6:	bfb8      	it	lt
 800f0d8:	460a      	movlt	r2, r1
            res01 = MAX(res01, activation_min);
 800f0da:	428b      	cmp	r3, r1
 800f0dc:	bfb8      	it	lt
 800f0de:	460b      	movlt	r3, r1
            res00 = MIN(res00, activation_max);
 800f0e0:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 800f0e2:	428a      	cmp	r2, r1
 800f0e4:	bfa8      	it	ge
 800f0e6:	460a      	movge	r2, r1
            dst_ptr[0] = (q7_t)res00;
 800f0e8:	9905      	ldr	r1, [sp, #20]
 800f0ea:	700a      	strb	r2, [r1, #0]
            res01 = MIN(res01, activation_max);
 800f0ec:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 800f0ee:	4293      	cmp	r3, r2
 800f0f0:	bfa8      	it	ge
 800f0f2:	4613      	movge	r3, r2
            dst_ptr[1] = (q7_t)res01;
 800f0f4:	704b      	strb	r3, [r1, #1]
 800f0f6:	e560      	b.n	800ebba <arm_nn_mat_mult_nt_t_s8+0x3d2>
        const q7_t *lhs_ptr = &lhs[0];
 800f0f8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f0fa:	e55a      	b.n	800ebb2 <arm_nn_mat_mult_nt_t_s8+0x3ca>
        for (int32_t x = 0; x < rhs_cols; ++x)
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	e9cd 3309 	strd	r3, r3, [sp, #36]	@ 0x24
 800f102:	f7ff bbd3 	b.w	800e8ac <arm_nn_mat_mult_nt_t_s8+0xc4>
 800f106:	461a      	mov	r2, r3
 800f108:	e59b      	b.n	800ec42 <arm_nn_mat_mult_nt_t_s8+0x45a>
            for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f10a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f10c:	46b1      	mov	r9, r6
            int32_t rhs_cols_idx = 0;
 800f10e:	2000      	movs	r0, #0
 800f110:	e695      	b.n	800ee3e <arm_nn_mat_mult_nt_t_s8+0x656>
 800f112:	bf00      	nop

0800f114 <arm_nn_vec_mat_mult_t_s8>:
                                    const int32_t dst_shift,
                                    const int32_t rhs_cols,
                                    const int32_t rhs_rows,
                                    const int32_t activation_min,
                                    const int32_t activation_max)
{
 800f114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f118:	b095      	sub	sp, #84	@ 0x54
 800f11a:	4684      	mov	ip, r0
 800f11c:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
 800f11e:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 800f122:	9e24      	ldr	r6, [sp, #144]	@ 0x90
 800f124:	9006      	str	r0, [sp, #24]
 800f126:	4608      	mov	r0, r1
    const int32_t off0 = rhs_cols - 4;
    const int16_t lhs_offset_s16 = lhs_offset;
    const int16_t rhs_offset_s16 = rhs_offset;

    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 800f128:	b2b9      	uxth	r1, r7
{
 800f12a:	4699      	mov	r9, r3
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 800f12c:	fa1f f48a 	uxth.w	r4, sl
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 800f130:	ea41 4307 	orr.w	r3, r1, r7, lsl #16

    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800f134:	2e01      	cmp	r6, #1
{
 800f136:	f8dd b08c 	ldr.w	fp, [sp, #140]	@ 0x8c
    const uint32_t rhs_offset_s16x2 = __PKHBT(rhs_offset_s16, rhs_offset_s16, 16);
 800f13a:	930e      	str	r3, [sp, #56]	@ 0x38
    const uint32_t lhs_offset_s16x2 = __PKHBT(lhs_offset_s16, lhs_offset_s16, 16);
 800f13c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800f140:	f340 8245 	ble.w	800f5ce <arm_nn_vec_mat_mult_t_s8+0x4ba>
  return arm_nn_divide_by_power_of_two(
 800f144:	9b22      	ldr	r3, [sp, #136]	@ 0x88
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f146:	9001      	str	r0, [sp, #4]
 800f148:	425b      	negs	r3, r3
 800f14a:	461d      	mov	r5, r3
 800f14c:	930d      	str	r3, [sp, #52]	@ 0x34
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f14e:	2301      	movs	r3, #1
 800f150:	40ab      	lsls	r3, r5
 800f152:	3b01      	subs	r3, #1
 800f154:	930c      	str	r3, [sp, #48]	@ 0x30
 800f156:	f1ab 0310 	sub.w	r3, fp, #16
 800f15a:	1eb5      	subs	r5, r6, #2
 800f15c:	f023 030f 	bic.w	r3, r3, #15
 800f160:	f103 0110 	add.w	r1, r3, #16
 800f164:	f025 0301 	bic.w	r3, r5, #1
 800f168:	444b      	add	r3, r9
 800f16a:	3304      	adds	r3, #4
 800f16c:	9308      	str	r3, [sp, #32]
    q31_t threshold = remainder_mask >> 1;
 800f16e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f170:	9109      	str	r1, [sp, #36]	@ 0x24
 800f172:	105b      	asrs	r3, r3, #1
 800f174:	930b      	str	r3, [sp, #44]	@ 0x2c
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f176:	9b22      	ldr	r3, [sp, #136]	@ 0x88
        res01 = MIN(res01, activation_max);

        *dst++ = (q7_t)res00;
        *dst++ = (q7_t)res01;

        rhs += 2 * rhs_cols;
 800f178:	ea4f 014b 	mov.w	r1, fp, lsl #1
 800f17c:	9105      	str	r1, [sp, #20]
 800f17e:	ea23 71e3 	bic.w	r1, r3, r3, asr #31
 800f182:	9107      	str	r1, [sp, #28]
 800f184:	f102 0108 	add.w	r1, r2, #8
 800f188:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f18a:	9102      	str	r1, [sp, #8]
 800f18c:	f109 0102 	add.w	r1, r9, #2
 800f190:	9103      	str	r1, [sp, #12]
 800f192:	4661      	mov	r1, ip
 800f194:	18cb      	adds	r3, r1, r3
 800f196:	9304      	str	r3, [sp, #16]
        threshold++;
 800f198:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f19a:	f10b 0104 	add.w	r1, fp, #4
 800f19e:	e9cd 5010 	strd	r5, r0, [sp, #64]	@ 0x40
 800f1a2:	f06f 0803 	mvn.w	r8, #3
 800f1a6:	910a      	str	r1, [sp, #40]	@ 0x28
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f1ac:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f1ae:	e9cd 2912 	strd	r2, r9, [sp, #72]	@ 0x48
 800f1b2:	eba8 080b 	sub.w	r8, r8, fp
 800f1b6:	46d9      	mov	r9, fp
 800f1b8:	46d3      	mov	fp, sl
        q31_t res00 = *bias++;
 800f1ba:	9b02      	ldr	r3, [sp, #8]
 800f1bc:	9a01      	ldr	r2, [sp, #4]
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f1be:	f1b9 0f0f 	cmp.w	r9, #15
        q31_t res01 = *bias++;
 800f1c2:	e953 0302 	ldrd	r0, r3, [r3, #-8]
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f1c6:	f340 8371 	ble.w	800f8ac <arm_nn_vec_mat_mult_t_s8+0x798>
 800f1ca:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
        const q7_t *lhs_ptr = &lhs[0];
 800f1cc:	f8dd e018 	ldr.w	lr, [sp, #24]
 800f1d0:	f8cd 908c 	str.w	r9, [sp, #140]	@ 0x8c
 800f1d4:	e9cd b71e 	strd	fp, r7, [sp, #120]	@ 0x78
 800f1d8:	9f04      	ldr	r7, [sp, #16]
 800f1da:	eb02 0c05 	add.w	ip, r2, r5
  memcpy(&val, *in_q7, 4);
 800f1de:	f858 200c 	ldr.w	r2, [r8, ip]
 800f1e2:	eb08 060c 	add.w	r6, r8, ip
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f1e6:	fa21 fb82 	sxtab16	fp, r1, r2
 800f1ea:	f8de 5000 	ldr.w	r5, [lr]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f1ee:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f1f2:	fa21 f282 	sxtab16	r2, r1, r2
 800f1f6:	fa24 fa85 	sxtab16	sl, r4, r5
  memcpy(&val, in_q7, 4);
 800f1fa:	f85c 9c04 	ldr.w	r9, [ip, #-4]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f1fe:	ea4f 2535 	mov.w	r5, r5, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f202:	fa24 f585 	sxtab16	r5, r4, r5
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f206:	fb2a 000b 	smlad	r0, sl, fp, r0
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f20a:	fa21 fb89 	sxtab16	fp, r1, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f20e:	fb25 0202 	smlad	r2, r5, r2, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 800f212:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f216:	fa21 f989 	sxtab16	r9, r1, r9
  memcpy(&val, *in_q7, 4);
 800f21a:	6870      	ldr	r0, [r6, #4]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f21c:	fb2a 3a0b 	smlad	sl, sl, fp, r3
 800f220:	fb25 a509 	smlad	r5, r5, r9, sl
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f224:	fa21 fb80 	sxtab16	fp, r1, r0
 800f228:	f8de 3004 	ldr.w	r3, [lr, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f22c:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f230:	fa21 f080 	sxtab16	r0, r1, r0
 800f234:	fa24 fa83 	sxtab16	sl, r4, r3
  memcpy(&val, in_q7, 4);
 800f238:	f8dc 9000 	ldr.w	r9, [ip]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f23c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f240:	fa24 f383 	sxtab16	r3, r4, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f244:	fb2a 2b0b 	smlad	fp, sl, fp, r2
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f248:	fa21 f289 	sxtab16	r2, r1, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f24c:	fb23 b000 	smlad	r0, r3, r0, fp
  return (op1 >> op2) | (op1 << (32U - op2));
 800f250:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f254:	fa21 fb89 	sxtab16	fp, r1, r9
  memcpy(&val, *in_q7, 4);
 800f258:	f8d6 9008 	ldr.w	r9, [r6, #8]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f25c:	fb2a 5a02 	smlad	sl, sl, r2, r5
 800f260:	fb23 a20b 	smlad	r2, r3, fp, sl
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f264:	fa21 fa89 	sxtab16	sl, r1, r9
 800f268:	f8de 3008 	ldr.w	r3, [lr, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f26c:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f270:	fa21 fb89 	sxtab16	fp, r1, r9
 800f274:	fa24 f583 	sxtab16	r5, r4, r3
  memcpy(&val, in_q7, 4);
 800f278:	f8dc 9004 	ldr.w	r9, [ip, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f27c:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f280:	fa24 f383 	sxtab16	r3, r4, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f284:	fb25 0a0a 	smlad	sl, r5, sl, r0
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f288:	fa21 f089 	sxtab16	r0, r1, r9
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f28c:	fb23 aa0b 	smlad	sl, r3, fp, sl
  return (op1 >> op2) | (op1 << (32U - op2));
 800f290:	ea4f 2939 	mov.w	r9, r9, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f294:	fa21 f989 	sxtab16	r9, r1, r9
  memcpy(&val, *in_q7, 4);
 800f298:	68f6      	ldr	r6, [r6, #12]
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f29a:	fb25 2500 	smlad	r5, r5, r0, r2
 800f29e:	fb23 5509 	smlad	r5, r3, r9, r5
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f2a2:	fa21 fb86 	sxtab16	fp, r1, r6
 800f2a6:	f8de 300c 	ldr.w	r3, [lr, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f2aa:	ea4f 2036 	mov.w	r0, r6, ror #8
  *in_q7 += 4;
 800f2ae:	f10e 0e10 	add.w	lr, lr, #16
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f2b2:	fa21 f080 	sxtab16	r0, r1, r0
 800f2b6:	fa24 f983 	sxtab16	r9, r4, r3
  memcpy(&val, in_q7, 4);
 800f2ba:	f8dc 2008 	ldr.w	r2, [ip, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f2be:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f2c2:	fa24 f383 	sxtab16	r3, r4, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f2c6:	fb29 ab0b 	smlad	fp, r9, fp, sl
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f2ca:	fa21 f682 	sxtab16	r6, r1, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f2ce:	fb23 b000 	smlad	r0, r3, r0, fp
  return (op1 >> op2) | (op1 << (32U - op2));
 800f2d2:	ea4f 2232 	mov.w	r2, r2, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f2d6:	fa21 f282 	sxtab16	r2, r1, r2
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f2da:	fb29 5906 	smlad	r9, r9, r6, r5
 800f2de:	fb23 9302 	smlad	r3, r3, r2, r9
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f2e2:	45be      	cmp	lr, r7
 800f2e4:	f10c 0c10 	add.w	ip, ip, #16
 800f2e8:	f47f af79 	bne.w	800f1de <arm_nn_vec_mat_mult_t_s8+0xca>
  *in_q7 += 4;
 800f2ec:	9a01      	ldr	r2, [sp, #4]
 800f2ee:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f2f0:	f8dd 908c 	ldr.w	r9, [sp, #140]	@ 0x8c
 800f2f4:	9e04      	ldr	r6, [sp, #16]
 800f2f6:	e9dd b71e 	ldrd	fp, r7, [sp, #120]	@ 0x78
 800f2fa:	442a      	add	r2, r5
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f2fc:	45a9      	cmp	r9, r5
 800f2fe:	f340 8115 	ble.w	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f302:	f996 c000 	ldrsb.w	ip, [r6]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f306:	f992 e000 	ldrsb.w	lr, [r2]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f30a:	44dc      	add	ip, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f30c:	44be      	add	lr, r7
            res00 += lhs_value * rhs_value0;
 800f30e:	fb0c 000e 	mla	r0, ip, lr, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f312:	f912 e009 	ldrsb.w	lr, [r2, r9]
 800f316:	44be      	add	lr, r7
            res01 += lhs_value * rhs_value1;
 800f318:	fb0c 330e 	mla	r3, ip, lr, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f31c:	f105 0c01 	add.w	ip, r5, #1
 800f320:	45e1      	cmp	r9, ip
 800f322:	f340 8103 	ble.w	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f326:	f996 e001 	ldrsb.w	lr, [r6, #1]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f32a:	f992 a001 	ldrsb.w	sl, [r2, #1]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f32e:	eb02 0c09 	add.w	ip, r2, r9
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f332:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f334:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f336:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f33a:	f99c a001 	ldrsb.w	sl, [ip, #1]
 800f33e:	44ba      	add	sl, r7
            res01 += lhs_value * rhs_value1;
 800f340:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f344:	f105 0e02 	add.w	lr, r5, #2
 800f348:	45ce      	cmp	lr, r9
 800f34a:	f280 80ef 	bge.w	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f34e:	f996 e002 	ldrsb.w	lr, [r6, #2]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f352:	f992 a002 	ldrsb.w	sl, [r2, #2]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f356:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f358:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f35a:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f35e:	f99c a002 	ldrsb.w	sl, [ip, #2]
 800f362:	44ba      	add	sl, r7
            res01 += lhs_value * rhs_value1;
 800f364:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f368:	f105 0e03 	add.w	lr, r5, #3
 800f36c:	45f1      	cmp	r9, lr
 800f36e:	f340 80dd 	ble.w	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f372:	f996 e003 	ldrsb.w	lr, [r6, #3]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f376:	f992 a003 	ldrsb.w	sl, [r2, #3]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f37a:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f37c:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f37e:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f382:	f99c a003 	ldrsb.w	sl, [ip, #3]
 800f386:	44ba      	add	sl, r7
            res01 += lhs_value * rhs_value1;
 800f388:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f38c:	f105 0e04 	add.w	lr, r5, #4
 800f390:	45f1      	cmp	r9, lr
 800f392:	f340 80cb 	ble.w	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f396:	f996 e004 	ldrsb.w	lr, [r6, #4]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f39a:	f992 a004 	ldrsb.w	sl, [r2, #4]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f39e:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f3a0:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f3a2:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f3a6:	f99c a004 	ldrsb.w	sl, [ip, #4]
 800f3aa:	44ba      	add	sl, r7
            res01 += lhs_value * rhs_value1;
 800f3ac:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f3b0:	f105 0e05 	add.w	lr, r5, #5
 800f3b4:	45f1      	cmp	r9, lr
 800f3b6:	f340 80b9 	ble.w	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f3ba:	f996 e005 	ldrsb.w	lr, [r6, #5]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f3be:	f992 a005 	ldrsb.w	sl, [r2, #5]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f3c2:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f3c4:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f3c6:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f3ca:	f99c a005 	ldrsb.w	sl, [ip, #5]
 800f3ce:	44ba      	add	sl, r7
            res01 += lhs_value * rhs_value1;
 800f3d0:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f3d4:	f105 0e06 	add.w	lr, r5, #6
 800f3d8:	45f1      	cmp	r9, lr
 800f3da:	f340 80a7 	ble.w	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f3de:	f996 e006 	ldrsb.w	lr, [r6, #6]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f3e2:	f992 a006 	ldrsb.w	sl, [r2, #6]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f3e6:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f3e8:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f3ea:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f3ee:	f99c a006 	ldrsb.w	sl, [ip, #6]
 800f3f2:	44ba      	add	sl, r7
            res01 += lhs_value * rhs_value1;
 800f3f4:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f3f8:	f105 0e07 	add.w	lr, r5, #7
 800f3fc:	45f1      	cmp	r9, lr
 800f3fe:	f340 8095 	ble.w	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f402:	f996 e007 	ldrsb.w	lr, [r6, #7]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f406:	f992 a007 	ldrsb.w	sl, [r2, #7]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f40a:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f40c:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f40e:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f412:	f99c a007 	ldrsb.w	sl, [ip, #7]
 800f416:	44ba      	add	sl, r7
            res01 += lhs_value * rhs_value1;
 800f418:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f41c:	f105 0e08 	add.w	lr, r5, #8
 800f420:	45f1      	cmp	r9, lr
 800f422:	f340 8083 	ble.w	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f426:	f996 e008 	ldrsb.w	lr, [r6, #8]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f42a:	f992 a008 	ldrsb.w	sl, [r2, #8]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f42e:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f430:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f432:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f436:	f99c a008 	ldrsb.w	sl, [ip, #8]
 800f43a:	44ba      	add	sl, r7
            res01 += lhs_value * rhs_value1;
 800f43c:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f440:	f105 0e09 	add.w	lr, r5, #9
 800f444:	45f1      	cmp	r9, lr
 800f446:	dd71      	ble.n	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f448:	f996 e009 	ldrsb.w	lr, [r6, #9]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f44c:	f992 a009 	ldrsb.w	sl, [r2, #9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f450:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f452:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f454:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f458:	f99c a009 	ldrsb.w	sl, [ip, #9]
 800f45c:	44ba      	add	sl, r7
            res01 += lhs_value * rhs_value1;
 800f45e:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f462:	f105 0e0a 	add.w	lr, r5, #10
 800f466:	45f1      	cmp	r9, lr
 800f468:	dd60      	ble.n	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f46a:	f996 e00a 	ldrsb.w	lr, [r6, #10]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f46e:	f992 a00a 	ldrsb.w	sl, [r2, #10]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f472:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f474:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f476:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f47a:	f99c a00a 	ldrsb.w	sl, [ip, #10]
 800f47e:	44ba      	add	sl, r7
            res01 += lhs_value * rhs_value1;
 800f480:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f484:	f105 0e0b 	add.w	lr, r5, #11
 800f488:	45f1      	cmp	r9, lr
 800f48a:	dd4f      	ble.n	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f48c:	f996 e00b 	ldrsb.w	lr, [r6, #11]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f490:	f992 a00b 	ldrsb.w	sl, [r2, #11]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f494:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f496:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f498:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f49c:	f99c a00b 	ldrsb.w	sl, [ip, #11]
 800f4a0:	44ba      	add	sl, r7
            res01 += lhs_value * rhs_value1;
 800f4a2:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f4a6:	f105 0e0c 	add.w	lr, r5, #12
 800f4aa:	45f1      	cmp	r9, lr
 800f4ac:	dd3e      	ble.n	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f4ae:	f996 e00c 	ldrsb.w	lr, [r6, #12]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f4b2:	f992 a00c 	ldrsb.w	sl, [r2, #12]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f4b6:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f4b8:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f4ba:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f4be:	f99c a00c 	ldrsb.w	sl, [ip, #12]
 800f4c2:	44ba      	add	sl, r7
            res01 += lhs_value * rhs_value1;
 800f4c4:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f4c8:	f105 0e0d 	add.w	lr, r5, #13
 800f4cc:	45f1      	cmp	r9, lr
 800f4ce:	dd2d      	ble.n	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f4d0:	f996 e00d 	ldrsb.w	lr, [r6, #13]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f4d4:	f992 a00d 	ldrsb.w	sl, [r2, #13]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f4d8:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f4da:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f4dc:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f4e0:	f99c a00d 	ldrsb.w	sl, [ip, #13]
 800f4e4:	44ba      	add	sl, r7
            res01 += lhs_value * rhs_value1;
 800f4e6:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f4ea:	f105 0e0e 	add.w	lr, r5, #14
 800f4ee:	45f1      	cmp	r9, lr
 800f4f0:	dd1c      	ble.n	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f4f2:	f996 e00e 	ldrsb.w	lr, [r6, #14]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f4f6:	f992 a00e 	ldrsb.w	sl, [r2, #14]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f4fa:	44de      	add	lr, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f4fc:	44ba      	add	sl, r7
            res00 += lhs_value * rhs_value0;
 800f4fe:	fb0e 000a 	mla	r0, lr, sl, r0
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f502:	f99c a00e 	ldrsb.w	sl, [ip, #14]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f506:	350f      	adds	r5, #15
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f508:	44ba      	add	sl, r7
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f50a:	45a9      	cmp	r9, r5
            res01 += lhs_value * rhs_value1;
 800f50c:	fb0e 330a 	mla	r3, lr, sl, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f510:	dd0c      	ble.n	800f52c <arm_nn_vec_mat_mult_t_s8+0x418>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f512:	f996 500f 	ldrsb.w	r5, [r6, #15]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f516:	f992 200f 	ldrsb.w	r2, [r2, #15]
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f51a:	f99c 600f 	ldrsb.w	r6, [ip, #15]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f51e:	445d      	add	r5, fp
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f520:	443a      	add	r2, r7
            q31_t rhs_value1 = rhs_ptr[rhs_cols] + rhs_offset;
 800f522:	443e      	add	r6, r7
            res00 += lhs_value * rhs_value0;
 800f524:	fb05 0002 	mla	r0, r5, r2, r0
            res01 += lhs_value * rhs_value1;
 800f528:	fb05 3306 	mla	r3, r5, r6, r3
  return arm_nn_divide_by_power_of_two(
 800f52c:	9a07      	ldr	r2, [sp, #28]
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f52e:	9e21      	ldr	r6, [sp, #132]	@ 0x84
  return arm_nn_divide_by_power_of_two(
 800f530:	4090      	lsls	r0, r2
 800f532:	4093      	lsls	r3, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f534:	2500      	movs	r5, #0
 800f536:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800f53a:	fbc0 2506 	smlal	r2, r5, r0, r6
    result = (int32_t)(mult.long_long >> 31);
 800f53e:	0fd2      	lsrs	r2, r2, #31
 800f540:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f544:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 800f548:	2500      	movs	r5, #0
 800f54a:	fbc6 0503 	smlal	r0, r5, r6, r3
    result = (int32_t)(mult.long_long >> 31);
 800f54e:	0fc3      	lsrs	r3, r0, #31
  return arm_nn_divide_by_power_of_two(
 800f550:	9822      	ldr	r0, [sp, #136]	@ 0x88
 800f552:	2800      	cmp	r0, #0
    result = (int32_t)(mult.long_long >> 31);
 800f554:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
  return arm_nn_divide_by_power_of_two(
 800f558:	f340 818f 	ble.w	800f87a <arm_nn_vec_mat_mult_t_s8+0x766>
    if (result < 0)
 800f55c:	2a00      	cmp	r2, #0
 800f55e:	f2c0 81a2 	blt.w	800f8a6 <arm_nn_vec_mat_mult_t_s8+0x792>
        res00 += dst_offset;
 800f562:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800f564:	4402      	add	r2, r0
        res01 += dst_offset;
 800f566:	4403      	add	r3, r0
        res00 = MAX(res00, activation_min);
 800f568:	9825      	ldr	r0, [sp, #148]	@ 0x94
 800f56a:	4282      	cmp	r2, r0
 800f56c:	bfb8      	it	lt
 800f56e:	4602      	movlt	r2, r0
        res01 = MAX(res01, activation_min);
 800f570:	4283      	cmp	r3, r0
 800f572:	bfb8      	it	lt
 800f574:	4603      	movlt	r3, r0
        res00 = MIN(res00, activation_max);
 800f576:	9826      	ldr	r0, [sp, #152]	@ 0x98
 800f578:	4282      	cmp	r2, r0
 800f57a:	bfa8      	it	ge
 800f57c:	4602      	movge	r2, r0
        *dst++ = (q7_t)res00;
 800f57e:	9803      	ldr	r0, [sp, #12]
 800f580:	f800 2c02 	strb.w	r2, [r0, #-2]
        res01 = MIN(res01, activation_max);
 800f584:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f586:	4293      	cmp	r3, r2
 800f588:	bfa8      	it	ge
 800f58a:	4613      	movge	r3, r2
        *dst++ = (q7_t)res01;
 800f58c:	f800 3c01 	strb.w	r3, [r0, #-1]
        rhs += 2 * rhs_cols;
 800f590:	9a01      	ldr	r2, [sp, #4]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800f592:	1c83      	adds	r3, r0, #2
        rhs += 2 * rhs_cols;
 800f594:	9805      	ldr	r0, [sp, #20]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800f596:	9303      	str	r3, [sp, #12]
        rhs += 2 * rhs_cols;
 800f598:	4402      	add	r2, r0
 800f59a:	9201      	str	r2, [sp, #4]
    for (int32_t rhs_rows_idx = 0; rhs_rows_idx <= (rhs_rows - 2); rhs_rows_idx += 2)
 800f59c:	9a02      	ldr	r2, [sp, #8]
 800f59e:	3208      	adds	r2, #8
 800f5a0:	9202      	str	r2, [sp, #8]
 800f5a2:	9a08      	ldr	r2, [sp, #32]
 800f5a4:	4293      	cmp	r3, r2
 800f5a6:	f47f ae08 	bne.w	800f1ba <arm_nn_vec_mat_mult_t_s8+0xa6>
 800f5aa:	e9dd 5010 	ldrd	r5, r0, [sp, #64]	@ 0x40
 800f5ae:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f5b0:	910e      	str	r1, [sp, #56]	@ 0x38
 800f5b2:	46da      	mov	sl, fp
        rhs += 2 * rhs_cols;
 800f5b4:	9905      	ldr	r1, [sp, #20]
 800f5b6:	9e24      	ldr	r6, [sp, #144]	@ 0x90
 800f5b8:	46cb      	mov	fp, r9
 800f5ba:	086b      	lsrs	r3, r5, #1
 800f5bc:	f8dd 904c 	ldr.w	r9, [sp, #76]	@ 0x4c
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	fb03 0001 	mla	r0, r3, r1, r0
        q31_t res01 = *bias++;
 800f5c6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
        *dst++ = (q7_t)res01;
 800f5ca:	eb09 0943 	add.w	r9, r9, r3, lsl #1
    }

    if (rhs_rows % 2)
 800f5ce:	07f3      	lsls	r3, r6, #31
 800f5d0:	f140 814f 	bpl.w	800f872 <arm_nn_vec_mat_mult_t_s8+0x75e>
        q31_t res00 = *bias++;

        int32_t rhs_cols_idx = 0;

        q31_t val0, val1, val2, val3;
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f5d4:	f1bb 0f0f 	cmp.w	fp, #15
        q31_t res00 = *bias++;
 800f5d8:	6813      	ldr	r3, [r2, #0]
        for (; rhs_cols_idx <= (rhs_cols - 16); rhs_cols_idx += 16)
 800f5da:	f340 816a 	ble.w	800f8b2 <arm_nn_vec_mat_mult_t_s8+0x79e>
 800f5de:	f1ab 0210 	sub.w	r2, fp, #16
 800f5e2:	0912      	lsrs	r2, r2, #4
 800f5e4:	3201      	adds	r2, #1
 800f5e6:	ea4f 1e02 	mov.w	lr, r2, lsl #4
 800f5ea:	9e06      	ldr	r6, [sp, #24]
 800f5ec:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f5ee:	f8cd 900c 	str.w	r9, [sp, #12]
 800f5f2:	e9cd e001 	strd	lr, r0, [sp, #4]
 800f5f6:	eb06 1c02 	add.w	ip, r6, r2, lsl #4
 800f5fa:	4605      	mov	r5, r0
  memcpy(&val, *in_q7, 4);
 800f5fc:	f8d5 e000 	ldr.w	lr, [r5]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f600:	fa21 f98e 	sxtab16	r9, r1, lr
 800f604:	6830      	ldr	r0, [r6, #0]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f606:	ea4f 2e3e 	mov.w	lr, lr, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f60a:	fa21 fe8e 	sxtab16	lr, r1, lr
 800f60e:	fa24 f880 	sxtab16	r8, r4, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 800f612:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f616:	fa24 f080 	sxtab16	r0, r4, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f61a:	fb28 3809 	smlad	r8, r8, r9, r3
 800f61e:	fb20 800e 	smlad	r0, r0, lr, r8
 800f622:	f8d5 e004 	ldr.w	lr, [r5, #4]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f626:	fa21 f98e 	sxtab16	r9, r1, lr
 800f62a:	6873      	ldr	r3, [r6, #4]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f62c:	ea4f 2e3e 	mov.w	lr, lr, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f630:	fa21 fe8e 	sxtab16	lr, r1, lr
 800f634:	fa24 f883 	sxtab16	r8, r4, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800f638:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f63c:	fa24 f383 	sxtab16	r3, r4, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f640:	fb28 0809 	smlad	r8, r8, r9, r0
 800f644:	fb23 830e 	smlad	r3, r3, lr, r8
 800f648:	f8d5 e008 	ldr.w	lr, [r5, #8]
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f64c:	fa21 f98e 	sxtab16	r9, r1, lr
 800f650:	68b0      	ldr	r0, [r6, #8]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f652:	ea4f 2e3e 	mov.w	lr, lr, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f656:	fa21 fe8e 	sxtab16	lr, r1, lr
 800f65a:	fa24 f880 	sxtab16	r8, r4, r0
  return (op1 >> op2) | (op1 << (32U - op2));
 800f65e:	ea4f 2030 	mov.w	r0, r0, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f662:	fa24 f080 	sxtab16	r0, r4, r0
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f666:	fb28 3809 	smlad	r8, r8, r9, r3
 800f66a:	fb20 800e 	smlad	r0, r0, lr, r8
 800f66e:	f8d5 e00c 	ldr.w	lr, [r5, #12]
  *in_q7 += 4;
 800f672:	3510      	adds	r5, #16
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f674:	fa21 f98e 	sxtab16	r9, r1, lr
  memcpy(&val, *in_q7, 4);
 800f678:	68f3      	ldr	r3, [r6, #12]
  return (op1 >> op2) | (op1 << (32U - op2));
 800f67a:	ea4f 2e3e 	mov.w	lr, lr, ror #8
  *in_q7 += 4;
 800f67e:	3610      	adds	r6, #16
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f680:	fa21 fe8e 	sxtab16	lr, r1, lr
 800f684:	fa24 f883 	sxtab16	r8, r4, r3
  return (op1 >> op2) | (op1 << (32U - op2));
 800f688:	ea4f 2333 	mov.w	r3, r3, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f68c:	fa24 f383 	sxtab16	r3, r4, r3
  __ASM volatile ("smlad %0, %1, %2, %3" : "=r" (result) : "r" (op1), "r" (op2), "r" (op3) );
 800f690:	fb28 0809 	smlad	r8, r8, r9, r0
 800f694:	fb23 830e 	smlad	r3, r3, lr, r8
 800f698:	4566      	cmp	r6, ip
 800f69a:	d1af      	bne.n	800f5fc <arm_nn_vec_mat_mult_t_s8+0x4e8>
 800f69c:	e9dd e001 	ldrd	lr, r0, [sp, #4]
 800f6a0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800f6a4:	4470      	add	r0, lr
 800f6a6:	0112      	lsls	r2, r2, #4
            // Partial accumulations
            res00 = __SMLAD(val3, val1, res00);
            res00 = __SMLAD(val2, val0, res00);
        }

        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f6a8:	4593      	cmp	fp, r2
 800f6aa:	f340 80b8 	ble.w	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
        {
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f6ae:	f99c 1000 	ldrsb.w	r1, [ip]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f6b2:	f990 4000 	ldrsb.w	r4, [r0]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f6b6:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f6b8:	443c      	add	r4, r7

            res00 += lhs_value * rhs_value0;
 800f6ba:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f6be:	1c51      	adds	r1, r2, #1
 800f6c0:	458b      	cmp	fp, r1
 800f6c2:	f340 80ac 	ble.w	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f6c6:	f99c 1001 	ldrsb.w	r1, [ip, #1]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f6ca:	f990 4001 	ldrsb.w	r4, [r0, #1]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f6ce:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f6d0:	443c      	add	r4, r7
            res00 += lhs_value * rhs_value0;
 800f6d2:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f6d6:	1c91      	adds	r1, r2, #2
 800f6d8:	458b      	cmp	fp, r1
 800f6da:	f340 80a0 	ble.w	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f6de:	f99c 1002 	ldrsb.w	r1, [ip, #2]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f6e2:	f990 4002 	ldrsb.w	r4, [r0, #2]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f6e6:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f6e8:	443c      	add	r4, r7
            res00 += lhs_value * rhs_value0;
 800f6ea:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f6ee:	1cd1      	adds	r1, r2, #3
 800f6f0:	458b      	cmp	fp, r1
 800f6f2:	f340 8094 	ble.w	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f6f6:	f99c 1003 	ldrsb.w	r1, [ip, #3]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f6fa:	f990 4003 	ldrsb.w	r4, [r0, #3]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f6fe:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f700:	443c      	add	r4, r7
            res00 += lhs_value * rhs_value0;
 800f702:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f706:	1d11      	adds	r1, r2, #4
 800f708:	458b      	cmp	fp, r1
 800f70a:	f340 8088 	ble.w	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f70e:	f99c 1004 	ldrsb.w	r1, [ip, #4]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f712:	f990 4004 	ldrsb.w	r4, [r0, #4]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f716:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f718:	443c      	add	r4, r7
            res00 += lhs_value * rhs_value0;
 800f71a:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f71e:	1d51      	adds	r1, r2, #5
 800f720:	458b      	cmp	fp, r1
 800f722:	dd7c      	ble.n	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f724:	f99c 1005 	ldrsb.w	r1, [ip, #5]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f728:	f990 4005 	ldrsb.w	r4, [r0, #5]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f72c:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f72e:	443c      	add	r4, r7
            res00 += lhs_value * rhs_value0;
 800f730:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f734:	1d91      	adds	r1, r2, #6
 800f736:	458b      	cmp	fp, r1
 800f738:	dd71      	ble.n	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f73a:	f99c 1006 	ldrsb.w	r1, [ip, #6]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f73e:	f990 4006 	ldrsb.w	r4, [r0, #6]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f742:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f744:	443c      	add	r4, r7
            res00 += lhs_value * rhs_value0;
 800f746:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f74a:	1dd1      	adds	r1, r2, #7
 800f74c:	458b      	cmp	fp, r1
 800f74e:	dd66      	ble.n	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f750:	f99c 1007 	ldrsb.w	r1, [ip, #7]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f754:	f990 4007 	ldrsb.w	r4, [r0, #7]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f758:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f75a:	443c      	add	r4, r7
            res00 += lhs_value * rhs_value0;
 800f75c:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f760:	f102 0108 	add.w	r1, r2, #8
 800f764:	458b      	cmp	fp, r1
 800f766:	dd5a      	ble.n	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f768:	f99c 1008 	ldrsb.w	r1, [ip, #8]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f76c:	f990 4008 	ldrsb.w	r4, [r0, #8]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f770:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f772:	443c      	add	r4, r7
            res00 += lhs_value * rhs_value0;
 800f774:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f778:	f102 0109 	add.w	r1, r2, #9
 800f77c:	458b      	cmp	fp, r1
 800f77e:	dd4e      	ble.n	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f780:	f99c 1009 	ldrsb.w	r1, [ip, #9]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f784:	f990 4009 	ldrsb.w	r4, [r0, #9]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f788:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f78a:	443c      	add	r4, r7
            res00 += lhs_value * rhs_value0;
 800f78c:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f790:	f102 010a 	add.w	r1, r2, #10
 800f794:	458b      	cmp	fp, r1
 800f796:	dd42      	ble.n	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f798:	f99c 100a 	ldrsb.w	r1, [ip, #10]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f79c:	f990 400a 	ldrsb.w	r4, [r0, #10]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f7a0:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f7a2:	443c      	add	r4, r7
            res00 += lhs_value * rhs_value0;
 800f7a4:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f7a8:	f102 010b 	add.w	r1, r2, #11
 800f7ac:	458b      	cmp	fp, r1
 800f7ae:	dd36      	ble.n	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f7b0:	f99c 100b 	ldrsb.w	r1, [ip, #11]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f7b4:	f990 400b 	ldrsb.w	r4, [r0, #11]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f7b8:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f7ba:	443c      	add	r4, r7
            res00 += lhs_value * rhs_value0;
 800f7bc:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f7c0:	f102 010c 	add.w	r1, r2, #12
 800f7c4:	458b      	cmp	fp, r1
 800f7c6:	dd2a      	ble.n	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f7c8:	f99c 100c 	ldrsb.w	r1, [ip, #12]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f7cc:	f990 400c 	ldrsb.w	r4, [r0, #12]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f7d0:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f7d2:	443c      	add	r4, r7
            res00 += lhs_value * rhs_value0;
 800f7d4:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f7d8:	f102 010d 	add.w	r1, r2, #13
 800f7dc:	458b      	cmp	fp, r1
 800f7de:	dd1e      	ble.n	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f7e0:	f99c 100d 	ldrsb.w	r1, [ip, #13]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f7e4:	f990 400d 	ldrsb.w	r4, [r0, #13]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f7e8:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f7ea:	443c      	add	r4, r7
            res00 += lhs_value * rhs_value0;
 800f7ec:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f7f0:	f102 010e 	add.w	r1, r2, #14
 800f7f4:	458b      	cmp	fp, r1
 800f7f6:	dd12      	ble.n	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f7f8:	f99c 100e 	ldrsb.w	r1, [ip, #14]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f7fc:	f990 400e 	ldrsb.w	r4, [r0, #14]
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f800:	320f      	adds	r2, #15
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f802:	4451      	add	r1, sl
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f804:	443c      	add	r4, r7
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f806:	4593      	cmp	fp, r2
            res00 += lhs_value * rhs_value0;
 800f808:	fb04 3301 	mla	r3, r4, r1, r3
        for (; rhs_cols_idx < rhs_cols; ++rhs_cols_idx)
 800f80c:	dd07      	ble.n	800f81e <arm_nn_vec_mat_mult_t_s8+0x70a>
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f80e:	f990 200f 	ldrsb.w	r2, [r0, #15]
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f812:	f99c 100f 	ldrsb.w	r1, [ip, #15]
            q31_t rhs_value0 = rhs_ptr[0] + rhs_offset;
 800f816:	443a      	add	r2, r7
            q31_t lhs_value  = lhs_ptr[0] + lhs_offset;
 800f818:	4451      	add	r1, sl
            res00 += lhs_value * rhs_value0;
 800f81a:	fb01 3302 	mla	r3, r1, r2, r3
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f81e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f820:	9821      	ldr	r0, [sp, #132]	@ 0x84
      arm_nn_doubling_high_mult_no_sat(val * (1 << LEFT_SHIFT(shift)), multiplier),
 800f822:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
  return arm_nn_divide_by_power_of_two(
 800f826:	4093      	lsls	r3, r2
    mult.long_long = mult.long_long + (q63_t)m1 * m2;
 800f828:	2100      	movs	r1, #0
 800f82a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800f82e:	fbc3 2100 	smlal	r2, r1, r3, r0
  return arm_nn_divide_by_power_of_two(
 800f832:	9b22      	ldr	r3, [sp, #136]	@ 0x88
    result = (int32_t)(mult.long_long >> 31);
 800f834:	0fd2      	lsrs	r2, r2, #31
  return arm_nn_divide_by_power_of_two(
 800f836:	2b00      	cmp	r3, #0
    result = (int32_t)(mult.long_long >> 31);
 800f838:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
  return arm_nn_divide_by_power_of_two(
 800f83c:	dc0d      	bgt.n	800f85a <arm_nn_vec_mat_mult_t_s8+0x746>
 800f83e:	425b      	negs	r3, r3
    const q31_t remainder_mask = (1 << exponent) - 1;
 800f840:	2101      	movs	r1, #1
 800f842:	4099      	lsls	r1, r3
 800f844:	3901      	subs	r1, #1
    int32_t remainder = remainder_mask & dividend;
 800f846:	ea02 0001 	and.w	r0, r2, r1
    if (result < 0)
 800f84a:	411a      	asrs	r2, r3
    q31_t threshold = remainder_mask >> 1;
 800f84c:	ea4f 0161 	mov.w	r1, r1, asr #1
        threshold++;
 800f850:	bf48      	it	mi
 800f852:	3101      	addmi	r1, #1
    if (remainder > threshold)
 800f854:	4288      	cmp	r0, r1
        result++;
 800f856:	bfc8      	it	gt
 800f858:	3201      	addgt	r2, #1

        // Quantize down
        res00 = arm_nn_requantize(res00, dst_multiplier, dst_shift);

        // Add offset
        res00 += dst_offset;
 800f85a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800f85c:	4413      	add	r3, r2

        // Clamp the result
        res00 = MAX(res00, activation_min);
 800f85e:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 800f860:	4293      	cmp	r3, r2
 800f862:	bfb8      	it	lt
 800f864:	4613      	movlt	r3, r2
        res00 = MIN(res00, activation_max);
 800f866:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f868:	4293      	cmp	r3, r2
 800f86a:	bfa8      	it	ge
 800f86c:	4613      	movge	r3, r2

        *dst = (q7_t)res00;
 800f86e:	f889 3000 	strb.w	r3, [r9]
        *dst = (q7_t)res00;
    }
#endif

    return ARM_MATH_SUCCESS;
}
 800f872:	2000      	movs	r0, #0
 800f874:	b015      	add	sp, #84	@ 0x54
 800f876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = dividend >> exponent;
 800f87a:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
    int32_t remainder = remainder_mask & dividend;
 800f87c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800f87e:	ea05 0003 	and.w	r0, r5, r3
 800f882:	4015      	ands	r5, r2
    if (result < 0)
 800f884:	4132      	asrs	r2, r6
    result = dividend >> exponent;
 800f886:	fa43 f306 	asr.w	r3, r3, r6
        threshold++;
 800f88a:	bf4c      	ite	mi
 800f88c:	9e0f      	ldrmi	r6, [sp, #60]	@ 0x3c
    q31_t threshold = remainder_mask >> 1;
 800f88e:	9e0b      	ldrpl	r6, [sp, #44]	@ 0x2c
    if (remainder > threshold)
 800f890:	42b5      	cmp	r5, r6
        result++;
 800f892:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800f894:	bfc8      	it	gt
 800f896:	3201      	addgt	r2, #1
    if (result < 0)
 800f898:	2b00      	cmp	r3, #0
        threshold++;
 800f89a:	bfb8      	it	lt
 800f89c:	3501      	addlt	r5, #1
    if (remainder > threshold)
 800f89e:	4285      	cmp	r5, r0
        result++;
 800f8a0:	bfb8      	it	lt
 800f8a2:	3301      	addlt	r3, #1
 800f8a4:	e65d      	b.n	800f562 <arm_nn_vec_mat_mult_t_s8+0x44e>
    if (result < 0)
 800f8a6:	2000      	movs	r0, #0
    q31_t threshold = remainder_mask >> 1;
 800f8a8:	4605      	mov	r5, r0
 800f8aa:	e7f5      	b.n	800f898 <arm_nn_vec_mat_mult_t_s8+0x784>
        const q7_t *lhs_ptr = &lhs[0];
 800f8ac:	9e06      	ldr	r6, [sp, #24]
        int32_t rhs_cols_idx = 0;
 800f8ae:	2500      	movs	r5, #0
 800f8b0:	e524      	b.n	800f2fc <arm_nn_vec_mat_mult_t_s8+0x1e8>
        const q7_t *lhs_ptr = &lhs[0];
 800f8b2:	f8dd c018 	ldr.w	ip, [sp, #24]
        int32_t rhs_cols_idx = 0;
 800f8b6:	2200      	movs	r2, #0
 800f8b8:	e6f6      	b.n	800f6a8 <arm_nn_vec_mat_mult_t_s8+0x594>
 800f8ba:	bf00      	nop

0800f8bc <arm_q7_to_q15_with_offset>:

void arm_q7_to_q15_with_offset(const q7_t *src,
                               q15_t *dst,
                               uint32_t block_size,
                               q15_t offset)
{
 800f8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

    /*loop unrolling */
    block_cnt = block_size >> 2;

    /* First part of the processing with loop unrolling.  Compute 4 outputs at a time. */
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 800f8c0:	b29e      	uxth	r6, r3
    block_cnt = block_size >> 2;
 800f8c2:	ea4f 0992 	mov.w	r9, r2, lsr #2
{
 800f8c6:	4690      	mov	r8, r2
    const q31_t offset_q15x2 = __PKHBT(offset, offset, 16);
 800f8c8:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
    while (block_cnt > 0)
 800f8cc:	f1b9 0f00 	cmp.w	r9, #0
 800f8d0:	d01f      	beq.n	800f912 <arm_q7_to_q15_with_offset+0x56>

        /* Extract and sign extend each of the four q7 values to q15 */
        in_q15x2_1 = __SXTAB16(offset_q15x2, __ROR(in_q7x4, 8));
        in_q15x2_2 = __SXTAB16(offset_q15x2, in_q7x4);

        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 800f8d2:	4a1c      	ldr	r2, [pc, #112]	@ (800f944 <arm_q7_to_q15_with_offset+0x88>)
 800f8d4:	464d      	mov	r5, r9
    while (block_cnt > 0)
 800f8d6:	468e      	mov	lr, r1
 800f8d8:	4607      	mov	r7, r0
  memcpy(&val, *in_q7, 4);
 800f8da:	f857 ab04 	ldr.w	sl, [r7], #4
  return (op1 >> op2) | (op1 << (32U - op2));
 800f8de:	ea4f 2c3a 	mov.w	ip, sl, ror #8
  __ASM volatile ("sxtab16 %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800f8e2:	fa26 fc8c 	sxtab16	ip, r6, ip
 800f8e6:	fa26 fa8a 	sxtab16	sl, r6, sl
        out_q15x2_1 = __PKHBT(in_q15x2_2, in_q15x2_1, 16);
 800f8ea:	fa1f f48a 	uxth.w	r4, sl
 800f8ee:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
        out_q15x2_2 = __PKHTB(in_q15x2_1, in_q15x2_2, 16);
 800f8f2:	ea0c 0c02 	and.w	ip, ip, r2
 800f8f6:	ea4c 4c1a 	orr.w	ip, ip, sl, lsr #16
    while (block_cnt > 0)
 800f8fa:	3d01      	subs	r5, #1
  q15_t ** pQ15,
  q31_t    value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ15, &val, 4);
 800f8fc:	f8ce 4000 	str.w	r4, [lr]
 800f900:	f8ce c004 	str.w	ip, [lr, #4]
#else
  (*pQ15)[0] = (val & 0x0FFFF);
  (*pQ15)[1] = (val >> 16) & 0x0FFFF;
#endif

 *pQ15 += 2;
 800f904:	f10e 0e08 	add.w	lr, lr, #8
 800f908:	d1e7      	bne.n	800f8da <arm_q7_to_q15_with_offset+0x1e>
 800f90a:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
  *in_q7 += 4;
 800f90e:	eb00 0089 	add.w	r0, r0, r9, lsl #2
    /* Run the below code for Cortex-M0 */
    /* Loop over block_size number of values */
    block_cnt = block_size;
#endif

    while (block_cnt > 0)
 800f912:	f018 0803 	ands.w	r8, r8, #3
 800f916:	d012      	beq.n	800f93e <arm_q7_to_q15_with_offset+0x82>
    {
        *dst++ = (q15_t)*src++ + offset;
 800f918:	f990 2000 	ldrsb.w	r2, [r0]
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	441a      	add	r2, r3
    while (block_cnt > 0)
 800f920:	f1b8 0f01 	cmp.w	r8, #1
        *dst++ = (q15_t)*src++ + offset;
 800f924:	800a      	strh	r2, [r1, #0]
    while (block_cnt > 0)
 800f926:	d00a      	beq.n	800f93e <arm_q7_to_q15_with_offset+0x82>
        *dst++ = (q15_t)*src++ + offset;
 800f928:	f990 2001 	ldrsb.w	r2, [r0, #1]
    while (block_cnt > 0)
 800f92c:	f1b8 0f02 	cmp.w	r8, #2
        *dst++ = (q15_t)*src++ + offset;
 800f930:	441a      	add	r2, r3
 800f932:	804a      	strh	r2, [r1, #2]
    while (block_cnt > 0)
 800f934:	d003      	beq.n	800f93e <arm_q7_to_q15_with_offset+0x82>
        *dst++ = (q15_t)*src++ + offset;
 800f936:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800f93a:	4413      	add	r3, r2
 800f93c:	808b      	strh	r3, [r1, #4]

        /* Decrement the loop counter */
        block_cnt--;
    }
}
 800f93e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f942:	bf00      	nop
 800f944:	ffff0000 	.word	0xffff0000

0800f948 <arm_avgpool_s8>:
                          const cmsis_nn_dims *input_dims,
                          const q7_t *src,
                          const cmsis_nn_dims *filter_dims,
                          const cmsis_nn_dims *output_dims,
                          q7_t *dst)
{
 800f948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f94c:	b09f      	sub	sp, #124	@ 0x7c
 800f94e:	4605      	mov	r5, r0
 800f950:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 800f952:	9311      	str	r3, [sp, #68]	@ 0x44
  const int32_t input_y = input_dims->h;
  const int32_t input_x = input_dims->w;
  const int32_t output_y = output_dims->h;
 800f954:	6846      	ldr	r6, [r0, #4]
 800f956:	9612      	str	r6, [sp, #72]	@ 0x48
 800f958:	4637      	mov	r7, r6

#if defined(ARM_MATH_DSP)

  /* Run the following code for CPU's with DSP extension
   */
  for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800f95a:	2f00      	cmp	r7, #0
{
 800f95c:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
  const int32_t pad_y = pool_params->padding.h;
 800f95e:	68cb      	ldr	r3, [r1, #12]
  const int32_t output_x = output_dims->w;
 800f960:	6886      	ldr	r6, [r0, #8]
  const int32_t pad_x = pool_params->padding.w;
 800f962:	f8d1 9008 	ldr.w	r9, [r1, #8]
  for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800f966:	f340 80e5 	ble.w	800fb34 <arm_avgpool_s8+0x1ec>
  {
    for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800f96a:	f1c9 0700 	rsb	r7, r9, #0
 800f96e:	2e00      	cmp	r6, #0
 800f970:	9714      	str	r7, [sp, #80]	@ 0x50
 800f972:	9608      	str	r6, [sp, #32]
 800f974:	f340 80de 	ble.w	800fb34 <arm_avgpool_s8+0x1ec>
  q31_t *buffer = (q31_t *)ctx->buf;
 800f978:	682e      	ldr	r6, [r5, #0]
 800f97a:	f1a6 0a04 	sub.w	sl, r6, #4
 800f97e:	6856      	ldr	r6, [r2, #4]
 800f980:	4258      	negs	r0, r3
 800f982:	461d      	mov	r5, r3
 800f984:	441e      	add	r6, r3
  const int32_t stride_x = pool_params->stride.w;
 800f986:	e9d1 3e00 	ldrd	r3, lr, [r1]
  const int32_t input_x = input_dims->w;
 800f98a:	e9d2 cb02 	ldrd	ip, fp, [r2, #8]
  const int32_t stride_x = pool_params->stride.w;
 800f98e:	930e      	str	r3, [sp, #56]	@ 0x38
  const int32_t kernel_y = filter_dims->h;
 800f990:	6863      	ldr	r3, [r4, #4]
 800f992:	9313      	str	r3, [sp, #76]	@ 0x4c
  const int32_t kernel_x = filter_dims->w;
 800f994:	68a3      	ldr	r3, [r4, #8]
 800f996:	9c08      	ldr	r4, [sp, #32]
 800f998:	930f      	str	r3, [sp, #60]	@ 0x3c
  const int32_t act_max = pool_params->activation.max;
 800f99a:	e9d1 7204 	ldrd	r7, r2, [r1, #16]
 800f99e:	fb0b f104 	mul.w	r1, fp, r4
 800f9a2:	fb0c f30b 	mul.w	r3, ip, fp
 800f9a6:	462c      	mov	r4, r5
 800f9a8:	9115      	str	r1, [sp, #84]	@ 0x54
 800f9aa:	eb0c 0109 	add.w	r1, ip, r9
 800f9ae:	e9cd 1916 	strd	r1, r9, [sp, #88]	@ 0x58
 800f9b2:	9302      	str	r3, [sp, #8]
 800f9b4:	4639      	mov	r1, r7
 800f9b6:	4605      	mov	r5, r0
 800f9b8:	eb0a 038b 	add.w	r3, sl, fp, lsl #2
  for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800f9bc:	f04f 0800 	mov.w	r8, #0
 800f9c0:	4637      	mov	r7, r6
 800f9c2:	4620      	mov	r0, r4
    for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800f9c4:	2d00      	cmp	r5, #0
 800f9c6:	bfd4      	ite	le
 800f9c8:	4604      	movle	r4, r0
 800f9ca:	2400      	movgt	r4, #0
 800f9cc:	9406      	str	r4, [sp, #24]
 800f9ce:	442c      	add	r4, r5
 800f9d0:	fb0c f404 	mul.w	r4, ip, r4
 800f9d4:	9410      	str	r4, [sp, #64]	@ 0x40
      const int32_t kernel_y_start = MAX(0, -idx_y);
      const int32_t kernel_x_start = MAX(0, -idx_x);

      /* Condition for kernel end dimension:
             (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
      const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
 800f9d6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f9d8:	42bc      	cmp	r4, r7
 800f9da:	bfa8      	it	ge
 800f9dc:	463c      	movge	r4, r7
 800f9de:	46a1      	mov	r9, r4
 800f9e0:	e9dd 4616 	ldrd	r4, r6, [sp, #88]	@ 0x58
 800f9e4:	9404      	str	r4, [sp, #16]
    for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800f9e6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 800f9e8:	9401      	str	r4, [sp, #4]
      const int32_t kernel_y_end = MIN(kernel_y, input_y - idx_y);
 800f9ea:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 800f9ec:	9405      	str	r4, [sp, #20]
    for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800f9ee:	e9cd ce18 	strd	ip, lr, [sp, #96]	@ 0x60
 800f9f2:	2400      	movs	r4, #0
 800f9f4:	e9cd 581a 	strd	r5, r8, [sp, #104]	@ 0x68
 800f9f8:	e9cd 701c 	strd	r7, r0, [sp, #112]	@ 0x70
 800f9fc:	9407      	str	r4, [sp, #28]
 800f9fe:	9c01      	ldr	r4, [sp, #4]
      const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
 800fa00:	9804      	ldr	r0, [sp, #16]
 800fa02:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
      const int32_t kernel_x_start = MAX(0, -idx_x);
 800fa04:	2c00      	cmp	r4, #0
 800fa06:	bfd4      	ite	le
 800fa08:	46b6      	movle	lr, r6
 800fa0a:	f04f 0e00 	movgt.w	lr, #0
      const int32_t kernel_x_end = MIN(kernel_x, input_x - idx_x);
 800fa0e:	42a8      	cmp	r0, r5
 800fa10:	bfa8      	it	ge
 800fa12:	4628      	movge	r0, r5
 800fa14:	4680      	mov	r8, r0

      int count = 0;

      for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 800fa16:	9806      	ldr	r0, [sp, #24]
 800fa18:	4548      	cmp	r0, r9
 800fa1a:	f280 8091 	bge.w	800fb40 <arm_avgpool_s8+0x1f8>
 800fa1e:	4684      	mov	ip, r0
 800fa20:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800fa22:	960d      	str	r6, [sp, #52]	@ 0x34
 800fa24:	1827      	adds	r7, r4, r0
 800fa26:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800fa28:	4477      	add	r7, lr
 800fa2a:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 800fa2e:	e9cd 430b 	strd	r4, r3, [sp, #44]	@ 0x2c
 800fa32:	fb0b 0707 	mla	r7, fp, r7, r0
 800fa36:	eba8 050e 	sub.w	r5, r8, lr
 800fa3a:	3f01      	subs	r7, #1
      int count = 0;
 800fa3c:	2000      	movs	r0, #0
 800fa3e:	9503      	str	r5, [sp, #12]
      {
        for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 800fa40:	45c6      	cmp	lr, r8
 800fa42:	da2b      	bge.n	800fa9c <arm_avgpool_s8+0x154>
 800fa44:	9b03      	ldr	r3, [sp, #12]
 800fa46:	eb0b 0507 	add.w	r5, fp, r7
 800fa4a:	181e      	adds	r6, r3, r0
        {
          const q7_t *start = src + ch_src * (k_x + idx_x + (k_y + idx_y) * input_x);

          if (count == 0)
 800fa4c:	2800      	cmp	r0, #0
 800fa4e:	d175      	bne.n	800fb3c <arm_avgpool_s8+0x1f4>
          {
            for (int i = 0; i < ch_src; i++)
 800fa50:	f1bb 0f00 	cmp.w	fp, #0
 800fa54:	dd07      	ble.n	800fa66 <arm_avgpool_s8+0x11e>
 800fa56:	4652      	mov	r2, sl
 800fa58:	463b      	mov	r3, r7
            {
              buffer[i] = start[i];
 800fa5a:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 800fa5e:	f842 1f04 	str.w	r1, [r2, #4]!
            for (int i = 0; i < ch_src; i++)
 800fa62:	42ab      	cmp	r3, r5
 800fa64:	d1f9      	bne.n	800fa5a <arm_avgpool_s8+0x112>
 800fa66:	463c      	mov	r4, r7
            for (int i = 0; i < ch_src; i++)
            {
              buffer[i] = __QADD(start[i], buffer[i]);
            }
          }
          count++;
 800fa68:	3001      	adds	r0, #1
        for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 800fa6a:	42b0      	cmp	r0, r6
 800fa6c:	445c      	add	r4, fp
 800fa6e:	445d      	add	r5, fp
 800fa70:	d014      	beq.n	800fa9c <arm_avgpool_s8+0x154>
            for (int i = 0; i < ch_src; i++)
 800fa72:	f1bb 0f00 	cmp.w	fp, #0
 800fa76:	ddf7      	ble.n	800fa68 <arm_avgpool_s8+0x120>
 800fa78:	4651      	mov	r1, sl
 800fa7a:	4622      	mov	r2, r4
 800fa7c:	9401      	str	r4, [sp, #4]
              buffer[i] = __QADD(start[i], buffer[i]);
 800fa7e:	f912 3f01 	ldrsb.w	r3, [r2, #1]!

__STATIC_FORCEINLINE  int32_t __QADD( int32_t op1,  int32_t op2)
{
  int32_t result;

  __ASM volatile ("qadd %0, %1, %2" : "=r" (result) : "r" (op1), "r" (op2) );
 800fa82:	f851 4f04 	ldr.w	r4, [r1, #4]!
 800fa86:	fa84 f383 	qadd	r3, r3, r4
            for (int i = 0; i < ch_src; i++)
 800fa8a:	42aa      	cmp	r2, r5
              buffer[i] = __QADD(start[i], buffer[i]);
 800fa8c:	600b      	str	r3, [r1, #0]
            for (int i = 0; i < ch_src; i++)
 800fa8e:	d1f6      	bne.n	800fa7e <arm_avgpool_s8+0x136>
 800fa90:	9c01      	ldr	r4, [sp, #4]
          count++;
 800fa92:	3001      	adds	r0, #1
        for (int k_x = kernel_x_start; k_x < kernel_x_end; k_x++)
 800fa94:	42b0      	cmp	r0, r6
 800fa96:	445c      	add	r4, fp
 800fa98:	445d      	add	r5, fp
 800fa9a:	d1ea      	bne.n	800fa72 <arm_avgpool_s8+0x12a>
      for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 800fa9c:	9b02      	ldr	r3, [sp, #8]
 800fa9e:	f10c 0c01 	add.w	ip, ip, #1
 800faa2:	45e1      	cmp	r9, ip
 800faa4:	441f      	add	r7, r3
 800faa6:	d1cb      	bne.n	800fa40 <arm_avgpool_s8+0xf8>
  const int half_count = count / 2;
 800faa8:	e9dd 1209 	ldrd	r1, r2, [sp, #36]	@ 0x24
 800faac:	e9dd 430b 	ldrd	r4, r3, [sp, #44]	@ 0x2c
 800fab0:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 800fab2:	ea4f 0e60 	mov.w	lr, r0, asr #1
  for (int i = 0; i < length; i++)
 800fab6:	f1bb 0f00 	cmp.w	fp, #0
 800faba:	dd16      	ble.n	800faea <arm_avgpool_s8+0x1a2>
 800fabc:	9d05      	ldr	r5, [sp, #20]
 800fabe:	4657      	mov	r7, sl
 800fac0:	f105 3cff 	add.w	ip, r5, #4294967295	@ 0xffffffff
    int32_t sum = buffer[i] > 0 ? (buffer[i] + half_count) : (buffer[i] - half_count);
 800fac4:	f857 5f04 	ldr.w	r5, [r7, #4]!
 800fac8:	2d00      	cmp	r5, #0
 800faca:	bfcc      	ite	gt
 800facc:	4475      	addgt	r5, lr
 800face:	eba5 050e 	suble.w	r5, r5, lr
    sum = sum / count;
 800fad2:	fb95 f5f0 	sdiv	r5, r5, r0
    sum = MAX(sum, act_min);
 800fad6:	428d      	cmp	r5, r1
 800fad8:	bfb8      	it	lt
 800fada:	460d      	movlt	r5, r1
    sum = MIN(sum, act_max);
 800fadc:	4295      	cmp	r5, r2
 800fade:	bfa8      	it	ge
 800fae0:	4615      	movge	r5, r2
  for (int i = 0; i < length; i++)
 800fae2:	42bb      	cmp	r3, r7
    target[i] = (q7_t)sum;
 800fae4:	f80c 5f01 	strb.w	r5, [ip, #1]!
  for (int i = 0; i < length; i++)
 800fae8:	d1ec      	bne.n	800fac4 <arm_avgpool_s8+0x17c>
        }
      }
      scale_q31_to_q7_and_clamp(buffer, dst, ch_src, count, act_min, act_max);
      dst += ch_src;
 800faea:	9d05      	ldr	r5, [sp, #20]
 800faec:	9f04      	ldr	r7, [sp, #16]
    for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800faee:	9807      	ldr	r0, [sp, #28]
      dst += ch_src;
 800faf0:	445d      	add	r5, fp
 800faf2:	9505      	str	r5, [sp, #20]
    for (int i_x = 0, idx_x = -pad_x; i_x < output_x; idx_x += stride_x, i_x++)
 800faf4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800faf6:	442c      	add	r4, r5
 800faf8:	1b76      	subs	r6, r6, r5
 800fafa:	1b7d      	subs	r5, r7, r5
 800fafc:	9504      	str	r5, [sp, #16]
 800fafe:	9d08      	ldr	r5, [sp, #32]
 800fb00:	3001      	adds	r0, #1
 800fb02:	4285      	cmp	r5, r0
 800fb04:	9007      	str	r0, [sp, #28]
 800fb06:	f47f af7b 	bne.w	800fa00 <arm_avgpool_s8+0xb8>
      dst += ch_src;
 800fb0a:	9c2a      	ldr	r4, [sp, #168]	@ 0xa8
 800fb0c:	9e15      	ldr	r6, [sp, #84]	@ 0x54
  for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800fb0e:	e9dd 581a 	ldrd	r5, r8, [sp, #104]	@ 0x68
      dst += ch_src;
 800fb12:	4434      	add	r4, r6
  for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800fb14:	e9dd ce18 	ldrd	ip, lr, [sp, #96]	@ 0x60
 800fb18:	e9dd 701c 	ldrd	r7, r0, [sp, #112]	@ 0x70
      dst += ch_src;
 800fb1c:	942a      	str	r4, [sp, #168]	@ 0xa8
  for (int i_y = 0, idx_y = -pad_y; i_y < output_y; idx_y += stride_y, i_y++)
 800fb1e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800fb20:	f108 0801 	add.w	r8, r8, #1
 800fb24:	4544      	cmp	r4, r8
 800fb26:	4475      	add	r5, lr
 800fb28:	eba0 000e 	sub.w	r0, r0, lr
 800fb2c:	eba7 070e 	sub.w	r7, r7, lr
 800fb30:	f47f af48 	bne.w	800f9c4 <arm_avgpool_s8+0x7c>
    }
  }

#endif
  return ARM_MATH_SUCCESS;
}
 800fb34:	2000      	movs	r0, #0
 800fb36:	b01f      	add	sp, #124	@ 0x7c
 800fb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb3c:	463c      	mov	r4, r7
 800fb3e:	e798      	b.n	800fa72 <arm_avgpool_s8+0x12a>
      for (int k_y = kernel_y_start; k_y < kernel_y_end; k_y++)
 800fb40:	f04f 0e00 	mov.w	lr, #0
      int count = 0;
 800fb44:	4670      	mov	r0, lr
 800fb46:	e7b6      	b.n	800fab6 <arm_avgpool_s8+0x16e>

0800fb48 <arm_avgpool_s8_get_buffer_size>:
  return (ch_src * sizeof(int32_t));
#else
  (void)ch_src;
  return 0;
#endif
}
 800fb48:	0088      	lsls	r0, r1, #2
 800fb4a:	4770      	bx	lr

0800fb4c <arm_max_pool_s8>:
                const cmsis_nn_dims *input_dims,
                const q7_t *src,
                const cmsis_nn_dims *filter_dims,
                const cmsis_nn_dims *output_dims,
                q7_t *dst)
{
 800fb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb50:	b0a3      	sub	sp, #140	@ 0x8c
 800fb52:	e9dd c42c 	ldrd	ip, r4, [sp, #176]	@ 0xb0
 800fb56:	9312      	str	r3, [sp, #72]	@ 0x48
    const int32_t input_y = input_dims->h;
    const int32_t input_x = input_dims->w;
    const int32_t output_y = output_dims->h;
    const int32_t output_x = output_dims->w;
 800fb58:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
    const int32_t act_max = pool_params->activation.max;
    const int32_t channel_in = input_dims->c;
    (void)ctx;
    q7_t *dst_base = dst;

    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 800fb5c:	2e00      	cmp	r6, #0
    const int32_t act_max = pool_params->activation.max;
 800fb5e:	e9d1 5904 	ldrd	r5, r9, [r1, #16]
    const int32_t pad_y = pool_params->padding.h;
 800fb62:	68c8      	ldr	r0, [r1, #12]
{
 800fb64:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
    const int32_t pad_x = pool_params->padding.w;
 800fb66:	f8d1 8008 	ldr.w	r8, [r1, #8]
    const int32_t channel_in = input_dims->c;
 800fb6a:	f8d2 b00c 	ldr.w	fp, [r2, #12]
    const int32_t output_x = output_dims->w;
 800fb6e:	930c      	str	r3, [sp, #48]	@ 0x30
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 800fb70:	f340 812a 	ble.w	800fdc8 <arm_max_pool_s8+0x27c>
    int32_t cnt = length >> 2;
 800fb74:	ea4f 03ab 	mov.w	r3, fp, asr #2
 800fb78:	9305      	str	r3, [sp, #20]
 800fb7a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    cnt = length & 0x3;
 800fb7c:	f00b 0e03 	and.w	lr, fp, #3
 800fb80:	f8cd e004 	str.w	lr, [sp, #4]
 800fb84:	2b00      	cmp	r3, #0
    {
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 800fb86:	f1c8 0e00 	rsb	lr, r8, #0
 800fb8a:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
 800fb8e:	f340 811b 	ble.w	800fdc8 <arm_max_pool_s8+0x27c>
 800fb92:	e9d2 3a01 	ldrd	r3, sl, [r2, #4]
    const int32_t stride_x = pool_params->stride.w;
 800fb96:	e9d1 1200 	ldrd	r1, r2, [r1]
 800fb9a:	910f      	str	r1, [sp, #60]	@ 0x3c
    const int32_t kernel_y = filter_dims->h;
 800fb9c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800fba0:	9114      	str	r1, [sp, #80]	@ 0x50
    const int32_t kernel_x = filter_dims->w;
 800fba2:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800fba6:	9110      	str	r1, [sp, #64]	@ 0x40
 800fba8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fbaa:	f8cd 9064 	str.w	r9, [sp, #100]	@ 0x64
 800fbae:	4686      	mov	lr, r0
 800fbb0:	4247      	negs	r7, r0
 800fbb2:	4418      	add	r0, r3
 800fbb4:	9b05      	ldr	r3, [sp, #20]
 800fbb6:	942e      	str	r4, [sp, #184]	@ 0xb8
 800fbb8:	fb0b f101 	mul.w	r1, fp, r1
 800fbbc:	9115      	str	r1, [sp, #84]	@ 0x54
 800fbbe:	0099      	lsls	r1, r3, #2
 800fbc0:	9106      	str	r1, [sp, #24]
 800fbc2:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800fbc6:	fb0b f30a 	mul.w	r3, fp, sl
 800fbca:	9308      	str	r3, [sp, #32]
 800fbcc:	eb0a 0308 	add.w	r3, sl, r8
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 800fbd0:	f04f 0c00 	mov.w	ip, #0
 800fbd4:	e9cd 3517 	strd	r3, r5, [sp, #92]	@ 0x5c
 800fbd8:	9d01      	ldr	r5, [sp, #4]
 800fbda:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
 800fbde:	4681      	mov	r9, r0
 800fbe0:	46b4      	mov	ip, r6
 800fbe2:	4640      	mov	r0, r8
 800fbe4:	4676      	mov	r6, lr
 800fbe6:	4688      	mov	r8, r1
 800fbe8:	46d6      	mov	lr, sl
 800fbea:	4611      	mov	r1, r2
 800fbec:	465a      	mov	r2, fp
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 800fbee:	2f00      	cmp	r7, #0
 800fbf0:	bfd4      	ite	le
 800fbf2:	4633      	movle	r3, r6
 800fbf4:	2300      	movgt	r3, #0
 800fbf6:	930e      	str	r3, [sp, #56]	@ 0x38
 800fbf8:	18fb      	adds	r3, r7, r3
 800fbfa:	fb0e f303 	mul.w	r3, lr, r3
 800fbfe:	9311      	str	r3, [sp, #68]	@ 0x44
            /* Condition for kernel start dimension: (base_idx_<x,y> + kernel_<x,y>_start) >= 0 */
            const int32_t ker_y_start = MAX(0, -base_idx_y);
            const int32_t ker_x_start = MAX(0, -base_idx_x);

            /* Condition for kernel end dimension: (base_idx_<x,y> + kernel_<x,y>_end) < dim_src_<width,height> */
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 800fc00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fc02:	f8dd b05c 	ldr.w	fp, [sp, #92]	@ 0x5c
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 800fc06:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 800fc08:	f8cd 907c 	str.w	r9, [sp, #124]	@ 0x7c
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 800fc0c:	454b      	cmp	r3, r9
 800fc0e:	bfa8      	it	ge
 800fc10:	464b      	movge	r3, r9
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 800fc12:	e9cd ec1a 	strd	lr, ip, [sp, #104]	@ 0x68
 800fc16:	e9cd 101c 	strd	r1, r0, [sp, #112]	@ 0x70
 800fc1a:	e9cd 8620 	strd	r8, r6, [sp, #128]	@ 0x80
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 800fc1e:	9307      	str	r3, [sp, #28]
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 800fc20:	2300      	movs	r3, #0
 800fc22:	930d      	str	r3, [sp, #52]	@ 0x34
 800fc24:	900a      	str	r0, [sp, #40]	@ 0x28
            const int32_t kernel_y_end = MIN(kernel_y, input_y - base_idx_y);
 800fc26:	46c2      	mov	sl, r8
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 800fc28:	971e      	str	r7, [sp, #120]	@ 0x78
 800fc2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fc2c:	4691      	mov	r9, r2
 800fc2e:	465b      	mov	r3, fp
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 800fc30:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fc32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);

            int count = 0;

            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 800fc34:	9807      	ldr	r0, [sp, #28]
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 800fc36:	2900      	cmp	r1, #0
 800fc38:	bfd8      	it	le
 800fc3a:	4616      	movle	r6, r2
 800fc3c:	9a06      	ldr	r2, [sp, #24]
 800fc3e:	ebaa 0b02 	sub.w	fp, sl, r2
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 800fc42:	9a10      	ldr	r2, [sp, #64]	@ 0x40
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 800fc44:	bfc8      	it	gt
 800fc46:	2600      	movgt	r6, #0
            const int32_t kernel_x_end = MIN(kernel_x, input_x - base_idx_x);
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	bfa8      	it	ge
 800fc4c:	461a      	movge	r2, r3
 800fc4e:	4690      	mov	r8, r2
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 800fc50:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
            const int32_t ker_x_start = MAX(0, -base_idx_x);
 800fc52:	9609      	str	r6, [sp, #36]	@ 0x24
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 800fc54:	4282      	cmp	r2, r0
 800fc56:	f280 808c 	bge.w	800fd72 <arm_max_pool_s8+0x226>
 800fc5a:	4546      	cmp	r6, r8
 800fc5c:	f280 8089 	bge.w	800fd72 <arm_max_pool_s8+0x226>
 800fc60:	9301      	str	r3, [sp, #4]
 800fc62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fc64:	1877      	adds	r7, r6, r1
 800fc66:	441f      	add	r7, r3
 800fc68:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fc6a:	fb09 3707 	mla	r7, r9, r7, r3
                {
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);

                    if (count == 0)
                    {
                        memcpy(dst, start, channel_in);
 800fc6e:	464a      	mov	r2, r9
 800fc70:	4639      	mov	r1, r7
 800fc72:	4658      	mov	r0, fp
 800fc74:	f002 f969 	bl	8011f4a <memcpy>
                        count++;
 800fc78:	9b01      	ldr	r3, [sp, #4]
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 800fc7a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fc7c:	463c      	mov	r4, r7
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 800fc7e:	46b4      	mov	ip, r6
 800fc80:	4619      	mov	r1, r3
 800fc82:	f10c 0c01 	add.w	ip, ip, #1
 800fc86:	444f      	add	r7, r9
 800fc88:	45e0      	cmp	r8, ip
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 800fc8a:	bf18      	it	ne
 800fc8c:	463e      	movne	r6, r7
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 800fc8e:	d060      	beq.n	800fd52 <arm_max_pool_s8+0x206>
    while (cnt > 0l)
 800fc90:	9b05      	ldr	r3, [sp, #20]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	dd6a      	ble.n	800fd6c <arm_max_pool_s8+0x220>
 800fc96:	e9cd 9801 	strd	r9, r8, [sp, #4]
 800fc9a:	e9cd c503 	strd	ip, r5, [sp, #12]
 800fc9e:	4658      	mov	r0, fp
 800fca0:	46d6      	mov	lr, sl
  memcpy(&val, in_q7, 4);
 800fca2:	6805      	ldr	r5, [r0, #0]
  memcpy(&val, *in_q7, 4);
 800fca4:	f856 3b04 	ldr.w	r3, [r6], #4
  q7_t ** pQ7,
  q31_t   value)
{
  q31_t val = value;
#ifdef __ARM_FEATURE_UNALIGNED
  memcpy (*pQ7, &val, 4);
 800fca8:	fa4f f885 	sxtb.w	r8, r5
 800fcac:	fa4f fc83 	sxtb.w	ip, r3
 800fcb0:	45e0      	cmp	r8, ip
 800fcb2:	bfb8      	it	lt
 800fcb4:	46e0      	movlt	r8, ip
 800fcb6:	f04f 0c00 	mov.w	ip, #0
 800fcba:	f345 2907 	sbfx	r9, r5, #8, #8
 800fcbe:	f368 0c07 	bfi	ip, r8, #0, #8
 800fcc2:	f343 2807 	sbfx	r8, r3, #8, #8
 800fcc6:	45c8      	cmp	r8, r9
 800fcc8:	bfb8      	it	lt
 800fcca:	46c8      	movlt	r8, r9
 800fccc:	f368 2c0f 	bfi	ip, r8, #8, #8
 800fcd0:	f345 4907 	sbfx	r9, r5, #16, #8
 800fcd4:	f343 4807 	sbfx	r8, r3, #16, #8
 800fcd8:	45c8      	cmp	r8, r9
 800fcda:	ea4f 6323 	mov.w	r3, r3, asr #24
 800fcde:	ea4f 6525 	mov.w	r5, r5, asr #24
 800fce2:	bfb8      	it	lt
 800fce4:	46c8      	movlt	r8, r9
 800fce6:	42ab      	cmp	r3, r5
 800fce8:	bfb8      	it	lt
 800fcea:	462b      	movlt	r3, r5
 800fcec:	f368 4c17 	bfi	ip, r8, #16, #8
 800fcf0:	f363 6c1f 	bfi	ip, r3, #24, #8
 800fcf4:	f840 cb04 	str.w	ip, [r0], #4
 800fcf8:	4550      	cmp	r0, sl
 800fcfa:	d1d2      	bne.n	800fca2 <arm_max_pool_s8+0x156>
  *in_q7 += 4;
 800fcfc:	9b06      	ldr	r3, [sp, #24]
 800fcfe:	e9dd 9801 	ldrd	r9, r8, [sp, #4]
 800fd02:	e9dd c503 	ldrd	ip, r5, [sp, #12]
 800fd06:	19de      	adds	r6, r3, r7
    while (cnt > 0l)
 800fd08:	2d00      	cmp	r5, #0
 800fd0a:	d0ba      	beq.n	800fc82 <arm_max_pool_s8+0x136>
        if (*src > *dst)
 800fd0c:	f996 3000 	ldrsb.w	r3, [r6]
 800fd10:	f99e 0000 	ldrsb.w	r0, [lr]
 800fd14:	4298      	cmp	r0, r3
            *dst = *src;
 800fd16:	bfb8      	it	lt
 800fd18:	f88e 3000 	strblt.w	r3, [lr]
    while (cnt > 0l)
 800fd1c:	2d01      	cmp	r5, #1
 800fd1e:	d0b0      	beq.n	800fc82 <arm_max_pool_s8+0x136>
        if (*src > *dst)
 800fd20:	f996 3001 	ldrsb.w	r3, [r6, #1]
 800fd24:	f99e 0001 	ldrsb.w	r0, [lr, #1]
 800fd28:	4298      	cmp	r0, r3
            *dst = *src;
 800fd2a:	bfb8      	it	lt
 800fd2c:	f88e 3001 	strblt.w	r3, [lr, #1]
    while (cnt > 0l)
 800fd30:	2d02      	cmp	r5, #2
 800fd32:	d0a6      	beq.n	800fc82 <arm_max_pool_s8+0x136>
        if (*src > *dst)
 800fd34:	f996 3002 	ldrsb.w	r3, [r6, #2]
 800fd38:	f99e 0002 	ldrsb.w	r0, [lr, #2]
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 800fd3c:	f10c 0c01 	add.w	ip, ip, #1
        if (*src > *dst)
 800fd40:	4298      	cmp	r0, r3
            *dst = *src;
 800fd42:	bfb8      	it	lt
 800fd44:	f88e 3002 	strblt.w	r3, [lr, #2]
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 800fd48:	444f      	add	r7, r9
 800fd4a:	45e0      	cmp	r8, ip
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 800fd4c:	bf18      	it	ne
 800fd4e:	463e      	movne	r6, r7
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 800fd50:	d19e      	bne.n	800fc90 <arm_max_pool_s8+0x144>
            for (int k_y = ker_y_start; k_y < kernel_y_end; k_y++)
 800fd52:	9b08      	ldr	r3, [sp, #32]
 800fd54:	18e7      	adds	r7, r4, r3
 800fd56:	9b07      	ldr	r3, [sp, #28]
 800fd58:	3201      	adds	r2, #1
 800fd5a:	4293      	cmp	r3, r2
 800fd5c:	d008      	beq.n	800fd70 <arm_max_pool_s8+0x224>
    while (cnt > 0l)
 800fd5e:	9b05      	ldr	r3, [sp, #20]
                for (int k_x = ker_x_start; k_x < kernel_x_end; k_x++)
 800fd60:	f8dd c024 	ldr.w	ip, [sp, #36]	@ 0x24
    while (cnt > 0l)
 800fd64:	2b00      	cmp	r3, #0
                    const q7_t *start = src + channel_in * (k_x + base_idx_x + (k_y + base_idx_y) * input_x);
 800fd66:	463e      	mov	r6, r7
 800fd68:	463c      	mov	r4, r7
    while (cnt > 0l)
 800fd6a:	dc94      	bgt.n	800fc96 <arm_max_pool_s8+0x14a>
 800fd6c:	46de      	mov	lr, fp
 800fd6e:	e7cb      	b.n	800fd08 <arm_max_pool_s8+0x1bc>
 800fd70:	460b      	mov	r3, r1
        for (int i_x = 0, base_idx_x = -pad_x; i_x < output_x; base_idx_x += stride_x, i_x++)
 800fd72:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800fd74:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800fd76:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fd78:	4408      	add	r0, r1
 800fd7a:	900b      	str	r0, [sp, #44]	@ 0x2c
 800fd7c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fd7e:	1a5b      	subs	r3, r3, r1
 800fd80:	1a40      	subs	r0, r0, r1
 800fd82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800fd84:	900a      	str	r0, [sp, #40]	@ 0x28
 800fd86:	3201      	adds	r2, #1
 800fd88:	4291      	cmp	r1, r2
 800fd8a:	920d      	str	r2, [sp, #52]	@ 0x34
 800fd8c:	44ca      	add	sl, r9
 800fd8e:	f47f af4f 	bne.w	800fc30 <arm_max_pool_s8+0xe4>
    for (int i_y = 0, base_idx_y = -pad_y; i_y < output_y; base_idx_y += stride_y, i_y++)
 800fd92:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fd94:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 800fd96:	e9dd ec1a 	ldrd	lr, ip, [sp, #104]	@ 0x68
 800fd9a:	e9dd 101c 	ldrd	r1, r0, [sp, #112]	@ 0x70
 800fd9e:	e9dd 8620 	ldrd	r8, r6, [sp, #128]	@ 0x80
 800fda2:	464a      	mov	r2, r9
 800fda4:	e9dd 791e 	ldrd	r7, r9, [sp, #120]	@ 0x78
 800fda8:	3301      	adds	r3, #1
 800fdaa:	459c      	cmp	ip, r3
 800fdac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800fdae:	440f      	add	r7, r1
 800fdb0:	eba6 0601 	sub.w	r6, r6, r1
 800fdb4:	eba9 0901 	sub.w	r9, r9, r1
 800fdb8:	44a0      	add	r8, r4
 800fdba:	f47f af18 	bne.w	800fbee <arm_max_pool_s8+0xa2>
 800fdbe:	e9dd 5918 	ldrd	r5, r9, [sp, #96]	@ 0x60
 800fdc2:	9c2e      	ldr	r4, [sp, #184]	@ 0xb8
 800fdc4:	4666      	mov	r6, ip
 800fdc6:	4693      	mov	fp, r2
            /* 'count' is expected to be non-zero here. */
            dst += channel_in;
        }
    }

    clamp_output(dst_base, output_x * output_y * channel_in, act_min, act_max);
 800fdc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fdca:	fb06 f202 	mul.w	r2, r6, r2
 800fdce:	fb0b f202 	mul.w	r2, fp, r2
    int32_t cnt = length >> 2;
 800fdd2:	1097      	asrs	r7, r2, #2
    while (cnt > 0l)
 800fdd4:	2f00      	cmp	r7, #0
 800fdd6:	bfc8      	it	gt
 800fdd8:	eb04 0787 	addgt.w	r7, r4, r7, lsl #2
 800fddc:	dd32      	ble.n	800fe44 <arm_max_pool_s8+0x2f8>
  memcpy(&val, in_q7, 4);
 800fdde:	6823      	ldr	r3, [r4, #0]
        in.bytes[0] = MAX(in.bytes[0], act_min);
 800fde0:	fa4f fc83 	sxtb.w	ip, r3
 800fde4:	45ac      	cmp	ip, r5
        in.bytes[1] = MAX(in.bytes[1], act_min);
 800fde6:	f343 2607 	sbfx	r6, r3, #8, #8
        in.bytes[0] = MAX(in.bytes[0], act_min);
 800fdea:	bfb8      	it	lt
 800fdec:	46ac      	movlt	ip, r5
        in.bytes[0] = MIN(in.bytes[0], act_max);
 800fdee:	fa4f fc8c 	sxtb.w	ip, ip
        in.bytes[1] = MAX(in.bytes[1], act_min);
 800fdf2:	42ae      	cmp	r6, r5
        in.bytes[2] = MAX(in.bytes[2], act_min);
 800fdf4:	f343 4107 	sbfx	r1, r3, #16, #8
        in.bytes[1] = MAX(in.bytes[1], act_min);
 800fdf8:	bfb8      	it	lt
 800fdfa:	462e      	movlt	r6, r5
        in.bytes[0] = MIN(in.bytes[0], act_max);
 800fdfc:	45cc      	cmp	ip, r9
        in.bytes[1] = MIN(in.bytes[1], act_max);
 800fdfe:	b276      	sxtb	r6, r6
        in.bytes[0] = MIN(in.bytes[0], act_max);
 800fe00:	bfa8      	it	ge
 800fe02:	46cc      	movge	ip, r9
        in.bytes[2] = MAX(in.bytes[2], act_min);
 800fe04:	42a9      	cmp	r1, r5
        in.bytes[3] = MAX(in.bytes[3], act_min);
 800fe06:	ea4f 6323 	mov.w	r3, r3, asr #24
        in.bytes[2] = MAX(in.bytes[2], act_min);
 800fe0a:	bfb8      	it	lt
 800fe0c:	4629      	movlt	r1, r5
        in.bytes[1] = MIN(in.bytes[1], act_max);
 800fe0e:	454e      	cmp	r6, r9
 800fe10:	bfa8      	it	ge
 800fe12:	464e      	movge	r6, r9
        in.bytes[3] = MAX(in.bytes[3], act_min);
 800fe14:	42ab      	cmp	r3, r5
        in.bytes[2] = MIN(in.bytes[2], act_max);
 800fe16:	b249      	sxtb	r1, r1
        in.bytes[3] = MAX(in.bytes[3], act_min);
 800fe18:	bfb8      	it	lt
 800fe1a:	462b      	movlt	r3, r5
 800fe1c:	2000      	movs	r0, #0
        in.bytes[3] = MIN(in.bytes[3], act_max);
 800fe1e:	b25b      	sxtb	r3, r3
        in.bytes[2] = MIN(in.bytes[2], act_max);
 800fe20:	4549      	cmp	r1, r9
 800fe22:	f36c 0007 	bfi	r0, ip, #0, #8
 800fe26:	bfa8      	it	ge
 800fe28:	4649      	movge	r1, r9
 800fe2a:	f366 200f 	bfi	r0, r6, #8, #8
        in.bytes[3] = MIN(in.bytes[3], act_max);
 800fe2e:	454b      	cmp	r3, r9
 800fe30:	bfa8      	it	ge
 800fe32:	464b      	movge	r3, r9
 800fe34:	f361 4017 	bfi	r0, r1, #16, #8
 800fe38:	f363 601f 	bfi	r0, r3, #24, #8
 800fe3c:	f844 0b04 	str.w	r0, [r4], #4
    while (cnt > 0l)
 800fe40:	42bc      	cmp	r4, r7
 800fe42:	d1cc      	bne.n	800fdde <arm_max_pool_s8+0x292>
    while (cnt > 0l)
 800fe44:	f012 0203 	ands.w	r2, r2, #3
 800fe48:	d01e      	beq.n	800fe88 <arm_max_pool_s8+0x33c>
        int32_t comp = *source;
 800fe4a:	f994 3000 	ldrsb.w	r3, [r4]
        comp = MAX(comp, act_min);
 800fe4e:	42ab      	cmp	r3, r5
 800fe50:	bfb8      	it	lt
 800fe52:	462b      	movlt	r3, r5
        comp = MIN(comp, act_max);
 800fe54:	454b      	cmp	r3, r9
 800fe56:	bfa8      	it	ge
 800fe58:	464b      	movge	r3, r9
    while (cnt > 0l)
 800fe5a:	2a01      	cmp	r2, #1
        *source++ = (int8_t)comp;
 800fe5c:	7023      	strb	r3, [r4, #0]
    while (cnt > 0l)
 800fe5e:	d013      	beq.n	800fe88 <arm_max_pool_s8+0x33c>
        int32_t comp = *source;
 800fe60:	f994 3001 	ldrsb.w	r3, [r4, #1]
        comp = MAX(comp, act_min);
 800fe64:	42ab      	cmp	r3, r5
 800fe66:	bfb8      	it	lt
 800fe68:	462b      	movlt	r3, r5
        comp = MIN(comp, act_max);
 800fe6a:	454b      	cmp	r3, r9
 800fe6c:	bfa8      	it	ge
 800fe6e:	464b      	movge	r3, r9
    while (cnt > 0l)
 800fe70:	2a02      	cmp	r2, #2
        *source++ = (int8_t)comp;
 800fe72:	7063      	strb	r3, [r4, #1]
    while (cnt > 0l)
 800fe74:	d008      	beq.n	800fe88 <arm_max_pool_s8+0x33c>
        int32_t comp = *source;
 800fe76:	f994 3002 	ldrsb.w	r3, [r4, #2]
        comp = MAX(comp, act_min);
 800fe7a:	42ab      	cmp	r3, r5
 800fe7c:	bfb8      	it	lt
 800fe7e:	462b      	movlt	r3, r5
        comp = MIN(comp, act_max);
 800fe80:	454b      	cmp	r3, r9
 800fe82:	bfa8      	it	ge
 800fe84:	464b      	movge	r3, r9
        *source++ = (int8_t)comp;
 800fe86:	70a3      	strb	r3, [r4, #2]

    return ARM_MATH_SUCCESS;
}
 800fe88:	2000      	movs	r0, #0
 800fe8a:	b023      	add	sp, #140	@ 0x8c
 800fe8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe90 <arm_softmax_s8>:
                    const int32_t row_size,
                    const int32_t mult,
                    const int32_t shift,
                    const int32_t diff_min,
                    int8_t *output)
{
 800fe90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe94:	b099      	sub	sp, #100	@ 0x64
 800fe96:	9301      	str	r3, [sp, #4]
    const int32_t mask = (1 << shift);

    int32_t col = 0;
    int32_t row_idx;

    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 800fe98:	1e0b      	subs	r3, r1, #0
 800fe9a:	9317      	str	r3, [sp, #92]	@ 0x5c
 800fe9c:	f340 84a0 	ble.w	80107e0 <arm_softmax_s8+0x950>
 800fea0:	1e53      	subs	r3, r2, #1
 800fea2:	18c3      	adds	r3, r0, r3
 800fea4:	f100 39ff 	add.w	r9, r0, #4294967295	@ 0xffffffff
 800fea8:	9300      	str	r3, [sp, #0]
 800feaa:	f04f 0b00 	mov.w	fp, #0
 800feae:	f8cd 9048 	str.w	r9, [sp, #72]	@ 0x48
 800feb2:	4696      	mov	lr, r2
    {
        // Find the maximum value in order to ensure numerical stability
        int8_t max = *input;
 800feb4:	9b12      	ldr	r3, [sp, #72]	@ 0x48

        for (col = 1; col < row_size; ++col)
 800feb6:	f1be 0f01 	cmp.w	lr, #1
        int8_t max = *input;
 800feba:	f993 2001 	ldrsb.w	r2, [r3, #1]
 800febe:	9202      	str	r2, [sp, #8]
 800fec0:	f103 0301 	add.w	r3, r3, #1
        for (col = 1; col < row_size; ++col)
 800fec4:	f340 84ae 	ble.w	8010824 <arm_softmax_s8+0x994>
 800fec8:	9800      	ldr	r0, [sp, #0]
        {
            max = MAX(max, input[col]);
 800feca:	f913 1f01 	ldrsb.w	r1, [r3, #1]!
 800fece:	428a      	cmp	r2, r1
 800fed0:	bfb8      	it	lt
 800fed2:	460a      	movlt	r2, r1
        for (col = 1; col < row_size; ++col)
 800fed4:	4283      	cmp	r3, r0
 800fed6:	d1f8      	bne.n	800feca <arm_softmax_s8+0x3a>
 800fed8:	9202      	str	r2, [sp, #8]
        }

        int32_t diff = 0;
        int32_t sum = 0;
 800feda:	2300      	movs	r3, #0
 800fedc:	e9cd be0f 	strd	fp, lr, [sp, #60]	@ 0x3c
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));

        for (col = 0; col < row_size; ++col)
        {
            diff = input[col] - max;
 800fee0:	f8dd 9048 	ldr.w	r9, [sp, #72]	@ 0x48
        int32_t sum = 0;
 800fee4:	9303      	str	r3, [sp, #12]
 800fee6:	e07f      	b.n	800ffe8 <arm_softmax_s8+0x158>
    result = (int32_t) (mult / (1ll << 31));
 800fee8:	48c4      	ldr	r0, [pc, #784]	@ (80101fc <arm_softmax_s8+0x36c>)
 800feea:	fbc3 2100 	smlal	r2, r1, r3, r0
 800feee:	2900      	cmp	r1, #0
 800fef0:	da05      	bge.n	800fefe <arm_softmax_s8+0x6e>
 800fef2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800fef6:	18d3      	adds	r3, r2, r3
 800fef8:	461a      	mov	r2, r3
 800fefa:	f141 0100 	adc.w	r1, r1, #0
 800fefe:	0fd2      	lsrs	r2, r2, #31
 800ff00:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
    const int32_t remainder             = val_mod_minus_quarter - val;
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
    const int32_t x2                    = MUL_SAT(x, x);

    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 800ff04:	f102 42e2 	add.w	r2, r2, #1895825408	@ 0x71000000
    mult = mult + (q63_t)m1 * m2;
 800ff08:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800ff0c:	2100      	movs	r1, #0
 800ff0e:	4dbc      	ldr	r5, [pc, #752]	@ (8010200 <arm_softmax_s8+0x370>)
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 800ff10:	f5a2 2225 	sub.w	r2, r2, #675840	@ 0xa5000
 800ff14:	f2a2 726c 	subw	r2, r2, #1900	@ 0x76c
    mult = mult + (q63_t)m1 * m2;
 800ff18:	4618      	mov	r0, r3
 800ff1a:	460c      	mov	r4, r1
 800ff1c:	fbc2 0405 	smlal	r0, r4, r2, r5
    result = (int32_t) (mult / (1ll << 31));
 800ff20:	0fc0      	lsrs	r0, r0, #31
 800ff22:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    mult = mult + (q63_t)m1 * m2;
 800ff26:	4db7      	ldr	r5, [pc, #732]	@ (8010204 <arm_softmax_s8+0x374>)
{                                                                 \
    mask   = MASK_IF_NON_ZERO(remainder & (1 << shift++));        \
    result = SELECT_USING_MASK(mask, MUL_SAT(result, x), result); \
}

    SELECT_IF_NON_ZERO(1672461947)
 800ff28:	ea02 0b0b 	and.w	fp, r2, fp
 800ff2c:	4006      	ands	r6, r0
 800ff2e:	ea86 060b 	eor.w	r6, r6, fp
    mult = mult + (q63_t)m1 * m2;
 800ff32:	461a      	mov	r2, r3
 800ff34:	460c      	mov	r4, r1
 800ff36:	fbc6 2405 	smlal	r2, r4, r6, r5
    SELECT_IF_NON_ZERO(1302514674)
 800ff3a:	980a      	ldr	r0, [sp, #40]	@ 0x28
    mult = mult + (q63_t)m1 * m2;
 800ff3c:	4db2      	ldr	r5, [pc, #712]	@ (8010208 <arm_softmax_s8+0x378>)
    result = (int32_t) (mult / (1ll << 31));
 800ff3e:	0fd2      	lsrs	r2, r2, #31
 800ff40:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 800ff44:	4030      	ands	r0, r6
 800ff46:	ea0a 0a02 	and.w	sl, sl, r2
    SELECT_IF_NON_ZERO(790015084)
 800ff4a:	9a08      	ldr	r2, [sp, #32]
    SELECT_IF_NON_ZERO(1302514674)
 800ff4c:	ea8a 0a00 	eor.w	sl, sl, r0
    SELECT_IF_NON_ZERO(790015084)
 800ff50:	ea0a 0002 	and.w	r0, sl, r2
    mult = mult + (q63_t)m1 * m2;
 800ff54:	460c      	mov	r4, r1
 800ff56:	461a      	mov	r2, r3
 800ff58:	fbca 2405 	smlal	r2, r4, sl, r5
    result = (int32_t) (mult / (1ll << 31));
 800ff5c:	0fd2      	lsrs	r2, r2, #31
 800ff5e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 800ff62:	9c06      	ldr	r4, [sp, #24]
    mult = mult + (q63_t)m1 * m2;
 800ff64:	4da9      	ldr	r5, [pc, #676]	@ (801020c <arm_softmax_s8+0x37c>)
    SELECT_IF_NON_ZERO(790015084)
 800ff66:	4014      	ands	r4, r2
 800ff68:	4622      	mov	r2, r4
 800ff6a:	4042      	eors	r2, r0
    mult = mult + (q63_t)m1 * m2;
 800ff6c:	460e      	mov	r6, r1
 800ff6e:	4618      	mov	r0, r3
    SELECT_IF_NON_ZERO(290630308)
 800ff70:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
    mult = mult + (q63_t)m1 * m2;
 800ff72:	fbc2 0605 	smlal	r0, r6, r2, r5
    SELECT_IF_NON_ZERO(290630308)
 800ff76:	4014      	ands	r4, r2
    result = (int32_t) (mult / (1ll << 31));
 800ff78:	0fc0      	lsrs	r0, r0, #31
    SELECT_IF_NON_ZERO(290630308)
 800ff7a:	9a05      	ldr	r2, [sp, #20]
    mult = mult + (q63_t)m1 * m2;
 800ff7c:	4da4      	ldr	r5, [pc, #656]	@ (8010210 <arm_softmax_s8+0x380>)
    result = (int32_t) (mult / (1ll << 31));
 800ff7e:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 800ff82:	4002      	ands	r2, r0
 800ff84:	4062      	eors	r2, r4
    mult = mult + (q63_t)m1 * m2;
 800ff86:	4618      	mov	r0, r3
 800ff88:	460e      	mov	r6, r1
    SELECT_IF_NON_ZERO(39332535)
 800ff8a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
    mult = mult + (q63_t)m1 * m2;
 800ff8c:	fbc2 0605 	smlal	r0, r6, r2, r5
    SELECT_IF_NON_ZERO(39332535)
 800ff90:	4014      	ands	r4, r2
    result = (int32_t) (mult / (1ll << 31));
 800ff92:	0fc0      	lsrs	r0, r0, #31
    SELECT_IF_NON_ZERO(39332535)
 800ff94:	9a04      	ldr	r2, [sp, #16]
    mult = mult + (q63_t)m1 * m2;
 800ff96:	4d9f      	ldr	r5, [pc, #636]	@ (8010214 <arm_softmax_s8+0x384>)
    result = (int32_t) (mult / (1ll << 31));
 800ff98:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 800ff9c:	4002      	ands	r2, r0
 800ff9e:	4062      	eors	r2, r4
    mult = mult + (q63_t)m1 * m2;
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	460e      	mov	r6, r1
    SELECT_IF_NON_ZERO(720401)
 800ffa4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
    mult = mult + (q63_t)m1 * m2;
 800ffa6:	fbc2 0605 	smlal	r0, r6, r2, r5
    SELECT_IF_NON_ZERO(720401)
 800ffaa:	4014      	ands	r4, r2
    result = (int32_t) (mult / (1ll << 31));
 800ffac:	0fc0      	lsrs	r0, r0, #31
    SELECT_IF_NON_ZERO(720401)
 800ffae:	9a07      	ldr	r2, [sp, #28]
    result = (int32_t) (mult / (1ll << 31));
 800ffb0:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
    SELECT_IF_NON_ZERO(720401)
 800ffb4:	4002      	ands	r2, r0
 800ffb6:	4062      	eors	r2, r4
    mult = mult + (q63_t)m1 * m2;
 800ffb8:	20f2      	movs	r0, #242	@ 0xf2
    SELECT_IF_NON_ZERO(242)
 800ffba:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
    mult = mult + (q63_t)m1 * m2;
 800ffbc:	fbc2 3100 	smlal	r3, r1, r2, r0
    SELECT_IF_NON_ZERO(242)
 800ffc0:	4014      	ands	r4, r2
    result = (int32_t) (mult / (1ll << 31));
 800ffc2:	0fdb      	lsrs	r3, r3, #31
    SELECT_IF_NON_ZERO(242)
 800ffc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    result = (int32_t) (mult / (1ll << 31));
 800ffc6:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    SELECT_IF_NON_ZERO(242)
 800ffca:	401a      	ands	r2, r3
 800ffcc:	4613      	mov	r3, r2
 800ffce:	4063      	eors	r3, r4
    if (remainder > threshold)
 800ffd0:	051c      	lsls	r4, r3, #20
    result = dividend >> exponent;
 800ffd2:	ea4f 3223 	mov.w	r2, r3, asr #12
    if (remainder > threshold)
 800ffd6:	f100 8415 	bmi.w	8010804 <arm_softmax_s8+0x974>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 800ffda:	9b03      	ldr	r3, [sp, #12]
 800ffdc:	4413      	add	r3, r2
 800ffde:	9303      	str	r3, [sp, #12]
        for (col = 0; col < row_size; ++col)
 800ffe0:	9b00      	ldr	r3, [sp, #0]
 800ffe2:	4599      	cmp	r9, r3
 800ffe4:	f000 8124 	beq.w	8010230 <arm_softmax_s8+0x3a0>
            diff = input[col] - max;
 800ffe8:	9a02      	ldr	r2, [sp, #8]
 800ffea:	f919 3f01 	ldrsb.w	r3, [r9, #1]!
 800ffee:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
 800fff0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800fff2:	429a      	cmp	r2, r3
 800fff4:	dcf4      	bgt.n	800ffe0 <arm_softmax_s8+0x150>
                sum += DIV_POW2(EXP_ON_NEG(MUL_SAT(diff * mask, mult)), ACCUM_BITS);
 800fff6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
    if ((m1 < 0) ^ (m2 < 0))
 800fff8:	9901      	ldr	r1, [sp, #4]
 800fffa:	4093      	lsls	r3, r2
 800fffc:	ea81 0203 	eor.w	r2, r1, r3
 8010000:	0fd2      	lsrs	r2, r2, #31
    q63_t mult = 1 << 30;
 8010002:	2a00      	cmp	r2, #0
 8010004:	4a84      	ldr	r2, [pc, #528]	@ (8010218 <arm_softmax_s8+0x388>)
 8010006:	bf0b      	itete	eq
 8010008:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 801000c:	4610      	movne	r0, r2
 801000e:	2200      	moveq	r2, #0
 8010010:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 8010014:	fbc1 0203 	smlal	r0, r2, r1, r3
 8010018:	2a00      	cmp	r2, #0
 801001a:	da05      	bge.n	8010028 <arm_softmax_s8+0x198>
 801001c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8010020:	1841      	adds	r1, r0, r1
 8010022:	4608      	mov	r0, r1
 8010024:	f142 0200 	adc.w	r2, r2, #0
 8010028:	0fc0      	lsrs	r0, r0, #31
 801002a:	ea40 0042 	orr.w	r0, r0, r2, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 801002e:	9a01      	ldr	r2, [sp, #4]
 8010030:	429a      	cmp	r2, r3
 8010032:	f000 80c2 	beq.w	80101ba <arm_softmax_s8+0x32a>
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8010036:	f040 417f 	orr.w	r1, r0, #4278190080	@ 0xff000000
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 801003a:	014c      	lsls	r4, r1, #5
    const int32_t remainder             = val_mod_minus_quarter - val;
 801003c:	1a09      	subs	r1, r1, r0
    SELECT_IF_NON_ZERO(720401)
 801003e:	f3c1 7a40 	ubfx	sl, r1, #29, #1
 8010042:	f10a 32ff 	add.w	r2, sl, #4294967295	@ 0xffffffff
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 8010046:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
    mult = mult + (q63_t)m1 * m2;
 801004a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801004e:	f04f 0800 	mov.w	r8, #0
    SELECT_IF_NON_ZERO(290630308)
 8010052:	f3c1 6ec0 	ubfx	lr, r1, #27, #1
    result = (int32_t) (mult / (1ll << 31));
 8010056:	fbc4 3804 	smlal	r3, r8, r4, r4
    SELECT_IF_NON_ZERO(39332535)
 801005a:	f3c1 7c00 	ubfx	ip, r1, #28, #1
 801005e:	920e      	str	r2, [sp, #56]	@ 0x38
 8010060:	f10e 32ff 	add.w	r2, lr, #4294967295	@ 0xffffffff
 8010064:	920d      	str	r2, [sp, #52]	@ 0x34
    result = (int32_t) (mult / (1ll << 31));
 8010066:	f1b8 0f00 	cmp.w	r8, #0
 801006a:	f10c 32ff 	add.w	r2, ip, #4294967295	@ 0xffffffff
 801006e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010070:	da05      	bge.n	801007e <arm_softmax_s8+0x1ee>
 8010072:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8010076:	189a      	adds	r2, r3, r2
 8010078:	4613      	mov	r3, r2
 801007a:	f148 0800 	adc.w	r8, r8, #0
 801007e:	0fdb      	lsrs	r3, r3, #31
 8010080:	ea43 0348 	orr.w	r3, r3, r8, lsl #1
    mult = mult + (q63_t)m1 * m2;
 8010084:	fba3 2603 	umull	r2, r6, r3, r3
    result = (int32_t) (mult / (1ll << 31));
 8010088:	ea4f 78e8 	mov.w	r8, r8, asr #31
    mult = mult + (q63_t)m1 * m2;
 801008c:	f112 4280 	adds.w	r2, r2, #1073741824	@ 0x40000000
 8010090:	fb03 fb08 	mul.w	fp, r3, r8
    result = (int32_t) (mult / (1ll << 31));
 8010094:	eb46 064b 	adc.w	r6, r6, fp, lsl #1
 8010098:	2e00      	cmp	r6, #0
 801009a:	461f      	mov	r7, r3
 801009c:	da06      	bge.n	80100ac <arm_softmax_s8+0x21c>
 801009e:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80100a2:	eb12 0b0b 	adds.w	fp, r2, fp
 80100a6:	465a      	mov	r2, fp
 80100a8:	f146 0600 	adc.w	r6, r6, #0
    SELECT_IF_NON_ZERO(720401)
 80100ac:	f1ca 0500 	rsb	r5, sl, #0
 80100b0:	9507      	str	r5, [sp, #28]
    SELECT_IF_NON_ZERO(290630308)
 80100b2:	f1ce 0500 	rsb	r5, lr, #0
    SELECT_IF_NON_ZERO(242)
 80100b6:	f3c1 7b80 	ubfx	fp, r1, #30, #1
    SELECT_IF_NON_ZERO(290630308)
 80100ba:	9505      	str	r5, [sp, #20]
    SELECT_IF_NON_ZERO(39332535)
 80100bc:	f1cc 0500 	rsb	r5, ip, #0
    result = (int32_t) (mult / (1ll << 31));
 80100c0:	0fd2      	lsrs	r2, r2, #31
    SELECT_IF_NON_ZERO(39332535)
 80100c2:	9504      	str	r5, [sp, #16]
    if (result < 0)
 80100c4:	f10b 35ff 	add.w	r5, fp, #4294967295	@ 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 80100c8:	ea42 0246 	orr.w	r2, r2, r6, lsl #1
    SELECT_IF_NON_ZERO(1302514674)
 80100cc:	f3c1 6a40 	ubfx	sl, r1, #25, #1
    mult = mult + (q63_t)m1 * m2;
 80100d0:	17e6      	asrs	r6, r4, #31
 80100d2:	fb04 f808 	mul.w	r8, r4, r8
 80100d6:	950b      	str	r5, [sp, #44]	@ 0x2c
    SELECT_IF_NON_ZERO(242)
 80100d8:	f1cb 0500 	rsb	r5, fp, #0
    mult = mult + (q63_t)m1 * m2;
 80100dc:	fb03 8806 	mla	r8, r3, r6, r8
    if ((m1 < 0) ^ (m2 < 0))
 80100e0:	ea83 0c04 	eor.w	ip, r3, r4
    SELECT_IF_NON_ZERO(1672461947)
 80100e4:	f3c1 6600 	ubfx	r6, r1, #24, #1
    mult = mult + (q63_t)m1 * m2;
 80100e8:	fba4 e303 	umull	lr, r3, r4, r3
    SELECT_IF_NON_ZERO(790015084)
 80100ec:	f3c1 6180 	ubfx	r1, r1, #26, #1
    SELECT_IF_NON_ZERO(242)
 80100f0:	9509      	str	r5, [sp, #36]	@ 0x24
 80100f2:	f10a 35ff 	add.w	r5, sl, #4294967295	@ 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 80100f6:	4443      	add	r3, r8
 80100f8:	950a      	str	r5, [sp, #40]	@ 0x28
        threshold++;
 80100fa:	ea5f 08a2 	movs.w	r8, r2, asr #2
 80100fe:	f101 35ff 	add.w	r5, r1, #4294967295	@ 0xffffffff
    SELECT_IF_NON_ZERO(790015084)
 8010102:	f1c1 0100 	rsb	r1, r1, #0
 8010106:	9106      	str	r1, [sp, #24]
 8010108:	f106 3bff 	add.w	fp, r6, #4294967295	@ 0xffffffff
    if ((m1 < 0) ^ (m2 < 0))
 801010c:	ea4f 7cdc 	mov.w	ip, ip, lsr #31
    int32_t remainder = remainder_mask & dividend;
 8010110:	f002 0203 	and.w	r2, r2, #3
    SELECT_IF_NON_ZERO(1672461947)
 8010114:	f1c6 0600 	rsb	r6, r6, #0
    SELECT_IF_NON_ZERO(1302514674)
 8010118:	f1ca 0a00 	rsb	sl, sl, #0
 801011c:	9508      	str	r5, [sp, #32]
        threshold++;
 801011e:	bf54      	ite	pl
 8010120:	2101      	movpl	r1, #1
 8010122:	2102      	movmi	r1, #2
    if (remainder > threshold)
 8010124:	4291      	cmp	r1, r2
        result++;
 8010126:	bfb8      	it	lt
 8010128:	f108 0801 	addlt.w	r8, r8, #1
    q63_t mult = 1 << 30;
 801012c:	4a3a      	ldr	r2, [pc, #232]	@ (8010218 <arm_softmax_s8+0x388>)
 801012e:	f1bc 0f00 	cmp.w	ip, #0
 8010132:	bf0a      	itet	eq
 8010134:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000
 8010138:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 801013c:	2100      	moveq	r1, #0
    mult = mult + (q63_t)m1 * m2;
 801013e:	eb12 020e 	adds.w	r2, r2, lr
    result = (int32_t) (mult / (1ll << 31));
 8010142:	eb43 0101 	adc.w	r1, r3, r1
 8010146:	2900      	cmp	r1, #0
 8010148:	da05      	bge.n	8010156 <arm_softmax_s8+0x2c6>
 801014a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801014e:	18d3      	adds	r3, r2, r3
 8010150:	461a      	mov	r2, r3
 8010152:	f141 0100 	adc.w	r1, r1, #0
 8010156:	0fd2      	lsrs	r2, r2, #31
 8010158:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 801015c:	4442      	add	r2, r8
    if ((m1 < 0) ^ (m2 < 0))
 801015e:	0fd3      	lsrs	r3, r2, #31
    q63_t mult = 1 << 30;
 8010160:	2b00      	cmp	r3, #0
    result = (int32_t) (mult / (1ll << 31));
 8010162:	4d2e      	ldr	r5, [pc, #184]	@ (801021c <arm_softmax_s8+0x38c>)
    q63_t mult = 1 << 30;
 8010164:	4b2c      	ldr	r3, [pc, #176]	@ (8010218 <arm_softmax_s8+0x388>)
 8010166:	bf12      	itee	ne
 8010168:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 801016c:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 8010170:	2100      	moveq	r1, #0
    result = (int32_t) (mult / (1ll << 31));
 8010172:	fbc2 3105 	smlal	r3, r1, r2, r5
 8010176:	2900      	cmp	r1, #0
 8010178:	da05      	bge.n	8010186 <arm_softmax_s8+0x2f6>
 801017a:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 801017e:	189a      	adds	r2, r3, r2
 8010180:	4613      	mov	r3, r2
 8010182:	f141 0100 	adc.w	r1, r1, #0
 8010186:	0fdb      	lsrs	r3, r3, #31
 8010188:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 801018c:	441f      	add	r7, r3
    if (result < 0)
 801018e:	107b      	asrs	r3, r7, #1
 8010190:	d402      	bmi.n	8010198 <arm_softmax_s8+0x308>
    if (remainder > threshold)
 8010192:	07fd      	lsls	r5, r7, #31
        result++;
 8010194:	bf48      	it	mi
 8010196:	3301      	addmi	r3, #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8010198:	4423      	add	r3, r4
    if ((m1 < 0) ^ (m2 < 0))
 801019a:	0fda      	lsrs	r2, r3, #31
    q63_t mult = 1 << 30;
 801019c:	2a00      	cmp	r2, #0
 801019e:	bf18      	it	ne
 80101a0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80101a4:	4a1c      	ldr	r2, [pc, #112]	@ (8010218 <arm_softmax_s8+0x388>)
 80101a6:	bf04      	itt	eq
 80101a8:	2100      	moveq	r1, #0
 80101aa:	f04f 4280 	moveq.w	r2, #1073741824	@ 0x40000000

#undef SELECT_IF_NON_ZERO

    mask = MASK_IF_ZERO(val);
 80101ae:	2800      	cmp	r0, #0
 80101b0:	f47f ae9a 	bne.w	800fee8 <arm_softmax_s8+0x58>
 80101b4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
        result++;
 80101b8:	e70f      	b.n	800ffda <arm_softmax_s8+0x14a>
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80101ba:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80101be:	f47f af3a 	bne.w	8010036 <arm_softmax_s8+0x1a6>
 80101c2:	2200      	movs	r2, #0
 80101c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80101c8:	e9cd 110c 	strd	r1, r1, [sp, #48]	@ 0x30
 80101cc:	e9cd 2109 	strd	r2, r1, [sp, #36]	@ 0x24
 80101d0:	e9cd 2107 	strd	r2, r1, [sp, #28]
 80101d4:	910e      	str	r1, [sp, #56]	@ 0x38
 80101d6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80101d8:	468b      	mov	fp, r1
 80101da:	e9cd 2205 	strd	r2, r2, [sp, #20]
 80101de:	4c10      	ldr	r4, [pc, #64]	@ (8010220 <arm_softmax_s8+0x390>)
 80101e0:	4f10      	ldr	r7, [pc, #64]	@ (8010224 <arm_softmax_s8+0x394>)
 80101e2:	f8df e048 	ldr.w	lr, [pc, #72]	@ 801022c <arm_softmax_s8+0x39c>
 80101e6:	4b10      	ldr	r3, [pc, #64]	@ (8010228 <arm_softmax_s8+0x398>)
 80101e8:	9204      	str	r2, [sp, #16]
        result = Q31_MAX;
 80101ea:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 80101ee:	f44f 3800 	mov.w	r8, #131072	@ 0x20000
 80101f2:	4694      	mov	ip, r2
 80101f4:	4616      	mov	r6, r2
 80101f6:	4692      	mov	sl, r2
    q31_t threshold = remainder_mask >> 1;
 80101f8:	2101      	movs	r1, #1
 80101fa:	e793      	b.n	8010124 <arm_softmax_s8+0x294>
 80101fc:	70f5a894 	.word	0x70f5a894
 8010200:	63afbe7b 	.word	0x63afbe7b
 8010204:	4da2cbf2 	.word	0x4da2cbf2
 8010208:	2f16ac6c 	.word	0x2f16ac6c
 801020c:	1152aaa4 	.word	0x1152aaa4
 8010210:	02582ab7 	.word	0x02582ab7
 8010214:	000afe11 	.word	0x000afe11
 8010218:	c0000001 	.word	0xc0000001
 801021c:	2aaaaaab 	.word	0x2aaaaaab
 8010220:	0fffffe0 	.word	0x0fffffe0
 8010224:	01fffff8 	.word	0x01fffff8
 8010228:	001fffff 	.word	0x001fffff
 801022c:	40000100 	.word	0x40000100
  if (value == 0U)
 8010230:	9a03      	ldr	r2, [sp, #12]
 8010232:	e9dd be0f 	ldrd	fp, lr, [sp, #60]	@ 0x3c
 8010236:	2a00      	cmp	r2, #0
 8010238:	f000 82e7 	beq.w	801080a <arm_softmax_s8+0x97a>
  return __builtin_clz(value);
 801023c:	fab2 f382 	clz	r3, r2
        const int32_t shifted_scale = ONE_OVER1((sum << headroom) - (1 << 31));
 8010240:	fa02 f103 	lsl.w	r1, r2, r3
 8010244:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
        const int32_t bits_over_unit = ACCUM_BITS - headroom + 23;
 8010248:	f1c3 0323 	rsb	r3, r3, #35	@ 0x23
 801024c:	9310      	str	r3, [sp, #64]	@ 0x40
}

__STATIC_FORCEINLINE int32_t arm_nn_one_over_one_plus_x_for_x_in_0_1(int32_t val)
{
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 801024e:	f111 4300 	adds.w	r3, r1, #2147483648	@ 0x80000000
    const int64_t sum = (int64_t)val + (int64_t)Q31_MAX;
 8010252:	ea4f 71e1 	mov.w	r1, r1, asr #31
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8010256:	f141 0100 	adc.w	r1, r1, #0
 801025a:	085b      	lsrs	r3, r3, #1
 801025c:	ea43 73c1 	orr.w	r3, r3, r1, lsl #31
    mult = mult + (q63_t)m1 * m2;
 8010260:	4871      	ldr	r0, [pc, #452]	@ (8010428 <arm_softmax_s8+0x598>)
    const int32_t half_denominator = (int32_t)((sum + (sum >= 0 ? 1 : -1)) / 2L);
 8010262:	9303      	str	r3, [sp, #12]
 8010264:	1049      	asrs	r1, r1, #1
    mult = mult + (q63_t)m1 * m2;
 8010266:	425c      	negs	r4, r3
 8010268:	fb00 4401 	mla	r4, r0, r1, r4
 801026c:	fba3 2000 	umull	r2, r0, r3, r0
 8010270:	4420      	add	r0, r4
 8010272:	4c6e      	ldr	r4, [pc, #440]	@ (801042c <arm_softmax_s8+0x59c>)
 8010274:	1912      	adds	r2, r2, r4
    result = (int32_t) (mult / (1ll << 31));
 8010276:	f160 0000 	sbc.w	r0, r0, #0
 801027a:	2800      	cmp	r0, #0
 801027c:	da05      	bge.n	801028a <arm_softmax_s8+0x3fa>
 801027e:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010282:	1914      	adds	r4, r2, r4
 8010284:	4622      	mov	r2, r4
 8010286:	f140 0000 	adc.w	r0, r0, #0
 801028a:	0fd2      	lsrs	r2, r2, #31
 801028c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
    int32_t x = 1515870810 + MUL_SAT(half_denominator, -1010580540);
 8010290:	f102 325a 	add.w	r2, r2, #1515870810	@ 0x5a5a5a5a
    mult = mult + (q63_t)m1 * m2;
 8010294:	17d0      	asrs	r0, r2, #31
 8010296:	fb02 f601 	mul.w	r6, r2, r1
 801029a:	fb03 6600 	mla	r6, r3, r0, r6
 801029e:	fba2 0403 	umull	r0, r4, r2, r3
 80102a2:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 80102a6:	eb46 0404 	adc.w	r4, r6, r4
    result = (int32_t) (mult / (1ll << 31));
 80102aa:	0fc0      	lsrs	r0, r0, #31
 80102ac:	ea40 0044 	orr.w	r0, r0, r4, lsl #1

    const int32_t shift = (1 << 29);
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80102b0:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
 80102b4:	ea92 0f00 	teq	r2, r0
    mult = mult + (q63_t)m1 * m2;
 80102b8:	fb82 6700 	smull	r6, r7, r2, r0
    if ((m1 < 0) ^ (m2 < 0))
 80102bc:	f140 82ae 	bpl.w	801081c <arm_softmax_s8+0x98c>
        mult = 1 - mult;
 80102c0:	485a      	ldr	r0, [pc, #360]	@ (801042c <arm_softmax_s8+0x59c>)
 80102c2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 80102c6:	1980      	adds	r0, r0, r6
    result = (int32_t) (mult / (1ll << 31));
 80102c8:	eb44 0407 	adc.w	r4, r4, r7
 80102cc:	2c00      	cmp	r4, #0
 80102ce:	da05      	bge.n	80102dc <arm_softmax_s8+0x44c>
 80102d0:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80102d4:	1986      	adds	r6, r0, r6
 80102d6:	4630      	mov	r0, r6
 80102d8:	f144 0400 	adc.w	r4, r4, #0
 80102dc:	0fc0      	lsrs	r0, r0, #31
 80102de:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80102e2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    if ((m1 < 0) ^ (m2 < 0))
 80102e6:	9803      	ldr	r0, [sp, #12]
 80102e8:	4050      	eors	r0, r2
 80102ea:	0fc0      	lsrs	r0, r0, #31
    q63_t mult = 1 << 30;
 80102ec:	2800      	cmp	r0, #0
 80102ee:	484f      	ldr	r0, [pc, #316]	@ (801042c <arm_softmax_s8+0x59c>)
 80102f0:	bf0d      	iteet	eq
 80102f2:	f04f 4680 	moveq.w	r6, #1073741824	@ 0x40000000
 80102f6:	4606      	movne	r6, r0
 80102f8:	f04f 3cff 	movne.w	ip, #4294967295	@ 0xffffffff
 80102fc:	f04f 0c00 	moveq.w	ip, #0
    mult = mult + (q63_t)m1 * m2;
 8010300:	17d0      	asrs	r0, r2, #31
 8010302:	fb02 f401 	mul.w	r4, r2, r1
 8010306:	fb03 4400 	mla	r4, r3, r0, r4
 801030a:	fba2 0703 	umull	r0, r7, r2, r3
 801030e:	1980      	adds	r0, r0, r6
 8010310:	443c      	add	r4, r7
    result = (int32_t) (mult / (1ll << 31));
 8010312:	eb44 040c 	adc.w	r4, r4, ip
 8010316:	2c00      	cmp	r4, #0
 8010318:	da05      	bge.n	8010326 <arm_softmax_s8+0x496>
 801031a:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 801031e:	1986      	adds	r6, r0, r6
 8010320:	4630      	mov	r0, r6
 8010322:	f144 0400 	adc.w	r4, r4, #0
 8010326:	0fc0      	lsrs	r0, r0, #31
 8010328:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801032c:	f1c0 5000 	rsb	r0, r0, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
 8010330:	ea80 0402 	eor.w	r4, r0, r2
 8010334:	0fe4      	lsrs	r4, r4, #31
    q63_t mult = 1 << 30;
 8010336:	2c00      	cmp	r4, #0
 8010338:	4c3c      	ldr	r4, [pc, #240]	@ (801042c <arm_softmax_s8+0x59c>)
 801033a:	bf12      	itee	ne
 801033c:	f04f 36ff 	movne.w	r6, #4294967295	@ 0xffffffff
 8010340:	f04f 4480 	moveq.w	r4, #1073741824	@ 0x40000000
 8010344:	2600      	moveq	r6, #0
    result = (int32_t) (mult / (1ll << 31));
 8010346:	fbc2 4600 	smlal	r4, r6, r2, r0
 801034a:	2e00      	cmp	r6, #0
 801034c:	da05      	bge.n	801035a <arm_softmax_s8+0x4ca>
 801034e:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8010352:	1820      	adds	r0, r4, r0
 8010354:	4604      	mov	r4, r0
 8010356:	f146 0600 	adc.w	r6, r6, #0
 801035a:	0fe4      	lsrs	r4, r4, #31
 801035c:	ea44 0446 	orr.w	r4, r4, r6, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 8010360:	f1b4 5f00 	cmp.w	r4, #536870912	@ 0x20000000
 8010364:	f280 8247 	bge.w	80107f6 <arm_softmax_s8+0x966>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 8010368:	f1b4 4f60 	cmp.w	r4, #3758096384	@ 0xe0000000
 801036c:	f300 8269 	bgt.w	8010842 <arm_softmax_s8+0x9b2>
        mult = 1 - mult;
 8010370:	4c2e      	ldr	r4, [pc, #184]	@ (801042c <arm_softmax_s8+0x59c>)
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010372:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
        mult = 1 - mult;
 8010376:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 801037a:	fb02 f101 	mul.w	r1, r2, r1
 801037e:	17d0      	asrs	r0, r2, #31
 8010380:	fb03 1100 	mla	r1, r3, r0, r1
 8010384:	fba2 3703 	umull	r3, r7, r2, r3
 8010388:	191b      	adds	r3, r3, r4
 801038a:	4439      	add	r1, r7
    result = (int32_t) (mult / (1ll << 31));
 801038c:	eb41 0106 	adc.w	r1, r1, r6
 8010390:	2900      	cmp	r1, #0
 8010392:	da05      	bge.n	80103a0 <arm_softmax_s8+0x510>
 8010394:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010398:	191c      	adds	r4, r3, r4
 801039a:	4623      	mov	r3, r4
 801039c:	f141 0100 	adc.w	r1, r1, #0
 80103a0:	0fdb      	lsrs	r3, r3, #31
 80103a2:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
        mult = 1 - mult;
 80103a6:	4921      	ldr	r1, [pc, #132]	@ (801042c <arm_softmax_s8+0x59c>)
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80103a8:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
        mult = 1 - mult;
 80103ac:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 80103b0:	fb03 f000 	mul.w	r0, r3, r0
 80103b4:	17de      	asrs	r6, r3, #31
 80103b6:	fb02 0006 	mla	r0, r2, r6, r0
 80103ba:	fba3 3602 	umull	r3, r6, r3, r2
 80103be:	185b      	adds	r3, r3, r1
 80103c0:	4430      	add	r0, r6
    result = (int32_t) (mult / (1ll << 31));
 80103c2:	eb40 0004 	adc.w	r0, r0, r4
 80103c6:	2800      	cmp	r0, #0
 80103c8:	da05      	bge.n	80103d6 <arm_softmax_s8+0x546>
 80103ca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80103ce:	1859      	adds	r1, r3, r1
 80103d0:	460b      	mov	r3, r1
 80103d2:	f140 0000 	adc.w	r0, r0, #0
 80103d6:	0fdb      	lsrs	r3, r3, #31
 80103d8:	ea43 0340 	orr.w	r3, r3, r0, lsl #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80103dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80103e0:	f280 8201 	bge.w	80107e6 <arm_softmax_s8+0x956>
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80103e4:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 80103e8:	f300 825f 	bgt.w	80108aa <arm_softmax_s8+0xa1a>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80103ec:	f102 4300 	add.w	r3, r2, #2147483648	@ 0x80000000
    int32_t result = val << exp;
 80103f0:	0052      	lsls	r2, r2, #1
 80103f2:	9211      	str	r2, [sp, #68]	@ 0x44
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val < -thresh), Q31_MIN, result);
 80103f4:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80103f8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80103fa:	bfd8      	it	le
 80103fc:	f04f 4300 	movle.w	r3, #2147483648	@ 0x80000000
 8010400:	9311      	str	r3, [sp, #68]	@ 0x44
        for (col = 0; col < row_size; ++col)
 8010402:	f1be 0f00 	cmp.w	lr, #0
 8010406:	f340 81dc 	ble.w	80107c2 <arm_softmax_s8+0x932>
    const q31_t remainder_mask = (1 << exponent) - 1;
 801040a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
            diff = input[col] - max;
 801040c:	f8dd a048 	ldr.w	sl, [sp, #72]	@ 0x48
 8010410:	2301      	movs	r3, #1
 8010412:	4093      	lsls	r3, r2
 8010414:	3b01      	subs	r3, #1
 8010416:	9313      	str	r3, [sp, #76]	@ 0x4c
    q31_t threshold = remainder_mask >> 1;
 8010418:	105b      	asrs	r3, r3, #1
 801041a:	9314      	str	r3, [sp, #80]	@ 0x50
 801041c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801041e:	3b01      	subs	r3, #1
 8010420:	e9cd be15 	strd	fp, lr, [sp, #84]	@ 0x54
 8010424:	9303      	str	r3, [sp, #12]
 8010426:	e186      	b.n	8010736 <arm_softmax_s8+0x8a6>
 8010428:	c3c3c3c4 	.word	0xc3c3c3c4
 801042c:	c0000001 	.word	0xc0000001
            if (diff >= diff_min)
            {
                const int32_t res = DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 8010430:	9a22      	ldr	r2, [sp, #136]	@ 0x88
    if ((m1 < 0) ^ (m2 < 0))
 8010432:	9801      	ldr	r0, [sp, #4]
 8010434:	4093      	lsls	r3, r2
 8010436:	ea80 0203 	eor.w	r2, r0, r3
 801043a:	0fd2      	lsrs	r2, r2, #31
    q63_t mult = 1 << 30;
 801043c:	2a00      	cmp	r2, #0
 801043e:	4ac3      	ldr	r2, [pc, #780]	@ (801074c <arm_softmax_s8+0x8bc>)
 8010440:	bf0b      	itete	eq
 8010442:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 8010446:	4611      	movne	r1, r2
 8010448:	2200      	moveq	r2, #0
 801044a:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
    result = (int32_t) (mult / (1ll << 31));
 801044e:	fbc0 1203 	smlal	r1, r2, r0, r3
 8010452:	2a00      	cmp	r2, #0
 8010454:	da05      	bge.n	8010462 <arm_softmax_s8+0x5d2>
 8010456:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 801045a:	1808      	adds	r0, r1, r0
 801045c:	4601      	mov	r1, r0
 801045e:	f142 0200 	adc.w	r2, r2, #0
 8010462:	0fc9      	lsrs	r1, r1, #31
 8010464:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010468:	9a01      	ldr	r2, [sp, #4]
 801046a:	429a      	cmp	r2, r3
 801046c:	f000 8180 	beq.w	8010770 <arm_softmax_s8+0x8e0>
    const int32_t val_mod_minus_quarter = (val & ((1 << shift) - 1)) - (1 << shift);
 8010470:	f041 427f 	orr.w	r2, r1, #4278190080	@ 0xff000000
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 8010474:	0154      	lsls	r4, r2, #5
    const int32_t remainder             = val_mod_minus_quarter - val;
 8010476:	1a52      	subs	r2, r2, r1
    SELECT_IF_NON_ZERO(242)
 8010478:	f3c2 7c80 	ubfx	ip, r2, #30, #1
 801047c:	f10c 35ff 	add.w	r5, ip, #4294967295	@ 0xffffffff
    mask = MASK_IF_ZERO(val);
 8010480:	fab1 f181 	clz	r1, r1
 8010484:	0949      	lsrs	r1, r1, #5
 8010486:	950f      	str	r5, [sp, #60]	@ 0x3c
    SELECT_IF_NON_ZERO(242)
 8010488:	f1cc 0500 	rsb	r5, ip, #0
    SELECT_IF_NON_ZERO(1672461947)
 801048c:	f3c2 6700 	ubfx	r7, r2, #24, #1
    SELECT_IF_NON_ZERO(242)
 8010490:	950c      	str	r5, [sp, #48]	@ 0x30
 8010492:	1e4d      	subs	r5, r1, #1
    SELECT_IF_NON_ZERO(39332535)
 8010494:	f3c2 7000 	ubfx	r0, r2, #28, #1
 8010498:	950e      	str	r5, [sp, #56]	@ 0x38
 801049a:	1e7d      	subs	r5, r7, #1
    const int32_t x                     = (val_mod_minus_quarter << 5) + (1 << 28);
 801049c:	f104 5480 	add.w	r4, r4, #268435456	@ 0x10000000
    mult = mult + (q63_t)m1 * m2;
 80104a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80104a4:	2600      	movs	r6, #0
 80104a6:	9504      	str	r5, [sp, #16]
 80104a8:	1e45      	subs	r5, r0, #1
    SELECT_IF_NON_ZERO(39332535)
 80104aa:	4240      	negs	r0, r0
    result = (int32_t) (mult / (1ll << 31));
 80104ac:	fbc4 3604 	smlal	r3, r6, r4, r4
    SELECT_IF_NON_ZERO(39332535)
 80104b0:	900b      	str	r0, [sp, #44]	@ 0x2c
    SELECT_IF_NON_ZERO(790015084)
 80104b2:	f342 6080 	sbfx	r0, r2, #26, #1
 80104b6:	9005      	str	r0, [sp, #20]
    result = (int32_t) (mult / (1ll << 31));
 80104b8:	2e00      	cmp	r6, #0
    SELECT_IF_NON_ZERO(720401)
 80104ba:	f342 7040 	sbfx	r0, r2, #29, #1
 80104be:	950d      	str	r5, [sp, #52]	@ 0x34
    SELECT_IF_NON_ZERO(790015084)
 80104c0:	f3c2 6980 	ubfx	r9, r2, #26, #1
    SELECT_IF_NON_ZERO(720401)
 80104c4:	f3c2 7840 	ubfx	r8, r2, #29, #1
 80104c8:	9006      	str	r0, [sp, #24]
    SELECT_IF_NON_ZERO(290630308)
 80104ca:	f3c2 6cc0 	ubfx	ip, r2, #27, #1
    result = (int32_t) (mult / (1ll << 31));
 80104ce:	da05      	bge.n	80104dc <arm_softmax_s8+0x64c>
 80104d0:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80104d4:	1818      	adds	r0, r3, r0
 80104d6:	4603      	mov	r3, r0
 80104d8:	f146 0600 	adc.w	r6, r6, #0
 80104dc:	0fdb      	lsrs	r3, r3, #31
 80104de:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    mult = mult + (q63_t)m1 * m2;
 80104e2:	fba3 0e03 	umull	r0, lr, r3, r3
    result = (int32_t) (mult / (1ll << 31));
 80104e6:	17f6      	asrs	r6, r6, #31
    mult = mult + (q63_t)m1 * m2;
 80104e8:	f110 4080 	adds.w	r0, r0, #1073741824	@ 0x40000000
 80104ec:	fb03 fb06 	mul.w	fp, r3, r6
    result = (int32_t) (mult / (1ll << 31));
 80104f0:	eb4e 0e4b 	adc.w	lr, lr, fp, lsl #1
 80104f4:	f1be 0f00 	cmp.w	lr, #0
 80104f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80104fa:	da06      	bge.n	801050a <arm_softmax_s8+0x67a>
 80104fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8010500:	eb10 0b0b 	adds.w	fp, r0, fp
 8010504:	4658      	mov	r0, fp
 8010506:	f14e 0e00 	adc.w	lr, lr, #0
    mask = MASK_IF_ZERO(val);
 801050a:	4249      	negs	r1, r1
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 801050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8010510:	9107      	str	r1, [sp, #28]
 8010512:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
    mult = mult + (q63_t)m1 * m2;
 8010516:	fb04 f606 	mul.w	r6, r4, r6
    result = (int32_t) (mult / (1ll << 31));
 801051a:	0fc0      	lsrs	r0, r0, #31
 801051c:	9108      	str	r1, [sp, #32]
    mult = mult + (q63_t)m1 * m2;
 801051e:	17e1      	asrs	r1, r4, #31
 8010520:	fb03 6101 	mla	r1, r3, r1, r6
    result = (int32_t) (mult / (1ll << 31));
 8010524:	ea40 004e 	orr.w	r0, r0, lr, lsl #1
    if ((m1 < 0) ^ (m2 < 0))
 8010528:	ea83 0604 	eor.w	r6, r3, r4
    mult = mult + (q63_t)m1 * m2;
 801052c:	fba4 3e03 	umull	r3, lr, r4, r3
        threshold++;
 8010530:	ea5f 08a0 	movs.w	r8, r0, asr #2
    SELECT_IF_NON_ZERO(290630308)
 8010534:	f1cc 0500 	rsb	r5, ip, #0
    mult = mult + (q63_t)m1 * m2;
 8010538:	448e      	add	lr, r1
    SELECT_IF_NON_ZERO(1302514674)
 801053a:	f3c2 6140 	ubfx	r1, r2, #25, #1
 801053e:	f109 3bff 	add.w	fp, r9, #4294967295	@ 0xffffffff
    SELECT_IF_NON_ZERO(1672461947)
 8010542:	f1c7 0700 	rsb	r7, r7, #0
    if ((m1 < 0) ^ (m2 < 0))
 8010546:	ea4f 76d6 	mov.w	r6, r6, lsr #31
    SELECT_IF_NON_ZERO(1302514674)
 801054a:	f342 6240 	sbfx	r2, r2, #25, #1
 801054e:	f101 31ff 	add.w	r1, r1, #4294967295	@ 0xffffffff
    int32_t remainder = remainder_mask & dividend;
 8010552:	f000 0003 	and.w	r0, r0, #3
    SELECT_IF_NON_ZERO(290630308)
 8010556:	9509      	str	r5, [sp, #36]	@ 0x24
 8010558:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
        threshold++;
 801055c:	bf54      	ite	pl
 801055e:	f04f 0901 	movpl.w	r9, #1
 8010562:	f04f 0902 	movmi.w	r9, #2
    if (remainder > threshold)
 8010566:	4548      	cmp	r0, r9
        result++;
 8010568:	bfc8      	it	gt
 801056a:	f108 0801 	addgt.w	r8, r8, #1
    q63_t mult = 1 << 30;
 801056e:	4877      	ldr	r0, [pc, #476]	@ (801074c <arm_softmax_s8+0x8bc>)
 8010570:	2e00      	cmp	r6, #0
 8010572:	bf0a      	itet	eq
 8010574:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 8010578:	f04f 36ff 	movne.w	r6, #4294967295	@ 0xffffffff
 801057c:	2600      	moveq	r6, #0
    mult = mult + (q63_t)m1 * m2;
 801057e:	1818      	adds	r0, r3, r0
    result = (int32_t) (mult / (1ll << 31));
 8010580:	eb4e 0606 	adc.w	r6, lr, r6
 8010584:	2e00      	cmp	r6, #0
 8010586:	da05      	bge.n	8010594 <arm_softmax_s8+0x704>
 8010588:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801058c:	18c3      	adds	r3, r0, r3
 801058e:	4618      	mov	r0, r3
 8010590:	f146 0600 	adc.w	r6, r6, #0
 8010594:	0fc0      	lsrs	r0, r0, #31
 8010596:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 801059a:	4440      	add	r0, r8
    if ((m1 < 0) ^ (m2 < 0))
 801059c:	0fc3      	lsrs	r3, r0, #31
    q63_t mult = 1 << 30;
 801059e:	2b00      	cmp	r3, #0
    result = (int32_t) (mult / (1ll << 31));
 80105a0:	4d6b      	ldr	r5, [pc, #428]	@ (8010750 <arm_softmax_s8+0x8c0>)
    q63_t mult = 1 << 30;
 80105a2:	4b6a      	ldr	r3, [pc, #424]	@ (801074c <arm_softmax_s8+0x8bc>)
 80105a4:	bf12      	itee	ne
 80105a6:	f04f 36ff 	movne.w	r6, #4294967295	@ 0xffffffff
 80105aa:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 80105ae:	2600      	moveq	r6, #0
    result = (int32_t) (mult / (1ll << 31));
 80105b0:	fbc0 3605 	smlal	r3, r6, r0, r5
 80105b4:	2e00      	cmp	r6, #0
 80105b6:	da05      	bge.n	80105c4 <arm_softmax_s8+0x734>
 80105b8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80105bc:	1818      	adds	r0, r3, r0
 80105be:	4603      	mov	r3, r0
 80105c0:	f146 0600 	adc.w	r6, r6, #0
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 80105c4:	980a      	ldr	r0, [sp, #40]	@ 0x28
    result = (int32_t) (mult / (1ll << 31));
 80105c6:	0fdb      	lsrs	r3, r3, #31
 80105c8:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 80105cc:	4418      	add	r0, r3
    if (result < 0)
 80105ce:	1043      	asrs	r3, r0, #1
 80105d0:	d402      	bmi.n	80105d8 <arm_softmax_s8+0x748>
    if (remainder > threshold)
 80105d2:	07c0      	lsls	r0, r0, #31
        result++;
 80105d4:	bf48      	it	mi
 80105d6:	3301      	addmi	r3, #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 80105d8:	4423      	add	r3, r4
    if ((m1 < 0) ^ (m2 < 0))
 80105da:	0fd8      	lsrs	r0, r3, #31
    q63_t mult = 1 << 30;
 80105dc:	2800      	cmp	r0, #0
    result = (int32_t) (mult / (1ll << 31));
 80105de:	4d5d      	ldr	r5, [pc, #372]	@ (8010754 <arm_softmax_s8+0x8c4>)
    q63_t mult = 1 << 30;
 80105e0:	485a      	ldr	r0, [pc, #360]	@ (801074c <arm_softmax_s8+0x8bc>)
 80105e2:	bf12      	itee	ne
 80105e4:	f04f 34ff 	movne.w	r4, #4294967295	@ 0xffffffff
 80105e8:	f04f 4080 	moveq.w	r0, #1073741824	@ 0x40000000
 80105ec:	2400      	moveq	r4, #0
    result = (int32_t) (mult / (1ll << 31));
 80105ee:	fbc3 0405 	smlal	r0, r4, r3, r5
 80105f2:	2c00      	cmp	r4, #0
 80105f4:	da05      	bge.n	8010602 <arm_softmax_s8+0x772>
 80105f6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80105fa:	18c3      	adds	r3, r0, r3
 80105fc:	4618      	mov	r0, r3
 80105fe:	f144 0400 	adc.w	r4, r4, #0
 8010602:	0fc0      	lsrs	r0, r0, #31
 8010604:	ea40 0044 	orr.w	r0, r0, r4, lsl #1
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8010608:	f100 40e2 	add.w	r0, r0, #1895825408	@ 0x71000000
    SELECT_IF_NON_ZERO(1672461947)
 801060c:	9b04      	ldr	r3, [sp, #16]
    mult = mult + (q63_t)m1 * m2;
 801060e:	4d52      	ldr	r5, [pc, #328]	@ (8010758 <arm_softmax_s8+0x8c8>)
    int32_t result = 1895147668 + MUL_SAT(1895147668, x +
 8010610:	f5a0 2025 	sub.w	r0, r0, #675840	@ 0xa5000
 8010614:	f2a0 706c 	subw	r0, r0, #1900	@ 0x76c
    mult = mult + (q63_t)m1 * m2;
 8010618:	2400      	movs	r4, #0
    SELECT_IF_NON_ZERO(1672461947)
 801061a:	ea03 0e00 	and.w	lr, r3, r0
    mult = mult + (q63_t)m1 * m2;
 801061e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8010622:	461e      	mov	r6, r3
 8010624:	46a0      	mov	r8, r4
 8010626:	fbc0 6805 	smlal	r6, r8, r0, r5
    result = (int32_t) (mult / (1ll << 31));
 801062a:	0ff6      	lsrs	r6, r6, #31
 801062c:	ea46 0648 	orr.w	r6, r6, r8, lsl #1
    mult = mult + (q63_t)m1 * m2;
 8010630:	4d4a      	ldr	r5, [pc, #296]	@ (801075c <arm_softmax_s8+0x8cc>)
    SELECT_IF_NON_ZERO(1672461947)
 8010632:	4037      	ands	r7, r6
 8010634:	ea8e 0707 	eor.w	r7, lr, r7
    mult = mult + (q63_t)m1 * m2;
 8010638:	4618      	mov	r0, r3
 801063a:	4626      	mov	r6, r4
 801063c:	fbc7 0605 	smlal	r0, r6, r7, r5
    result = (int32_t) (mult / (1ll << 31));
 8010640:	0fc0      	lsrs	r0, r0, #31
 8010642:	ea40 0046 	orr.w	r0, r0, r6, lsl #1
    mult = mult + (q63_t)m1 * m2;
 8010646:	4d46      	ldr	r5, [pc, #280]	@ (8010760 <arm_softmax_s8+0x8d0>)
    SELECT_IF_NON_ZERO(1302514674)
 8010648:	4039      	ands	r1, r7
 801064a:	4002      	ands	r2, r0
 801064c:	404a      	eors	r2, r1
    mult = mult + (q63_t)m1 * m2;
 801064e:	4620      	mov	r0, r4
 8010650:	4619      	mov	r1, r3
 8010652:	fbc2 1005 	smlal	r1, r0, r2, r5
    SELECT_IF_NON_ZERO(790015084)
 8010656:	ea0b 0b02 	and.w	fp, fp, r2
    result = (int32_t) (mult / (1ll << 31));
 801065a:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(790015084)
 801065c:	9a05      	ldr	r2, [sp, #20]
    mult = mult + (q63_t)m1 * m2;
 801065e:	4d41      	ldr	r5, [pc, #260]	@ (8010764 <arm_softmax_s8+0x8d4>)
    result = (int32_t) (mult / (1ll << 31));
 8010660:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(790015084)
 8010664:	400a      	ands	r2, r1
 8010666:	ea8b 0202 	eor.w	r2, fp, r2
    mult = mult + (q63_t)m1 * m2;
 801066a:	4619      	mov	r1, r3
 801066c:	4620      	mov	r0, r4
 801066e:	fbc2 1005 	smlal	r1, r0, r2, r5
    SELECT_IF_NON_ZERO(290630308)
 8010672:	ea0c 0c02 	and.w	ip, ip, r2
    result = (int32_t) (mult / (1ll << 31));
 8010676:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(290630308)
 8010678:	9a09      	ldr	r2, [sp, #36]	@ 0x24
    mult = mult + (q63_t)m1 * m2;
 801067a:	4d3b      	ldr	r5, [pc, #236]	@ (8010768 <arm_softmax_s8+0x8d8>)
    result = (int32_t) (mult / (1ll << 31));
 801067c:	ea41 0140 	orr.w	r1, r1, r0, lsl #1
    SELECT_IF_NON_ZERO(290630308)
 8010680:	400a      	ands	r2, r1
 8010682:	ea8c 0202 	eor.w	r2, ip, r2
    mult = mult + (q63_t)m1 * m2;
 8010686:	4619      	mov	r1, r3
 8010688:	4626      	mov	r6, r4
    SELECT_IF_NON_ZERO(39332535)
 801068a:	980d      	ldr	r0, [sp, #52]	@ 0x34
    mult = mult + (q63_t)m1 * m2;
 801068c:	fbc2 1605 	smlal	r1, r6, r2, r5
    SELECT_IF_NON_ZERO(39332535)
 8010690:	4010      	ands	r0, r2
    result = (int32_t) (mult / (1ll << 31));
 8010692:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(39332535)
 8010694:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
    mult = mult + (q63_t)m1 * m2;
 8010696:	4d35      	ldr	r5, [pc, #212]	@ (801076c <arm_softmax_s8+0x8dc>)
    result = (int32_t) (mult / (1ll << 31));
 8010698:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    SELECT_IF_NON_ZERO(39332535)
 801069c:	400a      	ands	r2, r1
 801069e:	4042      	eors	r2, r0
    mult = mult + (q63_t)m1 * m2;
 80106a0:	4619      	mov	r1, r3
 80106a2:	4626      	mov	r6, r4
    SELECT_IF_NON_ZERO(720401)
 80106a4:	9808      	ldr	r0, [sp, #32]
    mult = mult + (q63_t)m1 * m2;
 80106a6:	fbc2 1605 	smlal	r1, r6, r2, r5
    SELECT_IF_NON_ZERO(720401)
 80106aa:	4010      	ands	r0, r2
    result = (int32_t) (mult / (1ll << 31));
 80106ac:	0fc9      	lsrs	r1, r1, #31
    SELECT_IF_NON_ZERO(720401)
 80106ae:	9a06      	ldr	r2, [sp, #24]
    result = (int32_t) (mult / (1ll << 31));
 80106b0:	ea41 0146 	orr.w	r1, r1, r6, lsl #1
    SELECT_IF_NON_ZERO(720401)
 80106b4:	400a      	ands	r2, r1
 80106b6:	4611      	mov	r1, r2
 80106b8:	4041      	eors	r1, r0
    SELECT_IF_NON_ZERO(242)
 80106ba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
    mult = mult + (q63_t)m1 * m2;
 80106bc:	20f2      	movs	r0, #242	@ 0xf2
 80106be:	fbc1 3400 	smlal	r3, r4, r1, r0
    SELECT_IF_NON_ZERO(242)
 80106c2:	400a      	ands	r2, r1
    result = (int32_t) (mult / (1ll << 31));
 80106c4:	0fdb      	lsrs	r3, r3, #31
    SELECT_IF_NON_ZERO(242)
 80106c6:	990c      	ldr	r1, [sp, #48]	@ 0x30
    if ((m1 < 0) ^ (m2 < 0))
 80106c8:	9811      	ldr	r0, [sp, #68]	@ 0x44
    result = (int32_t) (mult / (1ll << 31));
 80106ca:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    SELECT_IF_NON_ZERO(242)
 80106ce:	4019      	ands	r1, r3
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80106d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
    SELECT_IF_NON_ZERO(242)
 80106d2:	404a      	eors	r2, r1
    return SELECT_USING_MASK(mask, Q31_MAX, result);
 80106d4:	401a      	ands	r2, r3
 80106d6:	9b07      	ldr	r3, [sp, #28]
 80106d8:	405a      	eors	r2, r3
    if ((m1 < 0) ^ (m2 < 0))
 80106da:	ea80 0302 	eor.w	r3, r0, r2
 80106de:	0fdb      	lsrs	r3, r3, #31
    q63_t mult = 1 << 30;
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	4b1a      	ldr	r3, [pc, #104]	@ (801074c <arm_softmax_s8+0x8bc>)
 80106e4:	bf12      	itee	ne
 80106e6:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80106ea:	f04f 4380 	moveq.w	r3, #1073741824	@ 0x40000000
 80106ee:	2100      	moveq	r1, #0
    result = (int32_t) (mult / (1ll << 31));
 80106f0:	fbc2 3100 	smlal	r3, r1, r2, r0
 80106f4:	2900      	cmp	r1, #0
 80106f6:	da05      	bge.n	8010704 <arm_softmax_s8+0x874>
 80106f8:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 80106fc:	189a      	adds	r2, r3, r2
 80106fe:	4613      	mov	r3, r2
 8010700:	f141 0100 	adc.w	r1, r1, #0
    if (result < 0)
 8010704:	9a10      	ldr	r2, [sp, #64]	@ 0x40
    result = (int32_t) (mult / (1ll << 31));
 8010706:	0fdb      	lsrs	r3, r3, #31
 8010708:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    if (result < 0)
 801070c:	fa53 f202 	asrs.w	r2, r3, r2
 8010710:	d419      	bmi.n	8010746 <arm_softmax_s8+0x8b6>
    int32_t remainder = remainder_mask & dividend;
 8010712:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010714:	400b      	ands	r3, r1
    if (remainder > threshold)
 8010716:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8010718:	4299      	cmp	r1, r3
 801071a:	da4b      	bge.n	80107b4 <arm_softmax_s8+0x924>
 801071c:	f1a2 037f 	sub.w	r3, r2, #127	@ 0x7f
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8010720:	2b7e      	cmp	r3, #126	@ 0x7e
 8010722:	bfd4      	ite	le
 8010724:	b25b      	sxtble	r3, r3
 8010726:	237f      	movgt	r3, #127	@ 0x7f
 8010728:	9a03      	ldr	r2, [sp, #12]
 801072a:	f802 3f01 	strb.w	r3, [r2, #1]!
        for (col = 0; col < row_size; ++col)
 801072e:	9b00      	ldr	r3, [sp, #0]
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 8010730:	9203      	str	r2, [sp, #12]
        for (col = 0; col < row_size; ++col)
 8010732:	4553      	cmp	r3, sl
 8010734:	d043      	beq.n	80107be <arm_softmax_s8+0x92e>
            diff = input[col] - max;
 8010736:	9a02      	ldr	r2, [sp, #8]
 8010738:	f91a 3f01 	ldrsb.w	r3, [sl, #1]!
 801073c:	1a9b      	subs	r3, r3, r2
            if (diff >= diff_min)
 801073e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8010740:	429a      	cmp	r2, r3
 8010742:	f77f ae75 	ble.w	8010430 <arm_softmax_s8+0x5a0>
 8010746:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 801074a:	e7ed      	b.n	8010728 <arm_softmax_s8+0x898>
 801074c:	c0000001 	.word	0xc0000001
 8010750:	2aaaaaab 	.word	0x2aaaaaab
 8010754:	70f5a894 	.word	0x70f5a894
 8010758:	63afbe7b 	.word	0x63afbe7b
 801075c:	4da2cbf2 	.word	0x4da2cbf2
 8010760:	2f16ac6c 	.word	0x2f16ac6c
 8010764:	1152aaa4 	.word	0x1152aaa4
 8010768:	02582ab7 	.word	0x02582ab7
 801076c:	000afe11 	.word	0x000afe11
    if ((m1 == m2) && (m1 == (int32_t)Q31_MIN))
 8010770:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8010774:	f47f ae7c 	bne.w	8010470 <arm_softmax_s8+0x5e0>
 8010778:	2200      	movs	r2, #0
 801077a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801077e:	4b50      	ldr	r3, [pc, #320]	@ (80108c0 <arm_softmax_s8+0xa30>)
 8010780:	930a      	str	r3, [sp, #40]	@ 0x28
 8010782:	e9cd 210c 	strd	r2, r1, [sp, #48]	@ 0x30
 8010786:	4c4f      	ldr	r4, [pc, #316]	@ (80108c4 <arm_softmax_s8+0xa34>)
 8010788:	4b4f      	ldr	r3, [pc, #316]	@ (80108c8 <arm_softmax_s8+0xa38>)
 801078a:	f8df e14c 	ldr.w	lr, [pc, #332]	@ 80108d8 <arm_softmax_s8+0xa48>
 801078e:	9205      	str	r2, [sp, #20]
 8010790:	910f      	str	r1, [sp, #60]	@ 0x3c
 8010792:	910e      	str	r1, [sp, #56]	@ 0x38
 8010794:	9104      	str	r1, [sp, #16]
 8010796:	9206      	str	r2, [sp, #24]
 8010798:	920b      	str	r2, [sp, #44]	@ 0x2c
 801079a:	4610      	mov	r0, r2
 801079c:	f44f 3800 	mov.w	r8, #131072	@ 0x20000
 80107a0:	4616      	mov	r6, r2
 80107a2:	9207      	str	r2, [sp, #28]
 80107a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80107a6:	4617      	mov	r7, r2
 80107a8:	468b      	mov	fp, r1
 80107aa:	468c      	mov	ip, r1
 80107ac:	9108      	str	r1, [sp, #32]
    q31_t threshold = remainder_mask >> 1;
 80107ae:	f04f 0901 	mov.w	r9, #1
 80107b2:	e6d8      	b.n	8010566 <arm_softmax_s8+0x6d6>
                const int32_t res = DIV_POW2(MUL_SAT(shifted_scale, EXP_ON_NEG(MUL_SAT(diff * mask, mult))), bits_over_unit) - 128;
 80107b4:	f1a2 0380 	sub.w	r3, r2, #128	@ 0x80
                output[col] = (int8_t)CLAMP(res, (int32_t)127, (int32_t)-128);
 80107b8:	2a00      	cmp	r2, #0
 80107ba:	d1b1      	bne.n	8010720 <arm_softmax_s8+0x890>
 80107bc:	e7b4      	b.n	8010728 <arm_softmax_s8+0x898>
 80107be:	e9dd be15 	ldrd	fp, lr, [sp, #84]	@ 0x54
            {
                output[col] = -128;
            }
        }
        input += row_size;
        output += row_size;
 80107c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80107c4:	4473      	add	r3, lr
 80107c6:	9324      	str	r3, [sp, #144]	@ 0x90
    for (row_idx = 0; row_idx < num_rows; ++row_idx)
 80107c8:	9b00      	ldr	r3, [sp, #0]
 80107ca:	4473      	add	r3, lr
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80107d0:	4473      	add	r3, lr
 80107d2:	9312      	str	r3, [sp, #72]	@ 0x48
 80107d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80107d6:	f10b 0b01 	add.w	fp, fp, #1
 80107da:	455b      	cmp	r3, fp
 80107dc:	f47f ab6a 	bne.w	800feb4 <arm_softmax_s8+0x24>
    }

#endif
}
 80107e0:	b019      	add	sp, #100	@ 0x64
 80107e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80107e6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80107ea:	441a      	add	r2, r3
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80107ec:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80107f0:	db24      	blt.n	801083c <arm_softmax_s8+0x9ac>
 80107f2:	9311      	str	r3, [sp, #68]	@ 0x44
 80107f4:	e605      	b.n	8010402 <arm_softmax_s8+0x572>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80107f6:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
 80107fa:	3a01      	subs	r2, #1
    q63_t mult = 1 << 30;
 80107fc:	f04f 4480 	mov.w	r4, #1073741824	@ 0x40000000
 8010800:	2600      	movs	r6, #0
 8010802:	e5ba      	b.n	801037a <arm_softmax_s8+0x4ea>
        result++;
 8010804:	3201      	adds	r2, #1
 8010806:	f7ff bbe8 	b.w	800ffda <arm_softmax_s8+0x14a>
 801080a:	4611      	mov	r1, r2
 801080c:	2003      	movs	r0, #3
 801080e:	4f2f      	ldr	r7, [pc, #188]	@ (80108cc <arm_softmax_s8+0xa3c>)
 8010810:	9010      	str	r0, [sp, #64]	@ 0x40
 8010812:	f04f 4680 	mov.w	r6, #1073741824	@ 0x40000000
 8010816:	f04f 325a 	mov.w	r2, #1515870810	@ 0x5a5a5a5a
 801081a:	460b      	mov	r3, r1
    q63_t mult = 1 << 30;
 801081c:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8010820:	2400      	movs	r4, #0
 8010822:	e550      	b.n	80102c6 <arm_softmax_s8+0x436>
        for (col = 0; col < row_size; ++col)
 8010824:	f43f ab59 	beq.w	800feda <arm_softmax_s8+0x4a>
 8010828:	2300      	movs	r3, #0
 801082a:	2003      	movs	r0, #3
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801082c:	4a28      	ldr	r2, [pc, #160]	@ (80108d0 <arm_softmax_s8+0xa40>)
        mult = 1 - mult;
 801082e:	4e29      	ldr	r6, [pc, #164]	@ (80108d4 <arm_softmax_s8+0xa44>)
 8010830:	9010      	str	r0, [sp, #64]	@ 0x40
 8010832:	4619      	mov	r1, r3
 8010834:	9303      	str	r3, [sp, #12]
 8010836:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801083a:	e561      	b.n	8010300 <arm_softmax_s8+0x470>
    int32_t result = val << exp;
 801083c:	0053      	lsls	r3, r2, #1
 801083e:	9311      	str	r3, [sp, #68]	@ 0x44
 8010840:	e5df      	b.n	8010402 <arm_softmax_s8+0x572>
    if ((m1 < 0) ^ (m2 < 0))
 8010842:	9803      	ldr	r0, [sp, #12]
    q63_t mult = 1 << 30;
 8010844:	4f23      	ldr	r7, [pc, #140]	@ (80108d4 <arm_softmax_s8+0xa44>)
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 8010846:	eb02 0284 	add.w	r2, r2, r4, lsl #2
    if ((m1 < 0) ^ (m2 < 0))
 801084a:	4050      	eors	r0, r2
 801084c:	0fc0      	lsrs	r0, r0, #31
    q63_t mult = 1 << 30;
 801084e:	2800      	cmp	r0, #0
    mult = mult + (q63_t)m1 * m2;
 8010850:	fb02 f401 	mul.w	r4, r2, r1
 8010854:	ea4f 70e2 	mov.w	r0, r2, asr #31
 8010858:	fb03 4100 	mla	r1, r3, r0, r4
    q63_t mult = 1 << 30;
 801085c:	bf08      	it	eq
 801085e:	f04f 4780 	moveq.w	r7, #1073741824	@ 0x40000000
    mult = mult + (q63_t)m1 * m2;
 8010862:	fba2 6303 	umull	r6, r3, r2, r3
 8010866:	4419      	add	r1, r3
    q63_t mult = 1 << 30;
 8010868:	bf14      	ite	ne
 801086a:	f04f 34ff 	movne.w	r4, #4294967295	@ 0xffffffff
 801086e:	2400      	moveq	r4, #0
    mult = mult + (q63_t)m1 * m2;
 8010870:	19f3      	adds	r3, r6, r7
    result = (int32_t) (mult / (1ll << 31));
 8010872:	eb41 0404 	adc.w	r4, r1, r4
 8010876:	2c00      	cmp	r4, #0
 8010878:	da05      	bge.n	8010886 <arm_softmax_s8+0x9f6>
 801087a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801087e:	1859      	adds	r1, r3, r1
 8010880:	460b      	mov	r3, r1
 8010882:	f144 0400 	adc.w	r4, r4, #0
 8010886:	0fdb      	lsrs	r3, r3, #31
 8010888:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 801088c:	f1c3 5300 	rsb	r3, r3, #536870912	@ 0x20000000
    if ((m1 < 0) ^ (m2 < 0))
 8010890:	ea82 0103 	eor.w	r1, r2, r3
 8010894:	0fc9      	lsrs	r1, r1, #31
    q63_t mult = 1 << 30;
 8010896:	2900      	cmp	r1, #0
 8010898:	bf18      	it	ne
 801089a:	f04f 34ff 	movne.w	r4, #4294967295	@ 0xffffffff
 801089e:	490d      	ldr	r1, [pc, #52]	@ (80108d4 <arm_softmax_s8+0xa44>)
 80108a0:	bf04      	itt	eq
 80108a2:	2400      	moveq	r4, #0
 80108a4:	f04f 4180 	moveq.w	r1, #1073741824	@ 0x40000000
 80108a8:	e582      	b.n	80103b0 <arm_softmax_s8+0x520>
    x += MUL_POW2(MUL_SAT(x, shift - MUL_SAT(half_denominator, x)), 2);
 80108aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    int32_t result = val << exp;
 80108ae:	005a      	lsls	r2, r3, #1
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80108b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
    int32_t result = val << exp;
 80108b4:	9211      	str	r2, [sp, #68]	@ 0x44
    result = SELECT_USING_MASK(MASK_IF_NON_ZERO(val > thresh), Q31_MAX, result);
 80108b6:	f6ff ad9d 	blt.w	80103f4 <arm_softmax_s8+0x564>
 80108ba:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80108be:	e798      	b.n	80107f2 <arm_softmax_s8+0x962>
 80108c0:	01fffff8 	.word	0x01fffff8
 80108c4:	0fffffe0 	.word	0x0fffffe0
 80108c8:	40000100 	.word	0x40000100
 80108cc:	0b4b4b4b 	.word	0x0b4b4b4b
 80108d0:	b4b4b4b6 	.word	0xb4b4b4b6
 80108d4:	c0000001 	.word	0xc0000001
 80108d8:	001fffff 	.word	0x001fffff

080108dc <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode *op_code) {
 80108dc:	b508      	push	{r3, lr}
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 80108de:	b1a0      	cbz	r0, 801090a <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x2e>
    return data_ - ReadScalar<soffset_t>(data_);
 80108e0:	6802      	ldr	r2, [r0, #0]
 80108e2:	1a82      	subs	r2, r0, r2
 80108e4:	4603      	mov	r3, r0
 80108e6:	8811      	ldrh	r1, [r2, #0]
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 80108e8:	290a      	cmp	r1, #10
 80108ea:	d909      	bls.n	8010900 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x24>
 80108ec:	8950      	ldrh	r0, [r2, #10]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80108ee:	b100      	cbz	r0, 80108f2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x16>
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 80108f0:	5c18      	ldrb	r0, [r3, r0]
 80108f2:	8892      	ldrh	r2, [r2, #4]
 80108f4:	b11a      	cbz	r2, 80108fe <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x22>
    max(const _Tp& __a, const _Tp& __b)
 80108f6:	5c9b      	ldrb	r3, [r3, r2]
 80108f8:	4298      	cmp	r0, r3
 80108fa:	bf38      	it	cc
 80108fc:	4618      	movcc	r0, r3

  return std::max(
      op_code->builtin_code(),
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
}
 80108fe:	bd08      	pop	{r3, pc}
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8010900:	2904      	cmp	r1, #4
 8010902:	f04f 0000 	mov.w	r0, #0
 8010906:	d8f4      	bhi.n	80108f2 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x16>
 8010908:	bd08      	pop	{r3, pc}
  TFLITE_DCHECK(op_code != nullptr);
 801090a:	f000 fad7 	bl	8010ebc <abort>
 801090e:	bf00      	nop

08010910 <_ZdlPvj>:
 8010910:	f000 b824 	b.w	801095c <_ZdlPv>

08010914 <_ZdaPv>:
 8010914:	f000 b822 	b.w	801095c <_ZdlPv>

08010918 <__cxa_guard_acquire>:
 8010918:	6802      	ldr	r2, [r0, #0]
 801091a:	07d2      	lsls	r2, r2, #31
 801091c:	4603      	mov	r3, r0
 801091e:	d405      	bmi.n	801092c <__cxa_guard_acquire+0x14>
 8010920:	7842      	ldrb	r2, [r0, #1]
 8010922:	b102      	cbz	r2, 8010926 <__cxa_guard_acquire+0xe>
 8010924:	deff      	udf	#255	@ 0xff
 8010926:	2001      	movs	r0, #1
 8010928:	7058      	strb	r0, [r3, #1]
 801092a:	4770      	bx	lr
 801092c:	2000      	movs	r0, #0
 801092e:	4770      	bx	lr

08010930 <__cxa_guard_release>:
 8010930:	2301      	movs	r3, #1
 8010932:	6003      	str	r3, [r0, #0]
 8010934:	4770      	bx	lr

08010936 <_Znwj>:
 8010936:	2801      	cmp	r0, #1
 8010938:	bf38      	it	cc
 801093a:	2001      	movcc	r0, #1
 801093c:	b510      	push	{r4, lr}
 801093e:	4604      	mov	r4, r0
 8010940:	4620      	mov	r0, r4
 8010942:	f000 fdb1 	bl	80114a8 <malloc>
 8010946:	b100      	cbz	r0, 801094a <_Znwj+0x14>
 8010948:	bd10      	pop	{r4, pc}
 801094a:	f000 f809 	bl	8010960 <_ZSt15get_new_handlerv>
 801094e:	b908      	cbnz	r0, 8010954 <_Znwj+0x1e>
 8010950:	f000 fab4 	bl	8010ebc <abort>
 8010954:	4780      	blx	r0
 8010956:	e7f3      	b.n	8010940 <_Znwj+0xa>

08010958 <_Znaj>:
 8010958:	f7ff bfed 	b.w	8010936 <_Znwj>

0801095c <_ZdlPv>:
 801095c:	f000 bdac 	b.w	80114b8 <free>

08010960 <_ZSt15get_new_handlerv>:
 8010960:	4b02      	ldr	r3, [pc, #8]	@ (801096c <_ZSt15get_new_handlerv+0xc>)
 8010962:	6818      	ldr	r0, [r3, #0]
 8010964:	f3bf 8f5b 	dmb	ish
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop
 801096c:	2000e9d0 	.word	0x2000e9d0

08010970 <roundf>:
 8010970:	ee10 0a10 	vmov	r0, s0
 8010974:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8010978:	3a7f      	subs	r2, #127	@ 0x7f
 801097a:	2a16      	cmp	r2, #22
 801097c:	dc15      	bgt.n	80109aa <roundf+0x3a>
 801097e:	2a00      	cmp	r2, #0
 8010980:	da08      	bge.n	8010994 <roundf+0x24>
 8010982:	3201      	adds	r2, #1
 8010984:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8010988:	d101      	bne.n	801098e <roundf+0x1e>
 801098a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 801098e:	ee00 3a10 	vmov	s0, r3
 8010992:	4770      	bx	lr
 8010994:	4907      	ldr	r1, [pc, #28]	@ (80109b4 <roundf+0x44>)
 8010996:	4111      	asrs	r1, r2
 8010998:	4201      	tst	r1, r0
 801099a:	d0fa      	beq.n	8010992 <roundf+0x22>
 801099c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80109a0:	4113      	asrs	r3, r2
 80109a2:	4403      	add	r3, r0
 80109a4:	ea23 0301 	bic.w	r3, r3, r1
 80109a8:	e7f1      	b.n	801098e <roundf+0x1e>
 80109aa:	2a80      	cmp	r2, #128	@ 0x80
 80109ac:	d1f1      	bne.n	8010992 <roundf+0x22>
 80109ae:	ee30 0a00 	vadd.f32	s0, s0, s0
 80109b2:	4770      	bx	lr
 80109b4:	007fffff 	.word	0x007fffff

080109b8 <expf>:
 80109b8:	b508      	push	{r3, lr}
 80109ba:	ed2d 8b02 	vpush	{d8}
 80109be:	eef0 8a40 	vmov.f32	s17, s0
 80109c2:	f000 f86f 	bl	8010aa4 <__ieee754_expf>
 80109c6:	eeb0 8a40 	vmov.f32	s16, s0
 80109ca:	eeb0 0a68 	vmov.f32	s0, s17
 80109ce:	f000 f829 	bl	8010a24 <finitef>
 80109d2:	b160      	cbz	r0, 80109ee <expf+0x36>
 80109d4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8010a14 <expf+0x5c>
 80109d8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80109dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109e0:	dd0a      	ble.n	80109f8 <expf+0x40>
 80109e2:	f001 fa85 	bl	8011ef0 <__errno>
 80109e6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8010a18 <expf+0x60>
 80109ea:	2322      	movs	r3, #34	@ 0x22
 80109ec:	6003      	str	r3, [r0, #0]
 80109ee:	eeb0 0a48 	vmov.f32	s0, s16
 80109f2:	ecbd 8b02 	vpop	{d8}
 80109f6:	bd08      	pop	{r3, pc}
 80109f8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010a1c <expf+0x64>
 80109fc:	eef4 8ae7 	vcmpe.f32	s17, s15
 8010a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a04:	d5f3      	bpl.n	80109ee <expf+0x36>
 8010a06:	f001 fa73 	bl	8011ef0 <__errno>
 8010a0a:	2322      	movs	r3, #34	@ 0x22
 8010a0c:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8010a20 <expf+0x68>
 8010a10:	6003      	str	r3, [r0, #0]
 8010a12:	e7ec      	b.n	80109ee <expf+0x36>
 8010a14:	42b17217 	.word	0x42b17217
 8010a18:	7f800000 	.word	0x7f800000
 8010a1c:	c2cff1b5 	.word	0xc2cff1b5
 8010a20:	00000000 	.word	0x00000000

08010a24 <finitef>:
 8010a24:	ee10 3a10 	vmov	r3, s0
 8010a28:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8010a2c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8010a30:	bfac      	ite	ge
 8010a32:	2000      	movge	r0, #0
 8010a34:	2001      	movlt	r0, #1
 8010a36:	4770      	bx	lr

08010a38 <frexp>:
 8010a38:	b570      	push	{r4, r5, r6, lr}
 8010a3a:	2100      	movs	r1, #0
 8010a3c:	ec55 4b10 	vmov	r4, r5, d0
 8010a40:	6001      	str	r1, [r0, #0]
 8010a42:	4915      	ldr	r1, [pc, #84]	@ (8010a98 <frexp+0x60>)
 8010a44:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8010a48:	428a      	cmp	r2, r1
 8010a4a:	4606      	mov	r6, r0
 8010a4c:	462b      	mov	r3, r5
 8010a4e:	d820      	bhi.n	8010a92 <frexp+0x5a>
 8010a50:	4621      	mov	r1, r4
 8010a52:	4311      	orrs	r1, r2
 8010a54:	d01d      	beq.n	8010a92 <frexp+0x5a>
 8010a56:	4911      	ldr	r1, [pc, #68]	@ (8010a9c <frexp+0x64>)
 8010a58:	4029      	ands	r1, r5
 8010a5a:	b961      	cbnz	r1, 8010a76 <frexp+0x3e>
 8010a5c:	4b10      	ldr	r3, [pc, #64]	@ (8010aa0 <frexp+0x68>)
 8010a5e:	2200      	movs	r2, #0
 8010a60:	4620      	mov	r0, r4
 8010a62:	4629      	mov	r1, r5
 8010a64:	f7ef fdd2 	bl	800060c <__aeabi_dmul>
 8010a68:	460b      	mov	r3, r1
 8010a6a:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8010a6e:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8010a72:	4604      	mov	r4, r0
 8010a74:	6031      	str	r1, [r6, #0]
 8010a76:	6831      	ldr	r1, [r6, #0]
 8010a78:	1512      	asrs	r2, r2, #20
 8010a7a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010a7e:	f2a2 32fe 	subw	r2, r2, #1022	@ 0x3fe
 8010a82:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8010a86:	4411      	add	r1, r2
 8010a88:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8010a8c:	6031      	str	r1, [r6, #0]
 8010a8e:	f445 1500 	orr.w	r5, r5, #2097152	@ 0x200000
 8010a92:	ec45 4b10 	vmov	d0, r4, r5
 8010a96:	bd70      	pop	{r4, r5, r6, pc}
 8010a98:	7fefffff 	.word	0x7fefffff
 8010a9c:	7ff00000 	.word	0x7ff00000
 8010aa0:	43500000 	.word	0x43500000

08010aa4 <__ieee754_expf>:
 8010aa4:	ee10 2a10 	vmov	r2, s0
 8010aa8:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8010aac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010ab0:	d902      	bls.n	8010ab8 <__ieee754_expf+0x14>
 8010ab2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010ab6:	4770      	bx	lr
 8010ab8:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8010abc:	d106      	bne.n	8010acc <__ieee754_expf+0x28>
 8010abe:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8010bf8 <__ieee754_expf+0x154>
 8010ac2:	2900      	cmp	r1, #0
 8010ac4:	bf18      	it	ne
 8010ac6:	eeb0 0a67 	vmovne.f32	s0, s15
 8010aca:	4770      	bx	lr
 8010acc:	484b      	ldr	r0, [pc, #300]	@ (8010bfc <__ieee754_expf+0x158>)
 8010ace:	4282      	cmp	r2, r0
 8010ad0:	dd02      	ble.n	8010ad8 <__ieee754_expf+0x34>
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	f000 b9ec 	b.w	8010eb0 <__math_oflowf>
 8010ad8:	2a00      	cmp	r2, #0
 8010ada:	da05      	bge.n	8010ae8 <__ieee754_expf+0x44>
 8010adc:	4a48      	ldr	r2, [pc, #288]	@ (8010c00 <__ieee754_expf+0x15c>)
 8010ade:	4293      	cmp	r3, r2
 8010ae0:	d902      	bls.n	8010ae8 <__ieee754_expf+0x44>
 8010ae2:	2000      	movs	r0, #0
 8010ae4:	f000 b9de 	b.w	8010ea4 <__math_uflowf>
 8010ae8:	4a46      	ldr	r2, [pc, #280]	@ (8010c04 <__ieee754_expf+0x160>)
 8010aea:	4293      	cmp	r3, r2
 8010aec:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8010af0:	d952      	bls.n	8010b98 <__ieee754_expf+0xf4>
 8010af2:	4a45      	ldr	r2, [pc, #276]	@ (8010c08 <__ieee754_expf+0x164>)
 8010af4:	4293      	cmp	r3, r2
 8010af6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8010afa:	d834      	bhi.n	8010b66 <__ieee754_expf+0xc2>
 8010afc:	4b43      	ldr	r3, [pc, #268]	@ (8010c0c <__ieee754_expf+0x168>)
 8010afe:	4413      	add	r3, r2
 8010b00:	ed93 7a00 	vldr	s14, [r3]
 8010b04:	4b42      	ldr	r3, [pc, #264]	@ (8010c10 <__ieee754_expf+0x16c>)
 8010b06:	4413      	add	r3, r2
 8010b08:	ee30 7a47 	vsub.f32	s14, s0, s14
 8010b0c:	f1c1 0201 	rsb	r2, r1, #1
 8010b10:	edd3 7a00 	vldr	s15, [r3]
 8010b14:	1a52      	subs	r2, r2, r1
 8010b16:	ee37 0a67 	vsub.f32	s0, s14, s15
 8010b1a:	ee20 6a00 	vmul.f32	s12, s0, s0
 8010b1e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8010c14 <__ieee754_expf+0x170>
 8010b22:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8010c18 <__ieee754_expf+0x174>
 8010b26:	eee6 6a05 	vfma.f32	s13, s12, s10
 8010b2a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8010c1c <__ieee754_expf+0x178>
 8010b2e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8010b32:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010c20 <__ieee754_expf+0x17c>
 8010b36:	eee5 6a06 	vfma.f32	s13, s10, s12
 8010b3a:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8010c24 <__ieee754_expf+0x180>
 8010b3e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8010b42:	eef0 6a40 	vmov.f32	s13, s0
 8010b46:	eee5 6a46 	vfms.f32	s13, s10, s12
 8010b4a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8010b4e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8010b52:	bb92      	cbnz	r2, 8010bba <__ieee754_expf+0x116>
 8010b54:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8010b58:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8010b5c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010b60:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8010b64:	4770      	bx	lr
 8010b66:	4b30      	ldr	r3, [pc, #192]	@ (8010c28 <__ieee754_expf+0x184>)
 8010b68:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8010c2c <__ieee754_expf+0x188>
 8010b6c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8010c30 <__ieee754_expf+0x18c>
 8010b70:	4413      	add	r3, r2
 8010b72:	edd3 7a00 	vldr	s15, [r3]
 8010b76:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010b7a:	eeb0 7a40 	vmov.f32	s14, s0
 8010b7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010b82:	ee17 2a90 	vmov	r2, s15
 8010b86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010b8a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8010b8e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8010c34 <__ieee754_expf+0x190>
 8010b92:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8010b96:	e7be      	b.n	8010b16 <__ieee754_expf+0x72>
 8010b98:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8010b9c:	d20b      	bcs.n	8010bb6 <__ieee754_expf+0x112>
 8010b9e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8010c38 <__ieee754_expf+0x194>
 8010ba2:	ee70 6a26 	vadd.f32	s13, s0, s13
 8010ba6:	eef4 6ae5 	vcmpe.f32	s13, s11
 8010baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bae:	dd02      	ble.n	8010bb6 <__ieee754_expf+0x112>
 8010bb0:	ee30 0a25 	vadd.f32	s0, s0, s11
 8010bb4:	4770      	bx	lr
 8010bb6:	2200      	movs	r2, #0
 8010bb8:	e7af      	b.n	8010b1a <__ieee754_expf+0x76>
 8010bba:	ee36 6a66 	vsub.f32	s12, s12, s13
 8010bbe:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8010bc2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8010bc6:	bfb8      	it	lt
 8010bc8:	3264      	addlt	r2, #100	@ 0x64
 8010bca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010bce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010bd2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8010bd6:	ee17 3a90 	vmov	r3, s15
 8010bda:	bfab      	itete	ge
 8010bdc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8010be0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8010be4:	ee00 3a10 	vmovge	s0, r3
 8010be8:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8010c3c <__ieee754_expf+0x198>
 8010bec:	bfbc      	itt	lt
 8010bee:	ee00 3a10 	vmovlt	s0, r3
 8010bf2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8010bf6:	4770      	bx	lr
 8010bf8:	00000000 	.word	0x00000000
 8010bfc:	42b17217 	.word	0x42b17217
 8010c00:	42cff1b5 	.word	0x42cff1b5
 8010c04:	3eb17218 	.word	0x3eb17218
 8010c08:	3f851591 	.word	0x3f851591
 8010c0c:	08017328 	.word	0x08017328
 8010c10:	08017320 	.word	0x08017320
 8010c14:	3331bb4c 	.word	0x3331bb4c
 8010c18:	b5ddea0e 	.word	0xb5ddea0e
 8010c1c:	388ab355 	.word	0x388ab355
 8010c20:	bb360b61 	.word	0xbb360b61
 8010c24:	3e2aaaab 	.word	0x3e2aaaab
 8010c28:	08017330 	.word	0x08017330
 8010c2c:	3fb8aa3b 	.word	0x3fb8aa3b
 8010c30:	3f317180 	.word	0x3f317180
 8010c34:	3717f7d1 	.word	0x3717f7d1
 8010c38:	7149f2ca 	.word	0x7149f2ca
 8010c3c:	0d800000 	.word	0x0d800000

08010c40 <floor>:
 8010c40:	ec51 0b10 	vmov	r0, r1, d0
 8010c44:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8010c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c4c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8010c50:	2e13      	cmp	r6, #19
 8010c52:	460c      	mov	r4, r1
 8010c54:	4605      	mov	r5, r0
 8010c56:	4680      	mov	r8, r0
 8010c58:	dc34      	bgt.n	8010cc4 <floor+0x84>
 8010c5a:	2e00      	cmp	r6, #0
 8010c5c:	da17      	bge.n	8010c8e <floor+0x4e>
 8010c5e:	a332      	add	r3, pc, #200	@ (adr r3, 8010d28 <floor+0xe8>)
 8010c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c64:	f7ef fb1c 	bl	80002a0 <__adddf3>
 8010c68:	2200      	movs	r2, #0
 8010c6a:	2300      	movs	r3, #0
 8010c6c:	f7ef ff5e 	bl	8000b2c <__aeabi_dcmpgt>
 8010c70:	b150      	cbz	r0, 8010c88 <floor+0x48>
 8010c72:	2c00      	cmp	r4, #0
 8010c74:	da55      	bge.n	8010d22 <floor+0xe2>
 8010c76:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8010c7a:	432c      	orrs	r4, r5
 8010c7c:	2500      	movs	r5, #0
 8010c7e:	42ac      	cmp	r4, r5
 8010c80:	4c2b      	ldr	r4, [pc, #172]	@ (8010d30 <floor+0xf0>)
 8010c82:	bf08      	it	eq
 8010c84:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8010c88:	4621      	mov	r1, r4
 8010c8a:	4628      	mov	r0, r5
 8010c8c:	e023      	b.n	8010cd6 <floor+0x96>
 8010c8e:	4f29      	ldr	r7, [pc, #164]	@ (8010d34 <floor+0xf4>)
 8010c90:	4137      	asrs	r7, r6
 8010c92:	ea01 0307 	and.w	r3, r1, r7
 8010c96:	4303      	orrs	r3, r0
 8010c98:	d01d      	beq.n	8010cd6 <floor+0x96>
 8010c9a:	a323      	add	r3, pc, #140	@ (adr r3, 8010d28 <floor+0xe8>)
 8010c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ca0:	f7ef fafe 	bl	80002a0 <__adddf3>
 8010ca4:	2200      	movs	r2, #0
 8010ca6:	2300      	movs	r3, #0
 8010ca8:	f7ef ff40 	bl	8000b2c <__aeabi_dcmpgt>
 8010cac:	2800      	cmp	r0, #0
 8010cae:	d0eb      	beq.n	8010c88 <floor+0x48>
 8010cb0:	2c00      	cmp	r4, #0
 8010cb2:	bfbe      	ittt	lt
 8010cb4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8010cb8:	4133      	asrlt	r3, r6
 8010cba:	18e4      	addlt	r4, r4, r3
 8010cbc:	ea24 0407 	bic.w	r4, r4, r7
 8010cc0:	2500      	movs	r5, #0
 8010cc2:	e7e1      	b.n	8010c88 <floor+0x48>
 8010cc4:	2e33      	cmp	r6, #51	@ 0x33
 8010cc6:	dd0a      	ble.n	8010cde <floor+0x9e>
 8010cc8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8010ccc:	d103      	bne.n	8010cd6 <floor+0x96>
 8010cce:	4602      	mov	r2, r0
 8010cd0:	460b      	mov	r3, r1
 8010cd2:	f7ef fae5 	bl	80002a0 <__adddf3>
 8010cd6:	ec41 0b10 	vmov	d0, r0, r1
 8010cda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cde:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8010ce2:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8010ce6:	40df      	lsrs	r7, r3
 8010ce8:	4207      	tst	r7, r0
 8010cea:	d0f4      	beq.n	8010cd6 <floor+0x96>
 8010cec:	a30e      	add	r3, pc, #56	@ (adr r3, 8010d28 <floor+0xe8>)
 8010cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf2:	f7ef fad5 	bl	80002a0 <__adddf3>
 8010cf6:	2200      	movs	r2, #0
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	f7ef ff17 	bl	8000b2c <__aeabi_dcmpgt>
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d0c2      	beq.n	8010c88 <floor+0x48>
 8010d02:	2c00      	cmp	r4, #0
 8010d04:	da0a      	bge.n	8010d1c <floor+0xdc>
 8010d06:	2e14      	cmp	r6, #20
 8010d08:	d101      	bne.n	8010d0e <floor+0xce>
 8010d0a:	3401      	adds	r4, #1
 8010d0c:	e006      	b.n	8010d1c <floor+0xdc>
 8010d0e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8010d12:	2301      	movs	r3, #1
 8010d14:	40b3      	lsls	r3, r6
 8010d16:	441d      	add	r5, r3
 8010d18:	4545      	cmp	r5, r8
 8010d1a:	d3f6      	bcc.n	8010d0a <floor+0xca>
 8010d1c:	ea25 0507 	bic.w	r5, r5, r7
 8010d20:	e7b2      	b.n	8010c88 <floor+0x48>
 8010d22:	2500      	movs	r5, #0
 8010d24:	462c      	mov	r4, r5
 8010d26:	e7af      	b.n	8010c88 <floor+0x48>
 8010d28:	8800759c 	.word	0x8800759c
 8010d2c:	7e37e43c 	.word	0x7e37e43c
 8010d30:	bff00000 	.word	0xbff00000
 8010d34:	000fffff 	.word	0x000fffff

08010d38 <round>:
 8010d38:	ec51 0b10 	vmov	r0, r1, d0
 8010d3c:	b570      	push	{r4, r5, r6, lr}
 8010d3e:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8010d42:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 8010d46:	2a13      	cmp	r2, #19
 8010d48:	460b      	mov	r3, r1
 8010d4a:	4605      	mov	r5, r0
 8010d4c:	dc1b      	bgt.n	8010d86 <round+0x4e>
 8010d4e:	2a00      	cmp	r2, #0
 8010d50:	da0b      	bge.n	8010d6a <round+0x32>
 8010d52:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 8010d56:	3201      	adds	r2, #1
 8010d58:	bf04      	itt	eq
 8010d5a:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 8010d5e:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 8010d62:	2200      	movs	r2, #0
 8010d64:	4619      	mov	r1, r3
 8010d66:	4610      	mov	r0, r2
 8010d68:	e015      	b.n	8010d96 <round+0x5e>
 8010d6a:	4c15      	ldr	r4, [pc, #84]	@ (8010dc0 <round+0x88>)
 8010d6c:	4114      	asrs	r4, r2
 8010d6e:	ea04 0601 	and.w	r6, r4, r1
 8010d72:	4306      	orrs	r6, r0
 8010d74:	d00f      	beq.n	8010d96 <round+0x5e>
 8010d76:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8010d7a:	fa41 f202 	asr.w	r2, r1, r2
 8010d7e:	4413      	add	r3, r2
 8010d80:	ea23 0304 	bic.w	r3, r3, r4
 8010d84:	e7ed      	b.n	8010d62 <round+0x2a>
 8010d86:	2a33      	cmp	r2, #51	@ 0x33
 8010d88:	dd08      	ble.n	8010d9c <round+0x64>
 8010d8a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8010d8e:	d102      	bne.n	8010d96 <round+0x5e>
 8010d90:	4602      	mov	r2, r0
 8010d92:	f7ef fa85 	bl	80002a0 <__adddf3>
 8010d96:	ec41 0b10 	vmov	d0, r0, r1
 8010d9a:	bd70      	pop	{r4, r5, r6, pc}
 8010d9c:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 8010da0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8010da4:	40f4      	lsrs	r4, r6
 8010da6:	4204      	tst	r4, r0
 8010da8:	d0f5      	beq.n	8010d96 <round+0x5e>
 8010daa:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 8010dae:	2201      	movs	r2, #1
 8010db0:	408a      	lsls	r2, r1
 8010db2:	1952      	adds	r2, r2, r5
 8010db4:	bf28      	it	cs
 8010db6:	3301      	addcs	r3, #1
 8010db8:	ea22 0204 	bic.w	r2, r2, r4
 8010dbc:	e7d2      	b.n	8010d64 <round+0x2c>
 8010dbe:	bf00      	nop
 8010dc0:	000fffff 	.word	0x000fffff

08010dc4 <fmaxf>:
 8010dc4:	b508      	push	{r3, lr}
 8010dc6:	ed2d 8b02 	vpush	{d8}
 8010dca:	eeb0 8a40 	vmov.f32	s16, s0
 8010dce:	eef0 8a60 	vmov.f32	s17, s1
 8010dd2:	f000 f831 	bl	8010e38 <__fpclassifyf>
 8010dd6:	b930      	cbnz	r0, 8010de6 <fmaxf+0x22>
 8010dd8:	eeb0 8a68 	vmov.f32	s16, s17
 8010ddc:	eeb0 0a48 	vmov.f32	s0, s16
 8010de0:	ecbd 8b02 	vpop	{d8}
 8010de4:	bd08      	pop	{r3, pc}
 8010de6:	eeb0 0a68 	vmov.f32	s0, s17
 8010dea:	f000 f825 	bl	8010e38 <__fpclassifyf>
 8010dee:	2800      	cmp	r0, #0
 8010df0:	d0f4      	beq.n	8010ddc <fmaxf+0x18>
 8010df2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dfa:	dded      	ble.n	8010dd8 <fmaxf+0x14>
 8010dfc:	e7ee      	b.n	8010ddc <fmaxf+0x18>

08010dfe <fminf>:
 8010dfe:	b508      	push	{r3, lr}
 8010e00:	ed2d 8b02 	vpush	{d8}
 8010e04:	eeb0 8a40 	vmov.f32	s16, s0
 8010e08:	eef0 8a60 	vmov.f32	s17, s1
 8010e0c:	f000 f814 	bl	8010e38 <__fpclassifyf>
 8010e10:	b930      	cbnz	r0, 8010e20 <fminf+0x22>
 8010e12:	eeb0 8a68 	vmov.f32	s16, s17
 8010e16:	eeb0 0a48 	vmov.f32	s0, s16
 8010e1a:	ecbd 8b02 	vpop	{d8}
 8010e1e:	bd08      	pop	{r3, pc}
 8010e20:	eeb0 0a68 	vmov.f32	s0, s17
 8010e24:	f000 f808 	bl	8010e38 <__fpclassifyf>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	d0f4      	beq.n	8010e16 <fminf+0x18>
 8010e2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e34:	d5ed      	bpl.n	8010e12 <fminf+0x14>
 8010e36:	e7ee      	b.n	8010e16 <fminf+0x18>

08010e38 <__fpclassifyf>:
 8010e38:	ee10 3a10 	vmov	r3, s0
 8010e3c:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8010e40:	d00d      	beq.n	8010e5e <__fpclassifyf+0x26>
 8010e42:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8010e46:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8010e4a:	d30a      	bcc.n	8010e62 <__fpclassifyf+0x2a>
 8010e4c:	4b07      	ldr	r3, [pc, #28]	@ (8010e6c <__fpclassifyf+0x34>)
 8010e4e:	1e42      	subs	r2, r0, #1
 8010e50:	429a      	cmp	r2, r3
 8010e52:	d908      	bls.n	8010e66 <__fpclassifyf+0x2e>
 8010e54:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8010e58:	4258      	negs	r0, r3
 8010e5a:	4158      	adcs	r0, r3
 8010e5c:	4770      	bx	lr
 8010e5e:	2002      	movs	r0, #2
 8010e60:	4770      	bx	lr
 8010e62:	2004      	movs	r0, #4
 8010e64:	4770      	bx	lr
 8010e66:	2003      	movs	r0, #3
 8010e68:	4770      	bx	lr
 8010e6a:	bf00      	nop
 8010e6c:	007ffffe 	.word	0x007ffffe

08010e70 <with_errnof>:
 8010e70:	b510      	push	{r4, lr}
 8010e72:	ed2d 8b02 	vpush	{d8}
 8010e76:	eeb0 8a40 	vmov.f32	s16, s0
 8010e7a:	4604      	mov	r4, r0
 8010e7c:	f001 f838 	bl	8011ef0 <__errno>
 8010e80:	eeb0 0a48 	vmov.f32	s0, s16
 8010e84:	ecbd 8b02 	vpop	{d8}
 8010e88:	6004      	str	r4, [r0, #0]
 8010e8a:	bd10      	pop	{r4, pc}

08010e8c <xflowf>:
 8010e8c:	b130      	cbz	r0, 8010e9c <xflowf+0x10>
 8010e8e:	eef1 7a40 	vneg.f32	s15, s0
 8010e92:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010e96:	2022      	movs	r0, #34	@ 0x22
 8010e98:	f7ff bfea 	b.w	8010e70 <with_errnof>
 8010e9c:	eef0 7a40 	vmov.f32	s15, s0
 8010ea0:	e7f7      	b.n	8010e92 <xflowf+0x6>
	...

08010ea4 <__math_uflowf>:
 8010ea4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010eac <__math_uflowf+0x8>
 8010ea8:	f7ff bff0 	b.w	8010e8c <xflowf>
 8010eac:	10000000 	.word	0x10000000

08010eb0 <__math_oflowf>:
 8010eb0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010eb8 <__math_oflowf+0x8>
 8010eb4:	f7ff bfea 	b.w	8010e8c <xflowf>
 8010eb8:	70000000 	.word	0x70000000

08010ebc <abort>:
 8010ebc:	b508      	push	{r3, lr}
 8010ebe:	2006      	movs	r0, #6
 8010ec0:	f000 ffea 	bl	8011e98 <raise>
 8010ec4:	2001      	movs	r0, #1
 8010ec6:	f7f0 fee7 	bl	8001c98 <_exit>
	...

08010ecc <__assert_func>:
 8010ecc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ece:	4614      	mov	r4, r2
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	4b09      	ldr	r3, [pc, #36]	@ (8010ef8 <__assert_func+0x2c>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	4605      	mov	r5, r0
 8010ed8:	68d8      	ldr	r0, [r3, #12]
 8010eda:	b954      	cbnz	r4, 8010ef2 <__assert_func+0x26>
 8010edc:	4b07      	ldr	r3, [pc, #28]	@ (8010efc <__assert_func+0x30>)
 8010ede:	461c      	mov	r4, r3
 8010ee0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010ee4:	9100      	str	r1, [sp, #0]
 8010ee6:	462b      	mov	r3, r5
 8010ee8:	4905      	ldr	r1, [pc, #20]	@ (8010f00 <__assert_func+0x34>)
 8010eea:	f000 fded 	bl	8011ac8 <fiprintf>
 8010eee:	f7ff ffe5 	bl	8010ebc <abort>
 8010ef2:	4b04      	ldr	r3, [pc, #16]	@ (8010f04 <__assert_func+0x38>)
 8010ef4:	e7f4      	b.n	8010ee0 <__assert_func+0x14>
 8010ef6:	bf00      	nop
 8010ef8:	20006e8c 	.word	0x20006e8c
 8010efc:	08017373 	.word	0x08017373
 8010f00:	08017345 	.word	0x08017345
 8010f04:	08017338 	.word	0x08017338

08010f08 <atexit>:
 8010f08:	2300      	movs	r3, #0
 8010f0a:	4601      	mov	r1, r0
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f001 b82a 	b.w	8011f68 <__register_exitproc>

08010f14 <__cvt>:
 8010f14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f18:	ec57 6b10 	vmov	r6, r7, d0
 8010f1c:	2f00      	cmp	r7, #0
 8010f1e:	460c      	mov	r4, r1
 8010f20:	4619      	mov	r1, r3
 8010f22:	463b      	mov	r3, r7
 8010f24:	bfbb      	ittet	lt
 8010f26:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8010f2a:	461f      	movlt	r7, r3
 8010f2c:	2300      	movge	r3, #0
 8010f2e:	232d      	movlt	r3, #45	@ 0x2d
 8010f30:	700b      	strb	r3, [r1, #0]
 8010f32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010f34:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8010f38:	4691      	mov	r9, r2
 8010f3a:	f023 0820 	bic.w	r8, r3, #32
 8010f3e:	bfbc      	itt	lt
 8010f40:	4632      	movlt	r2, r6
 8010f42:	4616      	movlt	r6, r2
 8010f44:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010f48:	d005      	beq.n	8010f56 <__cvt+0x42>
 8010f4a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8010f4e:	d100      	bne.n	8010f52 <__cvt+0x3e>
 8010f50:	3401      	adds	r4, #1
 8010f52:	2102      	movs	r1, #2
 8010f54:	e000      	b.n	8010f58 <__cvt+0x44>
 8010f56:	2103      	movs	r1, #3
 8010f58:	ab03      	add	r3, sp, #12
 8010f5a:	9301      	str	r3, [sp, #4]
 8010f5c:	ab02      	add	r3, sp, #8
 8010f5e:	9300      	str	r3, [sp, #0]
 8010f60:	ec47 6b10 	vmov	d0, r6, r7
 8010f64:	4653      	mov	r3, sl
 8010f66:	4622      	mov	r2, r4
 8010f68:	f001 f8e2 	bl	8012130 <_dtoa_r>
 8010f6c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8010f70:	4605      	mov	r5, r0
 8010f72:	d119      	bne.n	8010fa8 <__cvt+0x94>
 8010f74:	f019 0f01 	tst.w	r9, #1
 8010f78:	d00e      	beq.n	8010f98 <__cvt+0x84>
 8010f7a:	eb00 0904 	add.w	r9, r0, r4
 8010f7e:	2200      	movs	r2, #0
 8010f80:	2300      	movs	r3, #0
 8010f82:	4630      	mov	r0, r6
 8010f84:	4639      	mov	r1, r7
 8010f86:	f7ef fda9 	bl	8000adc <__aeabi_dcmpeq>
 8010f8a:	b108      	cbz	r0, 8010f90 <__cvt+0x7c>
 8010f8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8010f90:	2230      	movs	r2, #48	@ 0x30
 8010f92:	9b03      	ldr	r3, [sp, #12]
 8010f94:	454b      	cmp	r3, r9
 8010f96:	d31e      	bcc.n	8010fd6 <__cvt+0xc2>
 8010f98:	9b03      	ldr	r3, [sp, #12]
 8010f9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010f9c:	1b5b      	subs	r3, r3, r5
 8010f9e:	4628      	mov	r0, r5
 8010fa0:	6013      	str	r3, [r2, #0]
 8010fa2:	b004      	add	sp, #16
 8010fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fa8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8010fac:	eb00 0904 	add.w	r9, r0, r4
 8010fb0:	d1e5      	bne.n	8010f7e <__cvt+0x6a>
 8010fb2:	7803      	ldrb	r3, [r0, #0]
 8010fb4:	2b30      	cmp	r3, #48	@ 0x30
 8010fb6:	d10a      	bne.n	8010fce <__cvt+0xba>
 8010fb8:	2200      	movs	r2, #0
 8010fba:	2300      	movs	r3, #0
 8010fbc:	4630      	mov	r0, r6
 8010fbe:	4639      	mov	r1, r7
 8010fc0:	f7ef fd8c 	bl	8000adc <__aeabi_dcmpeq>
 8010fc4:	b918      	cbnz	r0, 8010fce <__cvt+0xba>
 8010fc6:	f1c4 0401 	rsb	r4, r4, #1
 8010fca:	f8ca 4000 	str.w	r4, [sl]
 8010fce:	f8da 3000 	ldr.w	r3, [sl]
 8010fd2:	4499      	add	r9, r3
 8010fd4:	e7d3      	b.n	8010f7e <__cvt+0x6a>
 8010fd6:	1c59      	adds	r1, r3, #1
 8010fd8:	9103      	str	r1, [sp, #12]
 8010fda:	701a      	strb	r2, [r3, #0]
 8010fdc:	e7d9      	b.n	8010f92 <__cvt+0x7e>

08010fde <__exponent>:
 8010fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010fe0:	2900      	cmp	r1, #0
 8010fe2:	bfba      	itte	lt
 8010fe4:	4249      	neglt	r1, r1
 8010fe6:	232d      	movlt	r3, #45	@ 0x2d
 8010fe8:	232b      	movge	r3, #43	@ 0x2b
 8010fea:	2909      	cmp	r1, #9
 8010fec:	7002      	strb	r2, [r0, #0]
 8010fee:	7043      	strb	r3, [r0, #1]
 8010ff0:	dd29      	ble.n	8011046 <__exponent+0x68>
 8010ff2:	f10d 0307 	add.w	r3, sp, #7
 8010ff6:	461d      	mov	r5, r3
 8010ff8:	270a      	movs	r7, #10
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	fbb1 f6f7 	udiv	r6, r1, r7
 8011000:	fb07 1416 	mls	r4, r7, r6, r1
 8011004:	3430      	adds	r4, #48	@ 0x30
 8011006:	f802 4c01 	strb.w	r4, [r2, #-1]
 801100a:	460c      	mov	r4, r1
 801100c:	2c63      	cmp	r4, #99	@ 0x63
 801100e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8011012:	4631      	mov	r1, r6
 8011014:	dcf1      	bgt.n	8010ffa <__exponent+0x1c>
 8011016:	3130      	adds	r1, #48	@ 0x30
 8011018:	1e94      	subs	r4, r2, #2
 801101a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801101e:	1c41      	adds	r1, r0, #1
 8011020:	4623      	mov	r3, r4
 8011022:	42ab      	cmp	r3, r5
 8011024:	d30a      	bcc.n	801103c <__exponent+0x5e>
 8011026:	f10d 0309 	add.w	r3, sp, #9
 801102a:	1a9b      	subs	r3, r3, r2
 801102c:	42ac      	cmp	r4, r5
 801102e:	bf88      	it	hi
 8011030:	2300      	movhi	r3, #0
 8011032:	3302      	adds	r3, #2
 8011034:	4403      	add	r3, r0
 8011036:	1a18      	subs	r0, r3, r0
 8011038:	b003      	add	sp, #12
 801103a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801103c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011040:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011044:	e7ed      	b.n	8011022 <__exponent+0x44>
 8011046:	2330      	movs	r3, #48	@ 0x30
 8011048:	3130      	adds	r1, #48	@ 0x30
 801104a:	7083      	strb	r3, [r0, #2]
 801104c:	70c1      	strb	r1, [r0, #3]
 801104e:	1d03      	adds	r3, r0, #4
 8011050:	e7f1      	b.n	8011036 <__exponent+0x58>
	...

08011054 <_printf_float>:
 8011054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011058:	b08d      	sub	sp, #52	@ 0x34
 801105a:	460c      	mov	r4, r1
 801105c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011060:	4616      	mov	r6, r2
 8011062:	461f      	mov	r7, r3
 8011064:	4605      	mov	r5, r0
 8011066:	f000 fec9 	bl	8011dfc <_localeconv_r>
 801106a:	6803      	ldr	r3, [r0, #0]
 801106c:	9304      	str	r3, [sp, #16]
 801106e:	4618      	mov	r0, r3
 8011070:	f7ef f8fe 	bl	8000270 <strlen>
 8011074:	2300      	movs	r3, #0
 8011076:	930a      	str	r3, [sp, #40]	@ 0x28
 8011078:	f8d8 3000 	ldr.w	r3, [r8]
 801107c:	9005      	str	r0, [sp, #20]
 801107e:	3307      	adds	r3, #7
 8011080:	f023 0307 	bic.w	r3, r3, #7
 8011084:	f103 0208 	add.w	r2, r3, #8
 8011088:	f894 a018 	ldrb.w	sl, [r4, #24]
 801108c:	f8d4 b000 	ldr.w	fp, [r4]
 8011090:	f8c8 2000 	str.w	r2, [r8]
 8011094:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011098:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801109c:	9307      	str	r3, [sp, #28]
 801109e:	f8cd 8018 	str.w	r8, [sp, #24]
 80110a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80110a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80110aa:	4b9c      	ldr	r3, [pc, #624]	@ (801131c <_printf_float+0x2c8>)
 80110ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80110b0:	f7ef fd46 	bl	8000b40 <__aeabi_dcmpun>
 80110b4:	bb70      	cbnz	r0, 8011114 <_printf_float+0xc0>
 80110b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80110ba:	4b98      	ldr	r3, [pc, #608]	@ (801131c <_printf_float+0x2c8>)
 80110bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80110c0:	f7ef fd20 	bl	8000b04 <__aeabi_dcmple>
 80110c4:	bb30      	cbnz	r0, 8011114 <_printf_float+0xc0>
 80110c6:	2200      	movs	r2, #0
 80110c8:	2300      	movs	r3, #0
 80110ca:	4640      	mov	r0, r8
 80110cc:	4649      	mov	r1, r9
 80110ce:	f7ef fd0f 	bl	8000af0 <__aeabi_dcmplt>
 80110d2:	b110      	cbz	r0, 80110da <_printf_float+0x86>
 80110d4:	232d      	movs	r3, #45	@ 0x2d
 80110d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110da:	4a91      	ldr	r2, [pc, #580]	@ (8011320 <_printf_float+0x2cc>)
 80110dc:	4b91      	ldr	r3, [pc, #580]	@ (8011324 <_printf_float+0x2d0>)
 80110de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80110e2:	bf94      	ite	ls
 80110e4:	4690      	movls	r8, r2
 80110e6:	4698      	movhi	r8, r3
 80110e8:	2303      	movs	r3, #3
 80110ea:	6123      	str	r3, [r4, #16]
 80110ec:	f02b 0304 	bic.w	r3, fp, #4
 80110f0:	6023      	str	r3, [r4, #0]
 80110f2:	f04f 0900 	mov.w	r9, #0
 80110f6:	9700      	str	r7, [sp, #0]
 80110f8:	4633      	mov	r3, r6
 80110fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80110fc:	4621      	mov	r1, r4
 80110fe:	4628      	mov	r0, r5
 8011100:	f000 fa84 	bl	801160c <_printf_common>
 8011104:	3001      	adds	r0, #1
 8011106:	f040 808d 	bne.w	8011224 <_printf_float+0x1d0>
 801110a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801110e:	b00d      	add	sp, #52	@ 0x34
 8011110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011114:	4642      	mov	r2, r8
 8011116:	464b      	mov	r3, r9
 8011118:	4640      	mov	r0, r8
 801111a:	4649      	mov	r1, r9
 801111c:	f7ef fd10 	bl	8000b40 <__aeabi_dcmpun>
 8011120:	b140      	cbz	r0, 8011134 <_printf_float+0xe0>
 8011122:	464b      	mov	r3, r9
 8011124:	2b00      	cmp	r3, #0
 8011126:	bfbc      	itt	lt
 8011128:	232d      	movlt	r3, #45	@ 0x2d
 801112a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801112e:	4a7e      	ldr	r2, [pc, #504]	@ (8011328 <_printf_float+0x2d4>)
 8011130:	4b7e      	ldr	r3, [pc, #504]	@ (801132c <_printf_float+0x2d8>)
 8011132:	e7d4      	b.n	80110de <_printf_float+0x8a>
 8011134:	6863      	ldr	r3, [r4, #4]
 8011136:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801113a:	9206      	str	r2, [sp, #24]
 801113c:	1c5a      	adds	r2, r3, #1
 801113e:	d13b      	bne.n	80111b8 <_printf_float+0x164>
 8011140:	2306      	movs	r3, #6
 8011142:	6063      	str	r3, [r4, #4]
 8011144:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8011148:	2300      	movs	r3, #0
 801114a:	6022      	str	r2, [r4, #0]
 801114c:	9303      	str	r3, [sp, #12]
 801114e:	ab0a      	add	r3, sp, #40	@ 0x28
 8011150:	e9cd a301 	strd	sl, r3, [sp, #4]
 8011154:	ab09      	add	r3, sp, #36	@ 0x24
 8011156:	9300      	str	r3, [sp, #0]
 8011158:	6861      	ldr	r1, [r4, #4]
 801115a:	ec49 8b10 	vmov	d0, r8, r9
 801115e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011162:	4628      	mov	r0, r5
 8011164:	f7ff fed6 	bl	8010f14 <__cvt>
 8011168:	9b06      	ldr	r3, [sp, #24]
 801116a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801116c:	2b47      	cmp	r3, #71	@ 0x47
 801116e:	4680      	mov	r8, r0
 8011170:	d129      	bne.n	80111c6 <_printf_float+0x172>
 8011172:	1cc8      	adds	r0, r1, #3
 8011174:	db02      	blt.n	801117c <_printf_float+0x128>
 8011176:	6863      	ldr	r3, [r4, #4]
 8011178:	4299      	cmp	r1, r3
 801117a:	dd41      	ble.n	8011200 <_printf_float+0x1ac>
 801117c:	f1aa 0a02 	sub.w	sl, sl, #2
 8011180:	fa5f fa8a 	uxtb.w	sl, sl
 8011184:	3901      	subs	r1, #1
 8011186:	4652      	mov	r2, sl
 8011188:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801118c:	9109      	str	r1, [sp, #36]	@ 0x24
 801118e:	f7ff ff26 	bl	8010fde <__exponent>
 8011192:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011194:	1813      	adds	r3, r2, r0
 8011196:	2a01      	cmp	r2, #1
 8011198:	4681      	mov	r9, r0
 801119a:	6123      	str	r3, [r4, #16]
 801119c:	dc02      	bgt.n	80111a4 <_printf_float+0x150>
 801119e:	6822      	ldr	r2, [r4, #0]
 80111a0:	07d2      	lsls	r2, r2, #31
 80111a2:	d501      	bpl.n	80111a8 <_printf_float+0x154>
 80111a4:	3301      	adds	r3, #1
 80111a6:	6123      	str	r3, [r4, #16]
 80111a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80111ac:	2b00      	cmp	r3, #0
 80111ae:	d0a2      	beq.n	80110f6 <_printf_float+0xa2>
 80111b0:	232d      	movs	r3, #45	@ 0x2d
 80111b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80111b6:	e79e      	b.n	80110f6 <_printf_float+0xa2>
 80111b8:	9a06      	ldr	r2, [sp, #24]
 80111ba:	2a47      	cmp	r2, #71	@ 0x47
 80111bc:	d1c2      	bne.n	8011144 <_printf_float+0xf0>
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d1c0      	bne.n	8011144 <_printf_float+0xf0>
 80111c2:	2301      	movs	r3, #1
 80111c4:	e7bd      	b.n	8011142 <_printf_float+0xee>
 80111c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80111ca:	d9db      	bls.n	8011184 <_printf_float+0x130>
 80111cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80111d0:	d118      	bne.n	8011204 <_printf_float+0x1b0>
 80111d2:	2900      	cmp	r1, #0
 80111d4:	6863      	ldr	r3, [r4, #4]
 80111d6:	dd0b      	ble.n	80111f0 <_printf_float+0x19c>
 80111d8:	6121      	str	r1, [r4, #16]
 80111da:	b913      	cbnz	r3, 80111e2 <_printf_float+0x18e>
 80111dc:	6822      	ldr	r2, [r4, #0]
 80111de:	07d0      	lsls	r0, r2, #31
 80111e0:	d502      	bpl.n	80111e8 <_printf_float+0x194>
 80111e2:	3301      	adds	r3, #1
 80111e4:	440b      	add	r3, r1
 80111e6:	6123      	str	r3, [r4, #16]
 80111e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80111ea:	f04f 0900 	mov.w	r9, #0
 80111ee:	e7db      	b.n	80111a8 <_printf_float+0x154>
 80111f0:	b913      	cbnz	r3, 80111f8 <_printf_float+0x1a4>
 80111f2:	6822      	ldr	r2, [r4, #0]
 80111f4:	07d2      	lsls	r2, r2, #31
 80111f6:	d501      	bpl.n	80111fc <_printf_float+0x1a8>
 80111f8:	3302      	adds	r3, #2
 80111fa:	e7f4      	b.n	80111e6 <_printf_float+0x192>
 80111fc:	2301      	movs	r3, #1
 80111fe:	e7f2      	b.n	80111e6 <_printf_float+0x192>
 8011200:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8011204:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011206:	4299      	cmp	r1, r3
 8011208:	db05      	blt.n	8011216 <_printf_float+0x1c2>
 801120a:	6823      	ldr	r3, [r4, #0]
 801120c:	6121      	str	r1, [r4, #16]
 801120e:	07d8      	lsls	r0, r3, #31
 8011210:	d5ea      	bpl.n	80111e8 <_printf_float+0x194>
 8011212:	1c4b      	adds	r3, r1, #1
 8011214:	e7e7      	b.n	80111e6 <_printf_float+0x192>
 8011216:	2900      	cmp	r1, #0
 8011218:	bfd4      	ite	le
 801121a:	f1c1 0202 	rsble	r2, r1, #2
 801121e:	2201      	movgt	r2, #1
 8011220:	4413      	add	r3, r2
 8011222:	e7e0      	b.n	80111e6 <_printf_float+0x192>
 8011224:	6823      	ldr	r3, [r4, #0]
 8011226:	055a      	lsls	r2, r3, #21
 8011228:	d407      	bmi.n	801123a <_printf_float+0x1e6>
 801122a:	6923      	ldr	r3, [r4, #16]
 801122c:	4642      	mov	r2, r8
 801122e:	4631      	mov	r1, r6
 8011230:	4628      	mov	r0, r5
 8011232:	47b8      	blx	r7
 8011234:	3001      	adds	r0, #1
 8011236:	d12b      	bne.n	8011290 <_printf_float+0x23c>
 8011238:	e767      	b.n	801110a <_printf_float+0xb6>
 801123a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801123e:	f240 80dd 	bls.w	80113fc <_printf_float+0x3a8>
 8011242:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8011246:	2200      	movs	r2, #0
 8011248:	2300      	movs	r3, #0
 801124a:	f7ef fc47 	bl	8000adc <__aeabi_dcmpeq>
 801124e:	2800      	cmp	r0, #0
 8011250:	d033      	beq.n	80112ba <_printf_float+0x266>
 8011252:	4a37      	ldr	r2, [pc, #220]	@ (8011330 <_printf_float+0x2dc>)
 8011254:	2301      	movs	r3, #1
 8011256:	4631      	mov	r1, r6
 8011258:	4628      	mov	r0, r5
 801125a:	47b8      	blx	r7
 801125c:	3001      	adds	r0, #1
 801125e:	f43f af54 	beq.w	801110a <_printf_float+0xb6>
 8011262:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8011266:	4543      	cmp	r3, r8
 8011268:	db02      	blt.n	8011270 <_printf_float+0x21c>
 801126a:	6823      	ldr	r3, [r4, #0]
 801126c:	07d8      	lsls	r0, r3, #31
 801126e:	d50f      	bpl.n	8011290 <_printf_float+0x23c>
 8011270:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011274:	4631      	mov	r1, r6
 8011276:	4628      	mov	r0, r5
 8011278:	47b8      	blx	r7
 801127a:	3001      	adds	r0, #1
 801127c:	f43f af45 	beq.w	801110a <_printf_float+0xb6>
 8011280:	f04f 0900 	mov.w	r9, #0
 8011284:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8011288:	f104 0a1a 	add.w	sl, r4, #26
 801128c:	45c8      	cmp	r8, r9
 801128e:	dc09      	bgt.n	80112a4 <_printf_float+0x250>
 8011290:	6823      	ldr	r3, [r4, #0]
 8011292:	079b      	lsls	r3, r3, #30
 8011294:	f100 8103 	bmi.w	801149e <_printf_float+0x44a>
 8011298:	68e0      	ldr	r0, [r4, #12]
 801129a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801129c:	4298      	cmp	r0, r3
 801129e:	bfb8      	it	lt
 80112a0:	4618      	movlt	r0, r3
 80112a2:	e734      	b.n	801110e <_printf_float+0xba>
 80112a4:	2301      	movs	r3, #1
 80112a6:	4652      	mov	r2, sl
 80112a8:	4631      	mov	r1, r6
 80112aa:	4628      	mov	r0, r5
 80112ac:	47b8      	blx	r7
 80112ae:	3001      	adds	r0, #1
 80112b0:	f43f af2b 	beq.w	801110a <_printf_float+0xb6>
 80112b4:	f109 0901 	add.w	r9, r9, #1
 80112b8:	e7e8      	b.n	801128c <_printf_float+0x238>
 80112ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112bc:	2b00      	cmp	r3, #0
 80112be:	dc39      	bgt.n	8011334 <_printf_float+0x2e0>
 80112c0:	4a1b      	ldr	r2, [pc, #108]	@ (8011330 <_printf_float+0x2dc>)
 80112c2:	2301      	movs	r3, #1
 80112c4:	4631      	mov	r1, r6
 80112c6:	4628      	mov	r0, r5
 80112c8:	47b8      	blx	r7
 80112ca:	3001      	adds	r0, #1
 80112cc:	f43f af1d 	beq.w	801110a <_printf_float+0xb6>
 80112d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80112d4:	ea59 0303 	orrs.w	r3, r9, r3
 80112d8:	d102      	bne.n	80112e0 <_printf_float+0x28c>
 80112da:	6823      	ldr	r3, [r4, #0]
 80112dc:	07d9      	lsls	r1, r3, #31
 80112de:	d5d7      	bpl.n	8011290 <_printf_float+0x23c>
 80112e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80112e4:	4631      	mov	r1, r6
 80112e6:	4628      	mov	r0, r5
 80112e8:	47b8      	blx	r7
 80112ea:	3001      	adds	r0, #1
 80112ec:	f43f af0d 	beq.w	801110a <_printf_float+0xb6>
 80112f0:	f04f 0a00 	mov.w	sl, #0
 80112f4:	f104 0b1a 	add.w	fp, r4, #26
 80112f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80112fa:	425b      	negs	r3, r3
 80112fc:	4553      	cmp	r3, sl
 80112fe:	dc01      	bgt.n	8011304 <_printf_float+0x2b0>
 8011300:	464b      	mov	r3, r9
 8011302:	e793      	b.n	801122c <_printf_float+0x1d8>
 8011304:	2301      	movs	r3, #1
 8011306:	465a      	mov	r2, fp
 8011308:	4631      	mov	r1, r6
 801130a:	4628      	mov	r0, r5
 801130c:	47b8      	blx	r7
 801130e:	3001      	adds	r0, #1
 8011310:	f43f aefb 	beq.w	801110a <_printf_float+0xb6>
 8011314:	f10a 0a01 	add.w	sl, sl, #1
 8011318:	e7ee      	b.n	80112f8 <_printf_float+0x2a4>
 801131a:	bf00      	nop
 801131c:	7fefffff 	.word	0x7fefffff
 8011320:	08017374 	.word	0x08017374
 8011324:	08017378 	.word	0x08017378
 8011328:	0801737c 	.word	0x0801737c
 801132c:	08017380 	.word	0x08017380
 8011330:	08017384 	.word	0x08017384
 8011334:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011336:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801133a:	4553      	cmp	r3, sl
 801133c:	bfa8      	it	ge
 801133e:	4653      	movge	r3, sl
 8011340:	2b00      	cmp	r3, #0
 8011342:	4699      	mov	r9, r3
 8011344:	dc36      	bgt.n	80113b4 <_printf_float+0x360>
 8011346:	f04f 0b00 	mov.w	fp, #0
 801134a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801134e:	f104 021a 	add.w	r2, r4, #26
 8011352:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8011354:	9306      	str	r3, [sp, #24]
 8011356:	eba3 0309 	sub.w	r3, r3, r9
 801135a:	455b      	cmp	r3, fp
 801135c:	dc31      	bgt.n	80113c2 <_printf_float+0x36e>
 801135e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011360:	459a      	cmp	sl, r3
 8011362:	dc3a      	bgt.n	80113da <_printf_float+0x386>
 8011364:	6823      	ldr	r3, [r4, #0]
 8011366:	07da      	lsls	r2, r3, #31
 8011368:	d437      	bmi.n	80113da <_printf_float+0x386>
 801136a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801136c:	ebaa 0903 	sub.w	r9, sl, r3
 8011370:	9b06      	ldr	r3, [sp, #24]
 8011372:	ebaa 0303 	sub.w	r3, sl, r3
 8011376:	4599      	cmp	r9, r3
 8011378:	bfa8      	it	ge
 801137a:	4699      	movge	r9, r3
 801137c:	f1b9 0f00 	cmp.w	r9, #0
 8011380:	dc33      	bgt.n	80113ea <_printf_float+0x396>
 8011382:	f04f 0800 	mov.w	r8, #0
 8011386:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801138a:	f104 0b1a 	add.w	fp, r4, #26
 801138e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011390:	ebaa 0303 	sub.w	r3, sl, r3
 8011394:	eba3 0309 	sub.w	r3, r3, r9
 8011398:	4543      	cmp	r3, r8
 801139a:	f77f af79 	ble.w	8011290 <_printf_float+0x23c>
 801139e:	2301      	movs	r3, #1
 80113a0:	465a      	mov	r2, fp
 80113a2:	4631      	mov	r1, r6
 80113a4:	4628      	mov	r0, r5
 80113a6:	47b8      	blx	r7
 80113a8:	3001      	adds	r0, #1
 80113aa:	f43f aeae 	beq.w	801110a <_printf_float+0xb6>
 80113ae:	f108 0801 	add.w	r8, r8, #1
 80113b2:	e7ec      	b.n	801138e <_printf_float+0x33a>
 80113b4:	4642      	mov	r2, r8
 80113b6:	4631      	mov	r1, r6
 80113b8:	4628      	mov	r0, r5
 80113ba:	47b8      	blx	r7
 80113bc:	3001      	adds	r0, #1
 80113be:	d1c2      	bne.n	8011346 <_printf_float+0x2f2>
 80113c0:	e6a3      	b.n	801110a <_printf_float+0xb6>
 80113c2:	2301      	movs	r3, #1
 80113c4:	4631      	mov	r1, r6
 80113c6:	4628      	mov	r0, r5
 80113c8:	9206      	str	r2, [sp, #24]
 80113ca:	47b8      	blx	r7
 80113cc:	3001      	adds	r0, #1
 80113ce:	f43f ae9c 	beq.w	801110a <_printf_float+0xb6>
 80113d2:	9a06      	ldr	r2, [sp, #24]
 80113d4:	f10b 0b01 	add.w	fp, fp, #1
 80113d8:	e7bb      	b.n	8011352 <_printf_float+0x2fe>
 80113da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80113de:	4631      	mov	r1, r6
 80113e0:	4628      	mov	r0, r5
 80113e2:	47b8      	blx	r7
 80113e4:	3001      	adds	r0, #1
 80113e6:	d1c0      	bne.n	801136a <_printf_float+0x316>
 80113e8:	e68f      	b.n	801110a <_printf_float+0xb6>
 80113ea:	9a06      	ldr	r2, [sp, #24]
 80113ec:	464b      	mov	r3, r9
 80113ee:	4442      	add	r2, r8
 80113f0:	4631      	mov	r1, r6
 80113f2:	4628      	mov	r0, r5
 80113f4:	47b8      	blx	r7
 80113f6:	3001      	adds	r0, #1
 80113f8:	d1c3      	bne.n	8011382 <_printf_float+0x32e>
 80113fa:	e686      	b.n	801110a <_printf_float+0xb6>
 80113fc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8011400:	f1ba 0f01 	cmp.w	sl, #1
 8011404:	dc01      	bgt.n	801140a <_printf_float+0x3b6>
 8011406:	07db      	lsls	r3, r3, #31
 8011408:	d536      	bpl.n	8011478 <_printf_float+0x424>
 801140a:	2301      	movs	r3, #1
 801140c:	4642      	mov	r2, r8
 801140e:	4631      	mov	r1, r6
 8011410:	4628      	mov	r0, r5
 8011412:	47b8      	blx	r7
 8011414:	3001      	adds	r0, #1
 8011416:	f43f ae78 	beq.w	801110a <_printf_float+0xb6>
 801141a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801141e:	4631      	mov	r1, r6
 8011420:	4628      	mov	r0, r5
 8011422:	47b8      	blx	r7
 8011424:	3001      	adds	r0, #1
 8011426:	f43f ae70 	beq.w	801110a <_printf_float+0xb6>
 801142a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801142e:	2200      	movs	r2, #0
 8011430:	2300      	movs	r3, #0
 8011432:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8011436:	f7ef fb51 	bl	8000adc <__aeabi_dcmpeq>
 801143a:	b9c0      	cbnz	r0, 801146e <_printf_float+0x41a>
 801143c:	4653      	mov	r3, sl
 801143e:	f108 0201 	add.w	r2, r8, #1
 8011442:	4631      	mov	r1, r6
 8011444:	4628      	mov	r0, r5
 8011446:	47b8      	blx	r7
 8011448:	3001      	adds	r0, #1
 801144a:	d10c      	bne.n	8011466 <_printf_float+0x412>
 801144c:	e65d      	b.n	801110a <_printf_float+0xb6>
 801144e:	2301      	movs	r3, #1
 8011450:	465a      	mov	r2, fp
 8011452:	4631      	mov	r1, r6
 8011454:	4628      	mov	r0, r5
 8011456:	47b8      	blx	r7
 8011458:	3001      	adds	r0, #1
 801145a:	f43f ae56 	beq.w	801110a <_printf_float+0xb6>
 801145e:	f108 0801 	add.w	r8, r8, #1
 8011462:	45d0      	cmp	r8, sl
 8011464:	dbf3      	blt.n	801144e <_printf_float+0x3fa>
 8011466:	464b      	mov	r3, r9
 8011468:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801146c:	e6df      	b.n	801122e <_printf_float+0x1da>
 801146e:	f04f 0800 	mov.w	r8, #0
 8011472:	f104 0b1a 	add.w	fp, r4, #26
 8011476:	e7f4      	b.n	8011462 <_printf_float+0x40e>
 8011478:	2301      	movs	r3, #1
 801147a:	4642      	mov	r2, r8
 801147c:	e7e1      	b.n	8011442 <_printf_float+0x3ee>
 801147e:	2301      	movs	r3, #1
 8011480:	464a      	mov	r2, r9
 8011482:	4631      	mov	r1, r6
 8011484:	4628      	mov	r0, r5
 8011486:	47b8      	blx	r7
 8011488:	3001      	adds	r0, #1
 801148a:	f43f ae3e 	beq.w	801110a <_printf_float+0xb6>
 801148e:	f108 0801 	add.w	r8, r8, #1
 8011492:	68e3      	ldr	r3, [r4, #12]
 8011494:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011496:	1a5b      	subs	r3, r3, r1
 8011498:	4543      	cmp	r3, r8
 801149a:	dcf0      	bgt.n	801147e <_printf_float+0x42a>
 801149c:	e6fc      	b.n	8011298 <_printf_float+0x244>
 801149e:	f04f 0800 	mov.w	r8, #0
 80114a2:	f104 0919 	add.w	r9, r4, #25
 80114a6:	e7f4      	b.n	8011492 <_printf_float+0x43e>

080114a8 <malloc>:
 80114a8:	4b02      	ldr	r3, [pc, #8]	@ (80114b4 <malloc+0xc>)
 80114aa:	4601      	mov	r1, r0
 80114ac:	6818      	ldr	r0, [r3, #0]
 80114ae:	f000 b82d 	b.w	801150c <_malloc_r>
 80114b2:	bf00      	nop
 80114b4:	20006e8c 	.word	0x20006e8c

080114b8 <free>:
 80114b8:	4b02      	ldr	r3, [pc, #8]	@ (80114c4 <free+0xc>)
 80114ba:	4601      	mov	r1, r0
 80114bc:	6818      	ldr	r0, [r3, #0]
 80114be:	f001 bbfb 	b.w	8012cb8 <_free_r>
 80114c2:	bf00      	nop
 80114c4:	20006e8c 	.word	0x20006e8c

080114c8 <sbrk_aligned>:
 80114c8:	b570      	push	{r4, r5, r6, lr}
 80114ca:	4e0f      	ldr	r6, [pc, #60]	@ (8011508 <sbrk_aligned+0x40>)
 80114cc:	460c      	mov	r4, r1
 80114ce:	6831      	ldr	r1, [r6, #0]
 80114d0:	4605      	mov	r5, r0
 80114d2:	b911      	cbnz	r1, 80114da <sbrk_aligned+0x12>
 80114d4:	f000 fcfc 	bl	8011ed0 <_sbrk_r>
 80114d8:	6030      	str	r0, [r6, #0]
 80114da:	4621      	mov	r1, r4
 80114dc:	4628      	mov	r0, r5
 80114de:	f000 fcf7 	bl	8011ed0 <_sbrk_r>
 80114e2:	1c43      	adds	r3, r0, #1
 80114e4:	d103      	bne.n	80114ee <sbrk_aligned+0x26>
 80114e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80114ea:	4620      	mov	r0, r4
 80114ec:	bd70      	pop	{r4, r5, r6, pc}
 80114ee:	1cc4      	adds	r4, r0, #3
 80114f0:	f024 0403 	bic.w	r4, r4, #3
 80114f4:	42a0      	cmp	r0, r4
 80114f6:	d0f8      	beq.n	80114ea <sbrk_aligned+0x22>
 80114f8:	1a21      	subs	r1, r4, r0
 80114fa:	4628      	mov	r0, r5
 80114fc:	f000 fce8 	bl	8011ed0 <_sbrk_r>
 8011500:	3001      	adds	r0, #1
 8011502:	d1f2      	bne.n	80114ea <sbrk_aligned+0x22>
 8011504:	e7ef      	b.n	80114e6 <sbrk_aligned+0x1e>
 8011506:	bf00      	nop
 8011508:	2000e9d4 	.word	0x2000e9d4

0801150c <_malloc_r>:
 801150c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011510:	1ccd      	adds	r5, r1, #3
 8011512:	f025 0503 	bic.w	r5, r5, #3
 8011516:	3508      	adds	r5, #8
 8011518:	2d0c      	cmp	r5, #12
 801151a:	bf38      	it	cc
 801151c:	250c      	movcc	r5, #12
 801151e:	2d00      	cmp	r5, #0
 8011520:	4606      	mov	r6, r0
 8011522:	db01      	blt.n	8011528 <_malloc_r+0x1c>
 8011524:	42a9      	cmp	r1, r5
 8011526:	d904      	bls.n	8011532 <_malloc_r+0x26>
 8011528:	230c      	movs	r3, #12
 801152a:	6033      	str	r3, [r6, #0]
 801152c:	2000      	movs	r0, #0
 801152e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011532:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8011608 <_malloc_r+0xfc>
 8011536:	f000 f9f7 	bl	8011928 <__malloc_lock>
 801153a:	f8d8 3000 	ldr.w	r3, [r8]
 801153e:	461c      	mov	r4, r3
 8011540:	bb44      	cbnz	r4, 8011594 <_malloc_r+0x88>
 8011542:	4629      	mov	r1, r5
 8011544:	4630      	mov	r0, r6
 8011546:	f7ff ffbf 	bl	80114c8 <sbrk_aligned>
 801154a:	1c43      	adds	r3, r0, #1
 801154c:	4604      	mov	r4, r0
 801154e:	d158      	bne.n	8011602 <_malloc_r+0xf6>
 8011550:	f8d8 4000 	ldr.w	r4, [r8]
 8011554:	4627      	mov	r7, r4
 8011556:	2f00      	cmp	r7, #0
 8011558:	d143      	bne.n	80115e2 <_malloc_r+0xd6>
 801155a:	2c00      	cmp	r4, #0
 801155c:	d04b      	beq.n	80115f6 <_malloc_r+0xea>
 801155e:	6823      	ldr	r3, [r4, #0]
 8011560:	4639      	mov	r1, r7
 8011562:	4630      	mov	r0, r6
 8011564:	eb04 0903 	add.w	r9, r4, r3
 8011568:	f000 fcb2 	bl	8011ed0 <_sbrk_r>
 801156c:	4581      	cmp	r9, r0
 801156e:	d142      	bne.n	80115f6 <_malloc_r+0xea>
 8011570:	6821      	ldr	r1, [r4, #0]
 8011572:	1a6d      	subs	r5, r5, r1
 8011574:	4629      	mov	r1, r5
 8011576:	4630      	mov	r0, r6
 8011578:	f7ff ffa6 	bl	80114c8 <sbrk_aligned>
 801157c:	3001      	adds	r0, #1
 801157e:	d03a      	beq.n	80115f6 <_malloc_r+0xea>
 8011580:	6823      	ldr	r3, [r4, #0]
 8011582:	442b      	add	r3, r5
 8011584:	6023      	str	r3, [r4, #0]
 8011586:	f8d8 3000 	ldr.w	r3, [r8]
 801158a:	685a      	ldr	r2, [r3, #4]
 801158c:	bb62      	cbnz	r2, 80115e8 <_malloc_r+0xdc>
 801158e:	f8c8 7000 	str.w	r7, [r8]
 8011592:	e00f      	b.n	80115b4 <_malloc_r+0xa8>
 8011594:	6822      	ldr	r2, [r4, #0]
 8011596:	1b52      	subs	r2, r2, r5
 8011598:	d420      	bmi.n	80115dc <_malloc_r+0xd0>
 801159a:	2a0b      	cmp	r2, #11
 801159c:	d917      	bls.n	80115ce <_malloc_r+0xc2>
 801159e:	1961      	adds	r1, r4, r5
 80115a0:	42a3      	cmp	r3, r4
 80115a2:	6025      	str	r5, [r4, #0]
 80115a4:	bf18      	it	ne
 80115a6:	6059      	strne	r1, [r3, #4]
 80115a8:	6863      	ldr	r3, [r4, #4]
 80115aa:	bf08      	it	eq
 80115ac:	f8c8 1000 	streq.w	r1, [r8]
 80115b0:	5162      	str	r2, [r4, r5]
 80115b2:	604b      	str	r3, [r1, #4]
 80115b4:	4630      	mov	r0, r6
 80115b6:	f000 f9bd 	bl	8011934 <__malloc_unlock>
 80115ba:	f104 000b 	add.w	r0, r4, #11
 80115be:	1d23      	adds	r3, r4, #4
 80115c0:	f020 0007 	bic.w	r0, r0, #7
 80115c4:	1ac2      	subs	r2, r0, r3
 80115c6:	bf1c      	itt	ne
 80115c8:	1a1b      	subne	r3, r3, r0
 80115ca:	50a3      	strne	r3, [r4, r2]
 80115cc:	e7af      	b.n	801152e <_malloc_r+0x22>
 80115ce:	6862      	ldr	r2, [r4, #4]
 80115d0:	42a3      	cmp	r3, r4
 80115d2:	bf0c      	ite	eq
 80115d4:	f8c8 2000 	streq.w	r2, [r8]
 80115d8:	605a      	strne	r2, [r3, #4]
 80115da:	e7eb      	b.n	80115b4 <_malloc_r+0xa8>
 80115dc:	4623      	mov	r3, r4
 80115de:	6864      	ldr	r4, [r4, #4]
 80115e0:	e7ae      	b.n	8011540 <_malloc_r+0x34>
 80115e2:	463c      	mov	r4, r7
 80115e4:	687f      	ldr	r7, [r7, #4]
 80115e6:	e7b6      	b.n	8011556 <_malloc_r+0x4a>
 80115e8:	461a      	mov	r2, r3
 80115ea:	685b      	ldr	r3, [r3, #4]
 80115ec:	42a3      	cmp	r3, r4
 80115ee:	d1fb      	bne.n	80115e8 <_malloc_r+0xdc>
 80115f0:	2300      	movs	r3, #0
 80115f2:	6053      	str	r3, [r2, #4]
 80115f4:	e7de      	b.n	80115b4 <_malloc_r+0xa8>
 80115f6:	230c      	movs	r3, #12
 80115f8:	6033      	str	r3, [r6, #0]
 80115fa:	4630      	mov	r0, r6
 80115fc:	f000 f99a 	bl	8011934 <__malloc_unlock>
 8011600:	e794      	b.n	801152c <_malloc_r+0x20>
 8011602:	6005      	str	r5, [r0, #0]
 8011604:	e7d6      	b.n	80115b4 <_malloc_r+0xa8>
 8011606:	bf00      	nop
 8011608:	2000e9d8 	.word	0x2000e9d8

0801160c <_printf_common>:
 801160c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011610:	4616      	mov	r6, r2
 8011612:	4698      	mov	r8, r3
 8011614:	688a      	ldr	r2, [r1, #8]
 8011616:	690b      	ldr	r3, [r1, #16]
 8011618:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801161c:	4293      	cmp	r3, r2
 801161e:	bfb8      	it	lt
 8011620:	4613      	movlt	r3, r2
 8011622:	6033      	str	r3, [r6, #0]
 8011624:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8011628:	4607      	mov	r7, r0
 801162a:	460c      	mov	r4, r1
 801162c:	b10a      	cbz	r2, 8011632 <_printf_common+0x26>
 801162e:	3301      	adds	r3, #1
 8011630:	6033      	str	r3, [r6, #0]
 8011632:	6823      	ldr	r3, [r4, #0]
 8011634:	0699      	lsls	r1, r3, #26
 8011636:	bf42      	ittt	mi
 8011638:	6833      	ldrmi	r3, [r6, #0]
 801163a:	3302      	addmi	r3, #2
 801163c:	6033      	strmi	r3, [r6, #0]
 801163e:	6825      	ldr	r5, [r4, #0]
 8011640:	f015 0506 	ands.w	r5, r5, #6
 8011644:	d106      	bne.n	8011654 <_printf_common+0x48>
 8011646:	f104 0a19 	add.w	sl, r4, #25
 801164a:	68e3      	ldr	r3, [r4, #12]
 801164c:	6832      	ldr	r2, [r6, #0]
 801164e:	1a9b      	subs	r3, r3, r2
 8011650:	42ab      	cmp	r3, r5
 8011652:	dc26      	bgt.n	80116a2 <_printf_common+0x96>
 8011654:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8011658:	6822      	ldr	r2, [r4, #0]
 801165a:	3b00      	subs	r3, #0
 801165c:	bf18      	it	ne
 801165e:	2301      	movne	r3, #1
 8011660:	0692      	lsls	r2, r2, #26
 8011662:	d42b      	bmi.n	80116bc <_printf_common+0xb0>
 8011664:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8011668:	4641      	mov	r1, r8
 801166a:	4638      	mov	r0, r7
 801166c:	47c8      	blx	r9
 801166e:	3001      	adds	r0, #1
 8011670:	d01e      	beq.n	80116b0 <_printf_common+0xa4>
 8011672:	6823      	ldr	r3, [r4, #0]
 8011674:	6922      	ldr	r2, [r4, #16]
 8011676:	f003 0306 	and.w	r3, r3, #6
 801167a:	2b04      	cmp	r3, #4
 801167c:	bf02      	ittt	eq
 801167e:	68e5      	ldreq	r5, [r4, #12]
 8011680:	6833      	ldreq	r3, [r6, #0]
 8011682:	1aed      	subeq	r5, r5, r3
 8011684:	68a3      	ldr	r3, [r4, #8]
 8011686:	bf0c      	ite	eq
 8011688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801168c:	2500      	movne	r5, #0
 801168e:	4293      	cmp	r3, r2
 8011690:	bfc4      	itt	gt
 8011692:	1a9b      	subgt	r3, r3, r2
 8011694:	18ed      	addgt	r5, r5, r3
 8011696:	2600      	movs	r6, #0
 8011698:	341a      	adds	r4, #26
 801169a:	42b5      	cmp	r5, r6
 801169c:	d11a      	bne.n	80116d4 <_printf_common+0xc8>
 801169e:	2000      	movs	r0, #0
 80116a0:	e008      	b.n	80116b4 <_printf_common+0xa8>
 80116a2:	2301      	movs	r3, #1
 80116a4:	4652      	mov	r2, sl
 80116a6:	4641      	mov	r1, r8
 80116a8:	4638      	mov	r0, r7
 80116aa:	47c8      	blx	r9
 80116ac:	3001      	adds	r0, #1
 80116ae:	d103      	bne.n	80116b8 <_printf_common+0xac>
 80116b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80116b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116b8:	3501      	adds	r5, #1
 80116ba:	e7c6      	b.n	801164a <_printf_common+0x3e>
 80116bc:	18e1      	adds	r1, r4, r3
 80116be:	1c5a      	adds	r2, r3, #1
 80116c0:	2030      	movs	r0, #48	@ 0x30
 80116c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80116c6:	4422      	add	r2, r4
 80116c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80116cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80116d0:	3302      	adds	r3, #2
 80116d2:	e7c7      	b.n	8011664 <_printf_common+0x58>
 80116d4:	2301      	movs	r3, #1
 80116d6:	4622      	mov	r2, r4
 80116d8:	4641      	mov	r1, r8
 80116da:	4638      	mov	r0, r7
 80116dc:	47c8      	blx	r9
 80116de:	3001      	adds	r0, #1
 80116e0:	d0e6      	beq.n	80116b0 <_printf_common+0xa4>
 80116e2:	3601      	adds	r6, #1
 80116e4:	e7d9      	b.n	801169a <_printf_common+0x8e>
	...

080116e8 <_printf_i>:
 80116e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80116ec:	7e0f      	ldrb	r7, [r1, #24]
 80116ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80116f0:	2f78      	cmp	r7, #120	@ 0x78
 80116f2:	4691      	mov	r9, r2
 80116f4:	4680      	mov	r8, r0
 80116f6:	460c      	mov	r4, r1
 80116f8:	469a      	mov	sl, r3
 80116fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80116fe:	d807      	bhi.n	8011710 <_printf_i+0x28>
 8011700:	2f62      	cmp	r7, #98	@ 0x62
 8011702:	d80a      	bhi.n	801171a <_printf_i+0x32>
 8011704:	2f00      	cmp	r7, #0
 8011706:	f000 80d2 	beq.w	80118ae <_printf_i+0x1c6>
 801170a:	2f58      	cmp	r7, #88	@ 0x58
 801170c:	f000 80b9 	beq.w	8011882 <_printf_i+0x19a>
 8011710:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011714:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011718:	e03a      	b.n	8011790 <_printf_i+0xa8>
 801171a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801171e:	2b15      	cmp	r3, #21
 8011720:	d8f6      	bhi.n	8011710 <_printf_i+0x28>
 8011722:	a101      	add	r1, pc, #4	@ (adr r1, 8011728 <_printf_i+0x40>)
 8011724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011728:	08011781 	.word	0x08011781
 801172c:	08011795 	.word	0x08011795
 8011730:	08011711 	.word	0x08011711
 8011734:	08011711 	.word	0x08011711
 8011738:	08011711 	.word	0x08011711
 801173c:	08011711 	.word	0x08011711
 8011740:	08011795 	.word	0x08011795
 8011744:	08011711 	.word	0x08011711
 8011748:	08011711 	.word	0x08011711
 801174c:	08011711 	.word	0x08011711
 8011750:	08011711 	.word	0x08011711
 8011754:	08011895 	.word	0x08011895
 8011758:	080117bf 	.word	0x080117bf
 801175c:	0801184f 	.word	0x0801184f
 8011760:	08011711 	.word	0x08011711
 8011764:	08011711 	.word	0x08011711
 8011768:	080118b7 	.word	0x080118b7
 801176c:	08011711 	.word	0x08011711
 8011770:	080117bf 	.word	0x080117bf
 8011774:	08011711 	.word	0x08011711
 8011778:	08011711 	.word	0x08011711
 801177c:	08011857 	.word	0x08011857
 8011780:	6833      	ldr	r3, [r6, #0]
 8011782:	1d1a      	adds	r2, r3, #4
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	6032      	str	r2, [r6, #0]
 8011788:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801178c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011790:	2301      	movs	r3, #1
 8011792:	e09d      	b.n	80118d0 <_printf_i+0x1e8>
 8011794:	6833      	ldr	r3, [r6, #0]
 8011796:	6820      	ldr	r0, [r4, #0]
 8011798:	1d19      	adds	r1, r3, #4
 801179a:	6031      	str	r1, [r6, #0]
 801179c:	0606      	lsls	r6, r0, #24
 801179e:	d501      	bpl.n	80117a4 <_printf_i+0xbc>
 80117a0:	681d      	ldr	r5, [r3, #0]
 80117a2:	e003      	b.n	80117ac <_printf_i+0xc4>
 80117a4:	0645      	lsls	r5, r0, #25
 80117a6:	d5fb      	bpl.n	80117a0 <_printf_i+0xb8>
 80117a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80117ac:	2d00      	cmp	r5, #0
 80117ae:	da03      	bge.n	80117b8 <_printf_i+0xd0>
 80117b0:	232d      	movs	r3, #45	@ 0x2d
 80117b2:	426d      	negs	r5, r5
 80117b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80117b8:	4859      	ldr	r0, [pc, #356]	@ (8011920 <_printf_i+0x238>)
 80117ba:	230a      	movs	r3, #10
 80117bc:	e011      	b.n	80117e2 <_printf_i+0xfa>
 80117be:	6821      	ldr	r1, [r4, #0]
 80117c0:	6833      	ldr	r3, [r6, #0]
 80117c2:	0608      	lsls	r0, r1, #24
 80117c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80117c8:	d402      	bmi.n	80117d0 <_printf_i+0xe8>
 80117ca:	0649      	lsls	r1, r1, #25
 80117cc:	bf48      	it	mi
 80117ce:	b2ad      	uxthmi	r5, r5
 80117d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80117d2:	4853      	ldr	r0, [pc, #332]	@ (8011920 <_printf_i+0x238>)
 80117d4:	6033      	str	r3, [r6, #0]
 80117d6:	bf14      	ite	ne
 80117d8:	230a      	movne	r3, #10
 80117da:	2308      	moveq	r3, #8
 80117dc:	2100      	movs	r1, #0
 80117de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80117e2:	6866      	ldr	r6, [r4, #4]
 80117e4:	60a6      	str	r6, [r4, #8]
 80117e6:	2e00      	cmp	r6, #0
 80117e8:	bfa2      	ittt	ge
 80117ea:	6821      	ldrge	r1, [r4, #0]
 80117ec:	f021 0104 	bicge.w	r1, r1, #4
 80117f0:	6021      	strge	r1, [r4, #0]
 80117f2:	b90d      	cbnz	r5, 80117f8 <_printf_i+0x110>
 80117f4:	2e00      	cmp	r6, #0
 80117f6:	d04b      	beq.n	8011890 <_printf_i+0x1a8>
 80117f8:	4616      	mov	r6, r2
 80117fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80117fe:	fb03 5711 	mls	r7, r3, r1, r5
 8011802:	5dc7      	ldrb	r7, [r0, r7]
 8011804:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011808:	462f      	mov	r7, r5
 801180a:	42bb      	cmp	r3, r7
 801180c:	460d      	mov	r5, r1
 801180e:	d9f4      	bls.n	80117fa <_printf_i+0x112>
 8011810:	2b08      	cmp	r3, #8
 8011812:	d10b      	bne.n	801182c <_printf_i+0x144>
 8011814:	6823      	ldr	r3, [r4, #0]
 8011816:	07df      	lsls	r7, r3, #31
 8011818:	d508      	bpl.n	801182c <_printf_i+0x144>
 801181a:	6923      	ldr	r3, [r4, #16]
 801181c:	6861      	ldr	r1, [r4, #4]
 801181e:	4299      	cmp	r1, r3
 8011820:	bfde      	ittt	le
 8011822:	2330      	movle	r3, #48	@ 0x30
 8011824:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011828:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801182c:	1b92      	subs	r2, r2, r6
 801182e:	6122      	str	r2, [r4, #16]
 8011830:	f8cd a000 	str.w	sl, [sp]
 8011834:	464b      	mov	r3, r9
 8011836:	aa03      	add	r2, sp, #12
 8011838:	4621      	mov	r1, r4
 801183a:	4640      	mov	r0, r8
 801183c:	f7ff fee6 	bl	801160c <_printf_common>
 8011840:	3001      	adds	r0, #1
 8011842:	d14a      	bne.n	80118da <_printf_i+0x1f2>
 8011844:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011848:	b004      	add	sp, #16
 801184a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801184e:	6823      	ldr	r3, [r4, #0]
 8011850:	f043 0320 	orr.w	r3, r3, #32
 8011854:	6023      	str	r3, [r4, #0]
 8011856:	4833      	ldr	r0, [pc, #204]	@ (8011924 <_printf_i+0x23c>)
 8011858:	2778      	movs	r7, #120	@ 0x78
 801185a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801185e:	6823      	ldr	r3, [r4, #0]
 8011860:	6831      	ldr	r1, [r6, #0]
 8011862:	061f      	lsls	r7, r3, #24
 8011864:	f851 5b04 	ldr.w	r5, [r1], #4
 8011868:	d402      	bmi.n	8011870 <_printf_i+0x188>
 801186a:	065f      	lsls	r7, r3, #25
 801186c:	bf48      	it	mi
 801186e:	b2ad      	uxthmi	r5, r5
 8011870:	6031      	str	r1, [r6, #0]
 8011872:	07d9      	lsls	r1, r3, #31
 8011874:	bf44      	itt	mi
 8011876:	f043 0320 	orrmi.w	r3, r3, #32
 801187a:	6023      	strmi	r3, [r4, #0]
 801187c:	b11d      	cbz	r5, 8011886 <_printf_i+0x19e>
 801187e:	2310      	movs	r3, #16
 8011880:	e7ac      	b.n	80117dc <_printf_i+0xf4>
 8011882:	4827      	ldr	r0, [pc, #156]	@ (8011920 <_printf_i+0x238>)
 8011884:	e7e9      	b.n	801185a <_printf_i+0x172>
 8011886:	6823      	ldr	r3, [r4, #0]
 8011888:	f023 0320 	bic.w	r3, r3, #32
 801188c:	6023      	str	r3, [r4, #0]
 801188e:	e7f6      	b.n	801187e <_printf_i+0x196>
 8011890:	4616      	mov	r6, r2
 8011892:	e7bd      	b.n	8011810 <_printf_i+0x128>
 8011894:	6833      	ldr	r3, [r6, #0]
 8011896:	6825      	ldr	r5, [r4, #0]
 8011898:	6961      	ldr	r1, [r4, #20]
 801189a:	1d18      	adds	r0, r3, #4
 801189c:	6030      	str	r0, [r6, #0]
 801189e:	062e      	lsls	r6, r5, #24
 80118a0:	681b      	ldr	r3, [r3, #0]
 80118a2:	d501      	bpl.n	80118a8 <_printf_i+0x1c0>
 80118a4:	6019      	str	r1, [r3, #0]
 80118a6:	e002      	b.n	80118ae <_printf_i+0x1c6>
 80118a8:	0668      	lsls	r0, r5, #25
 80118aa:	d5fb      	bpl.n	80118a4 <_printf_i+0x1bc>
 80118ac:	8019      	strh	r1, [r3, #0]
 80118ae:	2300      	movs	r3, #0
 80118b0:	6123      	str	r3, [r4, #16]
 80118b2:	4616      	mov	r6, r2
 80118b4:	e7bc      	b.n	8011830 <_printf_i+0x148>
 80118b6:	6833      	ldr	r3, [r6, #0]
 80118b8:	1d1a      	adds	r2, r3, #4
 80118ba:	6032      	str	r2, [r6, #0]
 80118bc:	681e      	ldr	r6, [r3, #0]
 80118be:	6862      	ldr	r2, [r4, #4]
 80118c0:	2100      	movs	r1, #0
 80118c2:	4630      	mov	r0, r6
 80118c4:	f7ee fc84 	bl	80001d0 <memchr>
 80118c8:	b108      	cbz	r0, 80118ce <_printf_i+0x1e6>
 80118ca:	1b80      	subs	r0, r0, r6
 80118cc:	6060      	str	r0, [r4, #4]
 80118ce:	6863      	ldr	r3, [r4, #4]
 80118d0:	6123      	str	r3, [r4, #16]
 80118d2:	2300      	movs	r3, #0
 80118d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80118d8:	e7aa      	b.n	8011830 <_printf_i+0x148>
 80118da:	6923      	ldr	r3, [r4, #16]
 80118dc:	4632      	mov	r2, r6
 80118de:	4649      	mov	r1, r9
 80118e0:	4640      	mov	r0, r8
 80118e2:	47d0      	blx	sl
 80118e4:	3001      	adds	r0, #1
 80118e6:	d0ad      	beq.n	8011844 <_printf_i+0x15c>
 80118e8:	6823      	ldr	r3, [r4, #0]
 80118ea:	079b      	lsls	r3, r3, #30
 80118ec:	d413      	bmi.n	8011916 <_printf_i+0x22e>
 80118ee:	68e0      	ldr	r0, [r4, #12]
 80118f0:	9b03      	ldr	r3, [sp, #12]
 80118f2:	4298      	cmp	r0, r3
 80118f4:	bfb8      	it	lt
 80118f6:	4618      	movlt	r0, r3
 80118f8:	e7a6      	b.n	8011848 <_printf_i+0x160>
 80118fa:	2301      	movs	r3, #1
 80118fc:	4632      	mov	r2, r6
 80118fe:	4649      	mov	r1, r9
 8011900:	4640      	mov	r0, r8
 8011902:	47d0      	blx	sl
 8011904:	3001      	adds	r0, #1
 8011906:	d09d      	beq.n	8011844 <_printf_i+0x15c>
 8011908:	3501      	adds	r5, #1
 801190a:	68e3      	ldr	r3, [r4, #12]
 801190c:	9903      	ldr	r1, [sp, #12]
 801190e:	1a5b      	subs	r3, r3, r1
 8011910:	42ab      	cmp	r3, r5
 8011912:	dcf2      	bgt.n	80118fa <_printf_i+0x212>
 8011914:	e7eb      	b.n	80118ee <_printf_i+0x206>
 8011916:	2500      	movs	r5, #0
 8011918:	f104 0619 	add.w	r6, r4, #25
 801191c:	e7f5      	b.n	801190a <_printf_i+0x222>
 801191e:	bf00      	nop
 8011920:	08017386 	.word	0x08017386
 8011924:	08017397 	.word	0x08017397

08011928 <__malloc_lock>:
 8011928:	4801      	ldr	r0, [pc, #4]	@ (8011930 <__malloc_lock+0x8>)
 801192a:	f000 bb0c 	b.w	8011f46 <__retarget_lock_acquire_recursive>
 801192e:	bf00      	nop
 8011930:	2000eb18 	.word	0x2000eb18

08011934 <__malloc_unlock>:
 8011934:	4801      	ldr	r0, [pc, #4]	@ (801193c <__malloc_unlock+0x8>)
 8011936:	f000 bb07 	b.w	8011f48 <__retarget_lock_release_recursive>
 801193a:	bf00      	nop
 801193c:	2000eb18 	.word	0x2000eb18

08011940 <siprintf>:
 8011940:	b40e      	push	{r1, r2, r3}
 8011942:	b500      	push	{lr}
 8011944:	b09c      	sub	sp, #112	@ 0x70
 8011946:	ab1d      	add	r3, sp, #116	@ 0x74
 8011948:	9002      	str	r0, [sp, #8]
 801194a:	9006      	str	r0, [sp, #24]
 801194c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8011950:	4809      	ldr	r0, [pc, #36]	@ (8011978 <siprintf+0x38>)
 8011952:	9107      	str	r1, [sp, #28]
 8011954:	9104      	str	r1, [sp, #16]
 8011956:	4909      	ldr	r1, [pc, #36]	@ (801197c <siprintf+0x3c>)
 8011958:	f853 2b04 	ldr.w	r2, [r3], #4
 801195c:	9105      	str	r1, [sp, #20]
 801195e:	6800      	ldr	r0, [r0, #0]
 8011960:	9301      	str	r3, [sp, #4]
 8011962:	a902      	add	r1, sp, #8
 8011964:	f001 fa4e 	bl	8012e04 <_svfiprintf_r>
 8011968:	9b02      	ldr	r3, [sp, #8]
 801196a:	2200      	movs	r2, #0
 801196c:	701a      	strb	r2, [r3, #0]
 801196e:	b01c      	add	sp, #112	@ 0x70
 8011970:	f85d eb04 	ldr.w	lr, [sp], #4
 8011974:	b003      	add	sp, #12
 8011976:	4770      	bx	lr
 8011978:	20006e8c 	.word	0x20006e8c
 801197c:	ffff0208 	.word	0xffff0208

08011980 <std>:
 8011980:	2300      	movs	r3, #0
 8011982:	b510      	push	{r4, lr}
 8011984:	4604      	mov	r4, r0
 8011986:	e9c0 3300 	strd	r3, r3, [r0]
 801198a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801198e:	6083      	str	r3, [r0, #8]
 8011990:	8181      	strh	r1, [r0, #12]
 8011992:	6643      	str	r3, [r0, #100]	@ 0x64
 8011994:	81c2      	strh	r2, [r0, #14]
 8011996:	6183      	str	r3, [r0, #24]
 8011998:	4619      	mov	r1, r3
 801199a:	2208      	movs	r2, #8
 801199c:	305c      	adds	r0, #92	@ 0x5c
 801199e:	f000 fa25 	bl	8011dec <memset>
 80119a2:	4b0d      	ldr	r3, [pc, #52]	@ (80119d8 <std+0x58>)
 80119a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80119a6:	4b0d      	ldr	r3, [pc, #52]	@ (80119dc <std+0x5c>)
 80119a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80119aa:	4b0d      	ldr	r3, [pc, #52]	@ (80119e0 <std+0x60>)
 80119ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80119ae:	4b0d      	ldr	r3, [pc, #52]	@ (80119e4 <std+0x64>)
 80119b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80119b2:	4b0d      	ldr	r3, [pc, #52]	@ (80119e8 <std+0x68>)
 80119b4:	6224      	str	r4, [r4, #32]
 80119b6:	429c      	cmp	r4, r3
 80119b8:	d006      	beq.n	80119c8 <std+0x48>
 80119ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80119be:	4294      	cmp	r4, r2
 80119c0:	d002      	beq.n	80119c8 <std+0x48>
 80119c2:	33d0      	adds	r3, #208	@ 0xd0
 80119c4:	429c      	cmp	r4, r3
 80119c6:	d105      	bne.n	80119d4 <std+0x54>
 80119c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80119cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80119d0:	f000 bab8 	b.w	8011f44 <__retarget_lock_init_recursive>
 80119d4:	bd10      	pop	{r4, pc}
 80119d6:	bf00      	nop
 80119d8:	08013aed 	.word	0x08013aed
 80119dc:	08013b0f 	.word	0x08013b0f
 80119e0:	08013b47 	.word	0x08013b47
 80119e4:	08013b6b 	.word	0x08013b6b
 80119e8:	2000e9dc 	.word	0x2000e9dc

080119ec <stdio_exit_handler>:
 80119ec:	4a02      	ldr	r2, [pc, #8]	@ (80119f8 <stdio_exit_handler+0xc>)
 80119ee:	4903      	ldr	r1, [pc, #12]	@ (80119fc <stdio_exit_handler+0x10>)
 80119f0:	4803      	ldr	r0, [pc, #12]	@ (8011a00 <stdio_exit_handler+0x14>)
 80119f2:	f000 b8a9 	b.w	8011b48 <_fwalk_sglue>
 80119f6:	bf00      	nop
 80119f8:	20006e80 	.word	0x20006e80
 80119fc:	08013389 	.word	0x08013389
 8011a00:	20006e90 	.word	0x20006e90

08011a04 <cleanup_stdio>:
 8011a04:	6841      	ldr	r1, [r0, #4]
 8011a06:	4b0c      	ldr	r3, [pc, #48]	@ (8011a38 <cleanup_stdio+0x34>)
 8011a08:	4299      	cmp	r1, r3
 8011a0a:	b510      	push	{r4, lr}
 8011a0c:	4604      	mov	r4, r0
 8011a0e:	d001      	beq.n	8011a14 <cleanup_stdio+0x10>
 8011a10:	f001 fcba 	bl	8013388 <_fflush_r>
 8011a14:	68a1      	ldr	r1, [r4, #8]
 8011a16:	4b09      	ldr	r3, [pc, #36]	@ (8011a3c <cleanup_stdio+0x38>)
 8011a18:	4299      	cmp	r1, r3
 8011a1a:	d002      	beq.n	8011a22 <cleanup_stdio+0x1e>
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	f001 fcb3 	bl	8013388 <_fflush_r>
 8011a22:	68e1      	ldr	r1, [r4, #12]
 8011a24:	4b06      	ldr	r3, [pc, #24]	@ (8011a40 <cleanup_stdio+0x3c>)
 8011a26:	4299      	cmp	r1, r3
 8011a28:	d004      	beq.n	8011a34 <cleanup_stdio+0x30>
 8011a2a:	4620      	mov	r0, r4
 8011a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a30:	f001 bcaa 	b.w	8013388 <_fflush_r>
 8011a34:	bd10      	pop	{r4, pc}
 8011a36:	bf00      	nop
 8011a38:	2000e9dc 	.word	0x2000e9dc
 8011a3c:	2000ea44 	.word	0x2000ea44
 8011a40:	2000eaac 	.word	0x2000eaac

08011a44 <global_stdio_init.part.0>:
 8011a44:	b510      	push	{r4, lr}
 8011a46:	4b0b      	ldr	r3, [pc, #44]	@ (8011a74 <global_stdio_init.part.0+0x30>)
 8011a48:	4c0b      	ldr	r4, [pc, #44]	@ (8011a78 <global_stdio_init.part.0+0x34>)
 8011a4a:	4a0c      	ldr	r2, [pc, #48]	@ (8011a7c <global_stdio_init.part.0+0x38>)
 8011a4c:	601a      	str	r2, [r3, #0]
 8011a4e:	4620      	mov	r0, r4
 8011a50:	2200      	movs	r2, #0
 8011a52:	2104      	movs	r1, #4
 8011a54:	f7ff ff94 	bl	8011980 <std>
 8011a58:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8011a5c:	2201      	movs	r2, #1
 8011a5e:	2109      	movs	r1, #9
 8011a60:	f7ff ff8e 	bl	8011980 <std>
 8011a64:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8011a68:	2202      	movs	r2, #2
 8011a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a6e:	2112      	movs	r1, #18
 8011a70:	f7ff bf86 	b.w	8011980 <std>
 8011a74:	2000eb14 	.word	0x2000eb14
 8011a78:	2000e9dc 	.word	0x2000e9dc
 8011a7c:	080119ed 	.word	0x080119ed

08011a80 <__sfp_lock_acquire>:
 8011a80:	4801      	ldr	r0, [pc, #4]	@ (8011a88 <__sfp_lock_acquire+0x8>)
 8011a82:	f000 ba60 	b.w	8011f46 <__retarget_lock_acquire_recursive>
 8011a86:	bf00      	nop
 8011a88:	2000eb1a 	.word	0x2000eb1a

08011a8c <__sfp_lock_release>:
 8011a8c:	4801      	ldr	r0, [pc, #4]	@ (8011a94 <__sfp_lock_release+0x8>)
 8011a8e:	f000 ba5b 	b.w	8011f48 <__retarget_lock_release_recursive>
 8011a92:	bf00      	nop
 8011a94:	2000eb1a 	.word	0x2000eb1a

08011a98 <__sinit>:
 8011a98:	b510      	push	{r4, lr}
 8011a9a:	4604      	mov	r4, r0
 8011a9c:	f7ff fff0 	bl	8011a80 <__sfp_lock_acquire>
 8011aa0:	6a23      	ldr	r3, [r4, #32]
 8011aa2:	b11b      	cbz	r3, 8011aac <__sinit+0x14>
 8011aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011aa8:	f7ff bff0 	b.w	8011a8c <__sfp_lock_release>
 8011aac:	4b04      	ldr	r3, [pc, #16]	@ (8011ac0 <__sinit+0x28>)
 8011aae:	6223      	str	r3, [r4, #32]
 8011ab0:	4b04      	ldr	r3, [pc, #16]	@ (8011ac4 <__sinit+0x2c>)
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d1f5      	bne.n	8011aa4 <__sinit+0xc>
 8011ab8:	f7ff ffc4 	bl	8011a44 <global_stdio_init.part.0>
 8011abc:	e7f2      	b.n	8011aa4 <__sinit+0xc>
 8011abe:	bf00      	nop
 8011ac0:	08011a05 	.word	0x08011a05
 8011ac4:	2000eb14 	.word	0x2000eb14

08011ac8 <fiprintf>:
 8011ac8:	b40e      	push	{r1, r2, r3}
 8011aca:	b503      	push	{r0, r1, lr}
 8011acc:	4601      	mov	r1, r0
 8011ace:	ab03      	add	r3, sp, #12
 8011ad0:	4805      	ldr	r0, [pc, #20]	@ (8011ae8 <fiprintf+0x20>)
 8011ad2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ad6:	6800      	ldr	r0, [r0, #0]
 8011ad8:	9301      	str	r3, [sp, #4]
 8011ada:	f001 fab9 	bl	8013050 <_vfiprintf_r>
 8011ade:	b002      	add	sp, #8
 8011ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ae4:	b003      	add	sp, #12
 8011ae6:	4770      	bx	lr
 8011ae8:	20006e8c 	.word	0x20006e8c

08011aec <_realloc_r>:
 8011aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011af0:	4680      	mov	r8, r0
 8011af2:	4615      	mov	r5, r2
 8011af4:	460c      	mov	r4, r1
 8011af6:	b921      	cbnz	r1, 8011b02 <_realloc_r+0x16>
 8011af8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011afc:	4611      	mov	r1, r2
 8011afe:	f7ff bd05 	b.w	801150c <_malloc_r>
 8011b02:	b92a      	cbnz	r2, 8011b10 <_realloc_r+0x24>
 8011b04:	f001 f8d8 	bl	8012cb8 <_free_r>
 8011b08:	2400      	movs	r4, #0
 8011b0a:	4620      	mov	r0, r4
 8011b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b10:	f001 ffe4 	bl	8013adc <_malloc_usable_size_r>
 8011b14:	4285      	cmp	r5, r0
 8011b16:	4606      	mov	r6, r0
 8011b18:	d802      	bhi.n	8011b20 <_realloc_r+0x34>
 8011b1a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011b1e:	d8f4      	bhi.n	8011b0a <_realloc_r+0x1e>
 8011b20:	4629      	mov	r1, r5
 8011b22:	4640      	mov	r0, r8
 8011b24:	f7ff fcf2 	bl	801150c <_malloc_r>
 8011b28:	4607      	mov	r7, r0
 8011b2a:	2800      	cmp	r0, #0
 8011b2c:	d0ec      	beq.n	8011b08 <_realloc_r+0x1c>
 8011b2e:	42b5      	cmp	r5, r6
 8011b30:	462a      	mov	r2, r5
 8011b32:	4621      	mov	r1, r4
 8011b34:	bf28      	it	cs
 8011b36:	4632      	movcs	r2, r6
 8011b38:	f000 fa07 	bl	8011f4a <memcpy>
 8011b3c:	4621      	mov	r1, r4
 8011b3e:	4640      	mov	r0, r8
 8011b40:	f001 f8ba 	bl	8012cb8 <_free_r>
 8011b44:	463c      	mov	r4, r7
 8011b46:	e7e0      	b.n	8011b0a <_realloc_r+0x1e>

08011b48 <_fwalk_sglue>:
 8011b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b4c:	4607      	mov	r7, r0
 8011b4e:	4688      	mov	r8, r1
 8011b50:	4614      	mov	r4, r2
 8011b52:	2600      	movs	r6, #0
 8011b54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011b58:	f1b9 0901 	subs.w	r9, r9, #1
 8011b5c:	d505      	bpl.n	8011b6a <_fwalk_sglue+0x22>
 8011b5e:	6824      	ldr	r4, [r4, #0]
 8011b60:	2c00      	cmp	r4, #0
 8011b62:	d1f7      	bne.n	8011b54 <_fwalk_sglue+0xc>
 8011b64:	4630      	mov	r0, r6
 8011b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011b6a:	89ab      	ldrh	r3, [r5, #12]
 8011b6c:	2b01      	cmp	r3, #1
 8011b6e:	d907      	bls.n	8011b80 <_fwalk_sglue+0x38>
 8011b70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011b74:	3301      	adds	r3, #1
 8011b76:	d003      	beq.n	8011b80 <_fwalk_sglue+0x38>
 8011b78:	4629      	mov	r1, r5
 8011b7a:	4638      	mov	r0, r7
 8011b7c:	47c0      	blx	r8
 8011b7e:	4306      	orrs	r6, r0
 8011b80:	3568      	adds	r5, #104	@ 0x68
 8011b82:	e7e9      	b.n	8011b58 <_fwalk_sglue+0x10>

08011b84 <__swbuf_r>:
 8011b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b86:	460e      	mov	r6, r1
 8011b88:	4614      	mov	r4, r2
 8011b8a:	4605      	mov	r5, r0
 8011b8c:	b118      	cbz	r0, 8011b96 <__swbuf_r+0x12>
 8011b8e:	6a03      	ldr	r3, [r0, #32]
 8011b90:	b90b      	cbnz	r3, 8011b96 <__swbuf_r+0x12>
 8011b92:	f7ff ff81 	bl	8011a98 <__sinit>
 8011b96:	69a3      	ldr	r3, [r4, #24]
 8011b98:	60a3      	str	r3, [r4, #8]
 8011b9a:	89a3      	ldrh	r3, [r4, #12]
 8011b9c:	071a      	lsls	r2, r3, #28
 8011b9e:	d501      	bpl.n	8011ba4 <__swbuf_r+0x20>
 8011ba0:	6923      	ldr	r3, [r4, #16]
 8011ba2:	b943      	cbnz	r3, 8011bb6 <__swbuf_r+0x32>
 8011ba4:	4621      	mov	r1, r4
 8011ba6:	4628      	mov	r0, r5
 8011ba8:	f000 f82a 	bl	8011c00 <__swsetup_r>
 8011bac:	b118      	cbz	r0, 8011bb6 <__swbuf_r+0x32>
 8011bae:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8011bb2:	4638      	mov	r0, r7
 8011bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bb6:	6823      	ldr	r3, [r4, #0]
 8011bb8:	6922      	ldr	r2, [r4, #16]
 8011bba:	1a98      	subs	r0, r3, r2
 8011bbc:	6963      	ldr	r3, [r4, #20]
 8011bbe:	b2f6      	uxtb	r6, r6
 8011bc0:	4283      	cmp	r3, r0
 8011bc2:	4637      	mov	r7, r6
 8011bc4:	dc05      	bgt.n	8011bd2 <__swbuf_r+0x4e>
 8011bc6:	4621      	mov	r1, r4
 8011bc8:	4628      	mov	r0, r5
 8011bca:	f001 fbdd 	bl	8013388 <_fflush_r>
 8011bce:	2800      	cmp	r0, #0
 8011bd0:	d1ed      	bne.n	8011bae <__swbuf_r+0x2a>
 8011bd2:	68a3      	ldr	r3, [r4, #8]
 8011bd4:	3b01      	subs	r3, #1
 8011bd6:	60a3      	str	r3, [r4, #8]
 8011bd8:	6823      	ldr	r3, [r4, #0]
 8011bda:	1c5a      	adds	r2, r3, #1
 8011bdc:	6022      	str	r2, [r4, #0]
 8011bde:	701e      	strb	r6, [r3, #0]
 8011be0:	6962      	ldr	r2, [r4, #20]
 8011be2:	1c43      	adds	r3, r0, #1
 8011be4:	429a      	cmp	r2, r3
 8011be6:	d004      	beq.n	8011bf2 <__swbuf_r+0x6e>
 8011be8:	89a3      	ldrh	r3, [r4, #12]
 8011bea:	07db      	lsls	r3, r3, #31
 8011bec:	d5e1      	bpl.n	8011bb2 <__swbuf_r+0x2e>
 8011bee:	2e0a      	cmp	r6, #10
 8011bf0:	d1df      	bne.n	8011bb2 <__swbuf_r+0x2e>
 8011bf2:	4621      	mov	r1, r4
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	f001 fbc7 	bl	8013388 <_fflush_r>
 8011bfa:	2800      	cmp	r0, #0
 8011bfc:	d0d9      	beq.n	8011bb2 <__swbuf_r+0x2e>
 8011bfe:	e7d6      	b.n	8011bae <__swbuf_r+0x2a>

08011c00 <__swsetup_r>:
 8011c00:	b538      	push	{r3, r4, r5, lr}
 8011c02:	4b29      	ldr	r3, [pc, #164]	@ (8011ca8 <__swsetup_r+0xa8>)
 8011c04:	4605      	mov	r5, r0
 8011c06:	6818      	ldr	r0, [r3, #0]
 8011c08:	460c      	mov	r4, r1
 8011c0a:	b118      	cbz	r0, 8011c14 <__swsetup_r+0x14>
 8011c0c:	6a03      	ldr	r3, [r0, #32]
 8011c0e:	b90b      	cbnz	r3, 8011c14 <__swsetup_r+0x14>
 8011c10:	f7ff ff42 	bl	8011a98 <__sinit>
 8011c14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c18:	0719      	lsls	r1, r3, #28
 8011c1a:	d422      	bmi.n	8011c62 <__swsetup_r+0x62>
 8011c1c:	06da      	lsls	r2, r3, #27
 8011c1e:	d407      	bmi.n	8011c30 <__swsetup_r+0x30>
 8011c20:	2209      	movs	r2, #9
 8011c22:	602a      	str	r2, [r5, #0]
 8011c24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011c28:	81a3      	strh	r3, [r4, #12]
 8011c2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011c2e:	e033      	b.n	8011c98 <__swsetup_r+0x98>
 8011c30:	0758      	lsls	r0, r3, #29
 8011c32:	d512      	bpl.n	8011c5a <__swsetup_r+0x5a>
 8011c34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011c36:	b141      	cbz	r1, 8011c4a <__swsetup_r+0x4a>
 8011c38:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011c3c:	4299      	cmp	r1, r3
 8011c3e:	d002      	beq.n	8011c46 <__swsetup_r+0x46>
 8011c40:	4628      	mov	r0, r5
 8011c42:	f001 f839 	bl	8012cb8 <_free_r>
 8011c46:	2300      	movs	r3, #0
 8011c48:	6363      	str	r3, [r4, #52]	@ 0x34
 8011c4a:	89a3      	ldrh	r3, [r4, #12]
 8011c4c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011c50:	81a3      	strh	r3, [r4, #12]
 8011c52:	2300      	movs	r3, #0
 8011c54:	6063      	str	r3, [r4, #4]
 8011c56:	6923      	ldr	r3, [r4, #16]
 8011c58:	6023      	str	r3, [r4, #0]
 8011c5a:	89a3      	ldrh	r3, [r4, #12]
 8011c5c:	f043 0308 	orr.w	r3, r3, #8
 8011c60:	81a3      	strh	r3, [r4, #12]
 8011c62:	6923      	ldr	r3, [r4, #16]
 8011c64:	b94b      	cbnz	r3, 8011c7a <__swsetup_r+0x7a>
 8011c66:	89a3      	ldrh	r3, [r4, #12]
 8011c68:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c70:	d003      	beq.n	8011c7a <__swsetup_r+0x7a>
 8011c72:	4621      	mov	r1, r4
 8011c74:	4628      	mov	r0, r5
 8011c76:	f000 f83f 	bl	8011cf8 <__smakebuf_r>
 8011c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c7e:	f013 0201 	ands.w	r2, r3, #1
 8011c82:	d00a      	beq.n	8011c9a <__swsetup_r+0x9a>
 8011c84:	2200      	movs	r2, #0
 8011c86:	60a2      	str	r2, [r4, #8]
 8011c88:	6962      	ldr	r2, [r4, #20]
 8011c8a:	4252      	negs	r2, r2
 8011c8c:	61a2      	str	r2, [r4, #24]
 8011c8e:	6922      	ldr	r2, [r4, #16]
 8011c90:	b942      	cbnz	r2, 8011ca4 <__swsetup_r+0xa4>
 8011c92:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011c96:	d1c5      	bne.n	8011c24 <__swsetup_r+0x24>
 8011c98:	bd38      	pop	{r3, r4, r5, pc}
 8011c9a:	0799      	lsls	r1, r3, #30
 8011c9c:	bf58      	it	pl
 8011c9e:	6962      	ldrpl	r2, [r4, #20]
 8011ca0:	60a2      	str	r2, [r4, #8]
 8011ca2:	e7f4      	b.n	8011c8e <__swsetup_r+0x8e>
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	e7f7      	b.n	8011c98 <__swsetup_r+0x98>
 8011ca8:	20006e8c 	.word	0x20006e8c

08011cac <__swhatbuf_r>:
 8011cac:	b570      	push	{r4, r5, r6, lr}
 8011cae:	460c      	mov	r4, r1
 8011cb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cb4:	2900      	cmp	r1, #0
 8011cb6:	b096      	sub	sp, #88	@ 0x58
 8011cb8:	4615      	mov	r5, r2
 8011cba:	461e      	mov	r6, r3
 8011cbc:	da0d      	bge.n	8011cda <__swhatbuf_r+0x2e>
 8011cbe:	89a3      	ldrh	r3, [r4, #12]
 8011cc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011cc4:	f04f 0100 	mov.w	r1, #0
 8011cc8:	bf14      	ite	ne
 8011cca:	2340      	movne	r3, #64	@ 0x40
 8011ccc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	6031      	str	r1, [r6, #0]
 8011cd4:	602b      	str	r3, [r5, #0]
 8011cd6:	b016      	add	sp, #88	@ 0x58
 8011cd8:	bd70      	pop	{r4, r5, r6, pc}
 8011cda:	466a      	mov	r2, sp
 8011cdc:	f000 f892 	bl	8011e04 <_fstat_r>
 8011ce0:	2800      	cmp	r0, #0
 8011ce2:	dbec      	blt.n	8011cbe <__swhatbuf_r+0x12>
 8011ce4:	9901      	ldr	r1, [sp, #4]
 8011ce6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011cea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011cee:	4259      	negs	r1, r3
 8011cf0:	4159      	adcs	r1, r3
 8011cf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011cf6:	e7eb      	b.n	8011cd0 <__swhatbuf_r+0x24>

08011cf8 <__smakebuf_r>:
 8011cf8:	898b      	ldrh	r3, [r1, #12]
 8011cfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011cfc:	079d      	lsls	r5, r3, #30
 8011cfe:	4606      	mov	r6, r0
 8011d00:	460c      	mov	r4, r1
 8011d02:	d507      	bpl.n	8011d14 <__smakebuf_r+0x1c>
 8011d04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011d08:	6023      	str	r3, [r4, #0]
 8011d0a:	6123      	str	r3, [r4, #16]
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	6163      	str	r3, [r4, #20]
 8011d10:	b003      	add	sp, #12
 8011d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d14:	ab01      	add	r3, sp, #4
 8011d16:	466a      	mov	r2, sp
 8011d18:	f7ff ffc8 	bl	8011cac <__swhatbuf_r>
 8011d1c:	9f00      	ldr	r7, [sp, #0]
 8011d1e:	4605      	mov	r5, r0
 8011d20:	4639      	mov	r1, r7
 8011d22:	4630      	mov	r0, r6
 8011d24:	f7ff fbf2 	bl	801150c <_malloc_r>
 8011d28:	b948      	cbnz	r0, 8011d3e <__smakebuf_r+0x46>
 8011d2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d2e:	059a      	lsls	r2, r3, #22
 8011d30:	d4ee      	bmi.n	8011d10 <__smakebuf_r+0x18>
 8011d32:	f023 0303 	bic.w	r3, r3, #3
 8011d36:	f043 0302 	orr.w	r3, r3, #2
 8011d3a:	81a3      	strh	r3, [r4, #12]
 8011d3c:	e7e2      	b.n	8011d04 <__smakebuf_r+0xc>
 8011d3e:	89a3      	ldrh	r3, [r4, #12]
 8011d40:	6020      	str	r0, [r4, #0]
 8011d42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011d46:	81a3      	strh	r3, [r4, #12]
 8011d48:	9b01      	ldr	r3, [sp, #4]
 8011d4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011d4e:	b15b      	cbz	r3, 8011d68 <__smakebuf_r+0x70>
 8011d50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011d54:	4630      	mov	r0, r6
 8011d56:	f000 f867 	bl	8011e28 <_isatty_r>
 8011d5a:	b128      	cbz	r0, 8011d68 <__smakebuf_r+0x70>
 8011d5c:	89a3      	ldrh	r3, [r4, #12]
 8011d5e:	f023 0303 	bic.w	r3, r3, #3
 8011d62:	f043 0301 	orr.w	r3, r3, #1
 8011d66:	81a3      	strh	r3, [r4, #12]
 8011d68:	89a3      	ldrh	r3, [r4, #12]
 8011d6a:	431d      	orrs	r5, r3
 8011d6c:	81a5      	strh	r5, [r4, #12]
 8011d6e:	e7cf      	b.n	8011d10 <__smakebuf_r+0x18>

08011d70 <iprintf>:
 8011d70:	b40f      	push	{r0, r1, r2, r3}
 8011d72:	b507      	push	{r0, r1, r2, lr}
 8011d74:	4906      	ldr	r1, [pc, #24]	@ (8011d90 <iprintf+0x20>)
 8011d76:	ab04      	add	r3, sp, #16
 8011d78:	6808      	ldr	r0, [r1, #0]
 8011d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011d7e:	6881      	ldr	r1, [r0, #8]
 8011d80:	9301      	str	r3, [sp, #4]
 8011d82:	f001 f965 	bl	8013050 <_vfiprintf_r>
 8011d86:	b003      	add	sp, #12
 8011d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d8c:	b004      	add	sp, #16
 8011d8e:	4770      	bx	lr
 8011d90:	20006e8c 	.word	0x20006e8c

08011d94 <strncmp>:
 8011d94:	b510      	push	{r4, lr}
 8011d96:	b16a      	cbz	r2, 8011db4 <strncmp+0x20>
 8011d98:	3901      	subs	r1, #1
 8011d9a:	1884      	adds	r4, r0, r2
 8011d9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011da0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d103      	bne.n	8011db0 <strncmp+0x1c>
 8011da8:	42a0      	cmp	r0, r4
 8011daa:	d001      	beq.n	8011db0 <strncmp+0x1c>
 8011dac:	2a00      	cmp	r2, #0
 8011dae:	d1f5      	bne.n	8011d9c <strncmp+0x8>
 8011db0:	1ad0      	subs	r0, r2, r3
 8011db2:	bd10      	pop	{r4, pc}
 8011db4:	4610      	mov	r0, r2
 8011db6:	e7fc      	b.n	8011db2 <strncmp+0x1e>

08011db8 <memmove>:
 8011db8:	4288      	cmp	r0, r1
 8011dba:	b510      	push	{r4, lr}
 8011dbc:	eb01 0402 	add.w	r4, r1, r2
 8011dc0:	d902      	bls.n	8011dc8 <memmove+0x10>
 8011dc2:	4284      	cmp	r4, r0
 8011dc4:	4623      	mov	r3, r4
 8011dc6:	d807      	bhi.n	8011dd8 <memmove+0x20>
 8011dc8:	1e43      	subs	r3, r0, #1
 8011dca:	42a1      	cmp	r1, r4
 8011dcc:	d008      	beq.n	8011de0 <memmove+0x28>
 8011dce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011dd2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011dd6:	e7f8      	b.n	8011dca <memmove+0x12>
 8011dd8:	4402      	add	r2, r0
 8011dda:	4601      	mov	r1, r0
 8011ddc:	428a      	cmp	r2, r1
 8011dde:	d100      	bne.n	8011de2 <memmove+0x2a>
 8011de0:	bd10      	pop	{r4, pc}
 8011de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011de6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011dea:	e7f7      	b.n	8011ddc <memmove+0x24>

08011dec <memset>:
 8011dec:	4402      	add	r2, r0
 8011dee:	4603      	mov	r3, r0
 8011df0:	4293      	cmp	r3, r2
 8011df2:	d100      	bne.n	8011df6 <memset+0xa>
 8011df4:	4770      	bx	lr
 8011df6:	f803 1b01 	strb.w	r1, [r3], #1
 8011dfa:	e7f9      	b.n	8011df0 <memset+0x4>

08011dfc <_localeconv_r>:
 8011dfc:	4800      	ldr	r0, [pc, #0]	@ (8011e00 <_localeconv_r+0x4>)
 8011dfe:	4770      	bx	lr
 8011e00:	20006fd0 	.word	0x20006fd0

08011e04 <_fstat_r>:
 8011e04:	b538      	push	{r3, r4, r5, lr}
 8011e06:	4d07      	ldr	r5, [pc, #28]	@ (8011e24 <_fstat_r+0x20>)
 8011e08:	2300      	movs	r3, #0
 8011e0a:	4604      	mov	r4, r0
 8011e0c:	4608      	mov	r0, r1
 8011e0e:	4611      	mov	r1, r2
 8011e10:	602b      	str	r3, [r5, #0]
 8011e12:	f7ef ff67 	bl	8001ce4 <_fstat>
 8011e16:	1c43      	adds	r3, r0, #1
 8011e18:	d102      	bne.n	8011e20 <_fstat_r+0x1c>
 8011e1a:	682b      	ldr	r3, [r5, #0]
 8011e1c:	b103      	cbz	r3, 8011e20 <_fstat_r+0x1c>
 8011e1e:	6023      	str	r3, [r4, #0]
 8011e20:	bd38      	pop	{r3, r4, r5, pc}
 8011e22:	bf00      	nop
 8011e24:	2000ebac 	.word	0x2000ebac

08011e28 <_isatty_r>:
 8011e28:	b538      	push	{r3, r4, r5, lr}
 8011e2a:	4d06      	ldr	r5, [pc, #24]	@ (8011e44 <_isatty_r+0x1c>)
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	4604      	mov	r4, r0
 8011e30:	4608      	mov	r0, r1
 8011e32:	602b      	str	r3, [r5, #0]
 8011e34:	f7ef ff5c 	bl	8001cf0 <_isatty>
 8011e38:	1c43      	adds	r3, r0, #1
 8011e3a:	d102      	bne.n	8011e42 <_isatty_r+0x1a>
 8011e3c:	682b      	ldr	r3, [r5, #0]
 8011e3e:	b103      	cbz	r3, 8011e42 <_isatty_r+0x1a>
 8011e40:	6023      	str	r3, [r4, #0]
 8011e42:	bd38      	pop	{r3, r4, r5, pc}
 8011e44:	2000ebac 	.word	0x2000ebac

08011e48 <_raise_r>:
 8011e48:	291f      	cmp	r1, #31
 8011e4a:	b538      	push	{r3, r4, r5, lr}
 8011e4c:	4605      	mov	r5, r0
 8011e4e:	460c      	mov	r4, r1
 8011e50:	d904      	bls.n	8011e5c <_raise_r+0x14>
 8011e52:	2316      	movs	r3, #22
 8011e54:	6003      	str	r3, [r0, #0]
 8011e56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011e5a:	bd38      	pop	{r3, r4, r5, pc}
 8011e5c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011e5e:	b112      	cbz	r2, 8011e66 <_raise_r+0x1e>
 8011e60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e64:	b94b      	cbnz	r3, 8011e7a <_raise_r+0x32>
 8011e66:	4628      	mov	r0, r5
 8011e68:	f000 f830 	bl	8011ecc <_getpid_r>
 8011e6c:	4622      	mov	r2, r4
 8011e6e:	4601      	mov	r1, r0
 8011e70:	4628      	mov	r0, r5
 8011e72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e76:	f000 b817 	b.w	8011ea8 <_kill_r>
 8011e7a:	2b01      	cmp	r3, #1
 8011e7c:	d00a      	beq.n	8011e94 <_raise_r+0x4c>
 8011e7e:	1c59      	adds	r1, r3, #1
 8011e80:	d103      	bne.n	8011e8a <_raise_r+0x42>
 8011e82:	2316      	movs	r3, #22
 8011e84:	6003      	str	r3, [r0, #0]
 8011e86:	2001      	movs	r0, #1
 8011e88:	e7e7      	b.n	8011e5a <_raise_r+0x12>
 8011e8a:	2100      	movs	r1, #0
 8011e8c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011e90:	4620      	mov	r0, r4
 8011e92:	4798      	blx	r3
 8011e94:	2000      	movs	r0, #0
 8011e96:	e7e0      	b.n	8011e5a <_raise_r+0x12>

08011e98 <raise>:
 8011e98:	4b02      	ldr	r3, [pc, #8]	@ (8011ea4 <raise+0xc>)
 8011e9a:	4601      	mov	r1, r0
 8011e9c:	6818      	ldr	r0, [r3, #0]
 8011e9e:	f7ff bfd3 	b.w	8011e48 <_raise_r>
 8011ea2:	bf00      	nop
 8011ea4:	20006e8c 	.word	0x20006e8c

08011ea8 <_kill_r>:
 8011ea8:	b538      	push	{r3, r4, r5, lr}
 8011eaa:	4d07      	ldr	r5, [pc, #28]	@ (8011ec8 <_kill_r+0x20>)
 8011eac:	2300      	movs	r3, #0
 8011eae:	4604      	mov	r4, r0
 8011eb0:	4608      	mov	r0, r1
 8011eb2:	4611      	mov	r1, r2
 8011eb4:	602b      	str	r3, [r5, #0]
 8011eb6:	f7ef fee7 	bl	8001c88 <_kill>
 8011eba:	1c43      	adds	r3, r0, #1
 8011ebc:	d102      	bne.n	8011ec4 <_kill_r+0x1c>
 8011ebe:	682b      	ldr	r3, [r5, #0]
 8011ec0:	b103      	cbz	r3, 8011ec4 <_kill_r+0x1c>
 8011ec2:	6023      	str	r3, [r4, #0]
 8011ec4:	bd38      	pop	{r3, r4, r5, pc}
 8011ec6:	bf00      	nop
 8011ec8:	2000ebac 	.word	0x2000ebac

08011ecc <_getpid_r>:
 8011ecc:	f7ef beda 	b.w	8001c84 <_getpid>

08011ed0 <_sbrk_r>:
 8011ed0:	b538      	push	{r3, r4, r5, lr}
 8011ed2:	4d06      	ldr	r5, [pc, #24]	@ (8011eec <_sbrk_r+0x1c>)
 8011ed4:	2300      	movs	r3, #0
 8011ed6:	4604      	mov	r4, r0
 8011ed8:	4608      	mov	r0, r1
 8011eda:	602b      	str	r3, [r5, #0]
 8011edc:	f7ef ff0c 	bl	8001cf8 <_sbrk>
 8011ee0:	1c43      	adds	r3, r0, #1
 8011ee2:	d102      	bne.n	8011eea <_sbrk_r+0x1a>
 8011ee4:	682b      	ldr	r3, [r5, #0]
 8011ee6:	b103      	cbz	r3, 8011eea <_sbrk_r+0x1a>
 8011ee8:	6023      	str	r3, [r4, #0]
 8011eea:	bd38      	pop	{r3, r4, r5, pc}
 8011eec:	2000ebac 	.word	0x2000ebac

08011ef0 <__errno>:
 8011ef0:	4b01      	ldr	r3, [pc, #4]	@ (8011ef8 <__errno+0x8>)
 8011ef2:	6818      	ldr	r0, [r3, #0]
 8011ef4:	4770      	bx	lr
 8011ef6:	bf00      	nop
 8011ef8:	20006e8c 	.word	0x20006e8c

08011efc <__libc_init_array>:
 8011efc:	b570      	push	{r4, r5, r6, lr}
 8011efe:	4d0d      	ldr	r5, [pc, #52]	@ (8011f34 <__libc_init_array+0x38>)
 8011f00:	4c0d      	ldr	r4, [pc, #52]	@ (8011f38 <__libc_init_array+0x3c>)
 8011f02:	1b64      	subs	r4, r4, r5
 8011f04:	10a4      	asrs	r4, r4, #2
 8011f06:	2600      	movs	r6, #0
 8011f08:	42a6      	cmp	r6, r4
 8011f0a:	d109      	bne.n	8011f20 <__libc_init_array+0x24>
 8011f0c:	4d0b      	ldr	r5, [pc, #44]	@ (8011f3c <__libc_init_array+0x40>)
 8011f0e:	4c0c      	ldr	r4, [pc, #48]	@ (8011f40 <__libc_init_array+0x44>)
 8011f10:	f001 feaa 	bl	8013c68 <_init>
 8011f14:	1b64      	subs	r4, r4, r5
 8011f16:	10a4      	asrs	r4, r4, #2
 8011f18:	2600      	movs	r6, #0
 8011f1a:	42a6      	cmp	r6, r4
 8011f1c:	d105      	bne.n	8011f2a <__libc_init_array+0x2e>
 8011f1e:	bd70      	pop	{r4, r5, r6, pc}
 8011f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f24:	4798      	blx	r3
 8011f26:	3601      	adds	r6, #1
 8011f28:	e7ee      	b.n	8011f08 <__libc_init_array+0xc>
 8011f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011f2e:	4798      	blx	r3
 8011f30:	3601      	adds	r6, #1
 8011f32:	e7f2      	b.n	8011f1a <__libc_init_array+0x1e>
 8011f34:	080176b4 	.word	0x080176b4
 8011f38:	080176b4 	.word	0x080176b4
 8011f3c:	080176b4 	.word	0x080176b4
 8011f40:	080176b8 	.word	0x080176b8

08011f44 <__retarget_lock_init_recursive>:
 8011f44:	4770      	bx	lr

08011f46 <__retarget_lock_acquire_recursive>:
 8011f46:	4770      	bx	lr

08011f48 <__retarget_lock_release_recursive>:
 8011f48:	4770      	bx	lr

08011f4a <memcpy>:
 8011f4a:	440a      	add	r2, r1
 8011f4c:	4291      	cmp	r1, r2
 8011f4e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8011f52:	d100      	bne.n	8011f56 <memcpy+0xc>
 8011f54:	4770      	bx	lr
 8011f56:	b510      	push	{r4, lr}
 8011f58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011f60:	4291      	cmp	r1, r2
 8011f62:	d1f9      	bne.n	8011f58 <memcpy+0xe>
 8011f64:	bd10      	pop	{r4, pc}
	...

08011f68 <__register_exitproc>:
 8011f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f6c:	4d27      	ldr	r5, [pc, #156]	@ (801200c <__register_exitproc+0xa4>)
 8011f6e:	4607      	mov	r7, r0
 8011f70:	6828      	ldr	r0, [r5, #0]
 8011f72:	4691      	mov	r9, r2
 8011f74:	460e      	mov	r6, r1
 8011f76:	4698      	mov	r8, r3
 8011f78:	f7ff ffe5 	bl	8011f46 <__retarget_lock_acquire_recursive>
 8011f7c:	4a24      	ldr	r2, [pc, #144]	@ (8012010 <__register_exitproc+0xa8>)
 8011f7e:	6814      	ldr	r4, [r2, #0]
 8011f80:	b93c      	cbnz	r4, 8011f92 <__register_exitproc+0x2a>
 8011f82:	4b24      	ldr	r3, [pc, #144]	@ (8012014 <__register_exitproc+0xac>)
 8011f84:	6013      	str	r3, [r2, #0]
 8011f86:	4a24      	ldr	r2, [pc, #144]	@ (8012018 <__register_exitproc+0xb0>)
 8011f88:	b112      	cbz	r2, 8011f90 <__register_exitproc+0x28>
 8011f8a:	6812      	ldr	r2, [r2, #0]
 8011f8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8011f90:	4c20      	ldr	r4, [pc, #128]	@ (8012014 <__register_exitproc+0xac>)
 8011f92:	6863      	ldr	r3, [r4, #4]
 8011f94:	2b1f      	cmp	r3, #31
 8011f96:	dd06      	ble.n	8011fa6 <__register_exitproc+0x3e>
 8011f98:	6828      	ldr	r0, [r5, #0]
 8011f9a:	f7ff ffd5 	bl	8011f48 <__retarget_lock_release_recursive>
 8011f9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fa6:	b32f      	cbz	r7, 8011ff4 <__register_exitproc+0x8c>
 8011fa8:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8011fac:	b968      	cbnz	r0, 8011fca <__register_exitproc+0x62>
 8011fae:	4b1b      	ldr	r3, [pc, #108]	@ (801201c <__register_exitproc+0xb4>)
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	d0f1      	beq.n	8011f98 <__register_exitproc+0x30>
 8011fb4:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8011fb8:	f7ff fa76 	bl	80114a8 <malloc>
 8011fbc:	2800      	cmp	r0, #0
 8011fbe:	d0eb      	beq.n	8011f98 <__register_exitproc+0x30>
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8011fc6:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8011fca:	6863      	ldr	r3, [r4, #4]
 8011fcc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	409a      	lsls	r2, r3
 8011fd4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8011fd8:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8011fdc:	4313      	orrs	r3, r2
 8011fde:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8011fe2:	2f02      	cmp	r7, #2
 8011fe4:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8011fe8:	bf02      	ittt	eq
 8011fea:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8011fee:	4313      	orreq	r3, r2
 8011ff0:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8011ff4:	6863      	ldr	r3, [r4, #4]
 8011ff6:	6828      	ldr	r0, [r5, #0]
 8011ff8:	1c5a      	adds	r2, r3, #1
 8011ffa:	3302      	adds	r3, #2
 8011ffc:	6062      	str	r2, [r4, #4]
 8011ffe:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8012002:	f7ff ffa1 	bl	8011f48 <__retarget_lock_release_recursive>
 8012006:	2000      	movs	r0, #0
 8012008:	e7cb      	b.n	8011fa2 <__register_exitproc+0x3a>
 801200a:	bf00      	nop
 801200c:	20006edc 	.word	0x20006edc
 8012010:	2000eba8 	.word	0x2000eba8
 8012014:	2000eb1c 	.word	0x2000eb1c
 8012018:	00000000 	.word	0x00000000
 801201c:	080114a9 	.word	0x080114a9

08012020 <quorem>:
 8012020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012024:	6903      	ldr	r3, [r0, #16]
 8012026:	690c      	ldr	r4, [r1, #16]
 8012028:	42a3      	cmp	r3, r4
 801202a:	4607      	mov	r7, r0
 801202c:	db7e      	blt.n	801212c <quorem+0x10c>
 801202e:	3c01      	subs	r4, #1
 8012030:	f101 0814 	add.w	r8, r1, #20
 8012034:	00a3      	lsls	r3, r4, #2
 8012036:	f100 0514 	add.w	r5, r0, #20
 801203a:	9300      	str	r3, [sp, #0]
 801203c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012040:	9301      	str	r3, [sp, #4]
 8012042:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012046:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801204a:	3301      	adds	r3, #1
 801204c:	429a      	cmp	r2, r3
 801204e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012052:	fbb2 f6f3 	udiv	r6, r2, r3
 8012056:	d32e      	bcc.n	80120b6 <quorem+0x96>
 8012058:	f04f 0a00 	mov.w	sl, #0
 801205c:	46c4      	mov	ip, r8
 801205e:	46ae      	mov	lr, r5
 8012060:	46d3      	mov	fp, sl
 8012062:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012066:	b298      	uxth	r0, r3
 8012068:	fb06 a000 	mla	r0, r6, r0, sl
 801206c:	0c02      	lsrs	r2, r0, #16
 801206e:	0c1b      	lsrs	r3, r3, #16
 8012070:	fb06 2303 	mla	r3, r6, r3, r2
 8012074:	f8de 2000 	ldr.w	r2, [lr]
 8012078:	b280      	uxth	r0, r0
 801207a:	b292      	uxth	r2, r2
 801207c:	1a12      	subs	r2, r2, r0
 801207e:	445a      	add	r2, fp
 8012080:	f8de 0000 	ldr.w	r0, [lr]
 8012084:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012088:	b29b      	uxth	r3, r3
 801208a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801208e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012092:	b292      	uxth	r2, r2
 8012094:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012098:	45e1      	cmp	r9, ip
 801209a:	f84e 2b04 	str.w	r2, [lr], #4
 801209e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80120a2:	d2de      	bcs.n	8012062 <quorem+0x42>
 80120a4:	9b00      	ldr	r3, [sp, #0]
 80120a6:	58eb      	ldr	r3, [r5, r3]
 80120a8:	b92b      	cbnz	r3, 80120b6 <quorem+0x96>
 80120aa:	9b01      	ldr	r3, [sp, #4]
 80120ac:	3b04      	subs	r3, #4
 80120ae:	429d      	cmp	r5, r3
 80120b0:	461a      	mov	r2, r3
 80120b2:	d32f      	bcc.n	8012114 <quorem+0xf4>
 80120b4:	613c      	str	r4, [r7, #16]
 80120b6:	4638      	mov	r0, r7
 80120b8:	f001 fc08 	bl	80138cc <__mcmp>
 80120bc:	2800      	cmp	r0, #0
 80120be:	db25      	blt.n	801210c <quorem+0xec>
 80120c0:	4629      	mov	r1, r5
 80120c2:	2000      	movs	r0, #0
 80120c4:	f858 2b04 	ldr.w	r2, [r8], #4
 80120c8:	f8d1 c000 	ldr.w	ip, [r1]
 80120cc:	fa1f fe82 	uxth.w	lr, r2
 80120d0:	fa1f f38c 	uxth.w	r3, ip
 80120d4:	eba3 030e 	sub.w	r3, r3, lr
 80120d8:	4403      	add	r3, r0
 80120da:	0c12      	lsrs	r2, r2, #16
 80120dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80120e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80120e4:	b29b      	uxth	r3, r3
 80120e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80120ea:	45c1      	cmp	r9, r8
 80120ec:	f841 3b04 	str.w	r3, [r1], #4
 80120f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80120f4:	d2e6      	bcs.n	80120c4 <quorem+0xa4>
 80120f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80120fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80120fe:	b922      	cbnz	r2, 801210a <quorem+0xea>
 8012100:	3b04      	subs	r3, #4
 8012102:	429d      	cmp	r5, r3
 8012104:	461a      	mov	r2, r3
 8012106:	d30b      	bcc.n	8012120 <quorem+0x100>
 8012108:	613c      	str	r4, [r7, #16]
 801210a:	3601      	adds	r6, #1
 801210c:	4630      	mov	r0, r6
 801210e:	b003      	add	sp, #12
 8012110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012114:	6812      	ldr	r2, [r2, #0]
 8012116:	3b04      	subs	r3, #4
 8012118:	2a00      	cmp	r2, #0
 801211a:	d1cb      	bne.n	80120b4 <quorem+0x94>
 801211c:	3c01      	subs	r4, #1
 801211e:	e7c6      	b.n	80120ae <quorem+0x8e>
 8012120:	6812      	ldr	r2, [r2, #0]
 8012122:	3b04      	subs	r3, #4
 8012124:	2a00      	cmp	r2, #0
 8012126:	d1ef      	bne.n	8012108 <quorem+0xe8>
 8012128:	3c01      	subs	r4, #1
 801212a:	e7ea      	b.n	8012102 <quorem+0xe2>
 801212c:	2000      	movs	r0, #0
 801212e:	e7ee      	b.n	801210e <quorem+0xee>

08012130 <_dtoa_r>:
 8012130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012134:	69c7      	ldr	r7, [r0, #28]
 8012136:	b099      	sub	sp, #100	@ 0x64
 8012138:	ed8d 0b02 	vstr	d0, [sp, #8]
 801213c:	ec55 4b10 	vmov	r4, r5, d0
 8012140:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8012142:	9109      	str	r1, [sp, #36]	@ 0x24
 8012144:	4683      	mov	fp, r0
 8012146:	920e      	str	r2, [sp, #56]	@ 0x38
 8012148:	9313      	str	r3, [sp, #76]	@ 0x4c
 801214a:	b97f      	cbnz	r7, 801216c <_dtoa_r+0x3c>
 801214c:	2010      	movs	r0, #16
 801214e:	f7ff f9ab 	bl	80114a8 <malloc>
 8012152:	4602      	mov	r2, r0
 8012154:	f8cb 001c 	str.w	r0, [fp, #28]
 8012158:	b920      	cbnz	r0, 8012164 <_dtoa_r+0x34>
 801215a:	4ba7      	ldr	r3, [pc, #668]	@ (80123f8 <_dtoa_r+0x2c8>)
 801215c:	21ef      	movs	r1, #239	@ 0xef
 801215e:	48a7      	ldr	r0, [pc, #668]	@ (80123fc <_dtoa_r+0x2cc>)
 8012160:	f7fe feb4 	bl	8010ecc <__assert_func>
 8012164:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012168:	6007      	str	r7, [r0, #0]
 801216a:	60c7      	str	r7, [r0, #12]
 801216c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012170:	6819      	ldr	r1, [r3, #0]
 8012172:	b159      	cbz	r1, 801218c <_dtoa_r+0x5c>
 8012174:	685a      	ldr	r2, [r3, #4]
 8012176:	604a      	str	r2, [r1, #4]
 8012178:	2301      	movs	r3, #1
 801217a:	4093      	lsls	r3, r2
 801217c:	608b      	str	r3, [r1, #8]
 801217e:	4658      	mov	r0, fp
 8012180:	f001 f96a 	bl	8013458 <_Bfree>
 8012184:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012188:	2200      	movs	r2, #0
 801218a:	601a      	str	r2, [r3, #0]
 801218c:	1e2b      	subs	r3, r5, #0
 801218e:	bfb9      	ittee	lt
 8012190:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012194:	9303      	strlt	r3, [sp, #12]
 8012196:	2300      	movge	r3, #0
 8012198:	6033      	strge	r3, [r6, #0]
 801219a:	9f03      	ldr	r7, [sp, #12]
 801219c:	4b98      	ldr	r3, [pc, #608]	@ (8012400 <_dtoa_r+0x2d0>)
 801219e:	bfbc      	itt	lt
 80121a0:	2201      	movlt	r2, #1
 80121a2:	6032      	strlt	r2, [r6, #0]
 80121a4:	43bb      	bics	r3, r7
 80121a6:	d112      	bne.n	80121ce <_dtoa_r+0x9e>
 80121a8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80121aa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80121ae:	6013      	str	r3, [r2, #0]
 80121b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80121b4:	4323      	orrs	r3, r4
 80121b6:	f000 854d 	beq.w	8012c54 <_dtoa_r+0xb24>
 80121ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80121bc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8012414 <_dtoa_r+0x2e4>
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	f000 854f 	beq.w	8012c64 <_dtoa_r+0xb34>
 80121c6:	f10a 0303 	add.w	r3, sl, #3
 80121ca:	f000 bd49 	b.w	8012c60 <_dtoa_r+0xb30>
 80121ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80121d2:	2200      	movs	r2, #0
 80121d4:	ec51 0b17 	vmov	r0, r1, d7
 80121d8:	2300      	movs	r3, #0
 80121da:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80121de:	f7ee fc7d 	bl	8000adc <__aeabi_dcmpeq>
 80121e2:	4680      	mov	r8, r0
 80121e4:	b158      	cbz	r0, 80121fe <_dtoa_r+0xce>
 80121e6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80121e8:	2301      	movs	r3, #1
 80121ea:	6013      	str	r3, [r2, #0]
 80121ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80121ee:	b113      	cbz	r3, 80121f6 <_dtoa_r+0xc6>
 80121f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80121f2:	4b84      	ldr	r3, [pc, #528]	@ (8012404 <_dtoa_r+0x2d4>)
 80121f4:	6013      	str	r3, [r2, #0]
 80121f6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8012418 <_dtoa_r+0x2e8>
 80121fa:	f000 bd33 	b.w	8012c64 <_dtoa_r+0xb34>
 80121fe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8012202:	aa16      	add	r2, sp, #88	@ 0x58
 8012204:	a917      	add	r1, sp, #92	@ 0x5c
 8012206:	4658      	mov	r0, fp
 8012208:	f001 fc10 	bl	8013a2c <__d2b>
 801220c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8012210:	4681      	mov	r9, r0
 8012212:	2e00      	cmp	r6, #0
 8012214:	d077      	beq.n	8012306 <_dtoa_r+0x1d6>
 8012216:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012218:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801221c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012224:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8012228:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801222c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8012230:	4619      	mov	r1, r3
 8012232:	2200      	movs	r2, #0
 8012234:	4b74      	ldr	r3, [pc, #464]	@ (8012408 <_dtoa_r+0x2d8>)
 8012236:	f7ee f831 	bl	800029c <__aeabi_dsub>
 801223a:	a369      	add	r3, pc, #420	@ (adr r3, 80123e0 <_dtoa_r+0x2b0>)
 801223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012240:	f7ee f9e4 	bl	800060c <__aeabi_dmul>
 8012244:	a368      	add	r3, pc, #416	@ (adr r3, 80123e8 <_dtoa_r+0x2b8>)
 8012246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801224a:	f7ee f829 	bl	80002a0 <__adddf3>
 801224e:	4604      	mov	r4, r0
 8012250:	4630      	mov	r0, r6
 8012252:	460d      	mov	r5, r1
 8012254:	f7ee f970 	bl	8000538 <__aeabi_i2d>
 8012258:	a365      	add	r3, pc, #404	@ (adr r3, 80123f0 <_dtoa_r+0x2c0>)
 801225a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801225e:	f7ee f9d5 	bl	800060c <__aeabi_dmul>
 8012262:	4602      	mov	r2, r0
 8012264:	460b      	mov	r3, r1
 8012266:	4620      	mov	r0, r4
 8012268:	4629      	mov	r1, r5
 801226a:	f7ee f819 	bl	80002a0 <__adddf3>
 801226e:	4604      	mov	r4, r0
 8012270:	460d      	mov	r5, r1
 8012272:	f7ee fc7b 	bl	8000b6c <__aeabi_d2iz>
 8012276:	2200      	movs	r2, #0
 8012278:	4607      	mov	r7, r0
 801227a:	2300      	movs	r3, #0
 801227c:	4620      	mov	r0, r4
 801227e:	4629      	mov	r1, r5
 8012280:	f7ee fc36 	bl	8000af0 <__aeabi_dcmplt>
 8012284:	b140      	cbz	r0, 8012298 <_dtoa_r+0x168>
 8012286:	4638      	mov	r0, r7
 8012288:	f7ee f956 	bl	8000538 <__aeabi_i2d>
 801228c:	4622      	mov	r2, r4
 801228e:	462b      	mov	r3, r5
 8012290:	f7ee fc24 	bl	8000adc <__aeabi_dcmpeq>
 8012294:	b900      	cbnz	r0, 8012298 <_dtoa_r+0x168>
 8012296:	3f01      	subs	r7, #1
 8012298:	2f16      	cmp	r7, #22
 801229a:	d851      	bhi.n	8012340 <_dtoa_r+0x210>
 801229c:	4b5b      	ldr	r3, [pc, #364]	@ (801240c <_dtoa_r+0x2dc>)
 801229e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80122a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80122aa:	f7ee fc21 	bl	8000af0 <__aeabi_dcmplt>
 80122ae:	2800      	cmp	r0, #0
 80122b0:	d048      	beq.n	8012344 <_dtoa_r+0x214>
 80122b2:	3f01      	subs	r7, #1
 80122b4:	2300      	movs	r3, #0
 80122b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80122b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80122ba:	1b9b      	subs	r3, r3, r6
 80122bc:	1e5a      	subs	r2, r3, #1
 80122be:	bf44      	itt	mi
 80122c0:	f1c3 0801 	rsbmi	r8, r3, #1
 80122c4:	2300      	movmi	r3, #0
 80122c6:	9208      	str	r2, [sp, #32]
 80122c8:	bf54      	ite	pl
 80122ca:	f04f 0800 	movpl.w	r8, #0
 80122ce:	9308      	strmi	r3, [sp, #32]
 80122d0:	2f00      	cmp	r7, #0
 80122d2:	db39      	blt.n	8012348 <_dtoa_r+0x218>
 80122d4:	9b08      	ldr	r3, [sp, #32]
 80122d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80122d8:	443b      	add	r3, r7
 80122da:	9308      	str	r3, [sp, #32]
 80122dc:	2300      	movs	r3, #0
 80122de:	930a      	str	r3, [sp, #40]	@ 0x28
 80122e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122e2:	2b09      	cmp	r3, #9
 80122e4:	d864      	bhi.n	80123b0 <_dtoa_r+0x280>
 80122e6:	2b05      	cmp	r3, #5
 80122e8:	bfc4      	itt	gt
 80122ea:	3b04      	subgt	r3, #4
 80122ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80122ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122f0:	f1a3 0302 	sub.w	r3, r3, #2
 80122f4:	bfcc      	ite	gt
 80122f6:	2400      	movgt	r4, #0
 80122f8:	2401      	movle	r4, #1
 80122fa:	2b03      	cmp	r3, #3
 80122fc:	d863      	bhi.n	80123c6 <_dtoa_r+0x296>
 80122fe:	e8df f003 	tbb	[pc, r3]
 8012302:	372a      	.short	0x372a
 8012304:	5535      	.short	0x5535
 8012306:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801230a:	441e      	add	r6, r3
 801230c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8012310:	2b20      	cmp	r3, #32
 8012312:	bfc1      	itttt	gt
 8012314:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8012318:	409f      	lslgt	r7, r3
 801231a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801231e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8012322:	bfd6      	itet	le
 8012324:	f1c3 0320 	rsble	r3, r3, #32
 8012328:	ea47 0003 	orrgt.w	r0, r7, r3
 801232c:	fa04 f003 	lslle.w	r0, r4, r3
 8012330:	f7ee f8f2 	bl	8000518 <__aeabi_ui2d>
 8012334:	2201      	movs	r2, #1
 8012336:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801233a:	3e01      	subs	r6, #1
 801233c:	9214      	str	r2, [sp, #80]	@ 0x50
 801233e:	e777      	b.n	8012230 <_dtoa_r+0x100>
 8012340:	2301      	movs	r3, #1
 8012342:	e7b8      	b.n	80122b6 <_dtoa_r+0x186>
 8012344:	9012      	str	r0, [sp, #72]	@ 0x48
 8012346:	e7b7      	b.n	80122b8 <_dtoa_r+0x188>
 8012348:	427b      	negs	r3, r7
 801234a:	930a      	str	r3, [sp, #40]	@ 0x28
 801234c:	2300      	movs	r3, #0
 801234e:	eba8 0807 	sub.w	r8, r8, r7
 8012352:	930f      	str	r3, [sp, #60]	@ 0x3c
 8012354:	e7c4      	b.n	80122e0 <_dtoa_r+0x1b0>
 8012356:	2300      	movs	r3, #0
 8012358:	930b      	str	r3, [sp, #44]	@ 0x2c
 801235a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801235c:	2b00      	cmp	r3, #0
 801235e:	dc35      	bgt.n	80123cc <_dtoa_r+0x29c>
 8012360:	2301      	movs	r3, #1
 8012362:	9300      	str	r3, [sp, #0]
 8012364:	9307      	str	r3, [sp, #28]
 8012366:	461a      	mov	r2, r3
 8012368:	920e      	str	r2, [sp, #56]	@ 0x38
 801236a:	e00b      	b.n	8012384 <_dtoa_r+0x254>
 801236c:	2301      	movs	r3, #1
 801236e:	e7f3      	b.n	8012358 <_dtoa_r+0x228>
 8012370:	2300      	movs	r3, #0
 8012372:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012376:	18fb      	adds	r3, r7, r3
 8012378:	9300      	str	r3, [sp, #0]
 801237a:	3301      	adds	r3, #1
 801237c:	2b01      	cmp	r3, #1
 801237e:	9307      	str	r3, [sp, #28]
 8012380:	bfb8      	it	lt
 8012382:	2301      	movlt	r3, #1
 8012384:	f8db 001c 	ldr.w	r0, [fp, #28]
 8012388:	2100      	movs	r1, #0
 801238a:	2204      	movs	r2, #4
 801238c:	f102 0514 	add.w	r5, r2, #20
 8012390:	429d      	cmp	r5, r3
 8012392:	d91f      	bls.n	80123d4 <_dtoa_r+0x2a4>
 8012394:	6041      	str	r1, [r0, #4]
 8012396:	4658      	mov	r0, fp
 8012398:	f001 f81e 	bl	80133d8 <_Balloc>
 801239c:	4682      	mov	sl, r0
 801239e:	2800      	cmp	r0, #0
 80123a0:	d13c      	bne.n	801241c <_dtoa_r+0x2ec>
 80123a2:	4b1b      	ldr	r3, [pc, #108]	@ (8012410 <_dtoa_r+0x2e0>)
 80123a4:	4602      	mov	r2, r0
 80123a6:	f240 11af 	movw	r1, #431	@ 0x1af
 80123aa:	e6d8      	b.n	801215e <_dtoa_r+0x2e>
 80123ac:	2301      	movs	r3, #1
 80123ae:	e7e0      	b.n	8012372 <_dtoa_r+0x242>
 80123b0:	2401      	movs	r4, #1
 80123b2:	2300      	movs	r3, #0
 80123b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80123b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80123b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80123bc:	9300      	str	r3, [sp, #0]
 80123be:	9307      	str	r3, [sp, #28]
 80123c0:	2200      	movs	r2, #0
 80123c2:	2312      	movs	r3, #18
 80123c4:	e7d0      	b.n	8012368 <_dtoa_r+0x238>
 80123c6:	2301      	movs	r3, #1
 80123c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80123ca:	e7f5      	b.n	80123b8 <_dtoa_r+0x288>
 80123cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80123ce:	9300      	str	r3, [sp, #0]
 80123d0:	9307      	str	r3, [sp, #28]
 80123d2:	e7d7      	b.n	8012384 <_dtoa_r+0x254>
 80123d4:	3101      	adds	r1, #1
 80123d6:	0052      	lsls	r2, r2, #1
 80123d8:	e7d8      	b.n	801238c <_dtoa_r+0x25c>
 80123da:	bf00      	nop
 80123dc:	f3af 8000 	nop.w
 80123e0:	636f4361 	.word	0x636f4361
 80123e4:	3fd287a7 	.word	0x3fd287a7
 80123e8:	8b60c8b3 	.word	0x8b60c8b3
 80123ec:	3fc68a28 	.word	0x3fc68a28
 80123f0:	509f79fb 	.word	0x509f79fb
 80123f4:	3fd34413 	.word	0x3fd34413
 80123f8:	080173b5 	.word	0x080173b5
 80123fc:	080173cc 	.word	0x080173cc
 8012400:	7ff00000 	.word	0x7ff00000
 8012404:	08017385 	.word	0x08017385
 8012408:	3ff80000 	.word	0x3ff80000
 801240c:	080174d8 	.word	0x080174d8
 8012410:	08017424 	.word	0x08017424
 8012414:	080173b1 	.word	0x080173b1
 8012418:	08017384 	.word	0x08017384
 801241c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8012420:	6018      	str	r0, [r3, #0]
 8012422:	9b07      	ldr	r3, [sp, #28]
 8012424:	2b0e      	cmp	r3, #14
 8012426:	f200 80a4 	bhi.w	8012572 <_dtoa_r+0x442>
 801242a:	2c00      	cmp	r4, #0
 801242c:	f000 80a1 	beq.w	8012572 <_dtoa_r+0x442>
 8012430:	2f00      	cmp	r7, #0
 8012432:	dd33      	ble.n	801249c <_dtoa_r+0x36c>
 8012434:	4bad      	ldr	r3, [pc, #692]	@ (80126ec <_dtoa_r+0x5bc>)
 8012436:	f007 020f 	and.w	r2, r7, #15
 801243a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801243e:	ed93 7b00 	vldr	d7, [r3]
 8012442:	05f8      	lsls	r0, r7, #23
 8012444:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012448:	ea4f 1427 	mov.w	r4, r7, asr #4
 801244c:	d516      	bpl.n	801247c <_dtoa_r+0x34c>
 801244e:	4ba8      	ldr	r3, [pc, #672]	@ (80126f0 <_dtoa_r+0x5c0>)
 8012450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8012454:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012458:	f7ee fa02 	bl	8000860 <__aeabi_ddiv>
 801245c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012460:	f004 040f 	and.w	r4, r4, #15
 8012464:	2603      	movs	r6, #3
 8012466:	4da2      	ldr	r5, [pc, #648]	@ (80126f0 <_dtoa_r+0x5c0>)
 8012468:	b954      	cbnz	r4, 8012480 <_dtoa_r+0x350>
 801246a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801246e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012472:	f7ee f9f5 	bl	8000860 <__aeabi_ddiv>
 8012476:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801247a:	e028      	b.n	80124ce <_dtoa_r+0x39e>
 801247c:	2602      	movs	r6, #2
 801247e:	e7f2      	b.n	8012466 <_dtoa_r+0x336>
 8012480:	07e1      	lsls	r1, r4, #31
 8012482:	d508      	bpl.n	8012496 <_dtoa_r+0x366>
 8012484:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8012488:	e9d5 2300 	ldrd	r2, r3, [r5]
 801248c:	f7ee f8be 	bl	800060c <__aeabi_dmul>
 8012490:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012494:	3601      	adds	r6, #1
 8012496:	1064      	asrs	r4, r4, #1
 8012498:	3508      	adds	r5, #8
 801249a:	e7e5      	b.n	8012468 <_dtoa_r+0x338>
 801249c:	f000 80d2 	beq.w	8012644 <_dtoa_r+0x514>
 80124a0:	427c      	negs	r4, r7
 80124a2:	4b92      	ldr	r3, [pc, #584]	@ (80126ec <_dtoa_r+0x5bc>)
 80124a4:	4d92      	ldr	r5, [pc, #584]	@ (80126f0 <_dtoa_r+0x5c0>)
 80124a6:	f004 020f 	and.w	r2, r4, #15
 80124aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80124ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80124b6:	f7ee f8a9 	bl	800060c <__aeabi_dmul>
 80124ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80124be:	1124      	asrs	r4, r4, #4
 80124c0:	2300      	movs	r3, #0
 80124c2:	2602      	movs	r6, #2
 80124c4:	2c00      	cmp	r4, #0
 80124c6:	f040 80b2 	bne.w	801262e <_dtoa_r+0x4fe>
 80124ca:	2b00      	cmp	r3, #0
 80124cc:	d1d3      	bne.n	8012476 <_dtoa_r+0x346>
 80124ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80124d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	f000 80b7 	beq.w	8012648 <_dtoa_r+0x518>
 80124da:	4b86      	ldr	r3, [pc, #536]	@ (80126f4 <_dtoa_r+0x5c4>)
 80124dc:	2200      	movs	r2, #0
 80124de:	4620      	mov	r0, r4
 80124e0:	4629      	mov	r1, r5
 80124e2:	f7ee fb05 	bl	8000af0 <__aeabi_dcmplt>
 80124e6:	2800      	cmp	r0, #0
 80124e8:	f000 80ae 	beq.w	8012648 <_dtoa_r+0x518>
 80124ec:	9b07      	ldr	r3, [sp, #28]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	f000 80aa 	beq.w	8012648 <_dtoa_r+0x518>
 80124f4:	9b00      	ldr	r3, [sp, #0]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	dd37      	ble.n	801256a <_dtoa_r+0x43a>
 80124fa:	1e7b      	subs	r3, r7, #1
 80124fc:	9304      	str	r3, [sp, #16]
 80124fe:	4620      	mov	r0, r4
 8012500:	4b7d      	ldr	r3, [pc, #500]	@ (80126f8 <_dtoa_r+0x5c8>)
 8012502:	2200      	movs	r2, #0
 8012504:	4629      	mov	r1, r5
 8012506:	f7ee f881 	bl	800060c <__aeabi_dmul>
 801250a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801250e:	9c00      	ldr	r4, [sp, #0]
 8012510:	3601      	adds	r6, #1
 8012512:	4630      	mov	r0, r6
 8012514:	f7ee f810 	bl	8000538 <__aeabi_i2d>
 8012518:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801251c:	f7ee f876 	bl	800060c <__aeabi_dmul>
 8012520:	4b76      	ldr	r3, [pc, #472]	@ (80126fc <_dtoa_r+0x5cc>)
 8012522:	2200      	movs	r2, #0
 8012524:	f7ed febc 	bl	80002a0 <__adddf3>
 8012528:	4605      	mov	r5, r0
 801252a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801252e:	2c00      	cmp	r4, #0
 8012530:	f040 808d 	bne.w	801264e <_dtoa_r+0x51e>
 8012534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012538:	4b71      	ldr	r3, [pc, #452]	@ (8012700 <_dtoa_r+0x5d0>)
 801253a:	2200      	movs	r2, #0
 801253c:	f7ed feae 	bl	800029c <__aeabi_dsub>
 8012540:	4602      	mov	r2, r0
 8012542:	460b      	mov	r3, r1
 8012544:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012548:	462a      	mov	r2, r5
 801254a:	4633      	mov	r3, r6
 801254c:	f7ee faee 	bl	8000b2c <__aeabi_dcmpgt>
 8012550:	2800      	cmp	r0, #0
 8012552:	f040 828b 	bne.w	8012a6c <_dtoa_r+0x93c>
 8012556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801255a:	462a      	mov	r2, r5
 801255c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8012560:	f7ee fac6 	bl	8000af0 <__aeabi_dcmplt>
 8012564:	2800      	cmp	r0, #0
 8012566:	f040 8128 	bne.w	80127ba <_dtoa_r+0x68a>
 801256a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801256e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8012572:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8012574:	2b00      	cmp	r3, #0
 8012576:	f2c0 815a 	blt.w	801282e <_dtoa_r+0x6fe>
 801257a:	2f0e      	cmp	r7, #14
 801257c:	f300 8157 	bgt.w	801282e <_dtoa_r+0x6fe>
 8012580:	4b5a      	ldr	r3, [pc, #360]	@ (80126ec <_dtoa_r+0x5bc>)
 8012582:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8012586:	ed93 7b00 	vldr	d7, [r3]
 801258a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801258c:	2b00      	cmp	r3, #0
 801258e:	ed8d 7b00 	vstr	d7, [sp]
 8012592:	da03      	bge.n	801259c <_dtoa_r+0x46c>
 8012594:	9b07      	ldr	r3, [sp, #28]
 8012596:	2b00      	cmp	r3, #0
 8012598:	f340 8101 	ble.w	801279e <_dtoa_r+0x66e>
 801259c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80125a0:	4656      	mov	r6, sl
 80125a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125a6:	4620      	mov	r0, r4
 80125a8:	4629      	mov	r1, r5
 80125aa:	f7ee f959 	bl	8000860 <__aeabi_ddiv>
 80125ae:	f7ee fadd 	bl	8000b6c <__aeabi_d2iz>
 80125b2:	4680      	mov	r8, r0
 80125b4:	f7ed ffc0 	bl	8000538 <__aeabi_i2d>
 80125b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125bc:	f7ee f826 	bl	800060c <__aeabi_dmul>
 80125c0:	4602      	mov	r2, r0
 80125c2:	460b      	mov	r3, r1
 80125c4:	4620      	mov	r0, r4
 80125c6:	4629      	mov	r1, r5
 80125c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80125cc:	f7ed fe66 	bl	800029c <__aeabi_dsub>
 80125d0:	f806 4b01 	strb.w	r4, [r6], #1
 80125d4:	9d07      	ldr	r5, [sp, #28]
 80125d6:	eba6 040a 	sub.w	r4, r6, sl
 80125da:	42a5      	cmp	r5, r4
 80125dc:	4602      	mov	r2, r0
 80125de:	460b      	mov	r3, r1
 80125e0:	f040 8117 	bne.w	8012812 <_dtoa_r+0x6e2>
 80125e4:	f7ed fe5c 	bl	80002a0 <__adddf3>
 80125e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125ec:	4604      	mov	r4, r0
 80125ee:	460d      	mov	r5, r1
 80125f0:	f7ee fa9c 	bl	8000b2c <__aeabi_dcmpgt>
 80125f4:	2800      	cmp	r0, #0
 80125f6:	f040 80f9 	bne.w	80127ec <_dtoa_r+0x6bc>
 80125fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125fe:	4620      	mov	r0, r4
 8012600:	4629      	mov	r1, r5
 8012602:	f7ee fa6b 	bl	8000adc <__aeabi_dcmpeq>
 8012606:	b118      	cbz	r0, 8012610 <_dtoa_r+0x4e0>
 8012608:	f018 0f01 	tst.w	r8, #1
 801260c:	f040 80ee 	bne.w	80127ec <_dtoa_r+0x6bc>
 8012610:	4649      	mov	r1, r9
 8012612:	4658      	mov	r0, fp
 8012614:	f000 ff20 	bl	8013458 <_Bfree>
 8012618:	2300      	movs	r3, #0
 801261a:	7033      	strb	r3, [r6, #0]
 801261c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801261e:	3701      	adds	r7, #1
 8012620:	601f      	str	r7, [r3, #0]
 8012622:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012624:	2b00      	cmp	r3, #0
 8012626:	f000 831d 	beq.w	8012c64 <_dtoa_r+0xb34>
 801262a:	601e      	str	r6, [r3, #0]
 801262c:	e31a      	b.n	8012c64 <_dtoa_r+0xb34>
 801262e:	07e2      	lsls	r2, r4, #31
 8012630:	d505      	bpl.n	801263e <_dtoa_r+0x50e>
 8012632:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012636:	f7ed ffe9 	bl	800060c <__aeabi_dmul>
 801263a:	3601      	adds	r6, #1
 801263c:	2301      	movs	r3, #1
 801263e:	1064      	asrs	r4, r4, #1
 8012640:	3508      	adds	r5, #8
 8012642:	e73f      	b.n	80124c4 <_dtoa_r+0x394>
 8012644:	2602      	movs	r6, #2
 8012646:	e742      	b.n	80124ce <_dtoa_r+0x39e>
 8012648:	9c07      	ldr	r4, [sp, #28]
 801264a:	9704      	str	r7, [sp, #16]
 801264c:	e761      	b.n	8012512 <_dtoa_r+0x3e2>
 801264e:	4b27      	ldr	r3, [pc, #156]	@ (80126ec <_dtoa_r+0x5bc>)
 8012650:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012652:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012656:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801265a:	4454      	add	r4, sl
 801265c:	2900      	cmp	r1, #0
 801265e:	d053      	beq.n	8012708 <_dtoa_r+0x5d8>
 8012660:	4928      	ldr	r1, [pc, #160]	@ (8012704 <_dtoa_r+0x5d4>)
 8012662:	2000      	movs	r0, #0
 8012664:	f7ee f8fc 	bl	8000860 <__aeabi_ddiv>
 8012668:	4633      	mov	r3, r6
 801266a:	462a      	mov	r2, r5
 801266c:	f7ed fe16 	bl	800029c <__aeabi_dsub>
 8012670:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012674:	4656      	mov	r6, sl
 8012676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801267a:	f7ee fa77 	bl	8000b6c <__aeabi_d2iz>
 801267e:	4605      	mov	r5, r0
 8012680:	f7ed ff5a 	bl	8000538 <__aeabi_i2d>
 8012684:	4602      	mov	r2, r0
 8012686:	460b      	mov	r3, r1
 8012688:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801268c:	f7ed fe06 	bl	800029c <__aeabi_dsub>
 8012690:	3530      	adds	r5, #48	@ 0x30
 8012692:	4602      	mov	r2, r0
 8012694:	460b      	mov	r3, r1
 8012696:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801269a:	f806 5b01 	strb.w	r5, [r6], #1
 801269e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80126a2:	f7ee fa25 	bl	8000af0 <__aeabi_dcmplt>
 80126a6:	2800      	cmp	r0, #0
 80126a8:	d171      	bne.n	801278e <_dtoa_r+0x65e>
 80126aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80126ae:	4911      	ldr	r1, [pc, #68]	@ (80126f4 <_dtoa_r+0x5c4>)
 80126b0:	2000      	movs	r0, #0
 80126b2:	f7ed fdf3 	bl	800029c <__aeabi_dsub>
 80126b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80126ba:	f7ee fa19 	bl	8000af0 <__aeabi_dcmplt>
 80126be:	2800      	cmp	r0, #0
 80126c0:	f040 8095 	bne.w	80127ee <_dtoa_r+0x6be>
 80126c4:	42a6      	cmp	r6, r4
 80126c6:	f43f af50 	beq.w	801256a <_dtoa_r+0x43a>
 80126ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80126ce:	4b0a      	ldr	r3, [pc, #40]	@ (80126f8 <_dtoa_r+0x5c8>)
 80126d0:	2200      	movs	r2, #0
 80126d2:	f7ed ff9b 	bl	800060c <__aeabi_dmul>
 80126d6:	4b08      	ldr	r3, [pc, #32]	@ (80126f8 <_dtoa_r+0x5c8>)
 80126d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80126dc:	2200      	movs	r2, #0
 80126de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80126e2:	f7ed ff93 	bl	800060c <__aeabi_dmul>
 80126e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80126ea:	e7c4      	b.n	8012676 <_dtoa_r+0x546>
 80126ec:	080174d8 	.word	0x080174d8
 80126f0:	080174b0 	.word	0x080174b0
 80126f4:	3ff00000 	.word	0x3ff00000
 80126f8:	40240000 	.word	0x40240000
 80126fc:	401c0000 	.word	0x401c0000
 8012700:	40140000 	.word	0x40140000
 8012704:	3fe00000 	.word	0x3fe00000
 8012708:	4631      	mov	r1, r6
 801270a:	4628      	mov	r0, r5
 801270c:	f7ed ff7e 	bl	800060c <__aeabi_dmul>
 8012710:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8012714:	9415      	str	r4, [sp, #84]	@ 0x54
 8012716:	4656      	mov	r6, sl
 8012718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801271c:	f7ee fa26 	bl	8000b6c <__aeabi_d2iz>
 8012720:	4605      	mov	r5, r0
 8012722:	f7ed ff09 	bl	8000538 <__aeabi_i2d>
 8012726:	4602      	mov	r2, r0
 8012728:	460b      	mov	r3, r1
 801272a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801272e:	f7ed fdb5 	bl	800029c <__aeabi_dsub>
 8012732:	3530      	adds	r5, #48	@ 0x30
 8012734:	f806 5b01 	strb.w	r5, [r6], #1
 8012738:	4602      	mov	r2, r0
 801273a:	460b      	mov	r3, r1
 801273c:	42a6      	cmp	r6, r4
 801273e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8012742:	f04f 0200 	mov.w	r2, #0
 8012746:	d124      	bne.n	8012792 <_dtoa_r+0x662>
 8012748:	4bac      	ldr	r3, [pc, #688]	@ (80129fc <_dtoa_r+0x8cc>)
 801274a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801274e:	f7ed fda7 	bl	80002a0 <__adddf3>
 8012752:	4602      	mov	r2, r0
 8012754:	460b      	mov	r3, r1
 8012756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801275a:	f7ee f9e7 	bl	8000b2c <__aeabi_dcmpgt>
 801275e:	2800      	cmp	r0, #0
 8012760:	d145      	bne.n	80127ee <_dtoa_r+0x6be>
 8012762:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8012766:	49a5      	ldr	r1, [pc, #660]	@ (80129fc <_dtoa_r+0x8cc>)
 8012768:	2000      	movs	r0, #0
 801276a:	f7ed fd97 	bl	800029c <__aeabi_dsub>
 801276e:	4602      	mov	r2, r0
 8012770:	460b      	mov	r3, r1
 8012772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012776:	f7ee f9bb 	bl	8000af0 <__aeabi_dcmplt>
 801277a:	2800      	cmp	r0, #0
 801277c:	f43f aef5 	beq.w	801256a <_dtoa_r+0x43a>
 8012780:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8012782:	1e73      	subs	r3, r6, #1
 8012784:	9315      	str	r3, [sp, #84]	@ 0x54
 8012786:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801278a:	2b30      	cmp	r3, #48	@ 0x30
 801278c:	d0f8      	beq.n	8012780 <_dtoa_r+0x650>
 801278e:	9f04      	ldr	r7, [sp, #16]
 8012790:	e73e      	b.n	8012610 <_dtoa_r+0x4e0>
 8012792:	4b9b      	ldr	r3, [pc, #620]	@ (8012a00 <_dtoa_r+0x8d0>)
 8012794:	f7ed ff3a 	bl	800060c <__aeabi_dmul>
 8012798:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801279c:	e7bc      	b.n	8012718 <_dtoa_r+0x5e8>
 801279e:	d10c      	bne.n	80127ba <_dtoa_r+0x68a>
 80127a0:	4b98      	ldr	r3, [pc, #608]	@ (8012a04 <_dtoa_r+0x8d4>)
 80127a2:	2200      	movs	r2, #0
 80127a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127a8:	f7ed ff30 	bl	800060c <__aeabi_dmul>
 80127ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80127b0:	f7ee f9b2 	bl	8000b18 <__aeabi_dcmpge>
 80127b4:	2800      	cmp	r0, #0
 80127b6:	f000 8157 	beq.w	8012a68 <_dtoa_r+0x938>
 80127ba:	2400      	movs	r4, #0
 80127bc:	4625      	mov	r5, r4
 80127be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80127c0:	43db      	mvns	r3, r3
 80127c2:	9304      	str	r3, [sp, #16]
 80127c4:	4656      	mov	r6, sl
 80127c6:	2700      	movs	r7, #0
 80127c8:	4621      	mov	r1, r4
 80127ca:	4658      	mov	r0, fp
 80127cc:	f000 fe44 	bl	8013458 <_Bfree>
 80127d0:	2d00      	cmp	r5, #0
 80127d2:	d0dc      	beq.n	801278e <_dtoa_r+0x65e>
 80127d4:	b12f      	cbz	r7, 80127e2 <_dtoa_r+0x6b2>
 80127d6:	42af      	cmp	r7, r5
 80127d8:	d003      	beq.n	80127e2 <_dtoa_r+0x6b2>
 80127da:	4639      	mov	r1, r7
 80127dc:	4658      	mov	r0, fp
 80127de:	f000 fe3b 	bl	8013458 <_Bfree>
 80127e2:	4629      	mov	r1, r5
 80127e4:	4658      	mov	r0, fp
 80127e6:	f000 fe37 	bl	8013458 <_Bfree>
 80127ea:	e7d0      	b.n	801278e <_dtoa_r+0x65e>
 80127ec:	9704      	str	r7, [sp, #16]
 80127ee:	4633      	mov	r3, r6
 80127f0:	461e      	mov	r6, r3
 80127f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80127f6:	2a39      	cmp	r2, #57	@ 0x39
 80127f8:	d107      	bne.n	801280a <_dtoa_r+0x6da>
 80127fa:	459a      	cmp	sl, r3
 80127fc:	d1f8      	bne.n	80127f0 <_dtoa_r+0x6c0>
 80127fe:	9a04      	ldr	r2, [sp, #16]
 8012800:	3201      	adds	r2, #1
 8012802:	9204      	str	r2, [sp, #16]
 8012804:	2230      	movs	r2, #48	@ 0x30
 8012806:	f88a 2000 	strb.w	r2, [sl]
 801280a:	781a      	ldrb	r2, [r3, #0]
 801280c:	3201      	adds	r2, #1
 801280e:	701a      	strb	r2, [r3, #0]
 8012810:	e7bd      	b.n	801278e <_dtoa_r+0x65e>
 8012812:	4b7b      	ldr	r3, [pc, #492]	@ (8012a00 <_dtoa_r+0x8d0>)
 8012814:	2200      	movs	r2, #0
 8012816:	f7ed fef9 	bl	800060c <__aeabi_dmul>
 801281a:	2200      	movs	r2, #0
 801281c:	2300      	movs	r3, #0
 801281e:	4604      	mov	r4, r0
 8012820:	460d      	mov	r5, r1
 8012822:	f7ee f95b 	bl	8000adc <__aeabi_dcmpeq>
 8012826:	2800      	cmp	r0, #0
 8012828:	f43f aebb 	beq.w	80125a2 <_dtoa_r+0x472>
 801282c:	e6f0      	b.n	8012610 <_dtoa_r+0x4e0>
 801282e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012830:	2a00      	cmp	r2, #0
 8012832:	f000 80db 	beq.w	80129ec <_dtoa_r+0x8bc>
 8012836:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012838:	2a01      	cmp	r2, #1
 801283a:	f300 80bf 	bgt.w	80129bc <_dtoa_r+0x88c>
 801283e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8012840:	2a00      	cmp	r2, #0
 8012842:	f000 80b7 	beq.w	80129b4 <_dtoa_r+0x884>
 8012846:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801284a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801284c:	4646      	mov	r6, r8
 801284e:	9a08      	ldr	r2, [sp, #32]
 8012850:	2101      	movs	r1, #1
 8012852:	441a      	add	r2, r3
 8012854:	4658      	mov	r0, fp
 8012856:	4498      	add	r8, r3
 8012858:	9208      	str	r2, [sp, #32]
 801285a:	f000 feb1 	bl	80135c0 <__i2b>
 801285e:	4605      	mov	r5, r0
 8012860:	b15e      	cbz	r6, 801287a <_dtoa_r+0x74a>
 8012862:	9b08      	ldr	r3, [sp, #32]
 8012864:	2b00      	cmp	r3, #0
 8012866:	dd08      	ble.n	801287a <_dtoa_r+0x74a>
 8012868:	42b3      	cmp	r3, r6
 801286a:	9a08      	ldr	r2, [sp, #32]
 801286c:	bfa8      	it	ge
 801286e:	4633      	movge	r3, r6
 8012870:	eba8 0803 	sub.w	r8, r8, r3
 8012874:	1af6      	subs	r6, r6, r3
 8012876:	1ad3      	subs	r3, r2, r3
 8012878:	9308      	str	r3, [sp, #32]
 801287a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801287c:	b1f3      	cbz	r3, 80128bc <_dtoa_r+0x78c>
 801287e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012880:	2b00      	cmp	r3, #0
 8012882:	f000 80b7 	beq.w	80129f4 <_dtoa_r+0x8c4>
 8012886:	b18c      	cbz	r4, 80128ac <_dtoa_r+0x77c>
 8012888:	4629      	mov	r1, r5
 801288a:	4622      	mov	r2, r4
 801288c:	4658      	mov	r0, fp
 801288e:	f000 ff57 	bl	8013740 <__pow5mult>
 8012892:	464a      	mov	r2, r9
 8012894:	4601      	mov	r1, r0
 8012896:	4605      	mov	r5, r0
 8012898:	4658      	mov	r0, fp
 801289a:	f000 fea7 	bl	80135ec <__multiply>
 801289e:	4649      	mov	r1, r9
 80128a0:	9004      	str	r0, [sp, #16]
 80128a2:	4658      	mov	r0, fp
 80128a4:	f000 fdd8 	bl	8013458 <_Bfree>
 80128a8:	9b04      	ldr	r3, [sp, #16]
 80128aa:	4699      	mov	r9, r3
 80128ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128ae:	1b1a      	subs	r2, r3, r4
 80128b0:	d004      	beq.n	80128bc <_dtoa_r+0x78c>
 80128b2:	4649      	mov	r1, r9
 80128b4:	4658      	mov	r0, fp
 80128b6:	f000 ff43 	bl	8013740 <__pow5mult>
 80128ba:	4681      	mov	r9, r0
 80128bc:	2101      	movs	r1, #1
 80128be:	4658      	mov	r0, fp
 80128c0:	f000 fe7e 	bl	80135c0 <__i2b>
 80128c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80128c6:	4604      	mov	r4, r0
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	f000 81cf 	beq.w	8012c6c <_dtoa_r+0xb3c>
 80128ce:	461a      	mov	r2, r3
 80128d0:	4601      	mov	r1, r0
 80128d2:	4658      	mov	r0, fp
 80128d4:	f000 ff34 	bl	8013740 <__pow5mult>
 80128d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80128da:	2b01      	cmp	r3, #1
 80128dc:	4604      	mov	r4, r0
 80128de:	f300 8095 	bgt.w	8012a0c <_dtoa_r+0x8dc>
 80128e2:	9b02      	ldr	r3, [sp, #8]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	f040 8087 	bne.w	80129f8 <_dtoa_r+0x8c8>
 80128ea:	9b03      	ldr	r3, [sp, #12]
 80128ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	f040 8089 	bne.w	8012a08 <_dtoa_r+0x8d8>
 80128f6:	9b03      	ldr	r3, [sp, #12]
 80128f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80128fc:	0d1b      	lsrs	r3, r3, #20
 80128fe:	051b      	lsls	r3, r3, #20
 8012900:	b12b      	cbz	r3, 801290e <_dtoa_r+0x7de>
 8012902:	9b08      	ldr	r3, [sp, #32]
 8012904:	3301      	adds	r3, #1
 8012906:	9308      	str	r3, [sp, #32]
 8012908:	f108 0801 	add.w	r8, r8, #1
 801290c:	2301      	movs	r3, #1
 801290e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012912:	2b00      	cmp	r3, #0
 8012914:	f000 81b0 	beq.w	8012c78 <_dtoa_r+0xb48>
 8012918:	6923      	ldr	r3, [r4, #16]
 801291a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801291e:	6918      	ldr	r0, [r3, #16]
 8012920:	f000 fe02 	bl	8013528 <__hi0bits>
 8012924:	f1c0 0020 	rsb	r0, r0, #32
 8012928:	9b08      	ldr	r3, [sp, #32]
 801292a:	4418      	add	r0, r3
 801292c:	f010 001f 	ands.w	r0, r0, #31
 8012930:	d077      	beq.n	8012a22 <_dtoa_r+0x8f2>
 8012932:	f1c0 0320 	rsb	r3, r0, #32
 8012936:	2b04      	cmp	r3, #4
 8012938:	dd6b      	ble.n	8012a12 <_dtoa_r+0x8e2>
 801293a:	9b08      	ldr	r3, [sp, #32]
 801293c:	f1c0 001c 	rsb	r0, r0, #28
 8012940:	4403      	add	r3, r0
 8012942:	4480      	add	r8, r0
 8012944:	4406      	add	r6, r0
 8012946:	9308      	str	r3, [sp, #32]
 8012948:	f1b8 0f00 	cmp.w	r8, #0
 801294c:	dd05      	ble.n	801295a <_dtoa_r+0x82a>
 801294e:	4649      	mov	r1, r9
 8012950:	4642      	mov	r2, r8
 8012952:	4658      	mov	r0, fp
 8012954:	f000 ff4e 	bl	80137f4 <__lshift>
 8012958:	4681      	mov	r9, r0
 801295a:	9b08      	ldr	r3, [sp, #32]
 801295c:	2b00      	cmp	r3, #0
 801295e:	dd05      	ble.n	801296c <_dtoa_r+0x83c>
 8012960:	4621      	mov	r1, r4
 8012962:	461a      	mov	r2, r3
 8012964:	4658      	mov	r0, fp
 8012966:	f000 ff45 	bl	80137f4 <__lshift>
 801296a:	4604      	mov	r4, r0
 801296c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801296e:	2b00      	cmp	r3, #0
 8012970:	d059      	beq.n	8012a26 <_dtoa_r+0x8f6>
 8012972:	4621      	mov	r1, r4
 8012974:	4648      	mov	r0, r9
 8012976:	f000 ffa9 	bl	80138cc <__mcmp>
 801297a:	2800      	cmp	r0, #0
 801297c:	da53      	bge.n	8012a26 <_dtoa_r+0x8f6>
 801297e:	1e7b      	subs	r3, r7, #1
 8012980:	9304      	str	r3, [sp, #16]
 8012982:	4649      	mov	r1, r9
 8012984:	2300      	movs	r3, #0
 8012986:	220a      	movs	r2, #10
 8012988:	4658      	mov	r0, fp
 801298a:	f000 fd87 	bl	801349c <__multadd>
 801298e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012990:	4681      	mov	r9, r0
 8012992:	2b00      	cmp	r3, #0
 8012994:	f000 8172 	beq.w	8012c7c <_dtoa_r+0xb4c>
 8012998:	2300      	movs	r3, #0
 801299a:	4629      	mov	r1, r5
 801299c:	220a      	movs	r2, #10
 801299e:	4658      	mov	r0, fp
 80129a0:	f000 fd7c 	bl	801349c <__multadd>
 80129a4:	9b00      	ldr	r3, [sp, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	4605      	mov	r5, r0
 80129aa:	dc67      	bgt.n	8012a7c <_dtoa_r+0x94c>
 80129ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80129ae:	2b02      	cmp	r3, #2
 80129b0:	dc41      	bgt.n	8012a36 <_dtoa_r+0x906>
 80129b2:	e063      	b.n	8012a7c <_dtoa_r+0x94c>
 80129b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80129b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80129ba:	e746      	b.n	801284a <_dtoa_r+0x71a>
 80129bc:	9b07      	ldr	r3, [sp, #28]
 80129be:	1e5c      	subs	r4, r3, #1
 80129c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80129c2:	42a3      	cmp	r3, r4
 80129c4:	bfbf      	itttt	lt
 80129c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80129c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80129ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80129cc:	1ae3      	sublt	r3, r4, r3
 80129ce:	bfb4      	ite	lt
 80129d0:	18d2      	addlt	r2, r2, r3
 80129d2:	1b1c      	subge	r4, r3, r4
 80129d4:	9b07      	ldr	r3, [sp, #28]
 80129d6:	bfbc      	itt	lt
 80129d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80129da:	2400      	movlt	r4, #0
 80129dc:	2b00      	cmp	r3, #0
 80129de:	bfb5      	itete	lt
 80129e0:	eba8 0603 	sublt.w	r6, r8, r3
 80129e4:	9b07      	ldrge	r3, [sp, #28]
 80129e6:	2300      	movlt	r3, #0
 80129e8:	4646      	movge	r6, r8
 80129ea:	e730      	b.n	801284e <_dtoa_r+0x71e>
 80129ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80129ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80129f0:	4646      	mov	r6, r8
 80129f2:	e735      	b.n	8012860 <_dtoa_r+0x730>
 80129f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80129f6:	e75c      	b.n	80128b2 <_dtoa_r+0x782>
 80129f8:	2300      	movs	r3, #0
 80129fa:	e788      	b.n	801290e <_dtoa_r+0x7de>
 80129fc:	3fe00000 	.word	0x3fe00000
 8012a00:	40240000 	.word	0x40240000
 8012a04:	40140000 	.word	0x40140000
 8012a08:	9b02      	ldr	r3, [sp, #8]
 8012a0a:	e780      	b.n	801290e <_dtoa_r+0x7de>
 8012a0c:	2300      	movs	r3, #0
 8012a0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8012a10:	e782      	b.n	8012918 <_dtoa_r+0x7e8>
 8012a12:	d099      	beq.n	8012948 <_dtoa_r+0x818>
 8012a14:	9a08      	ldr	r2, [sp, #32]
 8012a16:	331c      	adds	r3, #28
 8012a18:	441a      	add	r2, r3
 8012a1a:	4498      	add	r8, r3
 8012a1c:	441e      	add	r6, r3
 8012a1e:	9208      	str	r2, [sp, #32]
 8012a20:	e792      	b.n	8012948 <_dtoa_r+0x818>
 8012a22:	4603      	mov	r3, r0
 8012a24:	e7f6      	b.n	8012a14 <_dtoa_r+0x8e4>
 8012a26:	9b07      	ldr	r3, [sp, #28]
 8012a28:	9704      	str	r7, [sp, #16]
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	dc20      	bgt.n	8012a70 <_dtoa_r+0x940>
 8012a2e:	9300      	str	r3, [sp, #0]
 8012a30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012a32:	2b02      	cmp	r3, #2
 8012a34:	dd1e      	ble.n	8012a74 <_dtoa_r+0x944>
 8012a36:	9b00      	ldr	r3, [sp, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	f47f aec0 	bne.w	80127be <_dtoa_r+0x68e>
 8012a3e:	4621      	mov	r1, r4
 8012a40:	2205      	movs	r2, #5
 8012a42:	4658      	mov	r0, fp
 8012a44:	f000 fd2a 	bl	801349c <__multadd>
 8012a48:	4601      	mov	r1, r0
 8012a4a:	4604      	mov	r4, r0
 8012a4c:	4648      	mov	r0, r9
 8012a4e:	f000 ff3d 	bl	80138cc <__mcmp>
 8012a52:	2800      	cmp	r0, #0
 8012a54:	f77f aeb3 	ble.w	80127be <_dtoa_r+0x68e>
 8012a58:	4656      	mov	r6, sl
 8012a5a:	2331      	movs	r3, #49	@ 0x31
 8012a5c:	f806 3b01 	strb.w	r3, [r6], #1
 8012a60:	9b04      	ldr	r3, [sp, #16]
 8012a62:	3301      	adds	r3, #1
 8012a64:	9304      	str	r3, [sp, #16]
 8012a66:	e6ae      	b.n	80127c6 <_dtoa_r+0x696>
 8012a68:	9c07      	ldr	r4, [sp, #28]
 8012a6a:	9704      	str	r7, [sp, #16]
 8012a6c:	4625      	mov	r5, r4
 8012a6e:	e7f3      	b.n	8012a58 <_dtoa_r+0x928>
 8012a70:	9b07      	ldr	r3, [sp, #28]
 8012a72:	9300      	str	r3, [sp, #0]
 8012a74:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	f000 8104 	beq.w	8012c84 <_dtoa_r+0xb54>
 8012a7c:	2e00      	cmp	r6, #0
 8012a7e:	dd05      	ble.n	8012a8c <_dtoa_r+0x95c>
 8012a80:	4629      	mov	r1, r5
 8012a82:	4632      	mov	r2, r6
 8012a84:	4658      	mov	r0, fp
 8012a86:	f000 feb5 	bl	80137f4 <__lshift>
 8012a8a:	4605      	mov	r5, r0
 8012a8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d05a      	beq.n	8012b48 <_dtoa_r+0xa18>
 8012a92:	6869      	ldr	r1, [r5, #4]
 8012a94:	4658      	mov	r0, fp
 8012a96:	f000 fc9f 	bl	80133d8 <_Balloc>
 8012a9a:	4606      	mov	r6, r0
 8012a9c:	b928      	cbnz	r0, 8012aaa <_dtoa_r+0x97a>
 8012a9e:	4b84      	ldr	r3, [pc, #528]	@ (8012cb0 <_dtoa_r+0xb80>)
 8012aa0:	4602      	mov	r2, r0
 8012aa2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8012aa6:	f7ff bb5a 	b.w	801215e <_dtoa_r+0x2e>
 8012aaa:	692a      	ldr	r2, [r5, #16]
 8012aac:	3202      	adds	r2, #2
 8012aae:	0092      	lsls	r2, r2, #2
 8012ab0:	f105 010c 	add.w	r1, r5, #12
 8012ab4:	300c      	adds	r0, #12
 8012ab6:	f7ff fa48 	bl	8011f4a <memcpy>
 8012aba:	2201      	movs	r2, #1
 8012abc:	4631      	mov	r1, r6
 8012abe:	4658      	mov	r0, fp
 8012ac0:	f000 fe98 	bl	80137f4 <__lshift>
 8012ac4:	f10a 0301 	add.w	r3, sl, #1
 8012ac8:	9307      	str	r3, [sp, #28]
 8012aca:	9b00      	ldr	r3, [sp, #0]
 8012acc:	4453      	add	r3, sl
 8012ace:	930b      	str	r3, [sp, #44]	@ 0x2c
 8012ad0:	9b02      	ldr	r3, [sp, #8]
 8012ad2:	f003 0301 	and.w	r3, r3, #1
 8012ad6:	462f      	mov	r7, r5
 8012ad8:	930a      	str	r3, [sp, #40]	@ 0x28
 8012ada:	4605      	mov	r5, r0
 8012adc:	9b07      	ldr	r3, [sp, #28]
 8012ade:	4621      	mov	r1, r4
 8012ae0:	3b01      	subs	r3, #1
 8012ae2:	4648      	mov	r0, r9
 8012ae4:	9300      	str	r3, [sp, #0]
 8012ae6:	f7ff fa9b 	bl	8012020 <quorem>
 8012aea:	4639      	mov	r1, r7
 8012aec:	9002      	str	r0, [sp, #8]
 8012aee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012af2:	4648      	mov	r0, r9
 8012af4:	f000 feea 	bl	80138cc <__mcmp>
 8012af8:	462a      	mov	r2, r5
 8012afa:	9008      	str	r0, [sp, #32]
 8012afc:	4621      	mov	r1, r4
 8012afe:	4658      	mov	r0, fp
 8012b00:	f000 ff00 	bl	8013904 <__mdiff>
 8012b04:	68c2      	ldr	r2, [r0, #12]
 8012b06:	4606      	mov	r6, r0
 8012b08:	bb02      	cbnz	r2, 8012b4c <_dtoa_r+0xa1c>
 8012b0a:	4601      	mov	r1, r0
 8012b0c:	4648      	mov	r0, r9
 8012b0e:	f000 fedd 	bl	80138cc <__mcmp>
 8012b12:	4602      	mov	r2, r0
 8012b14:	4631      	mov	r1, r6
 8012b16:	4658      	mov	r0, fp
 8012b18:	920e      	str	r2, [sp, #56]	@ 0x38
 8012b1a:	f000 fc9d 	bl	8013458 <_Bfree>
 8012b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012b20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b22:	9e07      	ldr	r6, [sp, #28]
 8012b24:	ea43 0102 	orr.w	r1, r3, r2
 8012b28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012b2a:	4319      	orrs	r1, r3
 8012b2c:	d110      	bne.n	8012b50 <_dtoa_r+0xa20>
 8012b2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012b32:	d029      	beq.n	8012b88 <_dtoa_r+0xa58>
 8012b34:	9b08      	ldr	r3, [sp, #32]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	dd02      	ble.n	8012b40 <_dtoa_r+0xa10>
 8012b3a:	9b02      	ldr	r3, [sp, #8]
 8012b3c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8012b40:	9b00      	ldr	r3, [sp, #0]
 8012b42:	f883 8000 	strb.w	r8, [r3]
 8012b46:	e63f      	b.n	80127c8 <_dtoa_r+0x698>
 8012b48:	4628      	mov	r0, r5
 8012b4a:	e7bb      	b.n	8012ac4 <_dtoa_r+0x994>
 8012b4c:	2201      	movs	r2, #1
 8012b4e:	e7e1      	b.n	8012b14 <_dtoa_r+0x9e4>
 8012b50:	9b08      	ldr	r3, [sp, #32]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	db04      	blt.n	8012b60 <_dtoa_r+0xa30>
 8012b56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012b58:	430b      	orrs	r3, r1
 8012b5a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8012b5c:	430b      	orrs	r3, r1
 8012b5e:	d120      	bne.n	8012ba2 <_dtoa_r+0xa72>
 8012b60:	2a00      	cmp	r2, #0
 8012b62:	dded      	ble.n	8012b40 <_dtoa_r+0xa10>
 8012b64:	4649      	mov	r1, r9
 8012b66:	2201      	movs	r2, #1
 8012b68:	4658      	mov	r0, fp
 8012b6a:	f000 fe43 	bl	80137f4 <__lshift>
 8012b6e:	4621      	mov	r1, r4
 8012b70:	4681      	mov	r9, r0
 8012b72:	f000 feab 	bl	80138cc <__mcmp>
 8012b76:	2800      	cmp	r0, #0
 8012b78:	dc03      	bgt.n	8012b82 <_dtoa_r+0xa52>
 8012b7a:	d1e1      	bne.n	8012b40 <_dtoa_r+0xa10>
 8012b7c:	f018 0f01 	tst.w	r8, #1
 8012b80:	d0de      	beq.n	8012b40 <_dtoa_r+0xa10>
 8012b82:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012b86:	d1d8      	bne.n	8012b3a <_dtoa_r+0xa0a>
 8012b88:	9a00      	ldr	r2, [sp, #0]
 8012b8a:	2339      	movs	r3, #57	@ 0x39
 8012b8c:	7013      	strb	r3, [r2, #0]
 8012b8e:	4633      	mov	r3, r6
 8012b90:	461e      	mov	r6, r3
 8012b92:	3b01      	subs	r3, #1
 8012b94:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012b98:	2a39      	cmp	r2, #57	@ 0x39
 8012b9a:	d052      	beq.n	8012c42 <_dtoa_r+0xb12>
 8012b9c:	3201      	adds	r2, #1
 8012b9e:	701a      	strb	r2, [r3, #0]
 8012ba0:	e612      	b.n	80127c8 <_dtoa_r+0x698>
 8012ba2:	2a00      	cmp	r2, #0
 8012ba4:	dd07      	ble.n	8012bb6 <_dtoa_r+0xa86>
 8012ba6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8012baa:	d0ed      	beq.n	8012b88 <_dtoa_r+0xa58>
 8012bac:	9a00      	ldr	r2, [sp, #0]
 8012bae:	f108 0301 	add.w	r3, r8, #1
 8012bb2:	7013      	strb	r3, [r2, #0]
 8012bb4:	e608      	b.n	80127c8 <_dtoa_r+0x698>
 8012bb6:	9b07      	ldr	r3, [sp, #28]
 8012bb8:	9a07      	ldr	r2, [sp, #28]
 8012bba:	f803 8c01 	strb.w	r8, [r3, #-1]
 8012bbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012bc0:	4293      	cmp	r3, r2
 8012bc2:	d028      	beq.n	8012c16 <_dtoa_r+0xae6>
 8012bc4:	4649      	mov	r1, r9
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	220a      	movs	r2, #10
 8012bca:	4658      	mov	r0, fp
 8012bcc:	f000 fc66 	bl	801349c <__multadd>
 8012bd0:	42af      	cmp	r7, r5
 8012bd2:	4681      	mov	r9, r0
 8012bd4:	f04f 0300 	mov.w	r3, #0
 8012bd8:	f04f 020a 	mov.w	r2, #10
 8012bdc:	4639      	mov	r1, r7
 8012bde:	4658      	mov	r0, fp
 8012be0:	d107      	bne.n	8012bf2 <_dtoa_r+0xac2>
 8012be2:	f000 fc5b 	bl	801349c <__multadd>
 8012be6:	4607      	mov	r7, r0
 8012be8:	4605      	mov	r5, r0
 8012bea:	9b07      	ldr	r3, [sp, #28]
 8012bec:	3301      	adds	r3, #1
 8012bee:	9307      	str	r3, [sp, #28]
 8012bf0:	e774      	b.n	8012adc <_dtoa_r+0x9ac>
 8012bf2:	f000 fc53 	bl	801349c <__multadd>
 8012bf6:	4629      	mov	r1, r5
 8012bf8:	4607      	mov	r7, r0
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	220a      	movs	r2, #10
 8012bfe:	4658      	mov	r0, fp
 8012c00:	f000 fc4c 	bl	801349c <__multadd>
 8012c04:	4605      	mov	r5, r0
 8012c06:	e7f0      	b.n	8012bea <_dtoa_r+0xaba>
 8012c08:	9b00      	ldr	r3, [sp, #0]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	bfcc      	ite	gt
 8012c0e:	461e      	movgt	r6, r3
 8012c10:	2601      	movle	r6, #1
 8012c12:	4456      	add	r6, sl
 8012c14:	2700      	movs	r7, #0
 8012c16:	4649      	mov	r1, r9
 8012c18:	2201      	movs	r2, #1
 8012c1a:	4658      	mov	r0, fp
 8012c1c:	f000 fdea 	bl	80137f4 <__lshift>
 8012c20:	4621      	mov	r1, r4
 8012c22:	4681      	mov	r9, r0
 8012c24:	f000 fe52 	bl	80138cc <__mcmp>
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	dcb0      	bgt.n	8012b8e <_dtoa_r+0xa5e>
 8012c2c:	d102      	bne.n	8012c34 <_dtoa_r+0xb04>
 8012c2e:	f018 0f01 	tst.w	r8, #1
 8012c32:	d1ac      	bne.n	8012b8e <_dtoa_r+0xa5e>
 8012c34:	4633      	mov	r3, r6
 8012c36:	461e      	mov	r6, r3
 8012c38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012c3c:	2a30      	cmp	r2, #48	@ 0x30
 8012c3e:	d0fa      	beq.n	8012c36 <_dtoa_r+0xb06>
 8012c40:	e5c2      	b.n	80127c8 <_dtoa_r+0x698>
 8012c42:	459a      	cmp	sl, r3
 8012c44:	d1a4      	bne.n	8012b90 <_dtoa_r+0xa60>
 8012c46:	9b04      	ldr	r3, [sp, #16]
 8012c48:	3301      	adds	r3, #1
 8012c4a:	9304      	str	r3, [sp, #16]
 8012c4c:	2331      	movs	r3, #49	@ 0x31
 8012c4e:	f88a 3000 	strb.w	r3, [sl]
 8012c52:	e5b9      	b.n	80127c8 <_dtoa_r+0x698>
 8012c54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012c56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8012cb4 <_dtoa_r+0xb84>
 8012c5a:	b11b      	cbz	r3, 8012c64 <_dtoa_r+0xb34>
 8012c5c:	f10a 0308 	add.w	r3, sl, #8
 8012c60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8012c62:	6013      	str	r3, [r2, #0]
 8012c64:	4650      	mov	r0, sl
 8012c66:	b019      	add	sp, #100	@ 0x64
 8012c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c6e:	2b01      	cmp	r3, #1
 8012c70:	f77f ae37 	ble.w	80128e2 <_dtoa_r+0x7b2>
 8012c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c76:	930a      	str	r3, [sp, #40]	@ 0x28
 8012c78:	2001      	movs	r0, #1
 8012c7a:	e655      	b.n	8012928 <_dtoa_r+0x7f8>
 8012c7c:	9b00      	ldr	r3, [sp, #0]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	f77f aed6 	ble.w	8012a30 <_dtoa_r+0x900>
 8012c84:	4656      	mov	r6, sl
 8012c86:	4621      	mov	r1, r4
 8012c88:	4648      	mov	r0, r9
 8012c8a:	f7ff f9c9 	bl	8012020 <quorem>
 8012c8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8012c92:	f806 8b01 	strb.w	r8, [r6], #1
 8012c96:	9b00      	ldr	r3, [sp, #0]
 8012c98:	eba6 020a 	sub.w	r2, r6, sl
 8012c9c:	4293      	cmp	r3, r2
 8012c9e:	ddb3      	ble.n	8012c08 <_dtoa_r+0xad8>
 8012ca0:	4649      	mov	r1, r9
 8012ca2:	2300      	movs	r3, #0
 8012ca4:	220a      	movs	r2, #10
 8012ca6:	4658      	mov	r0, fp
 8012ca8:	f000 fbf8 	bl	801349c <__multadd>
 8012cac:	4681      	mov	r9, r0
 8012cae:	e7ea      	b.n	8012c86 <_dtoa_r+0xb56>
 8012cb0:	08017424 	.word	0x08017424
 8012cb4:	080173a8 	.word	0x080173a8

08012cb8 <_free_r>:
 8012cb8:	b538      	push	{r3, r4, r5, lr}
 8012cba:	4605      	mov	r5, r0
 8012cbc:	2900      	cmp	r1, #0
 8012cbe:	d041      	beq.n	8012d44 <_free_r+0x8c>
 8012cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012cc4:	1f0c      	subs	r4, r1, #4
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	bfb8      	it	lt
 8012cca:	18e4      	addlt	r4, r4, r3
 8012ccc:	f7fe fe2c 	bl	8011928 <__malloc_lock>
 8012cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8012d48 <_free_r+0x90>)
 8012cd2:	6813      	ldr	r3, [r2, #0]
 8012cd4:	b933      	cbnz	r3, 8012ce4 <_free_r+0x2c>
 8012cd6:	6063      	str	r3, [r4, #4]
 8012cd8:	6014      	str	r4, [r2, #0]
 8012cda:	4628      	mov	r0, r5
 8012cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012ce0:	f7fe be28 	b.w	8011934 <__malloc_unlock>
 8012ce4:	42a3      	cmp	r3, r4
 8012ce6:	d908      	bls.n	8012cfa <_free_r+0x42>
 8012ce8:	6820      	ldr	r0, [r4, #0]
 8012cea:	1821      	adds	r1, r4, r0
 8012cec:	428b      	cmp	r3, r1
 8012cee:	bf01      	itttt	eq
 8012cf0:	6819      	ldreq	r1, [r3, #0]
 8012cf2:	685b      	ldreq	r3, [r3, #4]
 8012cf4:	1809      	addeq	r1, r1, r0
 8012cf6:	6021      	streq	r1, [r4, #0]
 8012cf8:	e7ed      	b.n	8012cd6 <_free_r+0x1e>
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	b10b      	cbz	r3, 8012d04 <_free_r+0x4c>
 8012d00:	42a3      	cmp	r3, r4
 8012d02:	d9fa      	bls.n	8012cfa <_free_r+0x42>
 8012d04:	6811      	ldr	r1, [r2, #0]
 8012d06:	1850      	adds	r0, r2, r1
 8012d08:	42a0      	cmp	r0, r4
 8012d0a:	d10b      	bne.n	8012d24 <_free_r+0x6c>
 8012d0c:	6820      	ldr	r0, [r4, #0]
 8012d0e:	4401      	add	r1, r0
 8012d10:	1850      	adds	r0, r2, r1
 8012d12:	4283      	cmp	r3, r0
 8012d14:	6011      	str	r1, [r2, #0]
 8012d16:	d1e0      	bne.n	8012cda <_free_r+0x22>
 8012d18:	6818      	ldr	r0, [r3, #0]
 8012d1a:	685b      	ldr	r3, [r3, #4]
 8012d1c:	6053      	str	r3, [r2, #4]
 8012d1e:	4408      	add	r0, r1
 8012d20:	6010      	str	r0, [r2, #0]
 8012d22:	e7da      	b.n	8012cda <_free_r+0x22>
 8012d24:	d902      	bls.n	8012d2c <_free_r+0x74>
 8012d26:	230c      	movs	r3, #12
 8012d28:	602b      	str	r3, [r5, #0]
 8012d2a:	e7d6      	b.n	8012cda <_free_r+0x22>
 8012d2c:	6820      	ldr	r0, [r4, #0]
 8012d2e:	1821      	adds	r1, r4, r0
 8012d30:	428b      	cmp	r3, r1
 8012d32:	bf04      	itt	eq
 8012d34:	6819      	ldreq	r1, [r3, #0]
 8012d36:	685b      	ldreq	r3, [r3, #4]
 8012d38:	6063      	str	r3, [r4, #4]
 8012d3a:	bf04      	itt	eq
 8012d3c:	1809      	addeq	r1, r1, r0
 8012d3e:	6021      	streq	r1, [r4, #0]
 8012d40:	6054      	str	r4, [r2, #4]
 8012d42:	e7ca      	b.n	8012cda <_free_r+0x22>
 8012d44:	bd38      	pop	{r3, r4, r5, pc}
 8012d46:	bf00      	nop
 8012d48:	2000e9d8 	.word	0x2000e9d8

08012d4c <__ssputs_r>:
 8012d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012d50:	688e      	ldr	r6, [r1, #8]
 8012d52:	461f      	mov	r7, r3
 8012d54:	42be      	cmp	r6, r7
 8012d56:	680b      	ldr	r3, [r1, #0]
 8012d58:	4682      	mov	sl, r0
 8012d5a:	460c      	mov	r4, r1
 8012d5c:	4690      	mov	r8, r2
 8012d5e:	d82d      	bhi.n	8012dbc <__ssputs_r+0x70>
 8012d60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8012d64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8012d68:	d026      	beq.n	8012db8 <__ssputs_r+0x6c>
 8012d6a:	6965      	ldr	r5, [r4, #20]
 8012d6c:	6909      	ldr	r1, [r1, #16]
 8012d6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012d72:	eba3 0901 	sub.w	r9, r3, r1
 8012d76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012d7a:	1c7b      	adds	r3, r7, #1
 8012d7c:	444b      	add	r3, r9
 8012d7e:	106d      	asrs	r5, r5, #1
 8012d80:	429d      	cmp	r5, r3
 8012d82:	bf38      	it	cc
 8012d84:	461d      	movcc	r5, r3
 8012d86:	0553      	lsls	r3, r2, #21
 8012d88:	d527      	bpl.n	8012dda <__ssputs_r+0x8e>
 8012d8a:	4629      	mov	r1, r5
 8012d8c:	f7fe fbbe 	bl	801150c <_malloc_r>
 8012d90:	4606      	mov	r6, r0
 8012d92:	b360      	cbz	r0, 8012dee <__ssputs_r+0xa2>
 8012d94:	6921      	ldr	r1, [r4, #16]
 8012d96:	464a      	mov	r2, r9
 8012d98:	f7ff f8d7 	bl	8011f4a <memcpy>
 8012d9c:	89a3      	ldrh	r3, [r4, #12]
 8012d9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8012da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012da6:	81a3      	strh	r3, [r4, #12]
 8012da8:	6126      	str	r6, [r4, #16]
 8012daa:	6165      	str	r5, [r4, #20]
 8012dac:	444e      	add	r6, r9
 8012dae:	eba5 0509 	sub.w	r5, r5, r9
 8012db2:	6026      	str	r6, [r4, #0]
 8012db4:	60a5      	str	r5, [r4, #8]
 8012db6:	463e      	mov	r6, r7
 8012db8:	42be      	cmp	r6, r7
 8012dba:	d900      	bls.n	8012dbe <__ssputs_r+0x72>
 8012dbc:	463e      	mov	r6, r7
 8012dbe:	6820      	ldr	r0, [r4, #0]
 8012dc0:	4632      	mov	r2, r6
 8012dc2:	4641      	mov	r1, r8
 8012dc4:	f7fe fff8 	bl	8011db8 <memmove>
 8012dc8:	68a3      	ldr	r3, [r4, #8]
 8012dca:	1b9b      	subs	r3, r3, r6
 8012dcc:	60a3      	str	r3, [r4, #8]
 8012dce:	6823      	ldr	r3, [r4, #0]
 8012dd0:	4433      	add	r3, r6
 8012dd2:	6023      	str	r3, [r4, #0]
 8012dd4:	2000      	movs	r0, #0
 8012dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dda:	462a      	mov	r2, r5
 8012ddc:	f7fe fe86 	bl	8011aec <_realloc_r>
 8012de0:	4606      	mov	r6, r0
 8012de2:	2800      	cmp	r0, #0
 8012de4:	d1e0      	bne.n	8012da8 <__ssputs_r+0x5c>
 8012de6:	6921      	ldr	r1, [r4, #16]
 8012de8:	4650      	mov	r0, sl
 8012dea:	f7ff ff65 	bl	8012cb8 <_free_r>
 8012dee:	230c      	movs	r3, #12
 8012df0:	f8ca 3000 	str.w	r3, [sl]
 8012df4:	89a3      	ldrh	r3, [r4, #12]
 8012df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012dfa:	81a3      	strh	r3, [r4, #12]
 8012dfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e00:	e7e9      	b.n	8012dd6 <__ssputs_r+0x8a>
	...

08012e04 <_svfiprintf_r>:
 8012e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e08:	4698      	mov	r8, r3
 8012e0a:	898b      	ldrh	r3, [r1, #12]
 8012e0c:	061b      	lsls	r3, r3, #24
 8012e0e:	b09d      	sub	sp, #116	@ 0x74
 8012e10:	4607      	mov	r7, r0
 8012e12:	460d      	mov	r5, r1
 8012e14:	4614      	mov	r4, r2
 8012e16:	d510      	bpl.n	8012e3a <_svfiprintf_r+0x36>
 8012e18:	690b      	ldr	r3, [r1, #16]
 8012e1a:	b973      	cbnz	r3, 8012e3a <_svfiprintf_r+0x36>
 8012e1c:	2140      	movs	r1, #64	@ 0x40
 8012e1e:	f7fe fb75 	bl	801150c <_malloc_r>
 8012e22:	6028      	str	r0, [r5, #0]
 8012e24:	6128      	str	r0, [r5, #16]
 8012e26:	b930      	cbnz	r0, 8012e36 <_svfiprintf_r+0x32>
 8012e28:	230c      	movs	r3, #12
 8012e2a:	603b      	str	r3, [r7, #0]
 8012e2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e30:	b01d      	add	sp, #116	@ 0x74
 8012e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e36:	2340      	movs	r3, #64	@ 0x40
 8012e38:	616b      	str	r3, [r5, #20]
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012e3e:	2320      	movs	r3, #32
 8012e40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8012e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8012e48:	2330      	movs	r3, #48	@ 0x30
 8012e4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8012fe8 <_svfiprintf_r+0x1e4>
 8012e4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8012e52:	f04f 0901 	mov.w	r9, #1
 8012e56:	4623      	mov	r3, r4
 8012e58:	469a      	mov	sl, r3
 8012e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012e5e:	b10a      	cbz	r2, 8012e64 <_svfiprintf_r+0x60>
 8012e60:	2a25      	cmp	r2, #37	@ 0x25
 8012e62:	d1f9      	bne.n	8012e58 <_svfiprintf_r+0x54>
 8012e64:	ebba 0b04 	subs.w	fp, sl, r4
 8012e68:	d00b      	beq.n	8012e82 <_svfiprintf_r+0x7e>
 8012e6a:	465b      	mov	r3, fp
 8012e6c:	4622      	mov	r2, r4
 8012e6e:	4629      	mov	r1, r5
 8012e70:	4638      	mov	r0, r7
 8012e72:	f7ff ff6b 	bl	8012d4c <__ssputs_r>
 8012e76:	3001      	adds	r0, #1
 8012e78:	f000 80a7 	beq.w	8012fca <_svfiprintf_r+0x1c6>
 8012e7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012e7e:	445a      	add	r2, fp
 8012e80:	9209      	str	r2, [sp, #36]	@ 0x24
 8012e82:	f89a 3000 	ldrb.w	r3, [sl]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	f000 809f 	beq.w	8012fca <_svfiprintf_r+0x1c6>
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012e96:	f10a 0a01 	add.w	sl, sl, #1
 8012e9a:	9304      	str	r3, [sp, #16]
 8012e9c:	9307      	str	r3, [sp, #28]
 8012e9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012ea2:	931a      	str	r3, [sp, #104]	@ 0x68
 8012ea4:	4654      	mov	r4, sl
 8012ea6:	2205      	movs	r2, #5
 8012ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012eac:	484e      	ldr	r0, [pc, #312]	@ (8012fe8 <_svfiprintf_r+0x1e4>)
 8012eae:	f7ed f98f 	bl	80001d0 <memchr>
 8012eb2:	9a04      	ldr	r2, [sp, #16]
 8012eb4:	b9d8      	cbnz	r0, 8012eee <_svfiprintf_r+0xea>
 8012eb6:	06d0      	lsls	r0, r2, #27
 8012eb8:	bf44      	itt	mi
 8012eba:	2320      	movmi	r3, #32
 8012ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012ec0:	0711      	lsls	r1, r2, #28
 8012ec2:	bf44      	itt	mi
 8012ec4:	232b      	movmi	r3, #43	@ 0x2b
 8012ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012eca:	f89a 3000 	ldrb.w	r3, [sl]
 8012ece:	2b2a      	cmp	r3, #42	@ 0x2a
 8012ed0:	d015      	beq.n	8012efe <_svfiprintf_r+0xfa>
 8012ed2:	9a07      	ldr	r2, [sp, #28]
 8012ed4:	4654      	mov	r4, sl
 8012ed6:	2000      	movs	r0, #0
 8012ed8:	f04f 0c0a 	mov.w	ip, #10
 8012edc:	4621      	mov	r1, r4
 8012ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012ee2:	3b30      	subs	r3, #48	@ 0x30
 8012ee4:	2b09      	cmp	r3, #9
 8012ee6:	d94b      	bls.n	8012f80 <_svfiprintf_r+0x17c>
 8012ee8:	b1b0      	cbz	r0, 8012f18 <_svfiprintf_r+0x114>
 8012eea:	9207      	str	r2, [sp, #28]
 8012eec:	e014      	b.n	8012f18 <_svfiprintf_r+0x114>
 8012eee:	eba0 0308 	sub.w	r3, r0, r8
 8012ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8012ef6:	4313      	orrs	r3, r2
 8012ef8:	9304      	str	r3, [sp, #16]
 8012efa:	46a2      	mov	sl, r4
 8012efc:	e7d2      	b.n	8012ea4 <_svfiprintf_r+0xa0>
 8012efe:	9b03      	ldr	r3, [sp, #12]
 8012f00:	1d19      	adds	r1, r3, #4
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	9103      	str	r1, [sp, #12]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	bfbb      	ittet	lt
 8012f0a:	425b      	neglt	r3, r3
 8012f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8012f10:	9307      	strge	r3, [sp, #28]
 8012f12:	9307      	strlt	r3, [sp, #28]
 8012f14:	bfb8      	it	lt
 8012f16:	9204      	strlt	r2, [sp, #16]
 8012f18:	7823      	ldrb	r3, [r4, #0]
 8012f1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8012f1c:	d10a      	bne.n	8012f34 <_svfiprintf_r+0x130>
 8012f1e:	7863      	ldrb	r3, [r4, #1]
 8012f20:	2b2a      	cmp	r3, #42	@ 0x2a
 8012f22:	d132      	bne.n	8012f8a <_svfiprintf_r+0x186>
 8012f24:	9b03      	ldr	r3, [sp, #12]
 8012f26:	1d1a      	adds	r2, r3, #4
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	9203      	str	r2, [sp, #12]
 8012f2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8012f30:	3402      	adds	r4, #2
 8012f32:	9305      	str	r3, [sp, #20]
 8012f34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8012ff8 <_svfiprintf_r+0x1f4>
 8012f38:	7821      	ldrb	r1, [r4, #0]
 8012f3a:	2203      	movs	r2, #3
 8012f3c:	4650      	mov	r0, sl
 8012f3e:	f7ed f947 	bl	80001d0 <memchr>
 8012f42:	b138      	cbz	r0, 8012f54 <_svfiprintf_r+0x150>
 8012f44:	9b04      	ldr	r3, [sp, #16]
 8012f46:	eba0 000a 	sub.w	r0, r0, sl
 8012f4a:	2240      	movs	r2, #64	@ 0x40
 8012f4c:	4082      	lsls	r2, r0
 8012f4e:	4313      	orrs	r3, r2
 8012f50:	3401      	adds	r4, #1
 8012f52:	9304      	str	r3, [sp, #16]
 8012f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f58:	4824      	ldr	r0, [pc, #144]	@ (8012fec <_svfiprintf_r+0x1e8>)
 8012f5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8012f5e:	2206      	movs	r2, #6
 8012f60:	f7ed f936 	bl	80001d0 <memchr>
 8012f64:	2800      	cmp	r0, #0
 8012f66:	d036      	beq.n	8012fd6 <_svfiprintf_r+0x1d2>
 8012f68:	4b21      	ldr	r3, [pc, #132]	@ (8012ff0 <_svfiprintf_r+0x1ec>)
 8012f6a:	bb1b      	cbnz	r3, 8012fb4 <_svfiprintf_r+0x1b0>
 8012f6c:	9b03      	ldr	r3, [sp, #12]
 8012f6e:	3307      	adds	r3, #7
 8012f70:	f023 0307 	bic.w	r3, r3, #7
 8012f74:	3308      	adds	r3, #8
 8012f76:	9303      	str	r3, [sp, #12]
 8012f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012f7a:	4433      	add	r3, r6
 8012f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8012f7e:	e76a      	b.n	8012e56 <_svfiprintf_r+0x52>
 8012f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8012f84:	460c      	mov	r4, r1
 8012f86:	2001      	movs	r0, #1
 8012f88:	e7a8      	b.n	8012edc <_svfiprintf_r+0xd8>
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	3401      	adds	r4, #1
 8012f8e:	9305      	str	r3, [sp, #20]
 8012f90:	4619      	mov	r1, r3
 8012f92:	f04f 0c0a 	mov.w	ip, #10
 8012f96:	4620      	mov	r0, r4
 8012f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012f9c:	3a30      	subs	r2, #48	@ 0x30
 8012f9e:	2a09      	cmp	r2, #9
 8012fa0:	d903      	bls.n	8012faa <_svfiprintf_r+0x1a6>
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d0c6      	beq.n	8012f34 <_svfiprintf_r+0x130>
 8012fa6:	9105      	str	r1, [sp, #20]
 8012fa8:	e7c4      	b.n	8012f34 <_svfiprintf_r+0x130>
 8012faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8012fae:	4604      	mov	r4, r0
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	e7f0      	b.n	8012f96 <_svfiprintf_r+0x192>
 8012fb4:	ab03      	add	r3, sp, #12
 8012fb6:	9300      	str	r3, [sp, #0]
 8012fb8:	462a      	mov	r2, r5
 8012fba:	4b0e      	ldr	r3, [pc, #56]	@ (8012ff4 <_svfiprintf_r+0x1f0>)
 8012fbc:	a904      	add	r1, sp, #16
 8012fbe:	4638      	mov	r0, r7
 8012fc0:	f7fe f848 	bl	8011054 <_printf_float>
 8012fc4:	1c42      	adds	r2, r0, #1
 8012fc6:	4606      	mov	r6, r0
 8012fc8:	d1d6      	bne.n	8012f78 <_svfiprintf_r+0x174>
 8012fca:	89ab      	ldrh	r3, [r5, #12]
 8012fcc:	065b      	lsls	r3, r3, #25
 8012fce:	f53f af2d 	bmi.w	8012e2c <_svfiprintf_r+0x28>
 8012fd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012fd4:	e72c      	b.n	8012e30 <_svfiprintf_r+0x2c>
 8012fd6:	ab03      	add	r3, sp, #12
 8012fd8:	9300      	str	r3, [sp, #0]
 8012fda:	462a      	mov	r2, r5
 8012fdc:	4b05      	ldr	r3, [pc, #20]	@ (8012ff4 <_svfiprintf_r+0x1f0>)
 8012fde:	a904      	add	r1, sp, #16
 8012fe0:	4638      	mov	r0, r7
 8012fe2:	f7fe fb81 	bl	80116e8 <_printf_i>
 8012fe6:	e7ed      	b.n	8012fc4 <_svfiprintf_r+0x1c0>
 8012fe8:	08017435 	.word	0x08017435
 8012fec:	0801743f 	.word	0x0801743f
 8012ff0:	08011055 	.word	0x08011055
 8012ff4:	08012d4d 	.word	0x08012d4d
 8012ff8:	0801743b 	.word	0x0801743b

08012ffc <__sfputc_r>:
 8012ffc:	6893      	ldr	r3, [r2, #8]
 8012ffe:	3b01      	subs	r3, #1
 8013000:	2b00      	cmp	r3, #0
 8013002:	b410      	push	{r4}
 8013004:	6093      	str	r3, [r2, #8]
 8013006:	da08      	bge.n	801301a <__sfputc_r+0x1e>
 8013008:	6994      	ldr	r4, [r2, #24]
 801300a:	42a3      	cmp	r3, r4
 801300c:	db01      	blt.n	8013012 <__sfputc_r+0x16>
 801300e:	290a      	cmp	r1, #10
 8013010:	d103      	bne.n	801301a <__sfputc_r+0x1e>
 8013012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013016:	f7fe bdb5 	b.w	8011b84 <__swbuf_r>
 801301a:	6813      	ldr	r3, [r2, #0]
 801301c:	1c58      	adds	r0, r3, #1
 801301e:	6010      	str	r0, [r2, #0]
 8013020:	7019      	strb	r1, [r3, #0]
 8013022:	4608      	mov	r0, r1
 8013024:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013028:	4770      	bx	lr

0801302a <__sfputs_r>:
 801302a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801302c:	4606      	mov	r6, r0
 801302e:	460f      	mov	r7, r1
 8013030:	4614      	mov	r4, r2
 8013032:	18d5      	adds	r5, r2, r3
 8013034:	42ac      	cmp	r4, r5
 8013036:	d101      	bne.n	801303c <__sfputs_r+0x12>
 8013038:	2000      	movs	r0, #0
 801303a:	e007      	b.n	801304c <__sfputs_r+0x22>
 801303c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013040:	463a      	mov	r2, r7
 8013042:	4630      	mov	r0, r6
 8013044:	f7ff ffda 	bl	8012ffc <__sfputc_r>
 8013048:	1c43      	adds	r3, r0, #1
 801304a:	d1f3      	bne.n	8013034 <__sfputs_r+0xa>
 801304c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013050 <_vfiprintf_r>:
 8013050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013054:	460d      	mov	r5, r1
 8013056:	b09d      	sub	sp, #116	@ 0x74
 8013058:	4614      	mov	r4, r2
 801305a:	4698      	mov	r8, r3
 801305c:	4606      	mov	r6, r0
 801305e:	b118      	cbz	r0, 8013068 <_vfiprintf_r+0x18>
 8013060:	6a03      	ldr	r3, [r0, #32]
 8013062:	b90b      	cbnz	r3, 8013068 <_vfiprintf_r+0x18>
 8013064:	f7fe fd18 	bl	8011a98 <__sinit>
 8013068:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801306a:	07d9      	lsls	r1, r3, #31
 801306c:	d405      	bmi.n	801307a <_vfiprintf_r+0x2a>
 801306e:	89ab      	ldrh	r3, [r5, #12]
 8013070:	059a      	lsls	r2, r3, #22
 8013072:	d402      	bmi.n	801307a <_vfiprintf_r+0x2a>
 8013074:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8013076:	f7fe ff66 	bl	8011f46 <__retarget_lock_acquire_recursive>
 801307a:	89ab      	ldrh	r3, [r5, #12]
 801307c:	071b      	lsls	r3, r3, #28
 801307e:	d501      	bpl.n	8013084 <_vfiprintf_r+0x34>
 8013080:	692b      	ldr	r3, [r5, #16]
 8013082:	b99b      	cbnz	r3, 80130ac <_vfiprintf_r+0x5c>
 8013084:	4629      	mov	r1, r5
 8013086:	4630      	mov	r0, r6
 8013088:	f7fe fdba 	bl	8011c00 <__swsetup_r>
 801308c:	b170      	cbz	r0, 80130ac <_vfiprintf_r+0x5c>
 801308e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8013090:	07dc      	lsls	r4, r3, #31
 8013092:	d504      	bpl.n	801309e <_vfiprintf_r+0x4e>
 8013094:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013098:	b01d      	add	sp, #116	@ 0x74
 801309a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801309e:	89ab      	ldrh	r3, [r5, #12]
 80130a0:	0598      	lsls	r0, r3, #22
 80130a2:	d4f7      	bmi.n	8013094 <_vfiprintf_r+0x44>
 80130a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80130a6:	f7fe ff4f 	bl	8011f48 <__retarget_lock_release_recursive>
 80130aa:	e7f3      	b.n	8013094 <_vfiprintf_r+0x44>
 80130ac:	2300      	movs	r3, #0
 80130ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80130b0:	2320      	movs	r3, #32
 80130b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80130b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80130ba:	2330      	movs	r3, #48	@ 0x30
 80130bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801326c <_vfiprintf_r+0x21c>
 80130c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80130c4:	f04f 0901 	mov.w	r9, #1
 80130c8:	4623      	mov	r3, r4
 80130ca:	469a      	mov	sl, r3
 80130cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130d0:	b10a      	cbz	r2, 80130d6 <_vfiprintf_r+0x86>
 80130d2:	2a25      	cmp	r2, #37	@ 0x25
 80130d4:	d1f9      	bne.n	80130ca <_vfiprintf_r+0x7a>
 80130d6:	ebba 0b04 	subs.w	fp, sl, r4
 80130da:	d00b      	beq.n	80130f4 <_vfiprintf_r+0xa4>
 80130dc:	465b      	mov	r3, fp
 80130de:	4622      	mov	r2, r4
 80130e0:	4629      	mov	r1, r5
 80130e2:	4630      	mov	r0, r6
 80130e4:	f7ff ffa1 	bl	801302a <__sfputs_r>
 80130e8:	3001      	adds	r0, #1
 80130ea:	f000 80a7 	beq.w	801323c <_vfiprintf_r+0x1ec>
 80130ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80130f0:	445a      	add	r2, fp
 80130f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80130f4:	f89a 3000 	ldrb.w	r3, [sl]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	f000 809f 	beq.w	801323c <_vfiprintf_r+0x1ec>
 80130fe:	2300      	movs	r3, #0
 8013100:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013104:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013108:	f10a 0a01 	add.w	sl, sl, #1
 801310c:	9304      	str	r3, [sp, #16]
 801310e:	9307      	str	r3, [sp, #28]
 8013110:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013114:	931a      	str	r3, [sp, #104]	@ 0x68
 8013116:	4654      	mov	r4, sl
 8013118:	2205      	movs	r2, #5
 801311a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801311e:	4853      	ldr	r0, [pc, #332]	@ (801326c <_vfiprintf_r+0x21c>)
 8013120:	f7ed f856 	bl	80001d0 <memchr>
 8013124:	9a04      	ldr	r2, [sp, #16]
 8013126:	b9d8      	cbnz	r0, 8013160 <_vfiprintf_r+0x110>
 8013128:	06d1      	lsls	r1, r2, #27
 801312a:	bf44      	itt	mi
 801312c:	2320      	movmi	r3, #32
 801312e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013132:	0713      	lsls	r3, r2, #28
 8013134:	bf44      	itt	mi
 8013136:	232b      	movmi	r3, #43	@ 0x2b
 8013138:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801313c:	f89a 3000 	ldrb.w	r3, [sl]
 8013140:	2b2a      	cmp	r3, #42	@ 0x2a
 8013142:	d015      	beq.n	8013170 <_vfiprintf_r+0x120>
 8013144:	9a07      	ldr	r2, [sp, #28]
 8013146:	4654      	mov	r4, sl
 8013148:	2000      	movs	r0, #0
 801314a:	f04f 0c0a 	mov.w	ip, #10
 801314e:	4621      	mov	r1, r4
 8013150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013154:	3b30      	subs	r3, #48	@ 0x30
 8013156:	2b09      	cmp	r3, #9
 8013158:	d94b      	bls.n	80131f2 <_vfiprintf_r+0x1a2>
 801315a:	b1b0      	cbz	r0, 801318a <_vfiprintf_r+0x13a>
 801315c:	9207      	str	r2, [sp, #28]
 801315e:	e014      	b.n	801318a <_vfiprintf_r+0x13a>
 8013160:	eba0 0308 	sub.w	r3, r0, r8
 8013164:	fa09 f303 	lsl.w	r3, r9, r3
 8013168:	4313      	orrs	r3, r2
 801316a:	9304      	str	r3, [sp, #16]
 801316c:	46a2      	mov	sl, r4
 801316e:	e7d2      	b.n	8013116 <_vfiprintf_r+0xc6>
 8013170:	9b03      	ldr	r3, [sp, #12]
 8013172:	1d19      	adds	r1, r3, #4
 8013174:	681b      	ldr	r3, [r3, #0]
 8013176:	9103      	str	r1, [sp, #12]
 8013178:	2b00      	cmp	r3, #0
 801317a:	bfbb      	ittet	lt
 801317c:	425b      	neglt	r3, r3
 801317e:	f042 0202 	orrlt.w	r2, r2, #2
 8013182:	9307      	strge	r3, [sp, #28]
 8013184:	9307      	strlt	r3, [sp, #28]
 8013186:	bfb8      	it	lt
 8013188:	9204      	strlt	r2, [sp, #16]
 801318a:	7823      	ldrb	r3, [r4, #0]
 801318c:	2b2e      	cmp	r3, #46	@ 0x2e
 801318e:	d10a      	bne.n	80131a6 <_vfiprintf_r+0x156>
 8013190:	7863      	ldrb	r3, [r4, #1]
 8013192:	2b2a      	cmp	r3, #42	@ 0x2a
 8013194:	d132      	bne.n	80131fc <_vfiprintf_r+0x1ac>
 8013196:	9b03      	ldr	r3, [sp, #12]
 8013198:	1d1a      	adds	r2, r3, #4
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	9203      	str	r2, [sp, #12]
 801319e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80131a2:	3402      	adds	r4, #2
 80131a4:	9305      	str	r3, [sp, #20]
 80131a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801327c <_vfiprintf_r+0x22c>
 80131aa:	7821      	ldrb	r1, [r4, #0]
 80131ac:	2203      	movs	r2, #3
 80131ae:	4650      	mov	r0, sl
 80131b0:	f7ed f80e 	bl	80001d0 <memchr>
 80131b4:	b138      	cbz	r0, 80131c6 <_vfiprintf_r+0x176>
 80131b6:	9b04      	ldr	r3, [sp, #16]
 80131b8:	eba0 000a 	sub.w	r0, r0, sl
 80131bc:	2240      	movs	r2, #64	@ 0x40
 80131be:	4082      	lsls	r2, r0
 80131c0:	4313      	orrs	r3, r2
 80131c2:	3401      	adds	r4, #1
 80131c4:	9304      	str	r3, [sp, #16]
 80131c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80131ca:	4829      	ldr	r0, [pc, #164]	@ (8013270 <_vfiprintf_r+0x220>)
 80131cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80131d0:	2206      	movs	r2, #6
 80131d2:	f7ec fffd 	bl	80001d0 <memchr>
 80131d6:	2800      	cmp	r0, #0
 80131d8:	d03f      	beq.n	801325a <_vfiprintf_r+0x20a>
 80131da:	4b26      	ldr	r3, [pc, #152]	@ (8013274 <_vfiprintf_r+0x224>)
 80131dc:	bb1b      	cbnz	r3, 8013226 <_vfiprintf_r+0x1d6>
 80131de:	9b03      	ldr	r3, [sp, #12]
 80131e0:	3307      	adds	r3, #7
 80131e2:	f023 0307 	bic.w	r3, r3, #7
 80131e6:	3308      	adds	r3, #8
 80131e8:	9303      	str	r3, [sp, #12]
 80131ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80131ec:	443b      	add	r3, r7
 80131ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80131f0:	e76a      	b.n	80130c8 <_vfiprintf_r+0x78>
 80131f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80131f6:	460c      	mov	r4, r1
 80131f8:	2001      	movs	r0, #1
 80131fa:	e7a8      	b.n	801314e <_vfiprintf_r+0xfe>
 80131fc:	2300      	movs	r3, #0
 80131fe:	3401      	adds	r4, #1
 8013200:	9305      	str	r3, [sp, #20]
 8013202:	4619      	mov	r1, r3
 8013204:	f04f 0c0a 	mov.w	ip, #10
 8013208:	4620      	mov	r0, r4
 801320a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801320e:	3a30      	subs	r2, #48	@ 0x30
 8013210:	2a09      	cmp	r2, #9
 8013212:	d903      	bls.n	801321c <_vfiprintf_r+0x1cc>
 8013214:	2b00      	cmp	r3, #0
 8013216:	d0c6      	beq.n	80131a6 <_vfiprintf_r+0x156>
 8013218:	9105      	str	r1, [sp, #20]
 801321a:	e7c4      	b.n	80131a6 <_vfiprintf_r+0x156>
 801321c:	fb0c 2101 	mla	r1, ip, r1, r2
 8013220:	4604      	mov	r4, r0
 8013222:	2301      	movs	r3, #1
 8013224:	e7f0      	b.n	8013208 <_vfiprintf_r+0x1b8>
 8013226:	ab03      	add	r3, sp, #12
 8013228:	9300      	str	r3, [sp, #0]
 801322a:	462a      	mov	r2, r5
 801322c:	4b12      	ldr	r3, [pc, #72]	@ (8013278 <_vfiprintf_r+0x228>)
 801322e:	a904      	add	r1, sp, #16
 8013230:	4630      	mov	r0, r6
 8013232:	f7fd ff0f 	bl	8011054 <_printf_float>
 8013236:	4607      	mov	r7, r0
 8013238:	1c78      	adds	r0, r7, #1
 801323a:	d1d6      	bne.n	80131ea <_vfiprintf_r+0x19a>
 801323c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801323e:	07d9      	lsls	r1, r3, #31
 8013240:	d405      	bmi.n	801324e <_vfiprintf_r+0x1fe>
 8013242:	89ab      	ldrh	r3, [r5, #12]
 8013244:	059a      	lsls	r2, r3, #22
 8013246:	d402      	bmi.n	801324e <_vfiprintf_r+0x1fe>
 8013248:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801324a:	f7fe fe7d 	bl	8011f48 <__retarget_lock_release_recursive>
 801324e:	89ab      	ldrh	r3, [r5, #12]
 8013250:	065b      	lsls	r3, r3, #25
 8013252:	f53f af1f 	bmi.w	8013094 <_vfiprintf_r+0x44>
 8013256:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8013258:	e71e      	b.n	8013098 <_vfiprintf_r+0x48>
 801325a:	ab03      	add	r3, sp, #12
 801325c:	9300      	str	r3, [sp, #0]
 801325e:	462a      	mov	r2, r5
 8013260:	4b05      	ldr	r3, [pc, #20]	@ (8013278 <_vfiprintf_r+0x228>)
 8013262:	a904      	add	r1, sp, #16
 8013264:	4630      	mov	r0, r6
 8013266:	f7fe fa3f 	bl	80116e8 <_printf_i>
 801326a:	e7e4      	b.n	8013236 <_vfiprintf_r+0x1e6>
 801326c:	08017435 	.word	0x08017435
 8013270:	0801743f 	.word	0x0801743f
 8013274:	08011055 	.word	0x08011055
 8013278:	0801302b 	.word	0x0801302b
 801327c:	0801743b 	.word	0x0801743b

08013280 <__sflush_r>:
 8013280:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013288:	0716      	lsls	r6, r2, #28
 801328a:	4605      	mov	r5, r0
 801328c:	460c      	mov	r4, r1
 801328e:	d454      	bmi.n	801333a <__sflush_r+0xba>
 8013290:	684b      	ldr	r3, [r1, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	dc02      	bgt.n	801329c <__sflush_r+0x1c>
 8013296:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8013298:	2b00      	cmp	r3, #0
 801329a:	dd48      	ble.n	801332e <__sflush_r+0xae>
 801329c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801329e:	2e00      	cmp	r6, #0
 80132a0:	d045      	beq.n	801332e <__sflush_r+0xae>
 80132a2:	2300      	movs	r3, #0
 80132a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80132a8:	682f      	ldr	r7, [r5, #0]
 80132aa:	6a21      	ldr	r1, [r4, #32]
 80132ac:	602b      	str	r3, [r5, #0]
 80132ae:	d030      	beq.n	8013312 <__sflush_r+0x92>
 80132b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80132b2:	89a3      	ldrh	r3, [r4, #12]
 80132b4:	0759      	lsls	r1, r3, #29
 80132b6:	d505      	bpl.n	80132c4 <__sflush_r+0x44>
 80132b8:	6863      	ldr	r3, [r4, #4]
 80132ba:	1ad2      	subs	r2, r2, r3
 80132bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80132be:	b10b      	cbz	r3, 80132c4 <__sflush_r+0x44>
 80132c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80132c2:	1ad2      	subs	r2, r2, r3
 80132c4:	2300      	movs	r3, #0
 80132c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80132c8:	6a21      	ldr	r1, [r4, #32]
 80132ca:	4628      	mov	r0, r5
 80132cc:	47b0      	blx	r6
 80132ce:	1c43      	adds	r3, r0, #1
 80132d0:	89a3      	ldrh	r3, [r4, #12]
 80132d2:	d106      	bne.n	80132e2 <__sflush_r+0x62>
 80132d4:	6829      	ldr	r1, [r5, #0]
 80132d6:	291d      	cmp	r1, #29
 80132d8:	d82b      	bhi.n	8013332 <__sflush_r+0xb2>
 80132da:	4a2a      	ldr	r2, [pc, #168]	@ (8013384 <__sflush_r+0x104>)
 80132dc:	410a      	asrs	r2, r1
 80132de:	07d6      	lsls	r6, r2, #31
 80132e0:	d427      	bmi.n	8013332 <__sflush_r+0xb2>
 80132e2:	2200      	movs	r2, #0
 80132e4:	6062      	str	r2, [r4, #4]
 80132e6:	04d9      	lsls	r1, r3, #19
 80132e8:	6922      	ldr	r2, [r4, #16]
 80132ea:	6022      	str	r2, [r4, #0]
 80132ec:	d504      	bpl.n	80132f8 <__sflush_r+0x78>
 80132ee:	1c42      	adds	r2, r0, #1
 80132f0:	d101      	bne.n	80132f6 <__sflush_r+0x76>
 80132f2:	682b      	ldr	r3, [r5, #0]
 80132f4:	b903      	cbnz	r3, 80132f8 <__sflush_r+0x78>
 80132f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80132f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80132fa:	602f      	str	r7, [r5, #0]
 80132fc:	b1b9      	cbz	r1, 801332e <__sflush_r+0xae>
 80132fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8013302:	4299      	cmp	r1, r3
 8013304:	d002      	beq.n	801330c <__sflush_r+0x8c>
 8013306:	4628      	mov	r0, r5
 8013308:	f7ff fcd6 	bl	8012cb8 <_free_r>
 801330c:	2300      	movs	r3, #0
 801330e:	6363      	str	r3, [r4, #52]	@ 0x34
 8013310:	e00d      	b.n	801332e <__sflush_r+0xae>
 8013312:	2301      	movs	r3, #1
 8013314:	4628      	mov	r0, r5
 8013316:	47b0      	blx	r6
 8013318:	4602      	mov	r2, r0
 801331a:	1c50      	adds	r0, r2, #1
 801331c:	d1c9      	bne.n	80132b2 <__sflush_r+0x32>
 801331e:	682b      	ldr	r3, [r5, #0]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d0c6      	beq.n	80132b2 <__sflush_r+0x32>
 8013324:	2b1d      	cmp	r3, #29
 8013326:	d001      	beq.n	801332c <__sflush_r+0xac>
 8013328:	2b16      	cmp	r3, #22
 801332a:	d11e      	bne.n	801336a <__sflush_r+0xea>
 801332c:	602f      	str	r7, [r5, #0]
 801332e:	2000      	movs	r0, #0
 8013330:	e022      	b.n	8013378 <__sflush_r+0xf8>
 8013332:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013336:	b21b      	sxth	r3, r3
 8013338:	e01b      	b.n	8013372 <__sflush_r+0xf2>
 801333a:	690f      	ldr	r7, [r1, #16]
 801333c:	2f00      	cmp	r7, #0
 801333e:	d0f6      	beq.n	801332e <__sflush_r+0xae>
 8013340:	0793      	lsls	r3, r2, #30
 8013342:	680e      	ldr	r6, [r1, #0]
 8013344:	bf08      	it	eq
 8013346:	694b      	ldreq	r3, [r1, #20]
 8013348:	600f      	str	r7, [r1, #0]
 801334a:	bf18      	it	ne
 801334c:	2300      	movne	r3, #0
 801334e:	eba6 0807 	sub.w	r8, r6, r7
 8013352:	608b      	str	r3, [r1, #8]
 8013354:	f1b8 0f00 	cmp.w	r8, #0
 8013358:	dde9      	ble.n	801332e <__sflush_r+0xae>
 801335a:	6a21      	ldr	r1, [r4, #32]
 801335c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801335e:	4643      	mov	r3, r8
 8013360:	463a      	mov	r2, r7
 8013362:	4628      	mov	r0, r5
 8013364:	47b0      	blx	r6
 8013366:	2800      	cmp	r0, #0
 8013368:	dc08      	bgt.n	801337c <__sflush_r+0xfc>
 801336a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801336e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013372:	81a3      	strh	r3, [r4, #12]
 8013374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801337c:	4407      	add	r7, r0
 801337e:	eba8 0800 	sub.w	r8, r8, r0
 8013382:	e7e7      	b.n	8013354 <__sflush_r+0xd4>
 8013384:	dfbffffe 	.word	0xdfbffffe

08013388 <_fflush_r>:
 8013388:	b538      	push	{r3, r4, r5, lr}
 801338a:	690b      	ldr	r3, [r1, #16]
 801338c:	4605      	mov	r5, r0
 801338e:	460c      	mov	r4, r1
 8013390:	b913      	cbnz	r3, 8013398 <_fflush_r+0x10>
 8013392:	2500      	movs	r5, #0
 8013394:	4628      	mov	r0, r5
 8013396:	bd38      	pop	{r3, r4, r5, pc}
 8013398:	b118      	cbz	r0, 80133a2 <_fflush_r+0x1a>
 801339a:	6a03      	ldr	r3, [r0, #32]
 801339c:	b90b      	cbnz	r3, 80133a2 <_fflush_r+0x1a>
 801339e:	f7fe fb7b 	bl	8011a98 <__sinit>
 80133a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d0f3      	beq.n	8013392 <_fflush_r+0xa>
 80133aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80133ac:	07d0      	lsls	r0, r2, #31
 80133ae:	d404      	bmi.n	80133ba <_fflush_r+0x32>
 80133b0:	0599      	lsls	r1, r3, #22
 80133b2:	d402      	bmi.n	80133ba <_fflush_r+0x32>
 80133b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80133b6:	f7fe fdc6 	bl	8011f46 <__retarget_lock_acquire_recursive>
 80133ba:	4628      	mov	r0, r5
 80133bc:	4621      	mov	r1, r4
 80133be:	f7ff ff5f 	bl	8013280 <__sflush_r>
 80133c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80133c4:	07da      	lsls	r2, r3, #31
 80133c6:	4605      	mov	r5, r0
 80133c8:	d4e4      	bmi.n	8013394 <_fflush_r+0xc>
 80133ca:	89a3      	ldrh	r3, [r4, #12]
 80133cc:	059b      	lsls	r3, r3, #22
 80133ce:	d4e1      	bmi.n	8013394 <_fflush_r+0xc>
 80133d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80133d2:	f7fe fdb9 	bl	8011f48 <__retarget_lock_release_recursive>
 80133d6:	e7dd      	b.n	8013394 <_fflush_r+0xc>

080133d8 <_Balloc>:
 80133d8:	b570      	push	{r4, r5, r6, lr}
 80133da:	69c6      	ldr	r6, [r0, #28]
 80133dc:	4604      	mov	r4, r0
 80133de:	460d      	mov	r5, r1
 80133e0:	b976      	cbnz	r6, 8013400 <_Balloc+0x28>
 80133e2:	2010      	movs	r0, #16
 80133e4:	f7fe f860 	bl	80114a8 <malloc>
 80133e8:	4602      	mov	r2, r0
 80133ea:	61e0      	str	r0, [r4, #28]
 80133ec:	b920      	cbnz	r0, 80133f8 <_Balloc+0x20>
 80133ee:	4b18      	ldr	r3, [pc, #96]	@ (8013450 <_Balloc+0x78>)
 80133f0:	4818      	ldr	r0, [pc, #96]	@ (8013454 <_Balloc+0x7c>)
 80133f2:	216b      	movs	r1, #107	@ 0x6b
 80133f4:	f7fd fd6a 	bl	8010ecc <__assert_func>
 80133f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80133fc:	6006      	str	r6, [r0, #0]
 80133fe:	60c6      	str	r6, [r0, #12]
 8013400:	69e6      	ldr	r6, [r4, #28]
 8013402:	68f3      	ldr	r3, [r6, #12]
 8013404:	b183      	cbz	r3, 8013428 <_Balloc+0x50>
 8013406:	69e3      	ldr	r3, [r4, #28]
 8013408:	68db      	ldr	r3, [r3, #12]
 801340a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801340e:	b9b8      	cbnz	r0, 8013440 <_Balloc+0x68>
 8013410:	2101      	movs	r1, #1
 8013412:	fa01 f605 	lsl.w	r6, r1, r5
 8013416:	1d72      	adds	r2, r6, #5
 8013418:	0092      	lsls	r2, r2, #2
 801341a:	4620      	mov	r0, r4
 801341c:	f000 fbf0 	bl	8013c00 <_calloc_r>
 8013420:	b160      	cbz	r0, 801343c <_Balloc+0x64>
 8013422:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013426:	e00e      	b.n	8013446 <_Balloc+0x6e>
 8013428:	2221      	movs	r2, #33	@ 0x21
 801342a:	2104      	movs	r1, #4
 801342c:	4620      	mov	r0, r4
 801342e:	f000 fbe7 	bl	8013c00 <_calloc_r>
 8013432:	69e3      	ldr	r3, [r4, #28]
 8013434:	60f0      	str	r0, [r6, #12]
 8013436:	68db      	ldr	r3, [r3, #12]
 8013438:	2b00      	cmp	r3, #0
 801343a:	d1e4      	bne.n	8013406 <_Balloc+0x2e>
 801343c:	2000      	movs	r0, #0
 801343e:	bd70      	pop	{r4, r5, r6, pc}
 8013440:	6802      	ldr	r2, [r0, #0]
 8013442:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013446:	2300      	movs	r3, #0
 8013448:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801344c:	e7f7      	b.n	801343e <_Balloc+0x66>
 801344e:	bf00      	nop
 8013450:	080173b5 	.word	0x080173b5
 8013454:	08017446 	.word	0x08017446

08013458 <_Bfree>:
 8013458:	b570      	push	{r4, r5, r6, lr}
 801345a:	69c6      	ldr	r6, [r0, #28]
 801345c:	4605      	mov	r5, r0
 801345e:	460c      	mov	r4, r1
 8013460:	b976      	cbnz	r6, 8013480 <_Bfree+0x28>
 8013462:	2010      	movs	r0, #16
 8013464:	f7fe f820 	bl	80114a8 <malloc>
 8013468:	4602      	mov	r2, r0
 801346a:	61e8      	str	r0, [r5, #28]
 801346c:	b920      	cbnz	r0, 8013478 <_Bfree+0x20>
 801346e:	4b09      	ldr	r3, [pc, #36]	@ (8013494 <_Bfree+0x3c>)
 8013470:	4809      	ldr	r0, [pc, #36]	@ (8013498 <_Bfree+0x40>)
 8013472:	218f      	movs	r1, #143	@ 0x8f
 8013474:	f7fd fd2a 	bl	8010ecc <__assert_func>
 8013478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801347c:	6006      	str	r6, [r0, #0]
 801347e:	60c6      	str	r6, [r0, #12]
 8013480:	b13c      	cbz	r4, 8013492 <_Bfree+0x3a>
 8013482:	69eb      	ldr	r3, [r5, #28]
 8013484:	6862      	ldr	r2, [r4, #4]
 8013486:	68db      	ldr	r3, [r3, #12]
 8013488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801348c:	6021      	str	r1, [r4, #0]
 801348e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013492:	bd70      	pop	{r4, r5, r6, pc}
 8013494:	080173b5 	.word	0x080173b5
 8013498:	08017446 	.word	0x08017446

0801349c <__multadd>:
 801349c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134a0:	690d      	ldr	r5, [r1, #16]
 80134a2:	4607      	mov	r7, r0
 80134a4:	460c      	mov	r4, r1
 80134a6:	461e      	mov	r6, r3
 80134a8:	f101 0c14 	add.w	ip, r1, #20
 80134ac:	2000      	movs	r0, #0
 80134ae:	f8dc 3000 	ldr.w	r3, [ip]
 80134b2:	b299      	uxth	r1, r3
 80134b4:	fb02 6101 	mla	r1, r2, r1, r6
 80134b8:	0c1e      	lsrs	r6, r3, #16
 80134ba:	0c0b      	lsrs	r3, r1, #16
 80134bc:	fb02 3306 	mla	r3, r2, r6, r3
 80134c0:	b289      	uxth	r1, r1
 80134c2:	3001      	adds	r0, #1
 80134c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80134c8:	4285      	cmp	r5, r0
 80134ca:	f84c 1b04 	str.w	r1, [ip], #4
 80134ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80134d2:	dcec      	bgt.n	80134ae <__multadd+0x12>
 80134d4:	b30e      	cbz	r6, 801351a <__multadd+0x7e>
 80134d6:	68a3      	ldr	r3, [r4, #8]
 80134d8:	42ab      	cmp	r3, r5
 80134da:	dc19      	bgt.n	8013510 <__multadd+0x74>
 80134dc:	6861      	ldr	r1, [r4, #4]
 80134de:	4638      	mov	r0, r7
 80134e0:	3101      	adds	r1, #1
 80134e2:	f7ff ff79 	bl	80133d8 <_Balloc>
 80134e6:	4680      	mov	r8, r0
 80134e8:	b928      	cbnz	r0, 80134f6 <__multadd+0x5a>
 80134ea:	4602      	mov	r2, r0
 80134ec:	4b0c      	ldr	r3, [pc, #48]	@ (8013520 <__multadd+0x84>)
 80134ee:	480d      	ldr	r0, [pc, #52]	@ (8013524 <__multadd+0x88>)
 80134f0:	21ba      	movs	r1, #186	@ 0xba
 80134f2:	f7fd fceb 	bl	8010ecc <__assert_func>
 80134f6:	6922      	ldr	r2, [r4, #16]
 80134f8:	3202      	adds	r2, #2
 80134fa:	f104 010c 	add.w	r1, r4, #12
 80134fe:	0092      	lsls	r2, r2, #2
 8013500:	300c      	adds	r0, #12
 8013502:	f7fe fd22 	bl	8011f4a <memcpy>
 8013506:	4621      	mov	r1, r4
 8013508:	4638      	mov	r0, r7
 801350a:	f7ff ffa5 	bl	8013458 <_Bfree>
 801350e:	4644      	mov	r4, r8
 8013510:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013514:	3501      	adds	r5, #1
 8013516:	615e      	str	r6, [r3, #20]
 8013518:	6125      	str	r5, [r4, #16]
 801351a:	4620      	mov	r0, r4
 801351c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013520:	08017424 	.word	0x08017424
 8013524:	08017446 	.word	0x08017446

08013528 <__hi0bits>:
 8013528:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801352c:	4603      	mov	r3, r0
 801352e:	bf36      	itet	cc
 8013530:	0403      	lslcc	r3, r0, #16
 8013532:	2000      	movcs	r0, #0
 8013534:	2010      	movcc	r0, #16
 8013536:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801353a:	bf3c      	itt	cc
 801353c:	021b      	lslcc	r3, r3, #8
 801353e:	3008      	addcc	r0, #8
 8013540:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013544:	bf3c      	itt	cc
 8013546:	011b      	lslcc	r3, r3, #4
 8013548:	3004      	addcc	r0, #4
 801354a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801354e:	bf3c      	itt	cc
 8013550:	009b      	lslcc	r3, r3, #2
 8013552:	3002      	addcc	r0, #2
 8013554:	2b00      	cmp	r3, #0
 8013556:	db05      	blt.n	8013564 <__hi0bits+0x3c>
 8013558:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801355c:	f100 0001 	add.w	r0, r0, #1
 8013560:	bf08      	it	eq
 8013562:	2020      	moveq	r0, #32
 8013564:	4770      	bx	lr

08013566 <__lo0bits>:
 8013566:	6803      	ldr	r3, [r0, #0]
 8013568:	4602      	mov	r2, r0
 801356a:	f013 0007 	ands.w	r0, r3, #7
 801356e:	d00b      	beq.n	8013588 <__lo0bits+0x22>
 8013570:	07d9      	lsls	r1, r3, #31
 8013572:	d421      	bmi.n	80135b8 <__lo0bits+0x52>
 8013574:	0798      	lsls	r0, r3, #30
 8013576:	bf49      	itett	mi
 8013578:	085b      	lsrmi	r3, r3, #1
 801357a:	089b      	lsrpl	r3, r3, #2
 801357c:	2001      	movmi	r0, #1
 801357e:	6013      	strmi	r3, [r2, #0]
 8013580:	bf5c      	itt	pl
 8013582:	6013      	strpl	r3, [r2, #0]
 8013584:	2002      	movpl	r0, #2
 8013586:	4770      	bx	lr
 8013588:	b299      	uxth	r1, r3
 801358a:	b909      	cbnz	r1, 8013590 <__lo0bits+0x2a>
 801358c:	0c1b      	lsrs	r3, r3, #16
 801358e:	2010      	movs	r0, #16
 8013590:	b2d9      	uxtb	r1, r3
 8013592:	b909      	cbnz	r1, 8013598 <__lo0bits+0x32>
 8013594:	3008      	adds	r0, #8
 8013596:	0a1b      	lsrs	r3, r3, #8
 8013598:	0719      	lsls	r1, r3, #28
 801359a:	bf04      	itt	eq
 801359c:	091b      	lsreq	r3, r3, #4
 801359e:	3004      	addeq	r0, #4
 80135a0:	0799      	lsls	r1, r3, #30
 80135a2:	bf04      	itt	eq
 80135a4:	089b      	lsreq	r3, r3, #2
 80135a6:	3002      	addeq	r0, #2
 80135a8:	07d9      	lsls	r1, r3, #31
 80135aa:	d403      	bmi.n	80135b4 <__lo0bits+0x4e>
 80135ac:	085b      	lsrs	r3, r3, #1
 80135ae:	f100 0001 	add.w	r0, r0, #1
 80135b2:	d003      	beq.n	80135bc <__lo0bits+0x56>
 80135b4:	6013      	str	r3, [r2, #0]
 80135b6:	4770      	bx	lr
 80135b8:	2000      	movs	r0, #0
 80135ba:	4770      	bx	lr
 80135bc:	2020      	movs	r0, #32
 80135be:	4770      	bx	lr

080135c0 <__i2b>:
 80135c0:	b510      	push	{r4, lr}
 80135c2:	460c      	mov	r4, r1
 80135c4:	2101      	movs	r1, #1
 80135c6:	f7ff ff07 	bl	80133d8 <_Balloc>
 80135ca:	4602      	mov	r2, r0
 80135cc:	b928      	cbnz	r0, 80135da <__i2b+0x1a>
 80135ce:	4b05      	ldr	r3, [pc, #20]	@ (80135e4 <__i2b+0x24>)
 80135d0:	4805      	ldr	r0, [pc, #20]	@ (80135e8 <__i2b+0x28>)
 80135d2:	f240 1145 	movw	r1, #325	@ 0x145
 80135d6:	f7fd fc79 	bl	8010ecc <__assert_func>
 80135da:	2301      	movs	r3, #1
 80135dc:	6144      	str	r4, [r0, #20]
 80135de:	6103      	str	r3, [r0, #16]
 80135e0:	bd10      	pop	{r4, pc}
 80135e2:	bf00      	nop
 80135e4:	08017424 	.word	0x08017424
 80135e8:	08017446 	.word	0x08017446

080135ec <__multiply>:
 80135ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135f0:	4614      	mov	r4, r2
 80135f2:	690a      	ldr	r2, [r1, #16]
 80135f4:	6923      	ldr	r3, [r4, #16]
 80135f6:	429a      	cmp	r2, r3
 80135f8:	bfa8      	it	ge
 80135fa:	4623      	movge	r3, r4
 80135fc:	460f      	mov	r7, r1
 80135fe:	bfa4      	itt	ge
 8013600:	460c      	movge	r4, r1
 8013602:	461f      	movge	r7, r3
 8013604:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013608:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801360c:	68a3      	ldr	r3, [r4, #8]
 801360e:	6861      	ldr	r1, [r4, #4]
 8013610:	eb0a 0609 	add.w	r6, sl, r9
 8013614:	42b3      	cmp	r3, r6
 8013616:	b085      	sub	sp, #20
 8013618:	bfb8      	it	lt
 801361a:	3101      	addlt	r1, #1
 801361c:	f7ff fedc 	bl	80133d8 <_Balloc>
 8013620:	b930      	cbnz	r0, 8013630 <__multiply+0x44>
 8013622:	4602      	mov	r2, r0
 8013624:	4b44      	ldr	r3, [pc, #272]	@ (8013738 <__multiply+0x14c>)
 8013626:	4845      	ldr	r0, [pc, #276]	@ (801373c <__multiply+0x150>)
 8013628:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801362c:	f7fd fc4e 	bl	8010ecc <__assert_func>
 8013630:	f100 0514 	add.w	r5, r0, #20
 8013634:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013638:	462b      	mov	r3, r5
 801363a:	2200      	movs	r2, #0
 801363c:	4543      	cmp	r3, r8
 801363e:	d321      	bcc.n	8013684 <__multiply+0x98>
 8013640:	f107 0114 	add.w	r1, r7, #20
 8013644:	f104 0214 	add.w	r2, r4, #20
 8013648:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801364c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013650:	9302      	str	r3, [sp, #8]
 8013652:	1b13      	subs	r3, r2, r4
 8013654:	3b15      	subs	r3, #21
 8013656:	f023 0303 	bic.w	r3, r3, #3
 801365a:	3304      	adds	r3, #4
 801365c:	f104 0715 	add.w	r7, r4, #21
 8013660:	42ba      	cmp	r2, r7
 8013662:	bf38      	it	cc
 8013664:	2304      	movcc	r3, #4
 8013666:	9301      	str	r3, [sp, #4]
 8013668:	9b02      	ldr	r3, [sp, #8]
 801366a:	9103      	str	r1, [sp, #12]
 801366c:	428b      	cmp	r3, r1
 801366e:	d80c      	bhi.n	801368a <__multiply+0x9e>
 8013670:	2e00      	cmp	r6, #0
 8013672:	dd03      	ble.n	801367c <__multiply+0x90>
 8013674:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013678:	2b00      	cmp	r3, #0
 801367a:	d05b      	beq.n	8013734 <__multiply+0x148>
 801367c:	6106      	str	r6, [r0, #16]
 801367e:	b005      	add	sp, #20
 8013680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013684:	f843 2b04 	str.w	r2, [r3], #4
 8013688:	e7d8      	b.n	801363c <__multiply+0x50>
 801368a:	f8b1 a000 	ldrh.w	sl, [r1]
 801368e:	f1ba 0f00 	cmp.w	sl, #0
 8013692:	d024      	beq.n	80136de <__multiply+0xf2>
 8013694:	f104 0e14 	add.w	lr, r4, #20
 8013698:	46a9      	mov	r9, r5
 801369a:	f04f 0c00 	mov.w	ip, #0
 801369e:	f85e 7b04 	ldr.w	r7, [lr], #4
 80136a2:	f8d9 3000 	ldr.w	r3, [r9]
 80136a6:	fa1f fb87 	uxth.w	fp, r7
 80136aa:	b29b      	uxth	r3, r3
 80136ac:	fb0a 330b 	mla	r3, sl, fp, r3
 80136b0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80136b4:	f8d9 7000 	ldr.w	r7, [r9]
 80136b8:	4463      	add	r3, ip
 80136ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80136be:	fb0a c70b 	mla	r7, sl, fp, ip
 80136c2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80136c6:	b29b      	uxth	r3, r3
 80136c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80136cc:	4572      	cmp	r2, lr
 80136ce:	f849 3b04 	str.w	r3, [r9], #4
 80136d2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80136d6:	d8e2      	bhi.n	801369e <__multiply+0xb2>
 80136d8:	9b01      	ldr	r3, [sp, #4]
 80136da:	f845 c003 	str.w	ip, [r5, r3]
 80136de:	9b03      	ldr	r3, [sp, #12]
 80136e0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80136e4:	3104      	adds	r1, #4
 80136e6:	f1b9 0f00 	cmp.w	r9, #0
 80136ea:	d021      	beq.n	8013730 <__multiply+0x144>
 80136ec:	682b      	ldr	r3, [r5, #0]
 80136ee:	f104 0c14 	add.w	ip, r4, #20
 80136f2:	46ae      	mov	lr, r5
 80136f4:	f04f 0a00 	mov.w	sl, #0
 80136f8:	f8bc b000 	ldrh.w	fp, [ip]
 80136fc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013700:	fb09 770b 	mla	r7, r9, fp, r7
 8013704:	4457      	add	r7, sl
 8013706:	b29b      	uxth	r3, r3
 8013708:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801370c:	f84e 3b04 	str.w	r3, [lr], #4
 8013710:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013714:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013718:	f8be 3000 	ldrh.w	r3, [lr]
 801371c:	fb09 330a 	mla	r3, r9, sl, r3
 8013720:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013724:	4562      	cmp	r2, ip
 8013726:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801372a:	d8e5      	bhi.n	80136f8 <__multiply+0x10c>
 801372c:	9f01      	ldr	r7, [sp, #4]
 801372e:	51eb      	str	r3, [r5, r7]
 8013730:	3504      	adds	r5, #4
 8013732:	e799      	b.n	8013668 <__multiply+0x7c>
 8013734:	3e01      	subs	r6, #1
 8013736:	e79b      	b.n	8013670 <__multiply+0x84>
 8013738:	08017424 	.word	0x08017424
 801373c:	08017446 	.word	0x08017446

08013740 <__pow5mult>:
 8013740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013744:	4615      	mov	r5, r2
 8013746:	f012 0203 	ands.w	r2, r2, #3
 801374a:	4607      	mov	r7, r0
 801374c:	460e      	mov	r6, r1
 801374e:	d007      	beq.n	8013760 <__pow5mult+0x20>
 8013750:	4c25      	ldr	r4, [pc, #148]	@ (80137e8 <__pow5mult+0xa8>)
 8013752:	3a01      	subs	r2, #1
 8013754:	2300      	movs	r3, #0
 8013756:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801375a:	f7ff fe9f 	bl	801349c <__multadd>
 801375e:	4606      	mov	r6, r0
 8013760:	10ad      	asrs	r5, r5, #2
 8013762:	d03d      	beq.n	80137e0 <__pow5mult+0xa0>
 8013764:	69fc      	ldr	r4, [r7, #28]
 8013766:	b97c      	cbnz	r4, 8013788 <__pow5mult+0x48>
 8013768:	2010      	movs	r0, #16
 801376a:	f7fd fe9d 	bl	80114a8 <malloc>
 801376e:	4602      	mov	r2, r0
 8013770:	61f8      	str	r0, [r7, #28]
 8013772:	b928      	cbnz	r0, 8013780 <__pow5mult+0x40>
 8013774:	4b1d      	ldr	r3, [pc, #116]	@ (80137ec <__pow5mult+0xac>)
 8013776:	481e      	ldr	r0, [pc, #120]	@ (80137f0 <__pow5mult+0xb0>)
 8013778:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801377c:	f7fd fba6 	bl	8010ecc <__assert_func>
 8013780:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013784:	6004      	str	r4, [r0, #0]
 8013786:	60c4      	str	r4, [r0, #12]
 8013788:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801378c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013790:	b94c      	cbnz	r4, 80137a6 <__pow5mult+0x66>
 8013792:	f240 2171 	movw	r1, #625	@ 0x271
 8013796:	4638      	mov	r0, r7
 8013798:	f7ff ff12 	bl	80135c0 <__i2b>
 801379c:	2300      	movs	r3, #0
 801379e:	f8c8 0008 	str.w	r0, [r8, #8]
 80137a2:	4604      	mov	r4, r0
 80137a4:	6003      	str	r3, [r0, #0]
 80137a6:	f04f 0900 	mov.w	r9, #0
 80137aa:	07eb      	lsls	r3, r5, #31
 80137ac:	d50a      	bpl.n	80137c4 <__pow5mult+0x84>
 80137ae:	4631      	mov	r1, r6
 80137b0:	4622      	mov	r2, r4
 80137b2:	4638      	mov	r0, r7
 80137b4:	f7ff ff1a 	bl	80135ec <__multiply>
 80137b8:	4631      	mov	r1, r6
 80137ba:	4680      	mov	r8, r0
 80137bc:	4638      	mov	r0, r7
 80137be:	f7ff fe4b 	bl	8013458 <_Bfree>
 80137c2:	4646      	mov	r6, r8
 80137c4:	106d      	asrs	r5, r5, #1
 80137c6:	d00b      	beq.n	80137e0 <__pow5mult+0xa0>
 80137c8:	6820      	ldr	r0, [r4, #0]
 80137ca:	b938      	cbnz	r0, 80137dc <__pow5mult+0x9c>
 80137cc:	4622      	mov	r2, r4
 80137ce:	4621      	mov	r1, r4
 80137d0:	4638      	mov	r0, r7
 80137d2:	f7ff ff0b 	bl	80135ec <__multiply>
 80137d6:	6020      	str	r0, [r4, #0]
 80137d8:	f8c0 9000 	str.w	r9, [r0]
 80137dc:	4604      	mov	r4, r0
 80137de:	e7e4      	b.n	80137aa <__pow5mult+0x6a>
 80137e0:	4630      	mov	r0, r6
 80137e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80137e6:	bf00      	nop
 80137e8:	080174a0 	.word	0x080174a0
 80137ec:	080173b5 	.word	0x080173b5
 80137f0:	08017446 	.word	0x08017446

080137f4 <__lshift>:
 80137f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137f8:	460c      	mov	r4, r1
 80137fa:	6849      	ldr	r1, [r1, #4]
 80137fc:	6923      	ldr	r3, [r4, #16]
 80137fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013802:	68a3      	ldr	r3, [r4, #8]
 8013804:	4607      	mov	r7, r0
 8013806:	4691      	mov	r9, r2
 8013808:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801380c:	f108 0601 	add.w	r6, r8, #1
 8013810:	42b3      	cmp	r3, r6
 8013812:	db0b      	blt.n	801382c <__lshift+0x38>
 8013814:	4638      	mov	r0, r7
 8013816:	f7ff fddf 	bl	80133d8 <_Balloc>
 801381a:	4605      	mov	r5, r0
 801381c:	b948      	cbnz	r0, 8013832 <__lshift+0x3e>
 801381e:	4602      	mov	r2, r0
 8013820:	4b28      	ldr	r3, [pc, #160]	@ (80138c4 <__lshift+0xd0>)
 8013822:	4829      	ldr	r0, [pc, #164]	@ (80138c8 <__lshift+0xd4>)
 8013824:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013828:	f7fd fb50 	bl	8010ecc <__assert_func>
 801382c:	3101      	adds	r1, #1
 801382e:	005b      	lsls	r3, r3, #1
 8013830:	e7ee      	b.n	8013810 <__lshift+0x1c>
 8013832:	2300      	movs	r3, #0
 8013834:	f100 0114 	add.w	r1, r0, #20
 8013838:	f100 0210 	add.w	r2, r0, #16
 801383c:	4618      	mov	r0, r3
 801383e:	4553      	cmp	r3, sl
 8013840:	db33      	blt.n	80138aa <__lshift+0xb6>
 8013842:	6920      	ldr	r0, [r4, #16]
 8013844:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013848:	f104 0314 	add.w	r3, r4, #20
 801384c:	f019 091f 	ands.w	r9, r9, #31
 8013850:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013854:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013858:	d02b      	beq.n	80138b2 <__lshift+0xbe>
 801385a:	f1c9 0e20 	rsb	lr, r9, #32
 801385e:	468a      	mov	sl, r1
 8013860:	2200      	movs	r2, #0
 8013862:	6818      	ldr	r0, [r3, #0]
 8013864:	fa00 f009 	lsl.w	r0, r0, r9
 8013868:	4310      	orrs	r0, r2
 801386a:	f84a 0b04 	str.w	r0, [sl], #4
 801386e:	f853 2b04 	ldr.w	r2, [r3], #4
 8013872:	459c      	cmp	ip, r3
 8013874:	fa22 f20e 	lsr.w	r2, r2, lr
 8013878:	d8f3      	bhi.n	8013862 <__lshift+0x6e>
 801387a:	ebac 0304 	sub.w	r3, ip, r4
 801387e:	3b15      	subs	r3, #21
 8013880:	f023 0303 	bic.w	r3, r3, #3
 8013884:	3304      	adds	r3, #4
 8013886:	f104 0015 	add.w	r0, r4, #21
 801388a:	4584      	cmp	ip, r0
 801388c:	bf38      	it	cc
 801388e:	2304      	movcc	r3, #4
 8013890:	50ca      	str	r2, [r1, r3]
 8013892:	b10a      	cbz	r2, 8013898 <__lshift+0xa4>
 8013894:	f108 0602 	add.w	r6, r8, #2
 8013898:	3e01      	subs	r6, #1
 801389a:	4638      	mov	r0, r7
 801389c:	612e      	str	r6, [r5, #16]
 801389e:	4621      	mov	r1, r4
 80138a0:	f7ff fdda 	bl	8013458 <_Bfree>
 80138a4:	4628      	mov	r0, r5
 80138a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80138ae:	3301      	adds	r3, #1
 80138b0:	e7c5      	b.n	801383e <__lshift+0x4a>
 80138b2:	3904      	subs	r1, #4
 80138b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80138b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80138bc:	459c      	cmp	ip, r3
 80138be:	d8f9      	bhi.n	80138b4 <__lshift+0xc0>
 80138c0:	e7ea      	b.n	8013898 <__lshift+0xa4>
 80138c2:	bf00      	nop
 80138c4:	08017424 	.word	0x08017424
 80138c8:	08017446 	.word	0x08017446

080138cc <__mcmp>:
 80138cc:	690a      	ldr	r2, [r1, #16]
 80138ce:	4603      	mov	r3, r0
 80138d0:	6900      	ldr	r0, [r0, #16]
 80138d2:	1a80      	subs	r0, r0, r2
 80138d4:	b530      	push	{r4, r5, lr}
 80138d6:	d10e      	bne.n	80138f6 <__mcmp+0x2a>
 80138d8:	3314      	adds	r3, #20
 80138da:	3114      	adds	r1, #20
 80138dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80138e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80138e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80138e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80138ec:	4295      	cmp	r5, r2
 80138ee:	d003      	beq.n	80138f8 <__mcmp+0x2c>
 80138f0:	d205      	bcs.n	80138fe <__mcmp+0x32>
 80138f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80138f6:	bd30      	pop	{r4, r5, pc}
 80138f8:	42a3      	cmp	r3, r4
 80138fa:	d3f3      	bcc.n	80138e4 <__mcmp+0x18>
 80138fc:	e7fb      	b.n	80138f6 <__mcmp+0x2a>
 80138fe:	2001      	movs	r0, #1
 8013900:	e7f9      	b.n	80138f6 <__mcmp+0x2a>
	...

08013904 <__mdiff>:
 8013904:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013908:	4689      	mov	r9, r1
 801390a:	4606      	mov	r6, r0
 801390c:	4611      	mov	r1, r2
 801390e:	4648      	mov	r0, r9
 8013910:	4614      	mov	r4, r2
 8013912:	f7ff ffdb 	bl	80138cc <__mcmp>
 8013916:	1e05      	subs	r5, r0, #0
 8013918:	d112      	bne.n	8013940 <__mdiff+0x3c>
 801391a:	4629      	mov	r1, r5
 801391c:	4630      	mov	r0, r6
 801391e:	f7ff fd5b 	bl	80133d8 <_Balloc>
 8013922:	4602      	mov	r2, r0
 8013924:	b928      	cbnz	r0, 8013932 <__mdiff+0x2e>
 8013926:	4b3f      	ldr	r3, [pc, #252]	@ (8013a24 <__mdiff+0x120>)
 8013928:	f240 2137 	movw	r1, #567	@ 0x237
 801392c:	483e      	ldr	r0, [pc, #248]	@ (8013a28 <__mdiff+0x124>)
 801392e:	f7fd facd 	bl	8010ecc <__assert_func>
 8013932:	2301      	movs	r3, #1
 8013934:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013938:	4610      	mov	r0, r2
 801393a:	b003      	add	sp, #12
 801393c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013940:	bfbc      	itt	lt
 8013942:	464b      	movlt	r3, r9
 8013944:	46a1      	movlt	r9, r4
 8013946:	4630      	mov	r0, r6
 8013948:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801394c:	bfba      	itte	lt
 801394e:	461c      	movlt	r4, r3
 8013950:	2501      	movlt	r5, #1
 8013952:	2500      	movge	r5, #0
 8013954:	f7ff fd40 	bl	80133d8 <_Balloc>
 8013958:	4602      	mov	r2, r0
 801395a:	b918      	cbnz	r0, 8013964 <__mdiff+0x60>
 801395c:	4b31      	ldr	r3, [pc, #196]	@ (8013a24 <__mdiff+0x120>)
 801395e:	f240 2145 	movw	r1, #581	@ 0x245
 8013962:	e7e3      	b.n	801392c <__mdiff+0x28>
 8013964:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013968:	6926      	ldr	r6, [r4, #16]
 801396a:	60c5      	str	r5, [r0, #12]
 801396c:	f109 0310 	add.w	r3, r9, #16
 8013970:	f109 0514 	add.w	r5, r9, #20
 8013974:	f104 0e14 	add.w	lr, r4, #20
 8013978:	f100 0b14 	add.w	fp, r0, #20
 801397c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013980:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013984:	9301      	str	r3, [sp, #4]
 8013986:	46d9      	mov	r9, fp
 8013988:	f04f 0c00 	mov.w	ip, #0
 801398c:	9b01      	ldr	r3, [sp, #4]
 801398e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013992:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013996:	9301      	str	r3, [sp, #4]
 8013998:	fa1f f38a 	uxth.w	r3, sl
 801399c:	4619      	mov	r1, r3
 801399e:	b283      	uxth	r3, r0
 80139a0:	1acb      	subs	r3, r1, r3
 80139a2:	0c00      	lsrs	r0, r0, #16
 80139a4:	4463      	add	r3, ip
 80139a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80139aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80139ae:	b29b      	uxth	r3, r3
 80139b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80139b4:	4576      	cmp	r6, lr
 80139b6:	f849 3b04 	str.w	r3, [r9], #4
 80139ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80139be:	d8e5      	bhi.n	801398c <__mdiff+0x88>
 80139c0:	1b33      	subs	r3, r6, r4
 80139c2:	3b15      	subs	r3, #21
 80139c4:	f023 0303 	bic.w	r3, r3, #3
 80139c8:	3415      	adds	r4, #21
 80139ca:	3304      	adds	r3, #4
 80139cc:	42a6      	cmp	r6, r4
 80139ce:	bf38      	it	cc
 80139d0:	2304      	movcc	r3, #4
 80139d2:	441d      	add	r5, r3
 80139d4:	445b      	add	r3, fp
 80139d6:	461e      	mov	r6, r3
 80139d8:	462c      	mov	r4, r5
 80139da:	4544      	cmp	r4, r8
 80139dc:	d30e      	bcc.n	80139fc <__mdiff+0xf8>
 80139de:	f108 0103 	add.w	r1, r8, #3
 80139e2:	1b49      	subs	r1, r1, r5
 80139e4:	f021 0103 	bic.w	r1, r1, #3
 80139e8:	3d03      	subs	r5, #3
 80139ea:	45a8      	cmp	r8, r5
 80139ec:	bf38      	it	cc
 80139ee:	2100      	movcc	r1, #0
 80139f0:	440b      	add	r3, r1
 80139f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80139f6:	b191      	cbz	r1, 8013a1e <__mdiff+0x11a>
 80139f8:	6117      	str	r7, [r2, #16]
 80139fa:	e79d      	b.n	8013938 <__mdiff+0x34>
 80139fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8013a00:	46e6      	mov	lr, ip
 8013a02:	0c08      	lsrs	r0, r1, #16
 8013a04:	fa1c fc81 	uxtah	ip, ip, r1
 8013a08:	4471      	add	r1, lr
 8013a0a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013a0e:	b289      	uxth	r1, r1
 8013a10:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013a14:	f846 1b04 	str.w	r1, [r6], #4
 8013a18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013a1c:	e7dd      	b.n	80139da <__mdiff+0xd6>
 8013a1e:	3f01      	subs	r7, #1
 8013a20:	e7e7      	b.n	80139f2 <__mdiff+0xee>
 8013a22:	bf00      	nop
 8013a24:	08017424 	.word	0x08017424
 8013a28:	08017446 	.word	0x08017446

08013a2c <__d2b>:
 8013a2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013a30:	460f      	mov	r7, r1
 8013a32:	2101      	movs	r1, #1
 8013a34:	ec59 8b10 	vmov	r8, r9, d0
 8013a38:	4616      	mov	r6, r2
 8013a3a:	f7ff fccd 	bl	80133d8 <_Balloc>
 8013a3e:	4604      	mov	r4, r0
 8013a40:	b930      	cbnz	r0, 8013a50 <__d2b+0x24>
 8013a42:	4602      	mov	r2, r0
 8013a44:	4b23      	ldr	r3, [pc, #140]	@ (8013ad4 <__d2b+0xa8>)
 8013a46:	4824      	ldr	r0, [pc, #144]	@ (8013ad8 <__d2b+0xac>)
 8013a48:	f240 310f 	movw	r1, #783	@ 0x30f
 8013a4c:	f7fd fa3e 	bl	8010ecc <__assert_func>
 8013a50:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013a54:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013a58:	b10d      	cbz	r5, 8013a5e <__d2b+0x32>
 8013a5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013a5e:	9301      	str	r3, [sp, #4]
 8013a60:	f1b8 0300 	subs.w	r3, r8, #0
 8013a64:	d023      	beq.n	8013aae <__d2b+0x82>
 8013a66:	4668      	mov	r0, sp
 8013a68:	9300      	str	r3, [sp, #0]
 8013a6a:	f7ff fd7c 	bl	8013566 <__lo0bits>
 8013a6e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013a72:	b1d0      	cbz	r0, 8013aaa <__d2b+0x7e>
 8013a74:	f1c0 0320 	rsb	r3, r0, #32
 8013a78:	fa02 f303 	lsl.w	r3, r2, r3
 8013a7c:	430b      	orrs	r3, r1
 8013a7e:	40c2      	lsrs	r2, r0
 8013a80:	6163      	str	r3, [r4, #20]
 8013a82:	9201      	str	r2, [sp, #4]
 8013a84:	9b01      	ldr	r3, [sp, #4]
 8013a86:	61a3      	str	r3, [r4, #24]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	bf0c      	ite	eq
 8013a8c:	2201      	moveq	r2, #1
 8013a8e:	2202      	movne	r2, #2
 8013a90:	6122      	str	r2, [r4, #16]
 8013a92:	b1a5      	cbz	r5, 8013abe <__d2b+0x92>
 8013a94:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013a98:	4405      	add	r5, r0
 8013a9a:	603d      	str	r5, [r7, #0]
 8013a9c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013aa0:	6030      	str	r0, [r6, #0]
 8013aa2:	4620      	mov	r0, r4
 8013aa4:	b003      	add	sp, #12
 8013aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013aaa:	6161      	str	r1, [r4, #20]
 8013aac:	e7ea      	b.n	8013a84 <__d2b+0x58>
 8013aae:	a801      	add	r0, sp, #4
 8013ab0:	f7ff fd59 	bl	8013566 <__lo0bits>
 8013ab4:	9b01      	ldr	r3, [sp, #4]
 8013ab6:	6163      	str	r3, [r4, #20]
 8013ab8:	3020      	adds	r0, #32
 8013aba:	2201      	movs	r2, #1
 8013abc:	e7e8      	b.n	8013a90 <__d2b+0x64>
 8013abe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013ac2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013ac6:	6038      	str	r0, [r7, #0]
 8013ac8:	6918      	ldr	r0, [r3, #16]
 8013aca:	f7ff fd2d 	bl	8013528 <__hi0bits>
 8013ace:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013ad2:	e7e5      	b.n	8013aa0 <__d2b+0x74>
 8013ad4:	08017424 	.word	0x08017424
 8013ad8:	08017446 	.word	0x08017446

08013adc <_malloc_usable_size_r>:
 8013adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ae0:	1f18      	subs	r0, r3, #4
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	bfbc      	itt	lt
 8013ae6:	580b      	ldrlt	r3, [r1, r0]
 8013ae8:	18c0      	addlt	r0, r0, r3
 8013aea:	4770      	bx	lr

08013aec <__sread>:
 8013aec:	b510      	push	{r4, lr}
 8013aee:	460c      	mov	r4, r1
 8013af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013af4:	f000 f860 	bl	8013bb8 <_read_r>
 8013af8:	2800      	cmp	r0, #0
 8013afa:	bfab      	itete	ge
 8013afc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013afe:	89a3      	ldrhlt	r3, [r4, #12]
 8013b00:	181b      	addge	r3, r3, r0
 8013b02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013b06:	bfac      	ite	ge
 8013b08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013b0a:	81a3      	strhlt	r3, [r4, #12]
 8013b0c:	bd10      	pop	{r4, pc}

08013b0e <__swrite>:
 8013b0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b12:	461f      	mov	r7, r3
 8013b14:	898b      	ldrh	r3, [r1, #12]
 8013b16:	05db      	lsls	r3, r3, #23
 8013b18:	4605      	mov	r5, r0
 8013b1a:	460c      	mov	r4, r1
 8013b1c:	4616      	mov	r6, r2
 8013b1e:	d505      	bpl.n	8013b2c <__swrite+0x1e>
 8013b20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b24:	2302      	movs	r3, #2
 8013b26:	2200      	movs	r2, #0
 8013b28:	f000 f834 	bl	8013b94 <_lseek_r>
 8013b2c:	89a3      	ldrh	r3, [r4, #12]
 8013b2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013b32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013b36:	81a3      	strh	r3, [r4, #12]
 8013b38:	4632      	mov	r2, r6
 8013b3a:	463b      	mov	r3, r7
 8013b3c:	4628      	mov	r0, r5
 8013b3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b42:	f000 b84b 	b.w	8013bdc <_write_r>

08013b46 <__sseek>:
 8013b46:	b510      	push	{r4, lr}
 8013b48:	460c      	mov	r4, r1
 8013b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b4e:	f000 f821 	bl	8013b94 <_lseek_r>
 8013b52:	1c43      	adds	r3, r0, #1
 8013b54:	89a3      	ldrh	r3, [r4, #12]
 8013b56:	bf15      	itete	ne
 8013b58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013b5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013b5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013b62:	81a3      	strheq	r3, [r4, #12]
 8013b64:	bf18      	it	ne
 8013b66:	81a3      	strhne	r3, [r4, #12]
 8013b68:	bd10      	pop	{r4, pc}

08013b6a <__sclose>:
 8013b6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013b6e:	f000 b801 	b.w	8013b74 <_close_r>
	...

08013b74 <_close_r>:
 8013b74:	b538      	push	{r3, r4, r5, lr}
 8013b76:	4d06      	ldr	r5, [pc, #24]	@ (8013b90 <_close_r+0x1c>)
 8013b78:	2300      	movs	r3, #0
 8013b7a:	4604      	mov	r4, r0
 8013b7c:	4608      	mov	r0, r1
 8013b7e:	602b      	str	r3, [r5, #0]
 8013b80:	f7ee f8ac 	bl	8001cdc <_close>
 8013b84:	1c43      	adds	r3, r0, #1
 8013b86:	d102      	bne.n	8013b8e <_close_r+0x1a>
 8013b88:	682b      	ldr	r3, [r5, #0]
 8013b8a:	b103      	cbz	r3, 8013b8e <_close_r+0x1a>
 8013b8c:	6023      	str	r3, [r4, #0]
 8013b8e:	bd38      	pop	{r3, r4, r5, pc}
 8013b90:	2000ebac 	.word	0x2000ebac

08013b94 <_lseek_r>:
 8013b94:	b538      	push	{r3, r4, r5, lr}
 8013b96:	4d07      	ldr	r5, [pc, #28]	@ (8013bb4 <_lseek_r+0x20>)
 8013b98:	4604      	mov	r4, r0
 8013b9a:	4608      	mov	r0, r1
 8013b9c:	4611      	mov	r1, r2
 8013b9e:	2200      	movs	r2, #0
 8013ba0:	602a      	str	r2, [r5, #0]
 8013ba2:	461a      	mov	r2, r3
 8013ba4:	f7ee f8a6 	bl	8001cf4 <_lseek>
 8013ba8:	1c43      	adds	r3, r0, #1
 8013baa:	d102      	bne.n	8013bb2 <_lseek_r+0x1e>
 8013bac:	682b      	ldr	r3, [r5, #0]
 8013bae:	b103      	cbz	r3, 8013bb2 <_lseek_r+0x1e>
 8013bb0:	6023      	str	r3, [r4, #0]
 8013bb2:	bd38      	pop	{r3, r4, r5, pc}
 8013bb4:	2000ebac 	.word	0x2000ebac

08013bb8 <_read_r>:
 8013bb8:	b538      	push	{r3, r4, r5, lr}
 8013bba:	4d07      	ldr	r5, [pc, #28]	@ (8013bd8 <_read_r+0x20>)
 8013bbc:	4604      	mov	r4, r0
 8013bbe:	4608      	mov	r0, r1
 8013bc0:	4611      	mov	r1, r2
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	602a      	str	r2, [r5, #0]
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	f7ee f86c 	bl	8001ca4 <_read>
 8013bcc:	1c43      	adds	r3, r0, #1
 8013bce:	d102      	bne.n	8013bd6 <_read_r+0x1e>
 8013bd0:	682b      	ldr	r3, [r5, #0]
 8013bd2:	b103      	cbz	r3, 8013bd6 <_read_r+0x1e>
 8013bd4:	6023      	str	r3, [r4, #0]
 8013bd6:	bd38      	pop	{r3, r4, r5, pc}
 8013bd8:	2000ebac 	.word	0x2000ebac

08013bdc <_write_r>:
 8013bdc:	b538      	push	{r3, r4, r5, lr}
 8013bde:	4d07      	ldr	r5, [pc, #28]	@ (8013bfc <_write_r+0x20>)
 8013be0:	4604      	mov	r4, r0
 8013be2:	4608      	mov	r0, r1
 8013be4:	4611      	mov	r1, r2
 8013be6:	2200      	movs	r2, #0
 8013be8:	602a      	str	r2, [r5, #0]
 8013bea:	461a      	mov	r2, r3
 8013bec:	f7ee f868 	bl	8001cc0 <_write>
 8013bf0:	1c43      	adds	r3, r0, #1
 8013bf2:	d102      	bne.n	8013bfa <_write_r+0x1e>
 8013bf4:	682b      	ldr	r3, [r5, #0]
 8013bf6:	b103      	cbz	r3, 8013bfa <_write_r+0x1e>
 8013bf8:	6023      	str	r3, [r4, #0]
 8013bfa:	bd38      	pop	{r3, r4, r5, pc}
 8013bfc:	2000ebac 	.word	0x2000ebac

08013c00 <_calloc_r>:
 8013c00:	b570      	push	{r4, r5, r6, lr}
 8013c02:	fba1 5402 	umull	r5, r4, r1, r2
 8013c06:	b93c      	cbnz	r4, 8013c18 <_calloc_r+0x18>
 8013c08:	4629      	mov	r1, r5
 8013c0a:	f7fd fc7f 	bl	801150c <_malloc_r>
 8013c0e:	4606      	mov	r6, r0
 8013c10:	b928      	cbnz	r0, 8013c1e <_calloc_r+0x1e>
 8013c12:	2600      	movs	r6, #0
 8013c14:	4630      	mov	r0, r6
 8013c16:	bd70      	pop	{r4, r5, r6, pc}
 8013c18:	220c      	movs	r2, #12
 8013c1a:	6002      	str	r2, [r0, #0]
 8013c1c:	e7f9      	b.n	8013c12 <_calloc_r+0x12>
 8013c1e:	462a      	mov	r2, r5
 8013c20:	4621      	mov	r1, r4
 8013c22:	f7fe f8e3 	bl	8011dec <memset>
 8013c26:	e7f5      	b.n	8013c14 <_calloc_r+0x14>

08013c28 <__ascii_mbtowc>:
 8013c28:	b082      	sub	sp, #8
 8013c2a:	b901      	cbnz	r1, 8013c2e <__ascii_mbtowc+0x6>
 8013c2c:	a901      	add	r1, sp, #4
 8013c2e:	b142      	cbz	r2, 8013c42 <__ascii_mbtowc+0x1a>
 8013c30:	b14b      	cbz	r3, 8013c46 <__ascii_mbtowc+0x1e>
 8013c32:	7813      	ldrb	r3, [r2, #0]
 8013c34:	600b      	str	r3, [r1, #0]
 8013c36:	7812      	ldrb	r2, [r2, #0]
 8013c38:	1e10      	subs	r0, r2, #0
 8013c3a:	bf18      	it	ne
 8013c3c:	2001      	movne	r0, #1
 8013c3e:	b002      	add	sp, #8
 8013c40:	4770      	bx	lr
 8013c42:	4610      	mov	r0, r2
 8013c44:	e7fb      	b.n	8013c3e <__ascii_mbtowc+0x16>
 8013c46:	f06f 0001 	mvn.w	r0, #1
 8013c4a:	e7f8      	b.n	8013c3e <__ascii_mbtowc+0x16>

08013c4c <__ascii_wctomb>:
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	4608      	mov	r0, r1
 8013c50:	b141      	cbz	r1, 8013c64 <__ascii_wctomb+0x18>
 8013c52:	2aff      	cmp	r2, #255	@ 0xff
 8013c54:	d904      	bls.n	8013c60 <__ascii_wctomb+0x14>
 8013c56:	228a      	movs	r2, #138	@ 0x8a
 8013c58:	601a      	str	r2, [r3, #0]
 8013c5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8013c5e:	4770      	bx	lr
 8013c60:	700a      	strb	r2, [r1, #0]
 8013c62:	2001      	movs	r0, #1
 8013c64:	4770      	bx	lr
	...

08013c68 <_init>:
 8013c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c6a:	bf00      	nop
 8013c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c6e:	bc08      	pop	{r3}
 8013c70:	469e      	mov	lr, r3
 8013c72:	4770      	bx	lr

08013c74 <_fini>:
 8013c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c76:	bf00      	nop
 8013c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013c7a:	bc08      	pop	{r3}
 8013c7c:	469e      	mov	lr, r3
 8013c7e:	4770      	bx	lr
